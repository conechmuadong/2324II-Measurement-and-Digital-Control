
Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a8c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008c14  08008c14  00009c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c30  08008c30  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c30  08008c30  00009c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c38  08008c38  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c38  08008c38  00009c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c3c  08008c3c  00009c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008c40  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a20  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d09  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038bf  00000000  00000000  0001edb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00022678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d20  00000000  00000000  000237b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023410  00000000  00000000  000244d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183b0  00000000  00000000  000478e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8de  00000000  00000000  0005fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b576  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004abc  00000000  00000000  0012b5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ab  00000000  00000000  00130078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008bfc 	.word	0x08008bfc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008bfc 	.word	0x08008bfc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc98 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f876 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f972 	bl	80007ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f8dc 	bl	8000684 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f908 	bl	80006e0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f936 	bl	8000740 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 ff3c 	bl	8008350 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (state == OFF){
 80004d8:	4b32      	ldr	r3, [pc, #200]	@ (80005a4 <main+0xec>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d11c      	bne.n	800051a <main+0x62>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2110      	movs	r1, #16
 80004e4:	4830      	ldr	r0, [pc, #192]	@ (80005a8 <main+0xf0>)
 80004e6:	f000 ffc7 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2120      	movs	r1, #32
 80004ee:	482e      	ldr	r0, [pc, #184]	@ (80005a8 <main+0xf0>)
 80004f0:	f000 ffc2 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 1);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004fa:	482c      	ldr	r0, [pc, #176]	@ (80005ac <main+0xf4>)
 80004fc:	f000 ffbc 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000506:	4829      	ldr	r0, [pc, #164]	@ (80005ac <main+0xf4>)
 8000508:	f000 ffb6 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000512:	4826      	ldr	r0, [pc, #152]	@ (80005ac <main+0xf4>)
 8000514:	f000 ffb0 	bl	8001478 <HAL_GPIO_WritePin>
 8000518:	e040      	b.n	800059c <main+0xe4>
	  }
	  else if (state == CLOCKWISE){
 800051a:	4b22      	ldr	r3, [pc, #136]	@ (80005a4 <main+0xec>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b01      	cmp	r3, #1
 8000520:	d11c      	bne.n	800055c <main+0xa4>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 8000522:	2200      	movs	r2, #0
 8000524:	2110      	movs	r1, #16
 8000526:	4820      	ldr	r0, [pc, #128]	@ (80005a8 <main+0xf0>)
 8000528:	f000 ffa6 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	2120      	movs	r1, #32
 8000530:	481d      	ldr	r0, [pc, #116]	@ (80005a8 <main+0xf0>)
 8000532:	f000 ffa1 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800053c:	481b      	ldr	r0, [pc, #108]	@ (80005ac <main+0xf4>)
 800053e:	f000 ff9b 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000542:	2200      	movs	r2, #0
 8000544:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000548:	4818      	ldr	r0, [pc, #96]	@ (80005ac <main+0xf4>)
 800054a:	f000 ff95 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 1);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000554:	4815      	ldr	r0, [pc, #84]	@ (80005ac <main+0xf4>)
 8000556:	f000 ff8f 	bl	8001478 <HAL_GPIO_WritePin>
 800055a:	e01f      	b.n	800059c <main+0xe4>
	  }
	  else if (state == ANTI_CLOCKWISE){
 800055c:	4b11      	ldr	r3, [pc, #68]	@ (80005a4 <main+0xec>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b02      	cmp	r3, #2
 8000562:	d11b      	bne.n	800059c <main+0xe4>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2110      	movs	r1, #16
 8000568:	480f      	ldr	r0, [pc, #60]	@ (80005a8 <main+0xf0>)
 800056a:	f000 ff85 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2120      	movs	r1, #32
 8000572:	480d      	ldr	r0, [pc, #52]	@ (80005a8 <main+0xf0>)
 8000574:	f000 ff80 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800057e:	480b      	ldr	r0, [pc, #44]	@ (80005ac <main+0xf4>)
 8000580:	f000 ff7a 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800058a:	4808      	ldr	r0, [pc, #32]	@ (80005ac <main+0xf4>)
 800058c:	f000 ff74 	bl	8001478 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000596:	4805      	ldr	r0, [pc, #20]	@ (80005ac <main+0xf4>)
 8000598:	f000 ff6e 	bl	8001478 <HAL_GPIO_WritePin>
	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800059c:	f007 fefe 	bl	800839c <MX_USB_HOST_Process>
	  if (state == OFF){
 80005a0:	e79a      	b.n	80004d8 <main+0x20>
 80005a2:	bf00      	nop
 80005a4:	2000018c 	.word	0x2000018c
 80005a8:	40021000 	.word	0x40021000
 80005ac:	40020c00 	.word	0x40020c00

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b094      	sub	sp, #80	@ 0x50
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	2230      	movs	r2, #48	@ 0x30
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f008 fa8e 	bl	8008ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	4b28      	ldr	r3, [pc, #160]	@ (800067c <SystemClock_Config+0xcc>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005dc:	4a27      	ldr	r2, [pc, #156]	@ (800067c <SystemClock_Config+0xcc>)
 80005de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e4:	4b25      	ldr	r3, [pc, #148]	@ (800067c <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005ec:	60bb      	str	r3, [r7, #8]
 80005ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	4b22      	ldr	r3, [pc, #136]	@ (8000680 <SystemClock_Config+0xd0>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a21      	ldr	r2, [pc, #132]	@ (8000680 <SystemClock_Config+0xd0>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800060c:	2301      	movs	r3, #1
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000614:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000616:	2302      	movs	r3, #2
 8000618:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800061e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000620:	2308      	movs	r3, #8
 8000622:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000624:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	4618      	mov	r0, r3
 8000638:	f003 fe4e 	bl	80042d8 <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000642:	f000 f9e5 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000652:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800065c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800065e:	f107 030c 	add.w	r3, r7, #12
 8000662:	2105      	movs	r1, #5
 8000664:	4618      	mov	r0, r3
 8000666:	f004 f8af 	bl	80047c8 <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000670:	f000 f9ce 	bl	8000a10 <Error_Handler>
  }
}
 8000674:	bf00      	nop
 8000676:	3750      	adds	r7, #80	@ 0x50
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_I2C1_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <MX_I2C1_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_I2C1_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <MX_I2C1_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006c2:	f003 f825 	bl	8003710 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 f9a0 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000098 	.word	0x20000098
 80006d8:	40005400 	.word	0x40005400
 80006dc:	000186a0 	.word	0x000186a0

080006e0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <MX_I2S3_Init+0x54>)
 80006e6:	4a14      	ldr	r2, [pc, #80]	@ (8000738 <MX_I2S3_Init+0x58>)
 80006e8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006ea:	4b12      	ldr	r3, [pc, #72]	@ (8000734 <MX_I2S3_Init+0x54>)
 80006ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006f0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006f2:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <MX_I2S3_Init+0x54>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_I2S3_Init+0x54>)
 8000700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000704:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000706:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <MX_I2S3_Init+0x54>)
 8000708:	4a0c      	ldr	r2, [pc, #48]	@ (800073c <MX_I2S3_Init+0x5c>)
 800070a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800070c:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000712:	4b08      	ldr	r3, [pc, #32]	@ (8000734 <MX_I2S3_Init+0x54>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000718:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_I2S3_Init+0x54>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	@ (8000734 <MX_I2S3_Init+0x54>)
 8000720:	f003 f93a 	bl	8003998 <HAL_I2S_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800072a:	f000 f971 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000ec 	.word	0x200000ec
 8000738:	40003c00 	.word	0x40003c00
 800073c:	00017700 	.word	0x00017700

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	@ (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	@ (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	@ (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f004 fb67 	bl	8004e64 <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 f938 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000134 	.word	0x20000134
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	@ 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b7d      	ldr	r3, [pc, #500]	@ (80009bc <MX_GPIO_Init+0x210>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a7c      	ldr	r2, [pc, #496]	@ (80009bc <MX_GPIO_Init+0x210>)
 80007cc:	f043 0310 	orr.w	r3, r3, #16
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b7a      	ldr	r3, [pc, #488]	@ (80009bc <MX_GPIO_Init+0x210>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b76      	ldr	r3, [pc, #472]	@ (80009bc <MX_GPIO_Init+0x210>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a75      	ldr	r2, [pc, #468]	@ (80009bc <MX_GPIO_Init+0x210>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b73      	ldr	r3, [pc, #460]	@ (80009bc <MX_GPIO_Init+0x210>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b6f      	ldr	r3, [pc, #444]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a6e      	ldr	r2, [pc, #440]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b6c      	ldr	r3, [pc, #432]	@ (80009bc <MX_GPIO_Init+0x210>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b68      	ldr	r3, [pc, #416]	@ (80009bc <MX_GPIO_Init+0x210>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a67      	ldr	r2, [pc, #412]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b65      	ldr	r3, [pc, #404]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b61      	ldr	r3, [pc, #388]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a60      	ldr	r2, [pc, #384]	@ (80009bc <MX_GPIO_Init+0x210>)
 800083c:	f043 0302 	orr.w	r3, r3, #2
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b5e      	ldr	r3, [pc, #376]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0302 	and.w	r3, r3, #2
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b5a      	ldr	r3, [pc, #360]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a59      	ldr	r2, [pc, #356]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000858:	f043 0308 	orr.w	r3, r3, #8
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b57      	ldr	r3, [pc, #348]	@ (80009bc <MX_GPIO_Init+0x210>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0308 	and.w	r3, r3, #8
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2138      	movs	r1, #56	@ 0x38
 800086e:	4854      	ldr	r0, [pc, #336]	@ (80009c0 <MX_GPIO_Init+0x214>)
 8000870:	f000 fe02 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4852      	ldr	r0, [pc, #328]	@ (80009c4 <MX_GPIO_Init+0x218>)
 800087a:	f000 fdfd 	bl	8001478 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800087e:	2200      	movs	r2, #0
 8000880:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000884:	4850      	ldr	r0, [pc, #320]	@ (80009c8 <MX_GPIO_Init+0x21c>)
 8000886:	f000 fdf7 	bl	8001478 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088a:	2308      	movs	r3, #8
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088e:	2301      	movs	r3, #1
 8000890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	2300      	movs	r3, #0
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4847      	ldr	r0, [pc, #284]	@ (80009c0 <MX_GPIO_Init+0x214>)
 80008a2:	f000 fc4d 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80008a6:	2330      	movs	r3, #48	@ 0x30
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ae:	2301      	movs	r3, #1
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4840      	ldr	r0, [pc, #256]	@ (80009c0 <MX_GPIO_Init+0x214>)
 80008be:	f000 fc3f 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c2:	2301      	movs	r3, #1
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	483a      	ldr	r0, [pc, #232]	@ (80009c4 <MX_GPIO_Init+0x218>)
 80008da:	f000 fc31 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ee:	2305      	movs	r3, #5
 80008f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4832      	ldr	r0, [pc, #200]	@ (80009c4 <MX_GPIO_Init+0x218>)
 80008fa:	f000 fc21 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	482e      	ldr	r0, [pc, #184]	@ (80009cc <MX_GPIO_Init+0x220>)
 8000914:	f000 fc14 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000918:	2304      	movs	r3, #4
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4829      	ldr	r0, [pc, #164]	@ (80009d0 <MX_GPIO_Init+0x224>)
 800092c:	f000 fc08 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000930:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000936:	2302      	movs	r3, #2
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000942:	2305      	movs	r3, #5
 8000944:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4820      	ldr	r0, [pc, #128]	@ (80009d0 <MX_GPIO_Init+0x224>)
 800094e:	f000 fbf7 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000952:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000956:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4817      	ldr	r0, [pc, #92]	@ (80009c8 <MX_GPIO_Init+0x21c>)
 800096c:	f000 fbe8 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_GPIO_Init+0x21c>)
 8000984:	f000 fbdc 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000988:	2302      	movs	r3, #2
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4808      	ldr	r0, [pc, #32]	@ (80009c0 <MX_GPIO_Init+0x214>)
 800099e:	f000 fbcf 	bl	8001140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2006      	movs	r0, #6
 80009a8:	f000 fb93 	bl	80010d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009ac:	2006      	movs	r0, #6
 80009ae:	f000 fbac 	bl	800110a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	@ 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40021000 	.word	0x40021000
 80009c4:	40020800 	.word	0x40020800
 80009c8:	40020c00 	.word	0x40020c00
 80009cc:	40020000 	.word	0x40020000
 80009d0:	40020400 	.word	0x40020400

080009d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin==GPIO_PIN_0){
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d10c      	bne.n	80009fe <HAL_GPIO_EXTI_Callback+0x2a>
		if (state == ANTI_CLOCKWISE){
 80009e4:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d103      	bne.n	80009f4 <HAL_GPIO_EXTI_Callback+0x20>
			state = OFF;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
		}
		else
			state++;
	}
}
 80009f2:	e004      	b.n	80009fe <HAL_GPIO_EXTI_Callback+0x2a>
			state++;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	3301      	adds	r3, #1
 80009fa:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_GPIO_EXTI_Callback+0x38>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	2000018c 	.word	0x2000018c

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 fb2e 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a19      	ldr	r2, [pc, #100]	@ (8000af0 <HAL_I2C_MspInit+0x84>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d12c      	bne.n	8000ae8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b18      	ldr	r3, [pc, #96]	@ (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	4a17      	ldr	r2, [pc, #92]	@ (8000af4 <HAL_I2C_MspInit+0x88>)
 8000a98:	f043 0302 	orr.w	r3, r3, #2
 8000a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9e:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <HAL_I2C_MspInit+0x88>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000aaa:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000aae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab0:	2312      	movs	r3, #18
 8000ab2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abc:	2304      	movs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <HAL_I2C_MspInit+0x8c>)
 8000ac8:	f000 fb3a 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ad6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ada:	6413      	str	r3, [r2, #64]	@ 0x40
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_I2C_MspInit+0x88>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	@ 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020400 	.word	0x40020400

08000afc <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a31      	ldr	r2, [pc, #196]	@ (8000bec <HAL_I2S_MspInit+0xf0>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d15a      	bne.n	8000be2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b30:	23c0      	movs	r3, #192	@ 0xc0
 8000b32:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f004 f84f 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b48:	f7ff ff62 	bl	8000a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	4b27      	ldr	r3, [pc, #156]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b54:	4a26      	ldr	r2, [pc, #152]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5c:	4b24      	ldr	r3, [pc, #144]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b20      	ldr	r3, [pc, #128]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a1f      	ldr	r2, [pc, #124]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b72:	f043 0301 	orr.w	r3, r3, #1
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b78:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	f003 0301 	and.w	r3, r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b19      	ldr	r3, [pc, #100]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8c:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b94:	4b16      	ldr	r3, [pc, #88]	@ (8000bf0 <HAL_I2S_MspInit+0xf4>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ba0:	2310      	movs	r3, #16
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bb0:	2306      	movs	r3, #6
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <HAL_I2S_MspInit+0xf8>)
 8000bbc:	f000 fac0 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bc0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4806      	ldr	r0, [pc, #24]	@ (8000bf8 <HAL_I2S_MspInit+0xfc>)
 8000bde:	f000 faaf 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be2:	bf00      	nop
 8000be4:	3738      	adds	r7, #56	@ 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40003c00 	.word	0x40003c00
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40020000 	.word	0x40020000
 8000bf8:	40020800 	.word	0x40020800

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a19      	ldr	r2, [pc, #100]	@ (8000c80 <HAL_SPI_MspInit+0x84>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d12b      	bne.n	8000c76 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a17      	ldr	r2, [pc, #92]	@ (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	4a10      	ldr	r2, [pc, #64]	@ (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c84 <HAL_SPI_MspInit+0x88>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c56:	23e0      	movs	r3, #224	@ 0xe0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	@ (8000c88 <HAL_SPI_MspInit+0x8c>)
 8000c72:	f000 fa65 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c76:	bf00      	nop
 8000c78:	3728      	adds	r7, #40	@ 0x28
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020000 	.word	0x40020000

08000c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <NMI_Handler+0x4>

08000c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <HardFault_Handler+0x4>

08000c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <MemManage_Handler+0x4>

08000ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce2:	f000 f8d7 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f000 fbdc 	bl	80014ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <OTG_FS_IRQHandler+0x10>)
 8000cfe:	f000 fecd 	bl	8001a9c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000574 	.word	0x20000574

08000d0c <_sbrk>:
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <_sbrk+0x5c>)
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <_sbrk+0x60>)
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	613b      	str	r3, [r7, #16]
 8000d20:	4b13      	ldr	r3, [pc, #76]	@ (8000d70 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d102      	bne.n	8000d2e <_sbrk+0x22>
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <_sbrk+0x64>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	@ (8000d74 <_sbrk+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	@ (8000d70 <_sbrk+0x64>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4413      	add	r3, r2
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d207      	bcs.n	8000d4c <_sbrk+0x40>
 8000d3c:	f007 fee8 	bl	8008b10 <__errno>
 8000d40:	4603      	mov	r3, r0
 8000d42:	220c      	movs	r2, #12
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	e009      	b.n	8000d60 <_sbrk+0x54>
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <_sbrk+0x64>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <_sbrk+0x64>)
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <_sbrk+0x64>)
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20020000 	.word	0x20020000
 8000d6c:	00000400 	.word	0x00000400
 8000d70:	20000190 	.word	0x20000190
 8000d74:	20000aa0 	.word	0x20000aa0

08000d78 <SystemInit>:
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <SystemInit+0x20>)
 8000d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d82:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <SystemInit+0x20>)
 8000d84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <Reset_Handler>:
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dd4 <LoopFillZerobss+0xe>
 8000da0:	f7ff ffea 	bl	8000d78 <SystemInit>
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <LoopFillZerobss+0x12>)
 8000da6:	490d      	ldr	r1, [pc, #52]	@ (8000ddc <LoopFillZerobss+0x16>)
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <LoopFillZerobss+0x1a>)
 8000daa:	2300      	movs	r3, #0
 8000dac:	e002      	b.n	8000db4 <LoopCopyDataInit>

08000dae <CopyDataInit>:
 8000dae:	58d4      	ldr	r4, [r2, r3]
 8000db0:	50c4      	str	r4, [r0, r3]
 8000db2:	3304      	adds	r3, #4

08000db4 <LoopCopyDataInit>:
 8000db4:	18c4      	adds	r4, r0, r3
 8000db6:	428c      	cmp	r4, r1
 8000db8:	d3f9      	bcc.n	8000dae <CopyDataInit>
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <LoopFillZerobss+0x1e>)
 8000dbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000de8 <LoopFillZerobss+0x22>)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e001      	b.n	8000dc6 <LoopFillZerobss>

08000dc2 <FillZerobss>:
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	3204      	adds	r2, #4

08000dc6 <LoopFillZerobss>:
 8000dc6:	42a2      	cmp	r2, r4
 8000dc8:	d3fb      	bcc.n	8000dc2 <FillZerobss>
 8000dca:	f007 fea7 	bl	8008b1c <__libc_init_array>
 8000dce:	f7ff fb73 	bl	80004b8 <main>
 8000dd2:	4770      	bx	lr
 8000dd4:	20020000 	.word	0x20020000
 8000dd8:	20000000 	.word	0x20000000
 8000ddc:	2000007c 	.word	0x2000007c
 8000de0:	08008c40 	.word	0x08008c40
 8000de4:	2000007c 	.word	0x2000007c
 8000de8:	20000a9c 	.word	0x20000a9c

08000dec <ADC_IRQHandler>:
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	@ (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	@ (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f94f 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f808 	bl	8000e34 <HAL_InitTick>
 8000e24:	f7ff fdfa 	bl	8000a1c <HAL_MspInit>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_InitTick>:
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f967 	bl	8001126 <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f92f 	bl	80010d2 <HAL_NVIC_SetPriority>
 8000e74:	4a06      	ldr	r2, [pc, #24]	@ (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
 8000e7e:	2301      	movs	r3, #1
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	@ (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000194 	.word	0x20000194

08000ebc <HAL_GetTick>:
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000194 	.word	0x20000194

08000ed4 <HAL_Delay>:
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_Delay+0x44>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
 8000efa:	bf00      	nop
 8000efc:	f7ff ffde 	bl	8000ebc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
 8000f0c:	bf00      	nop
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008

08000f1c <__NVIC_SetPriorityGrouping>:
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	021a      	lsls	r2, r3, #8
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <__NVIC_SetPriorityGrouping+0x44>)
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	60d3      	str	r3, [r2, #12]
 8000f54:	bf00      	nop
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <__NVIC_GetPriorityGrouping>:
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4b04      	ldr	r3, [pc, #16]	@ (8000f7c <__NVIC_GetPriorityGrouping+0x18>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	0a1b      	lsrs	r3, r3, #8
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	4618      	mov	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_EnableIRQ>:
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	db0b      	blt.n	8000faa <__NVIC_EnableIRQ+0x2a>
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	f003 021f 	and.w	r2, r3, #31
 8000f98:	4907      	ldr	r1, [pc, #28]	@ (8000fb8 <__NVIC_EnableIRQ+0x38>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	095b      	lsrs	r3, r3, #5
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100

08000fbc <__NVIC_SetPriority>:
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	@ (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	@ (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
 8001068:	4313      	orrs	r3, r2
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	2300      	movs	r3, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff29 	bl	8000f1c <__NVIC_SetPriorityGrouping>
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	f7ff ff3e 	bl	8000f64 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff31 	bl	8000f80 <__NVIC_EnableIRQ>
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_SYSTICK_Config>:
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffa2 	bl	8001078 <SysTick_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <HAL_GPIO_Init>:
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
 800115a:	e16b      	b.n	8001434 <HAL_GPIO_Init+0x2f4>
 800115c:	2201      	movs	r2, #1
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 815a 	bne.w	800142e <HAL_GPIO_Init+0x2ee>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d005      	beq.n	8001192 <HAL_GPIO_Init+0x52>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d130      	bne.n	80011f4 <HAL_GPIO_Init+0xb4>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	2203      	movs	r2, #3
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	68da      	ldr	r2, [r3, #12]
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	69ba      	ldr	r2, [r7, #24]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	61bb      	str	r3, [r7, #24]
 80011c8:	2201      	movs	r2, #1
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 0201 	and.w	r2, r3, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b03      	cmp	r3, #3
 80011fe:	d017      	beq.n	8001230 <HAL_GPIO_Init+0xf0>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d123      	bne.n	8001284 <HAL_GPIO_Init+0x144>
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4013      	ands	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691a      	ldr	r2, [r3, #16]
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	08da      	lsrs	r2, r3, #3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3208      	adds	r2, #8
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80b4 	beq.w	800142e <HAL_GPIO_Init+0x2ee>
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b60      	ldr	r3, [pc, #384]	@ (800144c <HAL_GPIO_Init+0x30c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	4a5f      	ldr	r2, [pc, #380]	@ (800144c <HAL_GPIO_Init+0x30c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012d6:	4b5d      	ldr	r3, [pc, #372]	@ (800144c <HAL_GPIO_Init+0x30c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4a5b      	ldr	r2, [pc, #364]	@ (8001450 <HAL_GPIO_Init+0x310>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0303 	and.w	r3, r3, #3
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a52      	ldr	r2, [pc, #328]	@ (8001454 <HAL_GPIO_Init+0x314>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02b      	beq.n	8001366 <HAL_GPIO_Init+0x226>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a51      	ldr	r2, [pc, #324]	@ (8001458 <HAL_GPIO_Init+0x318>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d025      	beq.n	8001362 <HAL_GPIO_Init+0x222>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a50      	ldr	r2, [pc, #320]	@ (800145c <HAL_GPIO_Init+0x31c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d01f      	beq.n	800135e <HAL_GPIO_Init+0x21e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4f      	ldr	r2, [pc, #316]	@ (8001460 <HAL_GPIO_Init+0x320>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d019      	beq.n	800135a <HAL_GPIO_Init+0x21a>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4e      	ldr	r2, [pc, #312]	@ (8001464 <HAL_GPIO_Init+0x324>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0x216>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4d      	ldr	r2, [pc, #308]	@ (8001468 <HAL_GPIO_Init+0x328>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d00d      	beq.n	8001352 <HAL_GPIO_Init+0x212>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4c      	ldr	r2, [pc, #304]	@ (800146c <HAL_GPIO_Init+0x32c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d007      	beq.n	800134e <HAL_GPIO_Init+0x20e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	@ (8001470 <HAL_GPIO_Init+0x330>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d101      	bne.n	800134a <HAL_GPIO_Init+0x20a>
 8001346:	2307      	movs	r3, #7
 8001348:	e00e      	b.n	8001368 <HAL_GPIO_Init+0x228>
 800134a:	2308      	movs	r3, #8
 800134c:	e00c      	b.n	8001368 <HAL_GPIO_Init+0x228>
 800134e:	2306      	movs	r3, #6
 8001350:	e00a      	b.n	8001368 <HAL_GPIO_Init+0x228>
 8001352:	2305      	movs	r3, #5
 8001354:	e008      	b.n	8001368 <HAL_GPIO_Init+0x228>
 8001356:	2304      	movs	r3, #4
 8001358:	e006      	b.n	8001368 <HAL_GPIO_Init+0x228>
 800135a:	2303      	movs	r3, #3
 800135c:	e004      	b.n	8001368 <HAL_GPIO_Init+0x228>
 800135e:	2302      	movs	r3, #2
 8001360:	e002      	b.n	8001368 <HAL_GPIO_Init+0x228>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <HAL_GPIO_Init+0x228>
 8001366:	2300      	movs	r3, #0
 8001368:	69fa      	ldr	r2, [r7, #28]
 800136a:	f002 0203 	and.w	r2, r2, #3
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	4093      	lsls	r3, r2
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	4935      	ldr	r1, [pc, #212]	@ (8001450 <HAL_GPIO_Init+0x310>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	089b      	lsrs	r3, r3, #2
 800137e:	3302      	adds	r3, #2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001386:	4b3b      	ldr	r3, [pc, #236]	@ (8001474 <HAL_GPIO_Init+0x334>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	43db      	mvns	r3, r3
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	4013      	ands	r3, r2
 8001394:	61bb      	str	r3, [r7, #24]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d003      	beq.n	80013aa <HAL_GPIO_Init+0x26a>
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
 80013aa:	4a32      	ldr	r2, [pc, #200]	@ (8001474 <HAL_GPIO_Init+0x334>)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	6093      	str	r3, [r2, #8]
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_GPIO_Init+0x334>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x294>
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	4a27      	ldr	r2, [pc, #156]	@ (8001474 <HAL_GPIO_Init+0x334>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	60d3      	str	r3, [r2, #12]
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <HAL_GPIO_Init+0x334>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	4013      	ands	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x2be>
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
 80013fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001474 <HAL_GPIO_Init+0x334>)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	6053      	str	r3, [r2, #4]
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <HAL_GPIO_Init+0x334>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	43db      	mvns	r3, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4013      	ands	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x2e8>
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4313      	orrs	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
 8001428:	4a12      	ldr	r2, [pc, #72]	@ (8001474 <HAL_GPIO_Init+0x334>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3301      	adds	r3, #1
 8001432:	61fb      	str	r3, [r7, #28]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	2b0f      	cmp	r3, #15
 8001438:	f67f ae90 	bls.w	800115c <HAL_GPIO_Init+0x1c>
 800143c:	bf00      	nop
 800143e:	bf00      	nop
 8001440:	3724      	adds	r7, #36	@ 0x24
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40013800 	.word	0x40013800
 8001454:	40020000 	.word	0x40020000
 8001458:	40020400 	.word	0x40020400
 800145c:	40020800 	.word	0x40020800
 8001460:	40020c00 	.word	0x40020c00
 8001464:	40021000 	.word	0x40021000
 8001468:	40021400 	.word	0x40021400
 800146c:	40021800 	.word	0x40021800
 8001470:	40021c00 	.word	0x40021c00
 8001474:	40013c00 	.word	0x40013c00

08001478 <HAL_GPIO_WritePin>:
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	807b      	strh	r3, [r7, #2]
 8001484:	4613      	mov	r3, r2
 8001486:	707b      	strb	r3, [r7, #1]
 8001488:	787b      	ldrb	r3, [r7, #1]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d003      	beq.n	8001496 <HAL_GPIO_WritePin+0x1e>
 800148e:	887a      	ldrh	r2, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	619a      	str	r2, [r3, #24]
 8001494:	e003      	b.n	800149e <HAL_GPIO_WritePin+0x26>
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	041a      	lsls	r2, r3, #16
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	619a      	str	r2, [r3, #24]
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
	...

080014ac <HAL_GPIO_EXTI_IRQHandler>:
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4b08      	ldr	r3, [pc, #32]	@ (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014b8:	695a      	ldr	r2, [r3, #20]
 80014ba:	88fb      	ldrh	r3, [r7, #6]
 80014bc:	4013      	ands	r3, r2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d006      	beq.n	80014d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80014c2:	4a05      	ldr	r2, [pc, #20]	@ (80014d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	88fb      	ldrh	r3, [r7, #6]
 80014c6:	6153      	str	r3, [r2, #20]
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff fa82 	bl	80009d4 <HAL_GPIO_EXTI_Callback>
 80014d0:	bf00      	nop
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40013c00 	.word	0x40013c00

080014dc <HAL_HCD_Init>:
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d101      	bne.n	80014ee <HAL_HCD_Init+0x12>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e059      	b.n	80015a2 <HAL_HCD_Init+0xc6>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <HAL_HCD_Init+0x32>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f006 ff7f 	bl	800840c <HAL_HCD_MspInit>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800151c:	d102      	bne.n	8001524 <HAL_HCD_Init+0x48>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	719a      	strb	r2, [r3, #6]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f003 fd99 	bl	8005060 <USB_DisableGlobalInt>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7c1a      	ldrb	r2, [r3, #16]
 8001536:	f88d 2000 	strb.w	r2, [sp]
 800153a:	3304      	adds	r3, #4
 800153c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800153e:	f003 fd1a 	bl	8004f76 <USB_CoreInit>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_HCD_Init+0x78>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 8001550:	2301      	movs	r3, #1
 8001552:	e026      	b.n	80015a2 <HAL_HCD_Init+0xc6>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2101      	movs	r1, #1
 800155a:	4618      	mov	r0, r3
 800155c:	f003 fd91 	bl	8005082 <USB_SetCurrentMode>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_HCD_Init+0x96>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2202      	movs	r2, #2
 800156a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 800156e:	2301      	movs	r3, #1
 8001570:	e017      	b.n	80015a2 <HAL_HCD_Init+0xc6>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6818      	ldr	r0, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	7c1a      	ldrb	r2, [r3, #16]
 800157a:	f88d 2000 	strb.w	r2, [sp]
 800157e:	3304      	adds	r3, #4
 8001580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001582:	f003 ff33 	bl	80053ec <USB_HostInit>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_HCD_Init+0xbc>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 8001594:	2301      	movs	r3, #1
 8001596:	e004      	b.n	80015a2 <HAL_HCD_Init+0xc6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 80015a0:	2300      	movs	r3, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	3710      	adds	r7, #16
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_HCD_HC_Init>:
 80015aa:	b590      	push	{r4, r7, lr}
 80015ac:	b08b      	sub	sp, #44	@ 0x2c
 80015ae:	af04      	add	r7, sp, #16
 80015b0:	6078      	str	r0, [r7, #4]
 80015b2:	4608      	mov	r0, r1
 80015b4:	4611      	mov	r1, r2
 80015b6:	461a      	mov	r2, r3
 80015b8:	4603      	mov	r3, r0
 80015ba:	70fb      	strb	r3, [r7, #3]
 80015bc:	460b      	mov	r3, r1
 80015be:	70bb      	strb	r3, [r7, #2]
 80015c0:	4613      	mov	r3, r2
 80015c2:	707b      	strb	r3, [r7, #1]
 80015c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d101      	bne.n	80015d6 <HAL_HCD_HC_Init+0x2c>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e09d      	b.n	8001712 <HAL_HCD_HC_Init+0x168>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 80015de:	78fa      	ldrb	r2, [r7, #3]
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	4613      	mov	r3, r2
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	1a9b      	subs	r3, r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3319      	adds	r3, #25
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	440b      	add	r3, r1
 8001600:	3314      	adds	r3, #20
 8001602:	787a      	ldrb	r2, [r7, #1]
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3315      	adds	r3, #21
 8001616:	78fa      	ldrb	r2, [r7, #3]
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	78fa      	ldrb	r2, [r7, #3]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	011b      	lsls	r3, r3, #4
 8001622:	1a9b      	subs	r3, r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	440b      	add	r3, r1
 8001628:	3326      	adds	r3, #38	@ 0x26
 800162a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	78fa      	ldrb	r2, [r7, #3]
 8001632:	78bb      	ldrb	r3, [r7, #2]
 8001634:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001638:	b2d8      	uxtb	r0, r3
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	4613      	mov	r3, r2
 800163e:	011b      	lsls	r3, r3, #4
 8001640:	1a9b      	subs	r3, r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3316      	adds	r3, #22
 8001648:	4602      	mov	r2, r0
 800164a:	701a      	strb	r2, [r3, #0]
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	4619      	mov	r1, r3
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f000 fbc7 	bl	8001de4 <HAL_HCD_HC_ClearHubInfo>
 8001656:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da0a      	bge.n	8001674 <HAL_HCD_HC_Init+0xca>
 800165e:	78fa      	ldrb	r2, [r7, #3]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	011b      	lsls	r3, r3, #4
 8001666:	1a9b      	subs	r3, r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	3317      	adds	r3, #23
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
 8001672:	e009      	b.n	8001688 <HAL_HCD_HC_Init+0xde>
 8001674:	78fa      	ldrb	r2, [r7, #3]
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	011b      	lsls	r3, r3, #4
 800167c:	1a9b      	subs	r3, r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	440b      	add	r3, r1
 8001682:	3317      	adds	r3, #23
 8001684:	2200      	movs	r2, #0
 8001686:	701a      	strb	r2, [r3, #0]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f004 f811 	bl	80056b4 <USB_GetHostSpeed>
 8001692:	6138      	str	r0, [r7, #16]
 8001694:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001698:	2b01      	cmp	r3, #1
 800169a:	d10b      	bne.n	80016b4 <HAL_HCD_HC_Init+0x10a>
 800169c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_HCD_HC_Init+0x10a>
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d104      	bne.n	80016b4 <HAL_HCD_HC_Init+0x10a>
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2bbc      	cmp	r3, #188	@ 0xbc
 80016ae:	d901      	bls.n	80016b4 <HAL_HCD_HC_Init+0x10a>
 80016b0:	23bc      	movs	r3, #188	@ 0xbc
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	78fa      	ldrb	r2, [r7, #3]
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4613      	mov	r3, r2
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	1a9b      	subs	r3, r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	3318      	adds	r3, #24
 80016c4:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016c8:	701a      	strb	r2, [r3, #0]
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	b298      	uxth	r0, r3
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	3328      	adds	r3, #40	@ 0x28
 80016de:	4602      	mov	r2, r0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	787c      	ldrb	r4, [r7, #1]
 80016ec:	78ba      	ldrb	r2, [r7, #2]
 80016ee:	78f9      	ldrb	r1, [r7, #3]
 80016f0:	9302      	str	r3, [sp, #8]
 80016f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	4623      	mov	r3, r4
 8001700:	f004 f800 	bl	8005704 <USB_HC_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001710:	7bfb      	ldrb	r3, [r7, #15]
 8001712:	4618      	mov	r0, r3
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	bd90      	pop	{r4, r7, pc}

0800171a <HAL_HCD_HC_Halt>:
 800171a:	b580      	push	{r7, lr}
 800171c:	b084      	sub	sp, #16
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
 8001722:	460b      	mov	r3, r1
 8001724:	70fb      	strb	r3, [r7, #3]
 8001726:	2300      	movs	r3, #0
 8001728:	73fb      	strb	r3, [r7, #15]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_HCD_HC_Halt+0x1e>
 8001734:	2302      	movs	r3, #2
 8001736:	e00f      	b.n	8001758 <HAL_HCD_HC_Halt+0x3e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	78fa      	ldrb	r2, [r7, #3]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fb92 	bl	8005e72 <USB_HC_Halt>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_HCD_HC_SubmitRequest>:
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	4608      	mov	r0, r1
 800176a:	4611      	mov	r1, r2
 800176c:	461a      	mov	r2, r3
 800176e:	4603      	mov	r3, r0
 8001770:	70fb      	strb	r3, [r7, #3]
 8001772:	460b      	mov	r3, r1
 8001774:	70bb      	strb	r3, [r7, #2]
 8001776:	4613      	mov	r3, r2
 8001778:	707b      	strb	r3, [r7, #1]
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	3317      	adds	r3, #23
 800178a:	78ba      	ldrb	r2, [r7, #2]
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	6879      	ldr	r1, [r7, #4]
 8001792:	4613      	mov	r3, r2
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a9b      	subs	r3, r3, r2
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	440b      	add	r3, r1
 800179c:	3326      	adds	r3, #38	@ 0x26
 800179e:	787a      	ldrb	r2, [r7, #1]
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	7c3b      	ldrb	r3, [r7, #16]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d114      	bne.n	80017d2 <HAL_HCD_HC_SubmitRequest+0x72>
 80017a8:	78fa      	ldrb	r2, [r7, #3]
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	1a9b      	subs	r3, r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	332a      	adds	r3, #42	@ 0x2a
 80017b8:	2203      	movs	r2, #3
 80017ba:	701a      	strb	r2, [r3, #0]
 80017bc:	78fa      	ldrb	r2, [r7, #3]
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	4613      	mov	r3, r2
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	1a9b      	subs	r3, r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	3319      	adds	r3, #25
 80017cc:	7f3a      	ldrb	r2, [r7, #28]
 80017ce:	701a      	strb	r2, [r3, #0]
 80017d0:	e009      	b.n	80017e6 <HAL_HCD_HC_SubmitRequest+0x86>
 80017d2:	78fa      	ldrb	r2, [r7, #3]
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	1a9b      	subs	r3, r3, r2
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	440b      	add	r3, r1
 80017e0:	332a      	adds	r3, #42	@ 0x2a
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
 80017e6:	787b      	ldrb	r3, [r7, #1]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	f200 8102 	bhi.w	80019f2 <HAL_HCD_HC_SubmitRequest+0x292>
 80017ee:	a201      	add	r2, pc, #4	@ (adr r2, 80017f4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f4:	08001805 	.word	0x08001805
 80017f8:	080019dd 	.word	0x080019dd
 80017fc:	080018c9 	.word	0x080018c9
 8001800:	08001953 	.word	0x08001953
 8001804:	7c3b      	ldrb	r3, [r7, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	f040 80f5 	bne.w	80019f6 <HAL_HCD_HC_SubmitRequest+0x296>
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d12d      	bne.n	800186e <HAL_HCD_HC_SubmitRequest+0x10e>
 8001812:	8b3b      	ldrh	r3, [r7, #24]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d109      	bne.n	800182c <HAL_HCD_HC_SubmitRequest+0xcc>
 8001818:	78fa      	ldrb	r2, [r7, #3]
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	4613      	mov	r3, r2
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	333d      	adds	r3, #61	@ 0x3d
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	4613      	mov	r3, r2
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	333d      	adds	r3, #61	@ 0x3d
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10a      	bne.n	8001858 <HAL_HCD_HC_SubmitRequest+0xf8>
 8001842:	78fa      	ldrb	r2, [r7, #3]
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	011b      	lsls	r3, r3, #4
 800184a:	1a9b      	subs	r3, r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	440b      	add	r3, r1
 8001850:	332a      	adds	r3, #42	@ 0x2a
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
 8001856:	e0ce      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x296>
 8001858:	78fa      	ldrb	r2, [r7, #3]
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	1a9b      	subs	r3, r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	332a      	adds	r3, #42	@ 0x2a
 8001868:	2202      	movs	r2, #2
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	e0c3      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x296>
 800186e:	78fa      	ldrb	r2, [r7, #3]
 8001870:	6879      	ldr	r1, [r7, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	011b      	lsls	r3, r3, #4
 8001876:	1a9b      	subs	r3, r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	331a      	adds	r3, #26
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b01      	cmp	r3, #1
 8001882:	f040 80b8 	bne.w	80019f6 <HAL_HCD_HC_SubmitRequest+0x296>
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	333c      	adds	r3, #60	@ 0x3c
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d10a      	bne.n	80018b2 <HAL_HCD_HC_SubmitRequest+0x152>
 800189c:	78fa      	ldrb	r2, [r7, #3]
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	4613      	mov	r3, r2
 80018a2:	011b      	lsls	r3, r3, #4
 80018a4:	1a9b      	subs	r3, r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	332a      	adds	r3, #42	@ 0x2a
 80018ac:	2200      	movs	r2, #0
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e0a1      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x296>
 80018b2:	78fa      	ldrb	r2, [r7, #3]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	011b      	lsls	r3, r3, #4
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	440b      	add	r3, r1
 80018c0:	332a      	adds	r3, #42	@ 0x2a
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
 80018c6:	e096      	b.n	80019f6 <HAL_HCD_HC_SubmitRequest+0x296>
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d120      	bne.n	8001910 <HAL_HCD_HC_SubmitRequest+0x1b0>
 80018ce:	78fa      	ldrb	r2, [r7, #3]
 80018d0:	6879      	ldr	r1, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	011b      	lsls	r3, r3, #4
 80018d6:	1a9b      	subs	r3, r3, r2
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	440b      	add	r3, r1
 80018dc:	333d      	adds	r3, #61	@ 0x3d
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10a      	bne.n	80018fa <HAL_HCD_HC_SubmitRequest+0x19a>
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	332a      	adds	r3, #42	@ 0x2a
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e07e      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 80018fa:	78fa      	ldrb	r2, [r7, #3]
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	4613      	mov	r3, r2
 8001900:	011b      	lsls	r3, r3, #4
 8001902:	1a9b      	subs	r3, r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	440b      	add	r3, r1
 8001908:	332a      	adds	r3, #42	@ 0x2a
 800190a:	2202      	movs	r2, #2
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e073      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	4613      	mov	r3, r2
 8001916:	011b      	lsls	r3, r3, #4
 8001918:	1a9b      	subs	r3, r3, r2
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	333c      	adds	r3, #60	@ 0x3c
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10a      	bne.n	800193c <HAL_HCD_HC_SubmitRequest+0x1dc>
 8001926:	78fa      	ldrb	r2, [r7, #3]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	440b      	add	r3, r1
 8001934:	332a      	adds	r3, #42	@ 0x2a
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	e05d      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	1a9b      	subs	r3, r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	332a      	adds	r3, #42	@ 0x2a
 800194c:	2202      	movs	r2, #2
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	e052      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 8001952:	78bb      	ldrb	r3, [r7, #2]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d120      	bne.n	800199a <HAL_HCD_HC_SubmitRequest+0x23a>
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	333d      	adds	r3, #61	@ 0x3d
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10a      	bne.n	8001984 <HAL_HCD_HC_SubmitRequest+0x224>
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	332a      	adds	r3, #42	@ 0x2a
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	e039      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 8001984:	78fa      	ldrb	r2, [r7, #3]
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	011b      	lsls	r3, r3, #4
 800198c:	1a9b      	subs	r3, r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	332a      	adds	r3, #42	@ 0x2a
 8001994:	2202      	movs	r2, #2
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e02e      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	6879      	ldr	r1, [r7, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	011b      	lsls	r3, r3, #4
 80019a2:	1a9b      	subs	r3, r3, r2
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	440b      	add	r3, r1
 80019a8:	333c      	adds	r3, #60	@ 0x3c
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10a      	bne.n	80019c6 <HAL_HCD_HC_SubmitRequest+0x266>
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	332a      	adds	r3, #42	@ 0x2a
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e018      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	332a      	adds	r3, #42	@ 0x2a
 80019d6:	2202      	movs	r2, #2
 80019d8:	701a      	strb	r2, [r3, #0]
 80019da:	e00d      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 80019dc:	78fa      	ldrb	r2, [r7, #3]
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	4613      	mov	r3, r2
 80019e2:	011b      	lsls	r3, r3, #4
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	440b      	add	r3, r1
 80019ea:	332a      	adds	r3, #42	@ 0x2a
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e002      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 80019f2:	bf00      	nop
 80019f4:	e000      	b.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x298>
 80019f6:	bf00      	nop
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	332c      	adds	r3, #44	@ 0x2c
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	78fa      	ldrb	r2, [r7, #3]
 8001a0e:	8b39      	ldrh	r1, [r7, #24]
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4613      	mov	r3, r2
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	1a9b      	subs	r3, r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4403      	add	r3, r0
 8001a1c:	3334      	adds	r3, #52	@ 0x34
 8001a1e:	6019      	str	r1, [r3, #0]
 8001a20:	78fa      	ldrb	r2, [r7, #3]
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	334c      	adds	r3, #76	@ 0x4c
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	1a9b      	subs	r3, r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	3338      	adds	r3, #56	@ 0x38
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	3315      	adds	r3, #21
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	011b      	lsls	r3, r3, #4
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	334d      	adds	r3, #77	@ 0x4d
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6818      	ldr	r0, [r3, #0]
 8001a74:	78fa      	ldrb	r2, [r7, #3]
 8001a76:	4613      	mov	r3, r2
 8001a78:	011b      	lsls	r3, r3, #4
 8001a7a:	1a9b      	subs	r3, r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	3310      	adds	r3, #16
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	4413      	add	r3, r2
 8001a84:	1d19      	adds	r1, r3, #4
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	799b      	ldrb	r3, [r3, #6]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f003 ff66 	bl	800595c <USB_HC_StartXfer>
 8001a90:	4603      	mov	r3, r0
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop

08001a9c <HAL_HCD_IRQHandler>:
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f003 fc5b 	bl	800536e <USB_GetMode>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f040 80fb 	bne.w	8001cb6 <HAL_HCD_IRQHandler+0x21a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fc1e 	bl	8005306 <USB_ReadInterrupts>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80f1 	beq.w	8001cb4 <HAL_HCD_IRQHandler+0x218>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f003 fc15 	bl	8005306 <USB_ReadInterrupts>
 8001adc:	4603      	mov	r3, r0
 8001ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ae6:	d104      	bne.n	8001af2 <HAL_HCD_IRQHandler+0x56>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001af0:	615a      	str	r2, [r3, #20]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fc05 	bl	8005306 <USB_ReadInterrupts>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b06:	d104      	bne.n	8001b12 <HAL_HCD_IRQHandler+0x76>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b10:	615a      	str	r2, [r3, #20]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fbf5 	bl	8005306 <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b22:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b26:	d104      	bne.n	8001b32 <HAL_HCD_IRQHandler+0x96>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b30:	615a      	str	r2, [r3, #20]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f003 fbe5 	bl	8005306 <USB_ReadInterrupts>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d103      	bne.n	8001b4e <HAL_HCD_IRQHandler+0xb2>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2202      	movs	r2, #2
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 fbd7 	bl	8005306 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b62:	d120      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x10a>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b6c:	615a      	str	r2, [r3, #20]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d113      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x10a>
 8001b7e:	2110      	movs	r1, #16
 8001b80:	6938      	ldr	r0, [r7, #16]
 8001b82:	f003 faca 	bl	800511a <USB_FlushTxFifo>
 8001b86:	6938      	ldr	r0, [r7, #16]
 8001b88:	f003 faf9 	bl	800517e <USB_FlushRxFifo>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	7a5b      	ldrb	r3, [r3, #9]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d105      	bne.n	8001ba0 <HAL_HCD_IRQHandler+0x104>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 fcea 	bl	8005574 <USB_InitFSLSPClkSel>
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f006 fcb1 	bl	8008508 <HAL_HCD_Disconnect_Callback>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fbab 	bl	8005306 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bba:	d102      	bne.n	8001bc2 <HAL_HCD_IRQHandler+0x126>
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f001 fd33 	bl	8003628 <HCD_Port_IRQHandler>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fb9d 	bl	8005306 <USB_ReadInterrupts>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d106      	bne.n	8001be4 <HAL_HCD_IRQHandler+0x148>
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f006 fc7a 	bl	80084d0 <HAL_HCD_SOF_Callback>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2208      	movs	r2, #8
 8001be2:	615a      	str	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fb8c 	bl	8005306 <USB_ReadInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bf8:	d139      	bne.n	8001c6e <HAL_HCD_IRQHandler+0x1d2>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f004 f926 	bl	8005e50 <USB_HC_ReadInterrupt>
 8001c04:	60b8      	str	r0, [r7, #8]
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e025      	b.n	8001c58 <HAL_HCD_IRQHandler+0x1bc>
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	fa22 f303 	lsr.w	r3, r2, r3
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d018      	beq.n	8001c52 <HAL_HCD_IRQHandler+0x1b6>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	015a      	lsls	r2, r3, #5
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c36:	d106      	bne.n	8001c46 <HAL_HCD_IRQHandler+0x1aa>
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f905 	bl	8001e4e <HCD_HC_IN_IRQHandler>
 8001c44:	e005      	b.n	8001c52 <HAL_HCD_IRQHandler+0x1b6>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 ff67 	bl	8002b20 <HCD_HC_OUT_IRQHandler>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	795b      	ldrb	r3, [r3, #5]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d3d3      	bcc.n	8001c0c <HAL_HCD_IRQHandler+0x170>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c6c:	615a      	str	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fb47 	bl	8005306 <USB_ReadInterrupts>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d101      	bne.n	8001c86 <HAL_HCD_IRQHandler+0x1ea>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e000      	b.n	8001c88 <HAL_HCD_IRQHandler+0x1ec>
 8001c86:	2300      	movs	r3, #0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d014      	beq.n	8001cb6 <HAL_HCD_IRQHandler+0x21a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0210 	bic.w	r2, r2, #16
 8001c9a:	619a      	str	r2, [r3, #24]
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f001 fbe4 	bl	800346a <HCD_RXQLVL_IRQHandler>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699a      	ldr	r2, [r3, #24]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0210 	orr.w	r2, r2, #16
 8001cb0:	619a      	str	r2, [r3, #24]
 8001cb2:	e000      	b.n	8001cb6 <HAL_HCD_IRQHandler+0x21a>
 8001cb4:	bf00      	nop
 8001cb6:	3718      	adds	r7, #24
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_HCD_Start>:
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_HCD_Start+0x16>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e013      	b.n	8001cfa <HAL_HCD_Start+0x3e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2101      	movs	r1, #1
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f003 fcae 	bl	8005642 <USB_DriveVbus>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f003 f9a7 	bl	800503e <USB_EnableGlobalInt>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_HCD_Stop>:
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_HCD_Stop+0x16>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e00d      	b.n	8001d34 <HAL_HCD_Stop+0x32>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fa01 	bl	800612c <USB_StopHost>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8001d32:	2300      	movs	r3, #0
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_HCD_ResetPort>:
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fc50 	bl	80055ee <USB_ResetPort>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4618      	mov	r0, r3
 8001d52:	3708      	adds	r7, #8
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_HCD_HC_GetURBState>:
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	334c      	adds	r3, #76	@ 0x4c
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_HCD_HC_GetXferCount>:
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	70fb      	strb	r3, [r7, #3]
 8001d8e:	78fa      	ldrb	r2, [r7, #3]
 8001d90:	6879      	ldr	r1, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3338      	adds	r3, #56	@ 0x38
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_HCD_GetCurrentFrame>:
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f003 fc92 	bl	80056e2 <USB_GetCurrentFrame>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_HCD_GetCurrentSpeed>:
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fc6d 	bl	80056b4 <USB_GetHostSpeed>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_HCD_HC_ClearHubInfo>:
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	70fb      	strb	r3, [r7, #3]
 8001df0:	78fa      	ldrb	r2, [r7, #3]
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	4613      	mov	r3, r2
 8001df6:	011b      	lsls	r3, r3, #4
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	440b      	add	r3, r1
 8001dfe:	331a      	adds	r3, #26
 8001e00:	2200      	movs	r2, #0
 8001e02:	701a      	strb	r2, [r3, #0]
 8001e04:	78fa      	ldrb	r2, [r7, #3]
 8001e06:	6879      	ldr	r1, [r7, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	011b      	lsls	r3, r3, #4
 8001e0c:	1a9b      	subs	r3, r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	331b      	adds	r3, #27
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	3325      	adds	r3, #37	@ 0x25
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	78fa      	ldrb	r2, [r7, #3]
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	011b      	lsls	r3, r3, #4
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	3324      	adds	r3, #36	@ 0x24
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	2300      	movs	r3, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <HCD_HC_IN_IRQHandler>:
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
 8001e56:	460b      	mov	r3, r1
 8001e58:	70fb      	strb	r3, [r7, #3]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	78fa      	ldrb	r2, [r7, #3]
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fa5d 	bl	800532c <USB_ReadChInterrupts>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11a      	bne.n	8001eb2 <HCD_HC_IN_IRQHandler+0x64>
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e88:	461a      	mov	r2, r3
 8001e8a:	2304      	movs	r3, #4
 8001e8c:	6093      	str	r3, [r2, #8]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	334d      	adds	r3, #77	@ 0x4d
 8001e9e:	2207      	movs	r2, #7
 8001ea0:	701a      	strb	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f003 ffe1 	bl	8005e72 <USB_HC_Halt>
 8001eb0:	e09e      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x1a2>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 fa36 	bl	800532c <USB_ReadChInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eca:	d11b      	bne.n	8001f04 <HCD_HC_IN_IRQHandler+0xb6>
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	015a      	lsls	r2, r3, #5
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed8:	461a      	mov	r2, r3
 8001eda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ede:	6093      	str	r3, [r2, #8]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	6879      	ldr	r1, [r7, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	011b      	lsls	r3, r3, #4
 8001ee8:	1a9b      	subs	r3, r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	334d      	adds	r3, #77	@ 0x4d
 8001ef0:	2208      	movs	r2, #8
 8001ef2:	701a      	strb	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	4611      	mov	r1, r2
 8001efc:	4618      	mov	r0, r3
 8001efe:	f003 ffb8 	bl	8005e72 <USB_HC_Halt>
 8001f02:	e075      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x1a2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	78fa      	ldrb	r2, [r7, #3]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fa0d 	bl	800532c <USB_ReadChInterrupts>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b08      	cmp	r3, #8
 8001f1a:	d11a      	bne.n	8001f52 <HCD_HC_IN_IRQHandler+0x104>
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	015a      	lsls	r2, r3, #5
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f28:	461a      	mov	r2, r3
 8001f2a:	2308      	movs	r3, #8
 8001f2c:	6093      	str	r3, [r2, #8]
 8001f2e:	78fa      	ldrb	r2, [r7, #3]
 8001f30:	6879      	ldr	r1, [r7, #4]
 8001f32:	4613      	mov	r3, r2
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	1a9b      	subs	r3, r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	334d      	adds	r3, #77	@ 0x4d
 8001f3e:	2206      	movs	r2, #6
 8001f40:	701a      	strb	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 ff91 	bl	8005e72 <USB_HC_Halt>
 8001f50:	e04e      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x1a2>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4611      	mov	r1, r2
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f9e6 	bl	800532c <USB_ReadChInterrupts>
 8001f60:	4603      	mov	r3, r0
 8001f62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f6a:	d11b      	bne.n	8001fa4 <HCD_HC_IN_IRQHandler+0x156>
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f7e:	6093      	str	r3, [r2, #8]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	334d      	adds	r3, #77	@ 0x4d
 8001f90:	2209      	movs	r2, #9
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 ff68 	bl	8005e72 <USB_HC_Halt>
 8001fa2:	e025      	b.n	8001ff0 <HCD_HC_IN_IRQHandler+0x1a2>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	78fa      	ldrb	r2, [r7, #3]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f003 f9bd 	bl	800532c <USB_ReadChInterrupts>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb8:	2b80      	cmp	r3, #128	@ 0x80
 8001fba:	d119      	bne.n	8001ff0 <HCD_HC_IN_IRQHandler+0x1a2>
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	015a      	lsls	r2, r3, #5
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2380      	movs	r3, #128	@ 0x80
 8001fcc:	6093      	str	r3, [r2, #8]
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	334d      	adds	r3, #77	@ 0x4d
 8001fde:	2207      	movs	r2, #7
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f003 ff41 	bl	8005e72 <USB_HC_Halt>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f003 f997 	bl	800532c <USB_ReadChInterrupts>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002004:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002008:	d112      	bne.n	8002030 <HCD_HC_IN_IRQHandler+0x1e2>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	4611      	mov	r1, r2
 8002012:	4618      	mov	r0, r3
 8002014:	f003 ff2d 	bl	8005e72 <USB_HC_Halt>
 8002018:	78fb      	ldrb	r3, [r7, #3]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002024:	461a      	mov	r2, r3
 8002026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800202a:	6093      	str	r3, [r2, #8]
 800202c:	f000 bd75 	b.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	78fa      	ldrb	r2, [r7, #3]
 8002036:	4611      	mov	r1, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f003 f977 	bl	800532c <USB_ReadChInterrupts>
 800203e:	4603      	mov	r3, r0
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	f040 8128 	bne.w	800229a <HCD_HC_IN_IRQHandler+0x44c>
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4413      	add	r3, r2
 8002052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002056:	461a      	mov	r2, r3
 8002058:	2320      	movs	r3, #32
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	4613      	mov	r3, r2
 8002062:	011b      	lsls	r3, r3, #4
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	331b      	adds	r3, #27
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d119      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x258>
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	331b      	adds	r3, #27
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	78fb      	ldrb	r3, [r7, #3]
 8002088:	015a      	lsls	r2, r3, #5
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4413      	add	r3, r2
 800208e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	78fa      	ldrb	r2, [r7, #3]
 8002096:	0151      	lsls	r1, r2, #5
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	440a      	add	r2, r1
 800209c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a4:	6053      	str	r3, [r2, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	799b      	ldrb	r3, [r3, #6]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d01b      	beq.n	80020e6 <HCD_HC_IN_IRQHandler+0x298>
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	011b      	lsls	r3, r3, #4
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	3330      	adds	r3, #48	@ 0x30
 80020be:	6819      	ldr	r1, [r3, #0]
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	015a      	lsls	r2, r3, #5
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	1ac9      	subs	r1, r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4403      	add	r3, r0
 80020e2:	3338      	adds	r3, #56	@ 0x38
 80020e4:	6019      	str	r1, [r3, #0]
 80020e6:	78fa      	ldrb	r2, [r7, #3]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	011b      	lsls	r3, r3, #4
 80020ee:	1a9b      	subs	r3, r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	334d      	adds	r3, #77	@ 0x4d
 80020f6:	2201      	movs	r2, #1
 80020f8:	701a      	strb	r2, [r3, #0]
 80020fa:	78fa      	ldrb	r2, [r7, #3]
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	3344      	adds	r3, #68	@ 0x44
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	015a      	lsls	r2, r3, #5
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	4413      	add	r3, r2
 8002116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800211a:	461a      	mov	r2, r3
 800211c:	2301      	movs	r3, #1
 800211e:	6093      	str	r3, [r2, #8]
 8002120:	78fa      	ldrb	r2, [r7, #3]
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	4613      	mov	r3, r2
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	1a9b      	subs	r3, r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	3326      	adds	r3, #38	@ 0x26
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HCD_HC_IN_IRQHandler+0x2fe>
 8002136:	78fa      	ldrb	r2, [r7, #3]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	1a9b      	subs	r3, r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3326      	adds	r3, #38	@ 0x26
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b02      	cmp	r3, #2
 800214a:	d110      	bne.n	800216e <HCD_HC_IN_IRQHandler+0x320>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f003 fe8c 	bl	8005e72 <USB_HC_Halt>
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002166:	461a      	mov	r2, r3
 8002168:	2310      	movs	r3, #16
 800216a:	6093      	str	r3, [r2, #8]
 800216c:	e03d      	b.n	80021ea <HCD_HC_IN_IRQHandler+0x39c>
 800216e:	78fa      	ldrb	r2, [r7, #3]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	011b      	lsls	r3, r3, #4
 8002176:	1a9b      	subs	r3, r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	3326      	adds	r3, #38	@ 0x26
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b03      	cmp	r3, #3
 8002182:	d00a      	beq.n	800219a <HCD_HC_IN_IRQHandler+0x34c>
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	1a9b      	subs	r3, r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	3326      	adds	r3, #38	@ 0x26
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d127      	bne.n	80021ea <HCD_HC_IN_IRQHandler+0x39c>
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	78fa      	ldrb	r2, [r7, #3]
 80021aa:	0151      	lsls	r1, r2, #5
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	440a      	add	r2, r1
 80021b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021b8:	6013      	str	r3, [r2, #0]
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	334c      	adds	r3, #76	@ 0x4c
 80021ca:	2201      	movs	r2, #1
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	334c      	adds	r3, #76	@ 0x4c
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	78fb      	ldrb	r3, [r7, #3]
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f006 f99d 	bl	8008524 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	799b      	ldrb	r3, [r3, #6]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d13b      	bne.n	800226a <HCD_HC_IN_IRQHandler+0x41c>
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3338      	adds	r3, #56	@ 0x38
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	1a9b      	subs	r3, r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4403      	add	r3, r0
 8002212:	3328      	adds	r3, #40	@ 0x28
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	440b      	add	r3, r1
 8002218:	1e59      	subs	r1, r3, #1
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4403      	add	r3, r0
 8002228:	3328      	adds	r3, #40	@ 0x28
 800222a:	881b      	ldrh	r3, [r3, #0]
 800222c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 8470 	beq.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	333c      	adds	r3, #60	@ 0x3c
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	f083 0301 	eor.w	r3, r3, #1
 8002252:	b2d8      	uxtb	r0, r3
 8002254:	6879      	ldr	r1, [r7, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	011b      	lsls	r3, r3, #4
 800225a:	1a9b      	subs	r3, r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	333c      	adds	r3, #60	@ 0x3c
 8002262:	4602      	mov	r2, r0
 8002264:	701a      	strb	r2, [r3, #0]
 8002266:	f000 bc58 	b.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	333c      	adds	r3, #60	@ 0x3c
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	333c      	adds	r3, #60	@ 0x3c
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	f000 bc40 	b.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	78fa      	ldrb	r2, [r7, #3]
 80022a0:	4611      	mov	r1, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 f842 	bl	800532c <USB_ReadChInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b20      	cmp	r3, #32
 80022b0:	d131      	bne.n	8002316 <HCD_HC_IN_IRQHandler+0x4c8>
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022be:	461a      	mov	r2, r3
 80022c0:	2320      	movs	r3, #32
 80022c2:	6093      	str	r3, [r2, #8]
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	331a      	adds	r3, #26
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	f040 841f 	bne.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 80022dc:	78fa      	ldrb	r2, [r7, #3]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	1a9b      	subs	r3, r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	331b      	adds	r3, #27
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	334d      	adds	r3, #77	@ 0x4d
 8002300:	2203      	movs	r2, #3
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	4611      	mov	r1, r2
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fdb0 	bl	8005e72 <USB_HC_Halt>
 8002312:	f000 bc02 	b.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	78fa      	ldrb	r2, [r7, #3]
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f804 	bl	800532c <USB_ReadChInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b02      	cmp	r3, #2
 800232c:	f040 8305 	bne.w	800293a <HCD_HC_IN_IRQHandler+0xaec>
 8002330:	78fb      	ldrb	r3, [r7, #3]
 8002332:	015a      	lsls	r2, r3, #5
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4413      	add	r3, r2
 8002338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800233c:	461a      	mov	r2, r3
 800233e:	2302      	movs	r3, #2
 8002340:	6093      	str	r3, [r2, #8]
 8002342:	78fa      	ldrb	r2, [r7, #3]
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	334d      	adds	r3, #77	@ 0x4d
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d114      	bne.n	8002382 <HCD_HC_IN_IRQHandler+0x534>
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	6879      	ldr	r1, [r7, #4]
 800235c:	4613      	mov	r3, r2
 800235e:	011b      	lsls	r3, r3, #4
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	440b      	add	r3, r1
 8002366:	334d      	adds	r3, #77	@ 0x4d
 8002368:	2202      	movs	r2, #2
 800236a:	701a      	strb	r2, [r3, #0]
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	334c      	adds	r3, #76	@ 0x4c
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e2cc      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	334d      	adds	r3, #77	@ 0x4d
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b06      	cmp	r3, #6
 8002396:	d114      	bne.n	80023c2 <HCD_HC_IN_IRQHandler+0x574>
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	334d      	adds	r3, #77	@ 0x4d
 80023a8:	2202      	movs	r2, #2
 80023aa:	701a      	strb	r2, [r3, #0]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334c      	adds	r3, #76	@ 0x4c
 80023bc:	2205      	movs	r2, #5
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e2ac      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	334d      	adds	r3, #77	@ 0x4d
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b07      	cmp	r3, #7
 80023d6:	d00b      	beq.n	80023f0 <HCD_HC_IN_IRQHandler+0x5a2>
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	1a9b      	subs	r3, r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	334d      	adds	r3, #77	@ 0x4d
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b09      	cmp	r3, #9
 80023ec:	f040 80a6 	bne.w	800253c <HCD_HC_IN_IRQHandler+0x6ee>
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334d      	adds	r3, #77	@ 0x4d
 8002400:	2202      	movs	r2, #2
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	78fa      	ldrb	r2, [r7, #3]
 8002406:	6879      	ldr	r1, [r7, #4]
 8002408:	4613      	mov	r3, r2
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	1a9b      	subs	r3, r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	3344      	adds	r3, #68	@ 0x44
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	1c59      	adds	r1, r3, #1
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	4613      	mov	r3, r2
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	3344      	adds	r3, #68	@ 0x44
 8002426:	6019      	str	r1, [r3, #0]
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3344      	adds	r3, #68	@ 0x44
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2b02      	cmp	r3, #2
 800243c:	d943      	bls.n	80024c6 <HCD_HC_IN_IRQHandler+0x678>
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	3344      	adds	r3, #68	@ 0x44
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	331a      	adds	r3, #26
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d123      	bne.n	80024b0 <HCD_HC_IN_IRQHandler+0x662>
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	331b      	adds	r3, #27
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	1a9b      	subs	r3, r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	331c      	adds	r3, #28
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
 8002490:	78fb      	ldrb	r3, [r7, #3]
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4413      	add	r3, r2
 8002498:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	0151      	lsls	r1, r2, #5
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	440a      	add	r2, r1
 80024a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ae:	6053      	str	r3, [r2, #4]
 80024b0:	78fa      	ldrb	r2, [r7, #3]
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	4613      	mov	r3, r2
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	1a9b      	subs	r3, r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	334c      	adds	r3, #76	@ 0x4c
 80024c0:	2204      	movs	r2, #4
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e229      	b.n	800291a <HCD_HC_IN_IRQHandler+0xacc>
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	6879      	ldr	r1, [r7, #4]
 80024ca:	4613      	mov	r3, r2
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	1a9b      	subs	r3, r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	440b      	add	r3, r1
 80024d4:	334c      	adds	r3, #76	@ 0x4c
 80024d6:	2202      	movs	r2, #2
 80024d8:	701a      	strb	r2, [r3, #0]
 80024da:	78fa      	ldrb	r2, [r7, #3]
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	440b      	add	r3, r1
 80024e8:	3326      	adds	r3, #38	@ 0x26
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HCD_HC_IN_IRQHandler+0x6ba>
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	4613      	mov	r3, r2
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	440b      	add	r3, r1
 80024fe:	3326      	adds	r3, #38	@ 0x26
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b02      	cmp	r3, #2
 8002504:	f040 8209 	bne.w	800291a <HCD_HC_IN_IRQHandler+0xacc>
 8002508:	78fb      	ldrb	r3, [r7, #3]
 800250a:	015a      	lsls	r2, r3, #5
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4413      	add	r3, r2
 8002510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002534:	461a      	mov	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	e1ee      	b.n	800291a <HCD_HC_IN_IRQHandler+0xacc>
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	334d      	adds	r3, #77	@ 0x4d
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b05      	cmp	r3, #5
 8002550:	f040 80c8 	bne.w	80026e4 <HCD_HC_IN_IRQHandler+0x896>
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	334d      	adds	r3, #77	@ 0x4d
 8002564:	2202      	movs	r2, #2
 8002566:	701a      	strb	r2, [r3, #0]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	331b      	adds	r3, #27
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	f040 81ce 	bne.w	800291c <HCD_HC_IN_IRQHandler+0xace>
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	3326      	adds	r3, #38	@ 0x26
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d16b      	bne.n	800266e <HCD_HC_IN_IRQHandler+0x820>
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3348      	adds	r3, #72	@ 0x48
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	1c59      	adds	r1, r3, #1
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4403      	add	r3, r0
 80025b6:	3348      	adds	r3, #72	@ 0x48
 80025b8:	6019      	str	r1, [r3, #0]
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3348      	adds	r3, #72	@ 0x48
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d943      	bls.n	8002658 <HCD_HC_IN_IRQHandler+0x80a>
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3348      	adds	r3, #72	@ 0x48
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	6879      	ldr	r1, [r7, #4]
 80025e8:	4613      	mov	r3, r2
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	1a9b      	subs	r3, r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	331b      	adds	r3, #27
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	3344      	adds	r3, #68	@ 0x44
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d809      	bhi.n	8002622 <HCD_HC_IN_IRQHandler+0x7d4>
 800260e:	78fa      	ldrb	r2, [r7, #3]
 8002610:	6879      	ldr	r1, [r7, #4]
 8002612:	4613      	mov	r3, r2
 8002614:	011b      	lsls	r3, r3, #4
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	331c      	adds	r3, #28
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	015a      	lsls	r2, r3, #5
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	4413      	add	r3, r2
 800262a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	0151      	lsls	r1, r2, #5
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	440a      	add	r2, r1
 8002638:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800263c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002640:	6053      	str	r3, [r2, #4]
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	334c      	adds	r3, #76	@ 0x4c
 8002652:	2204      	movs	r2, #4
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e014      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x834>
 8002658:	78fa      	ldrb	r2, [r7, #3]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	1a9b      	subs	r3, r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	334c      	adds	r3, #76	@ 0x4c
 8002668:	2202      	movs	r2, #2
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e009      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x834>
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	6879      	ldr	r1, [r7, #4]
 8002672:	4613      	mov	r3, r2
 8002674:	011b      	lsls	r3, r3, #4
 8002676:	1a9b      	subs	r3, r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	334c      	adds	r3, #76	@ 0x4c
 800267e:	2202      	movs	r2, #2
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	6879      	ldr	r1, [r7, #4]
 8002686:	4613      	mov	r3, r2
 8002688:	011b      	lsls	r3, r3, #4
 800268a:	1a9b      	subs	r3, r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	3326      	adds	r3, #38	@ 0x26
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <HCD_HC_IN_IRQHandler+0x862>
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	3326      	adds	r3, #38	@ 0x26
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	f040 8136 	bne.w	800291c <HCD_HC_IN_IRQHandler+0xace>
 80026b0:	78fb      	ldrb	r3, [r7, #3]
 80026b2:	015a      	lsls	r2, r3, #5
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4413      	add	r3, r2
 80026b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026c6:	60fb      	str	r3, [r7, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	78fb      	ldrb	r3, [r7, #3]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	e11b      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	334d      	adds	r3, #77	@ 0x4d
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b03      	cmp	r3, #3
 80026f8:	f040 8081 	bne.w	80027fe <HCD_HC_IN_IRQHandler+0x9b0>
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	334d      	adds	r3, #77	@ 0x4d
 800270c:	2202      	movs	r2, #2
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	331b      	adds	r3, #27
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	f040 80fa 	bne.w	800291c <HCD_HC_IN_IRQHandler+0xace>
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	011b      	lsls	r3, r3, #4
 8002730:	1a9b      	subs	r3, r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	334c      	adds	r3, #76	@ 0x4c
 8002738:	2202      	movs	r2, #2
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	015a      	lsls	r2, r3, #5
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4413      	add	r3, r2
 8002744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	0151      	lsls	r1, r2, #5
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	440a      	add	r2, r1
 8002752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002756:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275a:	6053      	str	r3, [r2, #4]
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	015a      	lsls	r2, r3, #5
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	4413      	add	r3, r2
 8002764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	0151      	lsls	r1, r2, #5
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	440a      	add	r2, r1
 8002772:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	78fb      	ldrb	r3, [r7, #3]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	0151      	lsls	r1, r2, #5
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	440a      	add	r2, r1
 8002792:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002796:	f023 0320 	bic.w	r3, r3, #32
 800279a:	60d3      	str	r3, [r2, #12]
 800279c:	78fa      	ldrb	r2, [r7, #3]
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	4613      	mov	r3, r2
 80027a2:	011b      	lsls	r3, r3, #4
 80027a4:	1a9b      	subs	r3, r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3326      	adds	r3, #38	@ 0x26
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00b      	beq.n	80027ca <HCD_HC_IN_IRQHandler+0x97c>
 80027b2:	78fa      	ldrb	r2, [r7, #3]
 80027b4:	6879      	ldr	r1, [r7, #4]
 80027b6:	4613      	mov	r3, r2
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a9b      	subs	r3, r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	3326      	adds	r3, #38	@ 0x26
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	f040 80a9 	bne.w	800291c <HCD_HC_IN_IRQHandler+0xace>
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	78fb      	ldrb	r3, [r7, #3]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f6:	461a      	mov	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6013      	str	r3, [r2, #0]
 80027fc:	e08e      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	334d      	adds	r3, #77	@ 0x4d
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d143      	bne.n	800289c <HCD_HC_IN_IRQHandler+0xa4e>
 8002814:	78fa      	ldrb	r2, [r7, #3]
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	1a9b      	subs	r3, r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	334d      	adds	r3, #77	@ 0x4d
 8002824:	2202      	movs	r2, #2
 8002826:	701a      	strb	r2, [r3, #0]
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	334c      	adds	r3, #76	@ 0x4c
 8002838:	2202      	movs	r2, #2
 800283a:	701a      	strb	r2, [r3, #0]
 800283c:	78fa      	ldrb	r2, [r7, #3]
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	4613      	mov	r3, r2
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	1a9b      	subs	r3, r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	440b      	add	r3, r1
 800284a:	3326      	adds	r3, #38	@ 0x26
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HCD_HC_IN_IRQHandler+0xa1a>
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3326      	adds	r3, #38	@ 0x26
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d159      	bne.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e03f      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334d      	adds	r3, #77	@ 0x4d
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d126      	bne.n	8002900 <HCD_HC_IN_IRQHandler+0xab2>
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	334d      	adds	r3, #77	@ 0x4d
 80028c2:	2202      	movs	r2, #2
 80028c4:	701a      	strb	r2, [r3, #0]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3344      	adds	r3, #68	@ 0x44
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	1c59      	adds	r1, r3, #1
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4613      	mov	r3, r2
 80028de:	011b      	lsls	r3, r3, #4
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4403      	add	r3, r0
 80028e6:	3344      	adds	r3, #68	@ 0x44
 80028e8:	6019      	str	r1, [r3, #0]
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	334c      	adds	r3, #76	@ 0x4c
 80028fa:	2204      	movs	r2, #4
 80028fc:	701a      	strb	r2, [r3, #0]
 80028fe:	e00d      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	4613      	mov	r3, r2
 8002906:	011b      	lsls	r3, r3, #4
 8002908:	1a9b      	subs	r3, r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	440b      	add	r3, r1
 800290e:	334d      	adds	r3, #77	@ 0x4d
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b02      	cmp	r3, #2
 8002914:	f000 8100 	beq.w	8002b18 <HCD_HC_IN_IRQHandler+0xcca>
 8002918:	e000      	b.n	800291c <HCD_HC_IN_IRQHandler+0xace>
 800291a:	bf00      	nop
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334c      	adds	r3, #76	@ 0x4c
 800292c:	781a      	ldrb	r2, [r3, #0]
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	4619      	mov	r1, r3
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f005 fdf6 	bl	8008524 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002938:	e0ef      	b.n	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f002 fcf2 	bl	800532c <USB_ReadChInterrupts>
 8002948:	4603      	mov	r3, r0
 800294a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294e:	2b40      	cmp	r3, #64	@ 0x40
 8002950:	d12f      	bne.n	80029b2 <HCD_HC_IN_IRQHandler+0xb64>
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295e:	461a      	mov	r2, r3
 8002960:	2340      	movs	r3, #64	@ 0x40
 8002962:	6093      	str	r3, [r2, #8]
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	334d      	adds	r3, #77	@ 0x4d
 8002974:	2205      	movs	r2, #5
 8002976:	701a      	strb	r2, [r3, #0]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	331a      	adds	r3, #26
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0xb54>
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	3344      	adds	r3, #68	@ 0x44
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 fa61 	bl	8005e72 <USB_HC_Halt>
 80029b0:	e0b3      	b.n	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f002 fcb6 	bl	800532c <USB_ReadChInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f003 0310 	and.w	r3, r3, #16
 80029c6:	2b10      	cmp	r3, #16
 80029c8:	f040 80a7 	bne.w	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 80029cc:	78fa      	ldrb	r2, [r7, #3]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	1a9b      	subs	r3, r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3326      	adds	r3, #38	@ 0x26
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d11b      	bne.n	8002a1a <HCD_HC_IN_IRQHandler+0xbcc>
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	1a9b      	subs	r3, r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	440b      	add	r3, r1
 80029f0:	3344      	adds	r3, #68	@ 0x44
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	334d      	adds	r3, #77	@ 0x4d
 8002a06:	2204      	movs	r2, #4
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	78fa      	ldrb	r2, [r7, #3]
 8002a10:	4611      	mov	r1, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 fa2d 	bl	8005e72 <USB_HC_Halt>
 8002a18:	e03f      	b.n	8002a9a <HCD_HC_IN_IRQHandler+0xc4c>
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3326      	adds	r3, #38	@ 0x26
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00a      	beq.n	8002a46 <HCD_HC_IN_IRQHandler+0xbf8>
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3326      	adds	r3, #38	@ 0x26
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d129      	bne.n	8002a9a <HCD_HC_IN_IRQHandler+0xc4c>
 8002a46:	78fa      	ldrb	r2, [r7, #3]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	1a9b      	subs	r3, r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	440b      	add	r3, r1
 8002a54:	3344      	adds	r3, #68	@ 0x44
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	799b      	ldrb	r3, [r3, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	4613      	mov	r3, r2
 8002a68:	011b      	lsls	r3, r3, #4
 8002a6a:	1a9b      	subs	r3, r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	331b      	adds	r3, #27
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d110      	bne.n	8002a9a <HCD_HC_IN_IRQHandler+0xc4c>
 8002a78:	78fa      	ldrb	r2, [r7, #3]
 8002a7a:	6879      	ldr	r1, [r7, #4]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	334d      	adds	r3, #77	@ 0x4d
 8002a88:	2204      	movs	r2, #4
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 f9ec 	bl	8005e72 <USB_HC_Halt>
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	331b      	adds	r3, #27
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d129      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0xcb6>
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	331b      	adds	r3, #27
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	78fa      	ldrb	r2, [r7, #3]
 8002ad4:	0151      	lsls	r1, r2, #5
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	440a      	add	r2, r1
 8002ada:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ade:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ae2:	6053      	str	r3, [r2, #4]
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	78fa      	ldrb	r2, [r7, #3]
 8002af4:	0151      	lsls	r1, r2, #5
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	440a      	add	r2, r1
 8002afa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	015a      	lsls	r2, r3, #5
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b10:	461a      	mov	r2, r3
 8002b12:	2310      	movs	r3, #16
 8002b14:	6093      	str	r3, [r2, #8]
 8002b16:	e000      	b.n	8002b1a <HCD_HC_IN_IRQHandler+0xccc>
 8002b18:	bf00      	nop
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HCD_HC_OUT_IRQHandler>:
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	460b      	mov	r3, r1
 8002b2a:	70fb      	strb	r3, [r7, #3]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f002 fbf4 	bl	800532c <USB_ReadChInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d11b      	bne.n	8002b86 <HCD_HC_OUT_IRQHandler+0x66>
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	015a      	lsls	r2, r3, #5
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	4413      	add	r3, r2
 8002b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	2304      	movs	r3, #4
 8002b5e:	6093      	str	r3, [r2, #8]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334d      	adds	r3, #77	@ 0x4d
 8002b70:	2207      	movs	r2, #7
 8002b72:	701a      	strb	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f003 f978 	bl	8005e72 <USB_HC_Halt>
 8002b82:	f000 bc6f 	b.w	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 fbcc 	bl	800532c <USB_ReadChInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	f040 8082 	bne.w	8002ca4 <HCD_HC_OUT_IRQHandler+0x184>
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	461a      	mov	r2, r3
 8002bae:	2320      	movs	r3, #32
 8002bb0:	6093      	str	r3, [r2, #8]
 8002bb2:	78fa      	ldrb	r2, [r7, #3]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	011b      	lsls	r3, r3, #4
 8002bba:	1a9b      	subs	r3, r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3319      	adds	r3, #25
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d124      	bne.n	8002c12 <HCD_HC_OUT_IRQHandler+0xf2>
 8002bc8:	78fa      	ldrb	r2, [r7, #3]
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	440b      	add	r3, r1
 8002bd6:	3319      	adds	r3, #25
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	78fa      	ldrb	r2, [r7, #3]
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4613      	mov	r3, r2
 8002be2:	011b      	lsls	r3, r3, #4
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	334c      	adds	r3, #76	@ 0x4c
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	2203      	movs	r2, #3
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f003 f930 	bl	8005e72 <USB_HC_Halt>
 8002c12:	78fa      	ldrb	r2, [r7, #3]
 8002c14:	6879      	ldr	r1, [r7, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	1a9b      	subs	r3, r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	440b      	add	r3, r1
 8002c20:	331a      	adds	r3, #26
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 841d 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	331b      	adds	r3, #27
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f040 8411 	bne.w	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002c42:	78fa      	ldrb	r2, [r7, #3]
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	4613      	mov	r3, r2
 8002c48:	011b      	lsls	r3, r3, #4
 8002c4a:	1a9b      	subs	r3, r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	440b      	add	r3, r1
 8002c50:	3326      	adds	r3, #38	@ 0x26
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d009      	beq.n	8002c6c <HCD_HC_OUT_IRQHandler+0x14c>
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	331b      	adds	r3, #27
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334d      	adds	r3, #77	@ 0x4d
 8002c7c:	2203      	movs	r2, #3
 8002c7e:	701a      	strb	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 f8f2 	bl	8005e72 <USB_HC_Halt>
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3344      	adds	r3, #68	@ 0x44
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e3df      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f002 fb3d 	bl	800532c <USB_ReadChInterrupts>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cbc:	d111      	bne.n	8002ce2 <HCD_HC_OUT_IRQHandler+0x1c2>
 8002cbe:	78fb      	ldrb	r3, [r7, #3]
 8002cc0:	015a      	lsls	r2, r3, #5
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cca:	461a      	mov	r2, r3
 8002ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cd0:	6093      	str	r3, [r2, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f003 f8c9 	bl	8005e72 <USB_HC_Halt>
 8002ce0:	e3c0      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	4611      	mov	r1, r2
 8002cea:	4618      	mov	r0, r3
 8002cec:	f002 fb1e 	bl	800532c <USB_ReadChInterrupts>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d168      	bne.n	8002dcc <HCD_HC_OUT_IRQHandler+0x2ac>
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	3344      	adds	r3, #68	@ 0x44
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fb08 	bl	800532c <USB_ReadChInterrupts>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d22:	2b40      	cmp	r3, #64	@ 0x40
 8002d24:	d112      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x22c>
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3319      	adds	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2340      	movs	r3, #64	@ 0x40
 8002d4a:	6093      	str	r3, [r2, #8]
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d019      	beq.n	8002d96 <HCD_HC_OUT_IRQHandler+0x276>
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	331b      	adds	r3, #27
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	0151      	lsls	r1, r2, #5
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	440a      	add	r2, r1
 8002d8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d94:	6053      	str	r3, [r2, #4]
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	461a      	mov	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	6093      	str	r3, [r2, #8]
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334d      	adds	r3, #77	@ 0x4d
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	4611      	mov	r1, r2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 f854 	bl	8005e72 <USB_HC_Halt>
 8002dca:	e34b      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 faa9 	bl	800532c <USB_ReadChInterrupts>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de0:	2b40      	cmp	r3, #64	@ 0x40
 8002de2:	d139      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x338>
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	440b      	add	r3, r1
 8002df2:	334d      	adds	r3, #77	@ 0x4d
 8002df4:	2205      	movs	r2, #5
 8002df6:	701a      	strb	r2, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	1a9b      	subs	r3, r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	331a      	adds	r3, #26
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HCD_HC_OUT_IRQHandler+0x302>
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	1a9b      	subs	r3, r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3319      	adds	r3, #25
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	440b      	add	r3, r1
 8002e30:	3344      	adds	r3, #68	@ 0x44
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f003 f817 	bl	8005e72 <USB_HC_Halt>
 8002e44:	78fb      	ldrb	r3, [r7, #3]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e50:	461a      	mov	r2, r3
 8002e52:	2340      	movs	r3, #64	@ 0x40
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	e305      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f002 fa63 	bl	800532c <USB_ReadChInterrupts>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d11a      	bne.n	8002ea6 <HCD_HC_OUT_IRQHandler+0x386>
 8002e70:	78fb      	ldrb	r3, [r7, #3]
 8002e72:	015a      	lsls	r2, r3, #5
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	4413      	add	r3, r2
 8002e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	2308      	movs	r3, #8
 8002e80:	6093      	str	r3, [r2, #8]
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	334d      	adds	r3, #77	@ 0x4d
 8002e92:	2206      	movs	r2, #6
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	4611      	mov	r1, r2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f002 ffe7 	bl	8005e72 <USB_HC_Halt>
 8002ea4:	e2de      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f002 fa3c 	bl	800532c <USB_ReadChInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d144      	bne.n	8002f48 <HCD_HC_OUT_IRQHandler+0x428>
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3344      	adds	r3, #68	@ 0x44
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]
 8002ed2:	78fa      	ldrb	r2, [r7, #3]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	1a9b      	subs	r3, r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	334d      	adds	r3, #77	@ 0x4d
 8002ee2:	2204      	movs	r2, #4
 8002ee4:	701a      	strb	r2, [r3, #0]
 8002ee6:	78fa      	ldrb	r2, [r7, #3]
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	4613      	mov	r3, r2
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	1a9b      	subs	r3, r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3319      	adds	r3, #25
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d114      	bne.n	8002f26 <HCD_HC_OUT_IRQHandler+0x406>
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d109      	bne.n	8002f26 <HCD_HC_OUT_IRQHandler+0x406>
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	6879      	ldr	r1, [r7, #4]
 8002f16:	4613      	mov	r3, r2
 8002f18:	011b      	lsls	r3, r3, #4
 8002f1a:	1a9b      	subs	r3, r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3319      	adds	r3, #25
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f002 ff9f 	bl	8005e72 <USB_HC_Halt>
 8002f34:	78fb      	ldrb	r3, [r7, #3]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f40:	461a      	mov	r2, r3
 8002f42:	2310      	movs	r3, #16
 8002f44:	6093      	str	r3, [r2, #8]
 8002f46:	e28d      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	78fa      	ldrb	r2, [r7, #3]
 8002f4e:	4611      	mov	r1, r2
 8002f50:	4618      	mov	r0, r3
 8002f52:	f002 f9eb 	bl	800532c <USB_ReadChInterrupts>
 8002f56:	4603      	mov	r3, r0
 8002f58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f5c:	2b80      	cmp	r3, #128	@ 0x80
 8002f5e:	d169      	bne.n	8003034 <HCD_HC_OUT_IRQHandler+0x514>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	799b      	ldrb	r3, [r3, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d111      	bne.n	8002f8c <HCD_HC_OUT_IRQHandler+0x46c>
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334d      	adds	r3, #77	@ 0x4d
 8002f78:	2207      	movs	r2, #7
 8002f7a:	701a      	strb	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 ff74 	bl	8005e72 <USB_HC_Halt>
 8002f8a:	e049      	b.n	8003020 <HCD_HC_OUT_IRQHandler+0x500>
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	@ 0x44
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	1c59      	adds	r1, r3, #1
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4403      	add	r3, r0
 8002fac:	3344      	adds	r3, #68	@ 0x44
 8002fae:	6019      	str	r1, [r3, #0]
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3344      	adds	r3, #68	@ 0x44
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d922      	bls.n	800300c <HCD_HC_OUT_IRQHandler+0x4ec>
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	3344      	adds	r3, #68	@ 0x44
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	334c      	adds	r3, #76	@ 0x4c
 8002fea:	2204      	movs	r2, #4
 8002fec:	701a      	strb	r2, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	334c      	adds	r3, #76	@ 0x4c
 8002ffe:	781a      	ldrb	r2, [r3, #0]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f005 fa8d 	bl	8008524 <HAL_HCD_HC_NotifyURBChange_Callback>
 800300a:	e009      	b.n	8003020 <HCD_HC_OUT_IRQHandler+0x500>
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	6093      	str	r3, [r2, #8]
 8003032:	e217      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	78fa      	ldrb	r2, [r7, #3]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f002 f975 	bl	800532c <USB_ReadChInterrupts>
 8003042:	4603      	mov	r3, r0
 8003044:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003048:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800304c:	d11b      	bne.n	8003086 <HCD_HC_OUT_IRQHandler+0x566>
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	334d      	adds	r3, #77	@ 0x4d
 800305e:	2209      	movs	r2, #9
 8003060:	701a      	strb	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f002 ff01 	bl	8005e72 <USB_HC_Halt>
 8003070:	78fb      	ldrb	r3, [r7, #3]
 8003072:	015a      	lsls	r2, r3, #5
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	4413      	add	r3, r2
 8003078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800307c:	461a      	mov	r2, r3
 800307e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003082:	6093      	str	r3, [r2, #8]
 8003084:	e1ee      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	4611      	mov	r1, r2
 800308e:	4618      	mov	r0, r3
 8003090:	f002 f94c 	bl	800532c <USB_ReadChInterrupts>
 8003094:	4603      	mov	r3, r0
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	f040 81df 	bne.w	800345e <HCD_HC_OUT_IRQHandler+0x93e>
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	2302      	movs	r3, #2
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 8093 	bne.w	80031f0 <HCD_HC_OUT_IRQHandler+0x6d0>
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	334d      	adds	r3, #77	@ 0x4d
 80030da:	2202      	movs	r2, #2
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334c      	adds	r3, #76	@ 0x4c
 80030ee:	2201      	movs	r2, #1
 80030f0:	701a      	strb	r2, [r3, #0]
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3326      	adds	r3, #38	@ 0x26
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b02      	cmp	r3, #2
 8003106:	d00b      	beq.n	8003120 <HCD_HC_OUT_IRQHandler+0x600>
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3326      	adds	r3, #38	@ 0x26
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b03      	cmp	r3, #3
 800311c:	f040 8190 	bne.w	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	799b      	ldrb	r3, [r3, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d115      	bne.n	8003154 <HCD_HC_OUT_IRQHandler+0x634>
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	1a9b      	subs	r3, r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	333d      	adds	r3, #61	@ 0x3d
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	f083 0301 	eor.w	r3, r3, #1
 8003140:	b2d8      	uxtb	r0, r3
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	333d      	adds	r3, #61	@ 0x3d
 8003150:	4602      	mov	r2, r0
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	799b      	ldrb	r3, [r3, #6]
 8003158:	2b01      	cmp	r3, #1
 800315a:	f040 8171 	bne.w	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 800315e:	78fa      	ldrb	r2, [r7, #3]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	3334      	adds	r3, #52	@ 0x34
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 8165 	beq.w	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3334      	adds	r3, #52	@ 0x34
 8003186:	6819      	ldr	r1, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1a9b      	subs	r3, r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4403      	add	r3, r0
 8003196:	3328      	adds	r3, #40	@ 0x28
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	440b      	add	r3, r1
 800319c:	1e59      	subs	r1, r3, #1
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4403      	add	r3, r0
 80031ac:	3328      	adds	r3, #40	@ 0x28
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 813f 	beq.w	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	333d      	adds	r3, #61	@ 0x3d
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	78fa      	ldrb	r2, [r7, #3]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2d8      	uxtb	r0, r3
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	333d      	adds	r3, #61	@ 0x3d
 80031ea:	4602      	mov	r2, r0
 80031ec:	701a      	strb	r2, [r3, #0]
 80031ee:	e127      	b.n	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	334d      	adds	r3, #77	@ 0x4d
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b03      	cmp	r3, #3
 8003204:	d120      	bne.n	8003248 <HCD_HC_OUT_IRQHandler+0x728>
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	334d      	adds	r3, #77	@ 0x4d
 8003216:	2202      	movs	r2, #2
 8003218:	701a      	strb	r2, [r3, #0]
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	331b      	adds	r3, #27
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 8107 	bne.w	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	334c      	adds	r3, #76	@ 0x4c
 8003242:	2202      	movs	r2, #2
 8003244:	701a      	strb	r2, [r3, #0]
 8003246:	e0fb      	b.n	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	@ 0x4d
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b04      	cmp	r3, #4
 800325c:	d13a      	bne.n	80032d4 <HCD_HC_OUT_IRQHandler+0x7b4>
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	334d      	adds	r3, #77	@ 0x4d
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	334c      	adds	r3, #76	@ 0x4c
 8003282:	2202      	movs	r2, #2
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	331b      	adds	r3, #27
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b01      	cmp	r3, #1
 800329a:	f040 80d1 	bne.w	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	331b      	adds	r3, #27
 80032ae:	2200      	movs	r2, #0
 80032b0:	701a      	strb	r2, [r3, #0]
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	0151      	lsls	r1, r2, #5
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	440a      	add	r2, r1
 80032c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032d0:	6053      	str	r3, [r2, #4]
 80032d2:	e0b5      	b.n	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	334d      	adds	r3, #77	@ 0x4d
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b05      	cmp	r3, #5
 80032e8:	d114      	bne.n	8003314 <HCD_HC_OUT_IRQHandler+0x7f4>
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	334d      	adds	r3, #77	@ 0x4d
 80032fa:	2202      	movs	r2, #2
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	334c      	adds	r3, #76	@ 0x4c
 800330e:	2202      	movs	r2, #2
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e095      	b.n	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	334d      	adds	r3, #77	@ 0x4d
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	2b06      	cmp	r3, #6
 8003328:	d114      	bne.n	8003354 <HCD_HC_OUT_IRQHandler+0x834>
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	334d      	adds	r3, #77	@ 0x4d
 800333a:	2202      	movs	r2, #2
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	4613      	mov	r3, r2
 8003344:	011b      	lsls	r3, r3, #4
 8003346:	1a9b      	subs	r3, r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	334c      	adds	r3, #76	@ 0x4c
 800334e:	2205      	movs	r2, #5
 8003350:	701a      	strb	r2, [r3, #0]
 8003352:	e075      	b.n	8003440 <HCD_HC_OUT_IRQHandler+0x920>
 8003354:	78fa      	ldrb	r2, [r7, #3]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	1a9b      	subs	r3, r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	334d      	adds	r3, #77	@ 0x4d
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b07      	cmp	r3, #7
 8003368:	d00a      	beq.n	8003380 <HCD_HC_OUT_IRQHandler+0x860>
 800336a:	78fa      	ldrb	r2, [r7, #3]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	1a9b      	subs	r3, r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	440b      	add	r3, r1
 8003378:	334d      	adds	r3, #77	@ 0x4d
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b09      	cmp	r3, #9
 800337e:	d170      	bne.n	8003462 <HCD_HC_OUT_IRQHandler+0x942>
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4613      	mov	r3, r2
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	334d      	adds	r3, #77	@ 0x4d
 8003390:	2202      	movs	r2, #2
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3344      	adds	r3, #68	@ 0x44
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c59      	adds	r1, r3, #1
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	3344      	adds	r3, #68	@ 0x44
 80033b6:	6019      	str	r1, [r3, #0]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3344      	adds	r3, #68	@ 0x44
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d914      	bls.n	80033f8 <HCD_HC_OUT_IRQHandler+0x8d8>
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	4613      	mov	r3, r2
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	1a9b      	subs	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	440b      	add	r3, r1
 80033dc:	3344      	adds	r3, #68	@ 0x44
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
 80033e2:	78fa      	ldrb	r2, [r7, #3]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	011b      	lsls	r3, r3, #4
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	440b      	add	r3, r1
 80033f0:	334c      	adds	r3, #76	@ 0x4c
 80033f2:	2204      	movs	r2, #4
 80033f4:	701a      	strb	r2, [r3, #0]
 80033f6:	e022      	b.n	800343e <HCD_HC_OUT_IRQHandler+0x91e>
 80033f8:	78fa      	ldrb	r2, [r7, #3]
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	334c      	adds	r3, #76	@ 0x4c
 8003408:	2202      	movs	r2, #2
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4413      	add	r3, r2
 8003414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003438:	461a      	mov	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	bf00      	nop
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	334c      	adds	r3, #76	@ 0x4c
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	4619      	mov	r1, r3
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f005 f864 	bl	8008524 <HAL_HCD_HC_NotifyURBChange_Callback>
 800345c:	e002      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 800345e:	bf00      	nop
 8003460:	e000      	b.n	8003464 <HCD_HC_OUT_IRQHandler+0x944>
 8003462:	bf00      	nop
 8003464:	3718      	adds	r7, #24
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HCD_RXQLVL_IRQHandler>:
 800346a:	b580      	push	{r7, lr}
 800346c:	b08a      	sub	sp, #40	@ 0x28
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	627b      	str	r3, [r7, #36]	@ 0x24
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	623b      	str	r3, [r7, #32]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	61fb      	str	r3, [r7, #28]
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	0c5b      	lsrs	r3, r3, #17
 8003490:	f003 030f 	and.w	r3, r3, #15
 8003494:	617b      	str	r3, [r7, #20]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d004      	beq.n	80034b0 <HCD_RXQLVL_IRQHandler+0x46>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b05      	cmp	r3, #5
 80034aa:	f000 80b6 	beq.w	800361a <HCD_RXQLVL_IRQHandler+0x1b0>
 80034ae:	e0b7      	b.n	8003620 <HCD_RXQLVL_IRQHandler+0x1b6>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	f000 80b3 	beq.w	800361e <HCD_RXQLVL_IRQHandler+0x1b4>
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	332c      	adds	r3, #44	@ 0x2c
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80a7 	beq.w	800361e <HCD_RXQLVL_IRQHandler+0x1b4>
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4613      	mov	r3, r2
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	3338      	adds	r3, #56	@ 0x38
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	18d1      	adds	r1, r2, r3
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	3334      	adds	r3, #52	@ 0x34
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4299      	cmp	r1, r3
 80034fa:	f200 8083 	bhi.w	8003604 <HCD_RXQLVL_IRQHandler+0x19a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	332c      	adds	r3, #44	@ 0x2c
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	b292      	uxth	r2, r2
 8003518:	4619      	mov	r1, r3
 800351a:	f001 fe9c 	bl	8005256 <USB_ReadPacket>
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4613      	mov	r3, r2
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	1a9b      	subs	r3, r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	332c      	adds	r3, #44	@ 0x2c
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	18d1      	adds	r1, r2, r3
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4403      	add	r3, r0
 8003542:	332c      	adds	r3, #44	@ 0x2c
 8003544:	6019      	str	r1, [r3, #0]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3338      	adds	r3, #56	@ 0x38
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	18d1      	adds	r1, r2, r3
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4403      	add	r3, r0
 800356a:	3338      	adds	r3, #56	@ 0x38
 800356c:	6019      	str	r1, [r3, #0]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	015a      	lsls	r2, r3, #5
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	4413      	add	r3, r2
 8003576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	0cdb      	lsrs	r3, r3, #19
 800357e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003582:	60fb      	str	r3, [r7, #12]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	3328      	adds	r3, #40	@ 0x28
 8003594:	881b      	ldrh	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4293      	cmp	r3, r2
 800359c:	d13f      	bne.n	800361e <HCD_RXQLVL_IRQHandler+0x1b4>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d03c      	beq.n	800361e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60bb      	str	r3, [r7, #8]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	015a      	lsls	r2, r3, #5
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	4413      	add	r3, r2
 80035cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d0:	461a      	mov	r2, r3
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	333c      	adds	r3, #60	@ 0x3c
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2d8      	uxtb	r0, r3
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	333c      	adds	r3, #60	@ 0x3c
 80035fe:	4602      	mov	r2, r0
 8003600:	701a      	strb	r2, [r3, #0]
 8003602:	e00c      	b.n	800361e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4613      	mov	r3, r2
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	440b      	add	r3, r1
 8003612:	334c      	adds	r3, #76	@ 0x4c
 8003614:	2204      	movs	r2, #4
 8003616:	701a      	strb	r2, [r3, #0]
 8003618:	e001      	b.n	800361e <HCD_RXQLVL_IRQHandler+0x1b4>
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <HCD_RXQLVL_IRQHandler+0x1b6>
 800361e:	bf00      	nop
 8003620:	bf00      	nop
 8003622:	3728      	adds	r7, #40	@ 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HCD_Port_IRQHandler>:
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	613b      	str	r3, [r7, #16]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003654:	60bb      	str	r3, [r7, #8]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b02      	cmp	r3, #2
 800365e:	d10b      	bne.n	8003678 <HCD_Port_IRQHandler+0x50>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d102      	bne.n	8003670 <HCD_Port_IRQHandler+0x48>
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f004 ff3e 	bl	80084ec <HAL_HCD_Connect_Callback>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f043 0302 	orr.w	r3, r3, #2
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d132      	bne.n	80036e8 <HCD_Port_IRQHandler+0xc0>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f043 0308 	orr.w	r3, r3, #8
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b04      	cmp	r3, #4
 8003692:	d126      	bne.n	80036e2 <HCD_Port_IRQHandler+0xba>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7a5b      	ldrb	r3, [r3, #9]
 8003698:	2b02      	cmp	r3, #2
 800369a:	d113      	bne.n	80036c4 <HCD_Port_IRQHandler+0x9c>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036a6:	d106      	bne.n	80036b6 <HCD_Port_IRQHandler+0x8e>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2102      	movs	r1, #2
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 ff60 	bl	8005574 <USB_InitFSLSPClkSel>
 80036b4:	e011      	b.n	80036da <HCD_Port_IRQHandler+0xb2>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2101      	movs	r1, #1
 80036bc:	4618      	mov	r0, r3
 80036be:	f001 ff59 	bl	8005574 <USB_InitFSLSPClkSel>
 80036c2:	e00a      	b.n	80036da <HCD_Port_IRQHandler+0xb2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	79db      	ldrb	r3, [r3, #7]
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d106      	bne.n	80036da <HCD_Port_IRQHandler+0xb2>
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036d2:	461a      	mov	r2, r3
 80036d4:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80036d8:	6053      	str	r3, [r2, #4]
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f004 ff30 	bl	8008540 <HAL_HCD_PortEnabled_Callback>
 80036e0:	e002      	b.n	80036e8 <HCD_Port_IRQHandler+0xc0>
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f004 ff3a 	bl	800855c <HAL_HCD_PortDisabled_Callback>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b20      	cmp	r3, #32
 80036f0:	d103      	bne.n	80036fa <HCD_Port_IRQHandler+0xd2>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f043 0320 	orr.w	r3, r3, #32
 80036f8:	60bb      	str	r3, [r7, #8]
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003700:	461a      	mov	r2, r3
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_I2C_Init>:
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_I2C_Init+0x12>
 800371e:	2301      	movs	r3, #1
 8003720:	e12b      	b.n	800397a <HAL_I2C_Init+0x26a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_I2C_Init+0x2c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd f998 	bl	8000a6c <HAL_I2C_MspInit>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	@ 0x24
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0201 	bic.w	r2, r2, #1
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f001 fa20 	bl	8004bb8 <HAL_RCC_GetPCLK1Freq>
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4a81      	ldr	r2, [pc, #516]	@ (8003984 <HAL_I2C_Init+0x274>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d807      	bhi.n	8003794 <HAL_I2C_Init+0x84>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a80      	ldr	r2, [pc, #512]	@ (8003988 <HAL_I2C_Init+0x278>)
 8003788:	4293      	cmp	r3, r2
 800378a:	bf94      	ite	ls
 800378c:	2301      	movls	r3, #1
 800378e:	2300      	movhi	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e006      	b.n	80037a2 <HAL_I2C_Init+0x92>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a7d      	ldr	r2, [pc, #500]	@ (800398c <HAL_I2C_Init+0x27c>)
 8003798:	4293      	cmp	r3, r2
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Init+0x9a>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0e7      	b.n	800397a <HAL_I2C_Init+0x26a>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4a78      	ldr	r2, [pc, #480]	@ (8003990 <HAL_I2C_Init+0x280>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	0c9b      	lsrs	r3, r3, #18
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68ba      	ldr	r2, [r7, #8]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003984 <HAL_I2C_Init+0x274>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d802      	bhi.n	80037e4 <HAL_I2C_Init+0xd4>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	3301      	adds	r3, #1
 80037e2:	e009      	b.n	80037f8 <HAL_I2C_Init+0xe8>
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80037ea:	fb02 f303 	mul.w	r3, r2, r3
 80037ee:	4a69      	ldr	r2, [pc, #420]	@ (8003994 <HAL_I2C_Init+0x284>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	099b      	lsrs	r3, r3, #6
 80037f6:	3301      	adds	r3, #1
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	430b      	orrs	r3, r1
 80037fe:	6213      	str	r3, [r2, #32]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	69db      	ldr	r3, [r3, #28]
 8003806:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800380a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	495c      	ldr	r1, [pc, #368]	@ (8003984 <HAL_I2C_Init+0x274>)
 8003814:	428b      	cmp	r3, r1
 8003816:	d819      	bhi.n	800384c <HAL_I2C_Init+0x13c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e59      	subs	r1, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	fbb1 f3f3 	udiv	r3, r1, r3
 8003826:	1c59      	adds	r1, r3, #1
 8003828:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800382c:	400b      	ands	r3, r1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <HAL_I2C_Init+0x138>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1e59      	subs	r1, r3, #1
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003846:	e051      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 8003848:	2304      	movs	r3, #4
 800384a:	e04f      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d111      	bne.n	8003878 <HAL_I2C_Init+0x168>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e58      	subs	r0, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	460b      	mov	r3, r1
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	e012      	b.n	800389e <HAL_I2C_Init+0x18e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	440b      	add	r3, r1
 8003886:	0099      	lsls	r1, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Init+0x196>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e022      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10e      	bne.n	80038cc <HAL_I2C_Init+0x1bc>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1e58      	subs	r0, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	440b      	add	r3, r1
 80038bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c0:	3301      	adds	r3, #1
 80038c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ca:	e00f      	b.n	80038ec <HAL_I2C_Init+0x1dc>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1e58      	subs	r0, r3, #1
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6859      	ldr	r1, [r3, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	0099      	lsls	r1, r3, #2
 80038dc:	440b      	add	r3, r1
 80038de:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e2:	3301      	adds	r3, #1
 80038e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	6809      	ldr	r1, [r1, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	61cb      	str	r3, [r1, #28]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800391a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6911      	ldr	r1, [r2, #16]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68d2      	ldr	r2, [r2, #12]
 8003926:	4311      	orrs	r1, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6812      	ldr	r2, [r2, #0]
 800392c:	430b      	orrs	r3, r1
 800392e:	6093      	str	r3, [r2, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695a      	ldr	r2, [r3, #20]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	641a      	str	r2, [r3, #64]	@ 0x40
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003978:	2300      	movs	r3, #0
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	000186a0 	.word	0x000186a0
 8003988:	001e847f 	.word	0x001e847f
 800398c:	003d08ff 	.word	0x003d08ff
 8003990:	431bde83 	.word	0x431bde83
 8003994:	10624dd3 	.word	0x10624dd3

08003998 <HAL_I2S_Init>:
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_I2S_Init+0x12>
 80039a6:	2301      	movs	r3, #1
 80039a8:	e128      	b.n	8003bfc <HAL_I2S_Init+0x264>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d109      	bne.n	80039ca <HAL_I2S_Init+0x32>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a90      	ldr	r2, [pc, #576]	@ (8003c04 <HAL_I2S_Init+0x26c>)
 80039c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f7fd f899 	bl	8000afc <HAL_I2S_MspInit>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2202      	movs	r2, #2
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80039e0:	f023 030f 	bic.w	r3, r3, #15
 80039e4:	61d3      	str	r3, [r2, #28]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2202      	movs	r2, #2
 80039ec:	621a      	str	r2, [r3, #32]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d060      	beq.n	8003ab8 <HAL_I2S_Init+0x120>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <HAL_I2S_Init+0x6c>
 80039fe:	2310      	movs	r3, #16
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e001      	b.n	8003a08 <HAL_I2S_Init+0x70>
 8003a04:	2320      	movs	r3, #32
 8003a06:	617b      	str	r3, [r7, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d802      	bhi.n	8003a16 <HAL_I2S_Init+0x7e>
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	2001      	movs	r0, #1
 8003a18:	f001 f9c4 	bl	8004da4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a26:	d125      	bne.n	8003a74 <HAL_I2S_Init+0xdc>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d010      	beq.n	8003a52 <HAL_I2S_Init+0xba>
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	461a      	mov	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a4c:	3305      	adds	r3, #5
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	e01f      	b.n	8003a92 <HAL_I2S_Init+0xfa>
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	461a      	mov	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6e:	3305      	adds	r3, #5
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	e00e      	b.n	8003a92 <HAL_I2S_Init+0xfa>
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	461a      	mov	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8e:	3305      	adds	r3, #5
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4a5c      	ldr	r2, [pc, #368]	@ (8003c08 <HAL_I2S_Init+0x270>)
 8003a96:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9a:	08db      	lsrs	r3, r3, #3
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	085b      	lsrs	r3, r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	61bb      	str	r3, [r7, #24]
 8003ab6:	e003      	b.n	8003ac0 <HAL_I2S_Init+0x128>
 8003ab8:	2302      	movs	r3, #2
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d902      	bls.n	8003acc <HAL_I2S_Init+0x134>
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	2bff      	cmp	r3, #255	@ 0xff
 8003aca:	d907      	bls.n	8003adc <HAL_I2S_Init+0x144>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad0:	f043 0210 	orr.w	r2, r3, #16
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	645a      	str	r2, [r3, #68]	@ 0x44
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e08f      	b.n	8003bfc <HAL_I2S_Init+0x264>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691a      	ldr	r2, [r3, #16]
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	ea42 0103 	orr.w	r1, r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	621a      	str	r2, [r3, #32]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003afa:	f023 030f 	bic.w	r3, r3, #15
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6851      	ldr	r1, [r2, #4]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	4311      	orrs	r1, r2
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	68d2      	ldr	r2, [r2, #12]
 8003b0c:	4311      	orrs	r1, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6992      	ldr	r2, [r2, #24]
 8003b12:	430a      	orrs	r2, r1
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b1e:	61da      	str	r2, [r3, #28]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d161      	bne.n	8003bec <HAL_I2S_Init+0x254>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a38      	ldr	r2, [pc, #224]	@ (8003c0c <HAL_I2S_Init+0x274>)
 8003b2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a37      	ldr	r2, [pc, #220]	@ (8003c10 <HAL_I2S_Init+0x278>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d101      	bne.n	8003b3c <HAL_I2S_Init+0x1a4>
 8003b38:	4b36      	ldr	r3, [pc, #216]	@ (8003c14 <HAL_I2S_Init+0x27c>)
 8003b3a:	e001      	b.n	8003b40 <HAL_I2S_Init+0x1a8>
 8003b3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	4932      	ldr	r1, [pc, #200]	@ (8003c10 <HAL_I2S_Init+0x278>)
 8003b48:	428a      	cmp	r2, r1
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2S_Init+0x1b8>
 8003b4c:	4a31      	ldr	r2, [pc, #196]	@ (8003c14 <HAL_I2S_Init+0x27c>)
 8003b4e:	e001      	b.n	8003b54 <HAL_I2S_Init+0x1bc>
 8003b50:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b58:	f023 030f 	bic.w	r3, r3, #15
 8003b5c:	61d3      	str	r3, [r2, #28]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a2b      	ldr	r2, [pc, #172]	@ (8003c10 <HAL_I2S_Init+0x278>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_I2S_Init+0x1d4>
 8003b68:	4b2a      	ldr	r3, [pc, #168]	@ (8003c14 <HAL_I2S_Init+0x27c>)
 8003b6a:	e001      	b.n	8003b70 <HAL_I2S_Init+0x1d8>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b70:	2202      	movs	r2, #2
 8003b72:	621a      	str	r2, [r3, #32]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a25      	ldr	r2, [pc, #148]	@ (8003c10 <HAL_I2S_Init+0x278>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d101      	bne.n	8003b82 <HAL_I2S_Init+0x1ea>
 8003b7e:	4b25      	ldr	r3, [pc, #148]	@ (8003c14 <HAL_I2S_Init+0x27c>)
 8003b80:	e001      	b.n	8003b86 <HAL_I2S_Init+0x1ee>
 8003b82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	817b      	strh	r3, [r7, #10]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b92:	d003      	beq.n	8003b9c <HAL_I2S_Init+0x204>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <HAL_I2S_Init+0x20c>
 8003b9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ba0:	613b      	str	r3, [r7, #16]
 8003ba2:	e001      	b.n	8003ba8 <HAL_I2S_Init+0x210>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	897b      	ldrh	r3, [r7, #10]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bd4:	817b      	strh	r3, [r7, #10]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a0d      	ldr	r2, [pc, #52]	@ (8003c10 <HAL_I2S_Init+0x278>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_I2S_Init+0x24c>
 8003be0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c14 <HAL_I2S_Init+0x27c>)
 8003be2:	e001      	b.n	8003be8 <HAL_I2S_Init+0x250>
 8003be4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003be8:	897a      	ldrh	r2, [r7, #10]
 8003bea:	61da      	str	r2, [r3, #28]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	08003d0f 	.word	0x08003d0f
 8003c08:	cccccccd 	.word	0xcccccccd
 8003c0c:	08003e25 	.word	0x08003e25
 8003c10:	40003800 	.word	0x40003800
 8003c14:	40003400 	.word	0x40003400

08003c18 <HAL_I2S_TxCpltCallback>:
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	bf00      	nop
 8003c22:	370c      	adds	r7, #12
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <HAL_I2S_RxCpltCallback>:
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_I2S_ErrorCallback>:
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	bf00      	nop
 8003c4a:	370c      	adds	r7, #12
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr

08003c54 <I2S_Transmit_IT>:
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c60:	881a      	ldrh	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	1c9a      	adds	r2, r3, #2
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10e      	bne.n	8003ca8 <I2S_Transmit_IT+0x54>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c98:	605a      	str	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffb8 	bl	8003c18 <HAL_I2S_TxCpltCallback>
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <I2S_Receive_IT>:
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	801a      	strh	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cca:	1c9a      	adds	r2, r3, #2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	865a      	strh	r2, [r3, #50]	@ 0x32
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d10e      	bne.n	8003d06 <I2S_Receive_IT+0x56>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cf6:	605a      	str	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff ff93 	bl	8003c2c <HAL_I2S_RxCpltCallback>
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2S_IRQHandler>:
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d13a      	bne.n	8003da0 <I2S_IRQHandler+0x92>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d109      	bne.n	8003d48 <I2S_IRQHandler+0x3a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d3e:	2b40      	cmp	r3, #64	@ 0x40
 8003d40:	d102      	bne.n	8003d48 <I2S_IRQHandler+0x3a>
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7ff ffb4 	bl	8003cb0 <I2S_Receive_IT>
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d126      	bne.n	8003da0 <I2S_IRQHandler+0x92>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b20      	cmp	r3, #32
 8003d5e:	d11f      	bne.n	8003da0 <I2S_IRQHandler+0x92>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	2300      	movs	r3, #0
 8003d72:	613b      	str	r3, [r7, #16]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	613b      	str	r3, [r7, #16]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	f043 0202 	orr.w	r2, r3, #2
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff ff50 	bl	8003c40 <HAL_I2S_ErrorCallback>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d136      	bne.n	8003e1a <I2S_IRQHandler+0x10c>
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d109      	bne.n	8003dca <I2S_IRQHandler+0xbc>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc0:	2b80      	cmp	r3, #128	@ 0x80
 8003dc2:	d102      	bne.n	8003dca <I2S_IRQHandler+0xbc>
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff45 	bl	8003c54 <I2S_Transmit_IT>
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d122      	bne.n	8003e1a <I2S_IRQHandler+0x10c>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f003 0320 	and.w	r3, r3, #32
 8003dde:	2b20      	cmp	r3, #32
 8003de0:	d11b      	bne.n	8003e1a <I2S_IRQHandler+0x10c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0c:	f043 0204 	orr.w	r2, r3, #4
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff ff13 	bl	8003c40 <HAL_I2S_ErrorCallback>
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_I2SEx_FullDuplex_IRQHandler>:
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b088      	sub	sp, #32
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a92      	ldr	r2, [pc, #584]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e3e:	4b92      	ldr	r3, [pc, #584]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e40:	e001      	b.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a8b      	ldr	r2, [pc, #556]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d101      	bne.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e5c:	4b8a      	ldr	r3, [pc, #552]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e5e:	e001      	b.n	8003e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e70:	d004      	beq.n	8003e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f040 8099 	bne.w	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b02      	cmp	r3, #2
 8003e84:	d107      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f925 	bl	80040e0 <I2SEx_TxISR_I2S>
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d107      	bne.n	8003eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f9c8 	bl	8004240 <I2SEx_RxISR_I2SExt>
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb6:	2b40      	cmp	r3, #64	@ 0x40
 8003eb8:	d13a      	bne.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f003 0320 	and.w	r3, r3, #32
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d035      	beq.n	8003f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6e      	ldr	r2, [pc, #440]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ece:	4b6e      	ldr	r3, [pc, #440]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed0:	e001      	b.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ed2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4969      	ldr	r1, [pc, #420]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	428b      	cmp	r3, r1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ee2:	4b69      	ldr	r3, [pc, #420]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	f043 0202 	orr.w	r2, r3, #2
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	645a      	str	r2, [r3, #68]	@ 0x44
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff fe88 	bl	8003c40 <HAL_I2S_ErrorCallback>
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0308 	and.w	r3, r3, #8
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	f040 80c3 	bne.w	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 80bd 	beq.w	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a49      	ldr	r2, [pc, #292]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d101      	bne.n	8003f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f62:	4b49      	ldr	r3, [pc, #292]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f64:	e001      	b.n	8003f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4944      	ldr	r1, [pc, #272]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f72:	428b      	cmp	r3, r1
 8003f74:	d101      	bne.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f76:	4b44      	ldr	r3, [pc, #272]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f78:	e001      	b.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f82:	605a      	str	r2, [r3, #4]
 8003f84:	2300      	movs	r3, #0
 8003f86:	60bb      	str	r3, [r7, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	60bb      	str	r3, [r7, #8]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f9e:	f043 0204 	orr.w	r2, r3, #4
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	@ 0x44
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fe4a 	bl	8003c40 <HAL_I2S_ErrorCallback>
 8003fac:	e089      	b.n	80040c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d107      	bne.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d002      	beq.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f8be 	bl	8004144 <I2SEx_TxISR_I2SExt>
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d107      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f8fd 	bl	80041dc <I2SEx_RxISR_I2S>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d12f      	bne.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d02a      	beq.n	800404c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004004:	605a      	str	r2, [r3, #4]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1e      	ldr	r2, [pc, #120]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d101      	bne.n	8004014 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004010:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004012:	e001      	b.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004014:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4919      	ldr	r1, [pc, #100]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004020:	428b      	cmp	r3, r1
 8004022:	d101      	bne.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004024:	4b18      	ldr	r3, [pc, #96]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004026:	e001      	b.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800402c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004030:	605a      	str	r2, [r3, #4]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f043 0202 	orr.w	r2, r3, #2
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fdfa 	bl	8003c40 <HAL_I2S_ErrorCallback>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	f003 0308 	and.w	r3, r3, #8
 8004052:	2b08      	cmp	r3, #8
 8004054:	d136      	bne.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d031      	beq.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a07      	ldr	r2, [pc, #28]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d101      	bne.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800406c:	e001      	b.n	8004072 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800406e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4902      	ldr	r1, [pc, #8]	@ (8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407a:	428b      	cmp	r3, r1
 800407c:	d106      	bne.n	800408c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800407e:	4b02      	ldr	r3, [pc, #8]	@ (8004088 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004080:	e006      	b.n	8004090 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004082:	bf00      	nop
 8004084:	40003800 	.word	0x40003800
 8004088:	40003400 	.word	0x40003400
 800408c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004090:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f043 0204 	orr.w	r2, r3, #4
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7ff fdc0 	bl	8003c40 <HAL_I2S_ErrorCallback>
 80040c0:	e000      	b.n	80040c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	3720      	adds	r7, #32
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_I2SEx_TxRxCpltCallback>:
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <I2SEx_TxISR_I2S>:
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c99      	adds	r1, r3, #2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80040f2:	881a      	ldrh	r2, [r3, #0]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <I2SEx_TxISR_I2S+0x5a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004120:	605a      	str	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <I2SEx_TxISR_I2S+0x5a>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff ffc9 	bl	80040cc <HAL_I2SEx_TxRxCpltCallback>
 800413a:	bf00      	nop
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
	...

08004144 <I2SEx_TxISR_I2SExt>:
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	1c99      	adds	r1, r3, #2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6251      	str	r1, [r2, #36]	@ 0x24
 8004156:	8819      	ldrh	r1, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <I2SEx_TxISR_I2SExt+0x90>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d101      	bne.n	8004166 <I2SEx_TxISR_I2SExt+0x22>
 8004162:	4b1d      	ldr	r3, [pc, #116]	@ (80041d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004164:	e001      	b.n	800416a <I2SEx_TxISR_I2SExt+0x26>
 8004166:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800416a:	460a      	mov	r2, r1
 800416c:	60da      	str	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d121      	bne.n	80041ca <I2SEx_TxISR_I2SExt+0x86>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <I2SEx_TxISR_I2SExt+0x90>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d101      	bne.n	8004194 <I2SEx_TxISR_I2SExt+0x50>
 8004190:	4b11      	ldr	r3, [pc, #68]	@ (80041d8 <I2SEx_TxISR_I2SExt+0x94>)
 8004192:	e001      	b.n	8004198 <I2SEx_TxISR_I2SExt+0x54>
 8004194:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	490d      	ldr	r1, [pc, #52]	@ (80041d4 <I2SEx_TxISR_I2SExt+0x90>)
 80041a0:	428b      	cmp	r3, r1
 80041a2:	d101      	bne.n	80041a8 <I2SEx_TxISR_I2SExt+0x64>
 80041a4:	4b0c      	ldr	r3, [pc, #48]	@ (80041d8 <I2SEx_TxISR_I2SExt+0x94>)
 80041a6:	e001      	b.n	80041ac <I2SEx_TxISR_I2SExt+0x68>
 80041a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <I2SEx_TxISR_I2SExt+0x86>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff ff81 	bl	80040cc <HAL_I2SEx_TxRxCpltCallback>
 80041ca:	bf00      	nop
 80041cc:	3708      	adds	r7, #8
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40003800 	.word	0x40003800
 80041d8:	40003400 	.word	0x40003400

080041dc <I2SEx_RxISR_I2S>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68d8      	ldr	r0, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ee:	1c99      	adds	r1, r3, #2
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041f4:	b282      	uxth	r2, r0
 80041f6:	801a      	strh	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	865a      	strh	r2, [r3, #50]	@ 0x32
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800420a:	b29b      	uxth	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d113      	bne.n	8004238 <I2SEx_RxISR_I2S+0x5c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800421e:	605a      	str	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <I2SEx_RxISR_I2S+0x5c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7ff ff4a 	bl	80040cc <HAL_I2SEx_TxRxCpltCallback>
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <I2SEx_RxISR_I2SExt>:
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a20      	ldr	r2, [pc, #128]	@ (80042d0 <I2SEx_RxISR_I2SExt+0x90>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d101      	bne.n	8004256 <I2SEx_RxISR_I2SExt+0x16>
 8004252:	4b20      	ldr	r3, [pc, #128]	@ (80042d4 <I2SEx_RxISR_I2SExt+0x94>)
 8004254:	e001      	b.n	800425a <I2SEx_RxISR_I2SExt+0x1a>
 8004256:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800425a:	68d8      	ldr	r0, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004260:	1c99      	adds	r1, r3, #2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004266:	b282      	uxth	r2, r0
 8004268:	801a      	strh	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	865a      	strh	r2, [r3, #50]	@ 0x32
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800427c:	b29b      	uxth	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d121      	bne.n	80042c6 <I2SEx_RxISR_I2SExt+0x86>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a12      	ldr	r2, [pc, #72]	@ (80042d0 <I2SEx_RxISR_I2SExt+0x90>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d101      	bne.n	8004290 <I2SEx_RxISR_I2SExt+0x50>
 800428c:	4b11      	ldr	r3, [pc, #68]	@ (80042d4 <I2SEx_RxISR_I2SExt+0x94>)
 800428e:	e001      	b.n	8004294 <I2SEx_RxISR_I2SExt+0x54>
 8004290:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	490d      	ldr	r1, [pc, #52]	@ (80042d0 <I2SEx_RxISR_I2SExt+0x90>)
 800429c:	428b      	cmp	r3, r1
 800429e:	d101      	bne.n	80042a4 <I2SEx_RxISR_I2SExt+0x64>
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <I2SEx_RxISR_I2SExt+0x94>)
 80042a2:	e001      	b.n	80042a8 <I2SEx_RxISR_I2SExt+0x68>
 80042a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042ac:	605a      	str	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <I2SEx_RxISR_I2SExt+0x86>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7ff ff03 	bl	80040cc <HAL_I2SEx_TxRxCpltCallback>
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	40003800 	.word	0x40003800
 80042d4:	40003400 	.word	0x40003400

080042d8 <HAL_RCC_OscConfig>:
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_OscConfig+0x12>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e267      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d075      	beq.n	80043e2 <HAL_RCC_OscConfig+0x10a>
 80042f6:	4b88      	ldr	r3, [pc, #544]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d00c      	beq.n	800431c <HAL_RCC_OscConfig+0x44>
 8004302:	4b85      	ldr	r3, [pc, #532]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b08      	cmp	r3, #8
 800430c:	d112      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
 800430e:	4b82      	ldr	r3, [pc, #520]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004316:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800431a:	d10b      	bne.n	8004334 <HAL_RCC_OscConfig+0x5c>
 800431c:	4b7e      	ldr	r3, [pc, #504]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d05b      	beq.n	80043e0 <HAL_RCC_OscConfig+0x108>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d157      	bne.n	80043e0 <HAL_RCC_OscConfig+0x108>
 8004330:	2301      	movs	r3, #1
 8004332:	e242      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433c:	d106      	bne.n	800434c <HAL_RCC_OscConfig+0x74>
 800433e:	4b76      	ldr	r3, [pc, #472]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a75      	ldr	r2, [pc, #468]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	e01d      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004354:	d10c      	bne.n	8004370 <HAL_RCC_OscConfig+0x98>
 8004356:	4b70      	ldr	r3, [pc, #448]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a6f      	ldr	r2, [pc, #444]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 800435c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	4b6d      	ldr	r3, [pc, #436]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a6c      	ldr	r2, [pc, #432]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436c:	6013      	str	r3, [r2, #0]
 800436e:	e00b      	b.n	8004388 <HAL_RCC_OscConfig+0xb0>
 8004370:	4b69      	ldr	r3, [pc, #420]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a68      	ldr	r2, [pc, #416]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004376:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b66      	ldr	r3, [pc, #408]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a65      	ldr	r2, [pc, #404]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004382:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004386:	6013      	str	r3, [r2, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d013      	beq.n	80043b8 <HAL_RCC_OscConfig+0xe0>
 8004390:	f7fc fd94 	bl	8000ebc <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0xd2>
 8004398:	f7fc fd90 	bl	8000ebc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b64      	cmp	r3, #100	@ 0x64
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0xd2>
 80043a6:	2303      	movs	r3, #3
 80043a8:	e207      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80043aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0xc0>
 80043b6:	e014      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
 80043b8:	f7fc fd80 	bl	8000ebc <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0xfa>
 80043c0:	f7fc fd7c 	bl	8000ebc <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b64      	cmp	r3, #100	@ 0x64
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0xfa>
 80043ce:	2303      	movs	r3, #3
 80043d0:	e1f3      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80043d2:	4b51      	ldr	r3, [pc, #324]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0xe8>
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x10a>
 80043e0:	bf00      	nop
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_OscConfig+0x1de>
 80043ee:	4b4a      	ldr	r3, [pc, #296]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 030c 	and.w	r3, r3, #12
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00b      	beq.n	8004412 <HAL_RCC_OscConfig+0x13a>
 80043fa:	4b47      	ldr	r3, [pc, #284]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 030c 	and.w	r3, r3, #12
 8004402:	2b08      	cmp	r3, #8
 8004404:	d11c      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
 8004406:	4b44      	ldr	r3, [pc, #272]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d116      	bne.n	8004440 <HAL_RCC_OscConfig+0x168>
 8004412:	4b41      	ldr	r3, [pc, #260]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d001      	beq.n	800442a <HAL_RCC_OscConfig+0x152>
 8004426:	2301      	movs	r3, #1
 8004428:	e1c7      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 800442a:	4b3b      	ldr	r3, [pc, #236]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4937      	ldr	r1, [pc, #220]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
 800443e:	e03a      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d020      	beq.n	800448a <HAL_RCC_OscConfig+0x1b2>
 8004448:	4b34      	ldr	r3, [pc, #208]	@ (800451c <HAL_RCC_OscConfig+0x244>)
 800444a:	2201      	movs	r2, #1
 800444c:	601a      	str	r2, [r3, #0]
 800444e:	f7fc fd35 	bl	8000ebc <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x190>
 8004456:	f7fc fd31 	bl	8000ebc <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x190>
 8004464:	2303      	movs	r3, #3
 8004466:	e1a8      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 8004468:	4b2b      	ldr	r3, [pc, #172]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x17e>
 8004474:	4b28      	ldr	r3, [pc, #160]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4925      	ldr	r1, [pc, #148]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 8004484:	4313      	orrs	r3, r2
 8004486:	600b      	str	r3, [r1, #0]
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x1de>
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <HAL_RCC_OscConfig+0x244>)
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	f7fc fd14 	bl	8000ebc <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x1d2>
 8004498:	f7fc fd10 	bl	8000ebc <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x1d2>
 80044a6:	2303      	movs	r3, #3
 80044a8:	e187      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80044aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d1f0      	bne.n	8004498 <HAL_RCC_OscConfig+0x1c0>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0308 	and.w	r3, r3, #8
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d036      	beq.n	8004530 <HAL_RCC_OscConfig+0x258>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d016      	beq.n	80044f8 <HAL_RCC_OscConfig+0x220>
 80044ca:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <HAL_RCC_OscConfig+0x248>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f7fc fcf4 	bl	8000ebc <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x212>
 80044d8:	f7fc fcf0 	bl	8000ebc <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x212>
 80044e6:	2303      	movs	r3, #3
 80044e8:	e167      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80044ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004518 <HAL_RCC_OscConfig+0x240>)
 80044ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0x200>
 80044f6:	e01b      	b.n	8004530 <HAL_RCC_OscConfig+0x258>
 80044f8:	4b09      	ldr	r3, [pc, #36]	@ (8004520 <HAL_RCC_OscConfig+0x248>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	f7fc fcdd 	bl	8000ebc <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]
 8004504:	e00e      	b.n	8004524 <HAL_RCC_OscConfig+0x24c>
 8004506:	f7fc fcd9 	bl	8000ebc <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d907      	bls.n	8004524 <HAL_RCC_OscConfig+0x24c>
 8004514:	2303      	movs	r3, #3
 8004516:	e150      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 8004518:	40023800 	.word	0x40023800
 800451c:	42470000 	.word	0x42470000
 8004520:	42470e80 	.word	0x42470e80
 8004524:	4b88      	ldr	r3, [pc, #544]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004526:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1ea      	bne.n	8004506 <HAL_RCC_OscConfig+0x22e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8097 	beq.w	800466c <HAL_RCC_OscConfig+0x394>
 800453e:	2300      	movs	r3, #0
 8004540:	75fb      	strb	r3, [r7, #23]
 8004542:	4b81      	ldr	r3, [pc, #516]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <HAL_RCC_OscConfig+0x296>
 800454e:	2300      	movs	r3, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	4b7d      	ldr	r3, [pc, #500]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004556:	4a7c      	ldr	r2, [pc, #496]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800455c:	6413      	str	r3, [r2, #64]	@ 0x40
 800455e:	4b7a      	ldr	r3, [pc, #488]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2301      	movs	r3, #1
 800456c:	75fb      	strb	r3, [r7, #23]
 800456e:	4b77      	ldr	r3, [pc, #476]	@ (800474c <HAL_RCC_OscConfig+0x474>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d118      	bne.n	80045ac <HAL_RCC_OscConfig+0x2d4>
 800457a:	4b74      	ldr	r3, [pc, #464]	@ (800474c <HAL_RCC_OscConfig+0x474>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a73      	ldr	r2, [pc, #460]	@ (800474c <HAL_RCC_OscConfig+0x474>)
 8004580:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	f7fc fc99 	bl	8000ebc <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x2c8>
 800458e:	f7fc fc95 	bl	8000ebc <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x2c8>
 800459c:	2303      	movs	r3, #3
 800459e:	e10c      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80045a0:	4b6a      	ldr	r3, [pc, #424]	@ (800474c <HAL_RCC_OscConfig+0x474>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d0f0      	beq.n	800458e <HAL_RCC_OscConfig+0x2b6>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d106      	bne.n	80045c2 <HAL_RCC_OscConfig+0x2ea>
 80045b4:	4b64      	ldr	r3, [pc, #400]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b8:	4a63      	ldr	r2, [pc, #396]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045ba:	f043 0301 	orr.w	r3, r3, #1
 80045be:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c0:	e01c      	b.n	80045fc <HAL_RCC_OscConfig+0x324>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b05      	cmp	r3, #5
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x30c>
 80045ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045d0:	f043 0304 	orr.w	r3, r3, #4
 80045d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045da:	4a5b      	ldr	r2, [pc, #364]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e2:	e00b      	b.n	80045fc <HAL_RCC_OscConfig+0x324>
 80045e4:	4b58      	ldr	r3, [pc, #352]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a57      	ldr	r2, [pc, #348]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045ea:	f023 0301 	bic.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f0:	4b55      	ldr	r3, [pc, #340]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f4:	4a54      	ldr	r2, [pc, #336]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 0304 	bic.w	r3, r3, #4
 80045fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d015      	beq.n	8004630 <HAL_RCC_OscConfig+0x358>
 8004604:	f7fc fc5a 	bl	8000ebc <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]
 800460a:	e00a      	b.n	8004622 <HAL_RCC_OscConfig+0x34a>
 800460c:	f7fc fc56 	bl	8000ebc <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	f241 3288 	movw	r2, #5000	@ 0x1388
 800461a:	4293      	cmp	r3, r2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x34a>
 800461e:	2303      	movs	r3, #3
 8004620:	e0cb      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 8004622:	4b49      	ldr	r3, [pc, #292]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0ee      	beq.n	800460c <HAL_RCC_OscConfig+0x334>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x382>
 8004630:	f7fc fc44 	bl	8000ebc <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]
 8004636:	e00a      	b.n	800464e <HAL_RCC_OscConfig+0x376>
 8004638:	f7fc fc40 	bl	8000ebc <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x376>
 800464a:	2303      	movs	r3, #3
 800464c:	e0b5      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 800464e:	4b3e      	ldr	r3, [pc, #248]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1ee      	bne.n	8004638 <HAL_RCC_OscConfig+0x360>
 800465a:	7dfb      	ldrb	r3, [r7, #23]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d105      	bne.n	800466c <HAL_RCC_OscConfig+0x394>
 8004660:	4b39      	ldr	r3, [pc, #228]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	4a38      	ldr	r2, [pc, #224]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004666:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800466a:	6413      	str	r3, [r2, #64]	@ 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 80a1 	beq.w	80047b8 <HAL_RCC_OscConfig+0x4e0>
 8004676:	4b34      	ldr	r3, [pc, #208]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 030c 	and.w	r3, r3, #12
 800467e:	2b08      	cmp	r3, #8
 8004680:	d05c      	beq.n	800473c <HAL_RCC_OscConfig+0x464>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	2b02      	cmp	r3, #2
 8004688:	d141      	bne.n	800470e <HAL_RCC_OscConfig+0x436>
 800468a:	4b31      	ldr	r3, [pc, #196]	@ (8004750 <HAL_RCC_OscConfig+0x478>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
 8004690:	f7fc fc14 	bl	8000ebc <HAL_GetTick>
 8004694:	6138      	str	r0, [r7, #16]
 8004696:	e008      	b.n	80046aa <HAL_RCC_OscConfig+0x3d2>
 8004698:	f7fc fc10 	bl	8000ebc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x3d2>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e087      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80046aa:	4b27      	ldr	r3, [pc, #156]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1f0      	bne.n	8004698 <HAL_RCC_OscConfig+0x3c0>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	69da      	ldr	r2, [r3, #28]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	019b      	lsls	r3, r3, #6
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	3b01      	subs	r3, #1
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	491b      	ldr	r1, [pc, #108]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
 80046e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004750 <HAL_RCC_OscConfig+0x478>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]
 80046e6:	f7fc fbe9 	bl	8000ebc <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x428>
 80046ee:	f7fc fbe5 	bl	8000ebc <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x428>
 80046fc:	2303      	movs	r3, #3
 80046fe:	e05c      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 8004700:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x416>
 800470c:	e054      	b.n	80047b8 <HAL_RCC_OscConfig+0x4e0>
 800470e:	4b10      	ldr	r3, [pc, #64]	@ (8004750 <HAL_RCC_OscConfig+0x478>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	f7fc fbd2 	bl	8000ebc <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x456>
 800471c:	f7fc fbce 	bl	8000ebc <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x456>
 800472a:	2303      	movs	r3, #3
 800472c:	e045      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 800472e:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_OscConfig+0x470>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x444>
 800473a:	e03d      	b.n	80047b8 <HAL_RCC_OscConfig+0x4e0>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d107      	bne.n	8004754 <HAL_RCC_OscConfig+0x47c>
 8004744:	2301      	movs	r3, #1
 8004746:	e038      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 8004748:	40023800 	.word	0x40023800
 800474c:	40007000 	.word	0x40007000
 8004750:	42470060 	.word	0x42470060
 8004754:	4b1b      	ldr	r3, [pc, #108]	@ (80047c4 <HAL_RCC_OscConfig+0x4ec>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d028      	beq.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	429a      	cmp	r2, r3
 800476e:	d121      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	429a      	cmp	r2, r3
 800477c:	d11a      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800478a:	0192      	lsls	r2, r2, #6
 800478c:	4293      	cmp	r3, r2
 800478e:	d111      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479a:	085b      	lsrs	r3, r3, #1
 800479c:	3b01      	subs	r3, #1
 800479e:	041b      	lsls	r3, r3, #16
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d107      	bne.n	80047b4 <HAL_RCC_OscConfig+0x4dc>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ae:	061b      	lsls	r3, r3, #24
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d001      	beq.n	80047b8 <HAL_RCC_OscConfig+0x4e0>
 80047b4:	2301      	movs	r3, #1
 80047b6:	e000      	b.n	80047ba <HAL_RCC_OscConfig+0x4e2>
 80047b8:	2300      	movs	r3, #0
 80047ba:	4618      	mov	r0, r3
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40023800 	.word	0x40023800

080047c8 <HAL_RCC_ClockConfig>:
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_RCC_ClockConfig+0x14>
 80047d8:	2301      	movs	r3, #1
 80047da:	e0cc      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 80047dc:	4b68      	ldr	r3, [pc, #416]	@ (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d90c      	bls.n	8004804 <HAL_RCC_ClockConfig+0x3c>
 80047ea:	4b65      	ldr	r3, [pc, #404]	@ (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]
 80047f2:	4b63      	ldr	r3, [pc, #396]	@ (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x3c>
 8004800:	2301      	movs	r3, #1
 8004802:	e0b8      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d020      	beq.n	8004852 <HAL_RCC_ClockConfig+0x8a>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0304 	and.w	r3, r3, #4
 8004818:	2b00      	cmp	r3, #0
 800481a:	d005      	beq.n	8004828 <HAL_RCC_ClockConfig+0x60>
 800481c:	4b59      	ldr	r3, [pc, #356]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	4a58      	ldr	r2, [pc, #352]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004822:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004826:	6093      	str	r3, [r2, #8]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0308 	and.w	r3, r3, #8
 8004830:	2b00      	cmp	r3, #0
 8004832:	d005      	beq.n	8004840 <HAL_RCC_ClockConfig+0x78>
 8004834:	4b53      	ldr	r3, [pc, #332]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	4a52      	ldr	r2, [pc, #328]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800483a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800483e:	6093      	str	r3, [r2, #8]
 8004840:	4b50      	ldr	r3, [pc, #320]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	494d      	ldr	r1, [pc, #308]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	4313      	orrs	r3, r2
 8004850:	608b      	str	r3, [r1, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d044      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x120>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d107      	bne.n	8004876 <HAL_RCC_ClockConfig+0xae>
 8004866:	4b47      	ldr	r3, [pc, #284]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d119      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
 8004872:	2301      	movs	r3, #1
 8004874:	e07f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d003      	beq.n	8004886 <HAL_RCC_ClockConfig+0xbe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b03      	cmp	r3, #3
 8004884:	d107      	bne.n	8004896 <HAL_RCC_ClockConfig+0xce>
 8004886:	4b3f      	ldr	r3, [pc, #252]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
 8004892:	2301      	movs	r3, #1
 8004894:	e06f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 8004896:	4b3b      	ldr	r3, [pc, #236]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xde>
 80048a2:	2301      	movs	r3, #1
 80048a4:	e067      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 80048a6:	4b37      	ldr	r3, [pc, #220]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f023 0203 	bic.w	r2, r3, #3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	4934      	ldr	r1, [pc, #208]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	608b      	str	r3, [r1, #8]
 80048b8:	f7fc fb00 	bl	8000ebc <HAL_GetTick>
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	e00a      	b.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
 80048c0:	f7fc fafc 	bl	8000ebc <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_ClockConfig+0x10e>
 80048d2:	2303      	movs	r3, #3
 80048d4:	e04f      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 80048d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 020c 	and.w	r2, r3, #12
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1eb      	bne.n	80048c0 <HAL_RCC_ClockConfig+0xf8>
 80048e8:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d20c      	bcs.n	8004910 <HAL_RCC_ClockConfig+0x148>
 80048f6:	4b22      	ldr	r3, [pc, #136]	@ (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]
 80048fe:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <HAL_RCC_ClockConfig+0x1b8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	683a      	ldr	r2, [r7, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d001      	beq.n	8004910 <HAL_RCC_ClockConfig+0x148>
 800490c:	2301      	movs	r3, #1
 800490e:	e032      	b.n	8004976 <HAL_RCC_ClockConfig+0x1ae>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCC_ClockConfig+0x166>
 800491c:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4916      	ldr	r1, [pc, #88]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_RCC_ClockConfig+0x186>
 800493a:	4b12      	ldr	r3, [pc, #72]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	490e      	ldr	r1, [pc, #56]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 800494a:	4313      	orrs	r3, r2
 800494c:	608b      	str	r3, [r1, #8]
 800494e:	f000 f821 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004952:	4602      	mov	r2, r0
 8004954:	4b0b      	ldr	r3, [pc, #44]	@ (8004984 <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	091b      	lsrs	r3, r3, #4
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	490a      	ldr	r1, [pc, #40]	@ (8004988 <HAL_RCC_ClockConfig+0x1c0>)
 8004960:	5ccb      	ldrb	r3, [r1, r3]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	4a09      	ldr	r2, [pc, #36]	@ (800498c <HAL_RCC_ClockConfig+0x1c4>)
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b09      	ldr	r3, [pc, #36]	@ (8004990 <HAL_RCC_ClockConfig+0x1c8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fc fa60 	bl	8000e34 <HAL_InitTick>
 8004974:	2300      	movs	r3, #0
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40023c00 	.word	0x40023c00
 8004984:	40023800 	.word	0x40023800
 8004988:	08008c18 	.word	0x08008c18
 800498c:	20000000 	.word	0x20000000
 8004990:	20000004 	.word	0x20000004

08004994 <HAL_RCC_GetSysClockFreq>:
 8004994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004998:	b094      	sub	sp, #80	@ 0x50
 800499a:	af00      	add	r7, sp, #0
 800499c:	2300      	movs	r3, #0
 800499e:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a0:	2300      	movs	r3, #0
 80049a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a4:	2300      	movs	r3, #0
 80049a6:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a8:	2300      	movs	r3, #0
 80049aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ac:	4b79      	ldr	r3, [pc, #484]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f003 030c 	and.w	r3, r3, #12
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d00d      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	f200 80e1 	bhi.w	8004b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d002      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0x34>
 80049c2:	2b04      	cmp	r3, #4
 80049c4:	d003      	beq.n	80049ce <HAL_RCC_GetSysClockFreq+0x3a>
 80049c6:	e0db      	b.n	8004b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049c8:	4b73      	ldr	r3, [pc, #460]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80049ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049cc:	e0db      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x1f2>
 80049ce:	4b73      	ldr	r3, [pc, #460]	@ (8004b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80049d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049d2:	e0d8      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x1f2>
 80049d4:	4b6f      	ldr	r3, [pc, #444]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80049de:	4b6d      	ldr	r3, [pc, #436]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d063      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x11e>
 80049ea:	4b6a      	ldr	r3, [pc, #424]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	099b      	lsrs	r3, r3, #6
 80049f0:	2200      	movs	r2, #0
 80049f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80049fe:	2300      	movs	r3, #0
 8004a00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	f04f 0000 	mov.w	r0, #0
 8004a0e:	f04f 0100 	mov.w	r1, #0
 8004a12:	0159      	lsls	r1, r3, #5
 8004a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a18:	0150      	lsls	r0, r2, #5
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4621      	mov	r1, r4
 8004a20:	1a51      	subs	r1, r2, r1
 8004a22:	6139      	str	r1, [r7, #16]
 8004a24:	4629      	mov	r1, r5
 8004a26:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a38:	4659      	mov	r1, fp
 8004a3a:	018b      	lsls	r3, r1, #6
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a42:	4651      	mov	r1, sl
 8004a44:	018a      	lsls	r2, r1, #6
 8004a46:	4651      	mov	r1, sl
 8004a48:	ebb2 0801 	subs.w	r8, r2, r1
 8004a4c:	4659      	mov	r1, fp
 8004a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a66:	4690      	mov	r8, r2
 8004a68:	4699      	mov	r9, r3
 8004a6a:	4623      	mov	r3, r4
 8004a6c:	eb18 0303 	adds.w	r3, r8, r3
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	462b      	mov	r3, r5
 8004a74:	eb49 0303 	adc.w	r3, r9, r3
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a86:	4629      	mov	r1, r5
 8004a88:	024b      	lsls	r3, r1, #9
 8004a8a:	4621      	mov	r1, r4
 8004a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a90:	4621      	mov	r1, r4
 8004a92:	024a      	lsls	r2, r1, #9
 8004a94:	4610      	mov	r0, r2
 8004a96:	4619      	mov	r1, r3
 8004a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aa4:	f7fb fb90 	bl	80001c8 <__aeabi_uldivmod>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4613      	mov	r3, r2
 8004aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ab0:	e058      	b.n	8004b64 <HAL_RCC_GetSysClockFreq+0x1d0>
 8004ab2:	4b38      	ldr	r3, [pc, #224]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	099b      	lsrs	r3, r3, #6
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4618      	mov	r0, r3
 8004abc:	4611      	mov	r1, r2
 8004abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ac2:	623b      	str	r3, [r7, #32]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004acc:	4642      	mov	r2, r8
 8004ace:	464b      	mov	r3, r9
 8004ad0:	f04f 0000 	mov.w	r0, #0
 8004ad4:	f04f 0100 	mov.w	r1, #0
 8004ad8:	0159      	lsls	r1, r3, #5
 8004ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ade:	0150      	lsls	r0, r2, #5
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	4641      	mov	r1, r8
 8004ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004aea:	4649      	mov	r1, r9
 8004aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8004af0:	f04f 0200 	mov.w	r2, #0
 8004af4:	f04f 0300 	mov.w	r3, #0
 8004af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b04:	ebb2 040a 	subs.w	r4, r2, sl
 8004b08:	eb63 050b 	sbc.w	r5, r3, fp
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	f04f 0300 	mov.w	r3, #0
 8004b14:	00eb      	lsls	r3, r5, #3
 8004b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b1a:	00e2      	lsls	r2, r4, #3
 8004b1c:	4614      	mov	r4, r2
 8004b1e:	461d      	mov	r5, r3
 8004b20:	4643      	mov	r3, r8
 8004b22:	18e3      	adds	r3, r4, r3
 8004b24:	603b      	str	r3, [r7, #0]
 8004b26:	464b      	mov	r3, r9
 8004b28:	eb45 0303 	adc.w	r3, r5, r3
 8004b2c:	607b      	str	r3, [r7, #4]
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	028b      	lsls	r3, r1, #10
 8004b3e:	4621      	mov	r1, r4
 8004b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b44:	4621      	mov	r1, r4
 8004b46:	028a      	lsls	r2, r1, #10
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b4e:	2200      	movs	r2, #0
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	61fa      	str	r2, [r7, #28]
 8004b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b58:	f7fb fb36 	bl	80001c8 <__aeabi_uldivmod>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4613      	mov	r3, r2
 8004b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b64:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	3301      	adds	r3, #1
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b7e:	e002      	b.n	8004b86 <HAL_RCC_GetSysClockFreq+0x1f2>
 8004b80:	4b05      	ldr	r3, [pc, #20]	@ (8004b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b84:	bf00      	nop
 8004b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3750      	adds	r7, #80	@ 0x50
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b92:	bf00      	nop
 8004b94:	40023800 	.word	0x40023800
 8004b98:	00f42400 	.word	0x00f42400
 8004b9c:	007a1200 	.word	0x007a1200

08004ba0 <HAL_RCC_GetHCLKFreq>:
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	4b03      	ldr	r3, [pc, #12]	@ (8004bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000000 	.word	0x20000000

08004bb8 <HAL_RCC_GetPCLK1Freq>:
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	f7ff fff0 	bl	8004ba0 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0a9b      	lsrs	r3, r3, #10
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	08008c28 	.word	0x08008c28

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d035      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8004c08:	4b62      	ldr	r3, [pc, #392]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f7fc f955 	bl	8000ebc <HAL_GetTick>
 8004c12:	6178      	str	r0, [r7, #20]
 8004c14:	e008      	b.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004c16:	f7fc f951 	bl	8000ebc <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0b0      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c28:	4b5b      	ldr	r3, [pc, #364]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f0      	bne.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x36>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	019a      	lsls	r2, r3, #6
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	071b      	lsls	r3, r3, #28
 8004c40:	4955      	ldr	r1, [pc, #340]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8004c48:	4b52      	ldr	r3, [pc, #328]	@ (8004d94 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f7fc f935 	bl	8000ebc <HAL_GetTick>
 8004c52:	6178      	str	r0, [r7, #20]
 8004c54:	e008      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004c56:	f7fc f931 	bl	8000ebc <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8004c64:	2303      	movs	r3, #3
 8004c66:	e090      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004c68:	4b4b      	ldr	r3, [pc, #300]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 8083 	beq.w	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	4b44      	ldr	r3, [pc, #272]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	4a43      	ldr	r2, [pc, #268]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c92:	4b41      	ldr	r3, [pc, #260]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3e      	ldr	r2, [pc, #248]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	f7fc f907 	bl	8000ebc <HAL_GetTick>
 8004cae:	6178      	str	r0, [r7, #20]
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004cb2:	f7fc f903 	bl	8000ebc <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e062      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004cc4:	4b35      	ldr	r3, [pc, #212]	@ (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0f0      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
 8004cd0:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d02f      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d028      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cee:	4b2a      	ldr	r3, [pc, #168]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cf6:	613b      	str	r3, [r7, #16]
 8004cf8:	4b29      	ldr	r3, [pc, #164]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]
 8004cfe:	4b28      	ldr	r3, [pc, #160]	@ (8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	4a24      	ldr	r2, [pc, #144]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0a:	4b23      	ldr	r3, [pc, #140]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d114      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d16:	f7fc f8d1 	bl	8000ebc <HAL_GetTick>
 8004d1a:	6178      	str	r0, [r7, #20]
 8004d1c:	e00a      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d1e:	f7fc f8cd 	bl	8000ebc <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d30:	2303      	movs	r3, #3
 8004d32:	e02a      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d34:	4b18      	ldr	r3, [pc, #96]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0ee      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d4c:	d10d      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d4e:	4b12      	ldr	r3, [pc, #72]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d62:	490d      	ldr	r1, [pc, #52]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	608b      	str	r3, [r1, #8]
 8004d68:	e005      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004d74:	6093      	str	r3, [r2, #8]
 8004d76:	4b08      	ldr	r3, [pc, #32]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d82:	4905      	ldr	r1, [pc, #20]	@ (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	670b      	str	r3, [r1, #112]	@ 0x70
 8004d88:	2300      	movs	r3, #0
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	42470068 	.word	0x42470068
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	42470e40 	.word	0x42470e40

08004da4 <HAL_RCCEx_GetPeriphCLKFreq>:
 8004da4:	b480      	push	{r7}
 8004da6:	b087      	sub	sp, #28
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	2300      	movs	r3, #0
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	2300      	movs	r3, #0
 8004dba:	60bb      	str	r3, [r7, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d13f      	bne.n	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
 8004dc2:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d006      	beq.n	8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004dd8:	d12f      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e02f      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8004de0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dec:	d108      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 8004dee:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004df6:	4a19      	ldr	r2, [pc, #100]	@ (8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	613b      	str	r3, [r7, #16]
 8004dfe:	e007      	b.n	8004e10 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8004e00:	4b14      	ldr	r3, [pc, #80]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e08:	4a15      	ldr	r2, [pc, #84]	@ (8004e60 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e16:	099b      	lsrs	r3, r3, #6
 8004e18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	60bb      	str	r3, [r7, #8]
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e2a:	0f1b      	lsrs	r3, r3, #28
 8004e2c:	f003 0307 	and.w	r3, r3, #7
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	617b      	str	r3, [r7, #20]
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
 8004e3e:	bf00      	nop
 8004e40:	e000      	b.n	8004e44 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8004e42:	bf00      	nop
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4618      	mov	r0, r3
 8004e48:	371c      	adds	r7, #28
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40023800 	.word	0x40023800
 8004e58:	00bb8000 	.word	0x00bb8000
 8004e5c:	007a1200 	.word	0x007a1200
 8004e60:	00f42400 	.word	0x00f42400

08004e64 <HAL_SPI_Init>:
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_SPI_Init+0x12>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e07b      	b.n	8004f6e <HAL_SPI_Init+0x10a>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d108      	bne.n	8004e90 <HAL_SPI_Init+0x2c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e86:	d009      	beq.n	8004e9c <HAL_SPI_Init+0x38>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	61da      	str	r2, [r3, #28]
 8004e8e:	e005      	b.n	8004e9c <HAL_SPI_Init+0x38>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	615a      	str	r2, [r3, #20]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_SPI_Init+0x58>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fb fea0 	bl	8000bfc <HAL_SPI_MspInit>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ed2:	601a      	str	r2, [r3, #0]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f16:	431a      	orrs	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f20:	ea42 0103 	orr.w	r1, r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	0c1b      	lsrs	r3, r3, #16
 8004f3a:	f003 0104 	and.w	r1, r3, #4
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	f003 0210 	and.w	r2, r3, #16
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f5c:	61da      	str	r2, [r3, #28]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	655a      	str	r2, [r3, #84]	@ 0x54
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USB_CoreInit>:
 8004f76:	b084      	sub	sp, #16
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	f107 001c 	add.w	r0, r7, #28
 8004f84:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004f88:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d123      	bne.n	8004fd8 <USB_CoreInit+0x62>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f94:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	60d3      	str	r3, [r2, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	60da      	str	r2, [r3, #12]
 8004fb8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d105      	bne.n	8004fcc <USB_CoreInit+0x56>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f9dc 	bl	800538a <USB_CoreReset>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	e01b      	b.n	8005010 <USB_CoreInit+0x9a>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f9d0 	bl	800538a <USB_CoreReset>
 8004fea:	4603      	mov	r3, r0
 8004fec:	73fb      	strb	r3, [r7, #15]
 8004fee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <USB_CoreInit+0x8e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffa:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	639a      	str	r2, [r3, #56]	@ 0x38
 8005002:	e005      	b.n	8005010 <USB_CoreInit+0x9a>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005010:	7fbb      	ldrb	r3, [r7, #30]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d10b      	bne.n	800502e <USB_CoreInit+0xb8>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f043 0206 	orr.w	r2, r3, #6
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	609a      	str	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f043 0220 	orr.w	r2, r3, #32
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	609a      	str	r2, [r3, #8]
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800503a:	b004      	add	sp, #16
 800503c:	4770      	bx	lr

0800503e <USB_EnableGlobalInt>:
 800503e:	b480      	push	{r7}
 8005040:	b083      	sub	sp, #12
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f043 0201 	orr.w	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	609a      	str	r2, [r3, #8]
 8005052:	2300      	movs	r3, #0
 8005054:	4618      	mov	r0, r3
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <USB_DisableGlobalInt>:
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f023 0201 	bic.w	r2, r3, #1
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	2300      	movs	r3, #0
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <USB_SetCurrentMode>:
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	460b      	mov	r3, r1
 800508c:	70fb      	strb	r3, [r7, #3]
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60da      	str	r2, [r3, #12]
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d115      	bne.n	80050d0 <USB_SetCurrentMode+0x4e>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	60da      	str	r2, [r3, #12]
 80050b0:	200a      	movs	r0, #10
 80050b2:	f7fb ff0f 	bl	8000ed4 <HAL_Delay>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	330a      	adds	r3, #10
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f956 	bl	800536e <USB_GetMode>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d01e      	beq.n	8005106 <USB_SetCurrentMode+0x84>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80050cc:	d9f0      	bls.n	80050b0 <USB_SetCurrentMode+0x2e>
 80050ce:	e01a      	b.n	8005106 <USB_SetCurrentMode+0x84>
 80050d0:	78fb      	ldrb	r3, [r7, #3]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d115      	bne.n	8005102 <USB_SetCurrentMode+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]
 80050e2:	200a      	movs	r0, #10
 80050e4:	f7fb fef6 	bl	8000ed4 <HAL_Delay>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	330a      	adds	r3, #10
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f93d 	bl	800536e <USB_GetMode>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d005      	beq.n	8005106 <USB_SetCurrentMode+0x84>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80050fe:	d9f0      	bls.n	80050e2 <USB_SetCurrentMode+0x60>
 8005100:	e001      	b.n	8005106 <USB_SetCurrentMode+0x84>
 8005102:	2301      	movs	r3, #1
 8005104:	e005      	b.n	8005112 <USB_SetCurrentMode+0x90>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2bc8      	cmp	r3, #200	@ 0xc8
 800510a:	d101      	bne.n	8005110 <USB_SetCurrentMode+0x8e>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <USB_SetCurrentMode+0x90>
 8005110:	2300      	movs	r3, #0
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <USB_FlushTxFifo>:
 800511a:	b480      	push	{r7}
 800511c:	b085      	sub	sp, #20
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
 8005122:	6039      	str	r1, [r7, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	60fb      	str	r3, [r7, #12]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3301      	adds	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005134:	d901      	bls.n	800513a <USB_FlushTxFifo+0x20>
 8005136:	2303      	movs	r3, #3
 8005138:	e01b      	b.n	8005172 <USB_FlushTxFifo+0x58>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	daf2      	bge.n	8005128 <USB_FlushTxFifo+0xe>
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	019b      	lsls	r3, r3, #6
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	611a      	str	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3301      	adds	r3, #1
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800515e:	d901      	bls.n	8005164 <USB_FlushTxFifo+0x4a>
 8005160:	2303      	movs	r3, #3
 8005162:	e006      	b.n	8005172 <USB_FlushTxFifo+0x58>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b20      	cmp	r3, #32
 800516e:	d0f0      	beq.n	8005152 <USB_FlushTxFifo+0x38>
 8005170:	2300      	movs	r3, #0
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <USB_FlushRxFifo>:
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	3301      	adds	r3, #1
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005196:	d901      	bls.n	800519c <USB_FlushRxFifo+0x1e>
 8005198:	2303      	movs	r3, #3
 800519a:	e018      	b.n	80051ce <USB_FlushRxFifo+0x50>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	daf2      	bge.n	800518a <USB_FlushRxFifo+0xc>
 80051a4:	2300      	movs	r3, #0
 80051a6:	60fb      	str	r3, [r7, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2210      	movs	r2, #16
 80051ac:	611a      	str	r2, [r3, #16]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051ba:	d901      	bls.n	80051c0 <USB_FlushRxFifo+0x42>
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <USB_FlushRxFifo+0x50>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	2b10      	cmp	r3, #16
 80051ca:	d0f0      	beq.n	80051ae <USB_FlushRxFifo+0x30>
 80051cc:	2300      	movs	r3, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <USB_WritePacket>:
 80051da:	b480      	push	{r7}
 80051dc:	b089      	sub	sp, #36	@ 0x24
 80051de:	af00      	add	r7, sp, #0
 80051e0:	60f8      	str	r0, [r7, #12]
 80051e2:	60b9      	str	r1, [r7, #8]
 80051e4:	4611      	mov	r1, r2
 80051e6:	461a      	mov	r2, r3
 80051e8:	460b      	mov	r3, r1
 80051ea:	71fb      	strb	r3, [r7, #7]
 80051ec:	4613      	mov	r3, r2
 80051ee:	80bb      	strh	r3, [r7, #4]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d123      	bne.n	8005248 <USB_WritePacket+0x6e>
 8005200:	88bb      	ldrh	r3, [r7, #4]
 8005202:	3303      	adds	r3, #3
 8005204:	089b      	lsrs	r3, r3, #2
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	2300      	movs	r3, #0
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e018      	b.n	8005240 <USB_WritePacket+0x66>
 800520e:	79fb      	ldrb	r3, [r7, #7]
 8005210:	031a      	lsls	r2, r3, #12
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4413      	add	r3, r2
 8005216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800521a:	461a      	mov	r2, r3
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	3301      	adds	r3, #1
 800522c:	61fb      	str	r3, [r7, #28]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3301      	adds	r3, #1
 8005232:	61fb      	str	r3, [r7, #28]
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	3301      	adds	r3, #1
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	3301      	adds	r3, #1
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	429a      	cmp	r2, r3
 8005246:	d3e2      	bcc.n	800520e <USB_WritePacket+0x34>
 8005248:	2300      	movs	r3, #0
 800524a:	4618      	mov	r0, r3
 800524c:	3724      	adds	r7, #36	@ 0x24
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <USB_ReadPacket>:
 8005256:	b480      	push	{r7}
 8005258:	b08b      	sub	sp, #44	@ 0x2c
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	4613      	mov	r3, r2
 8005262:	80fb      	strh	r3, [r7, #6]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
 800526c:	88fb      	ldrh	r3, [r7, #6]
 800526e:	089b      	lsrs	r3, r3, #2
 8005270:	b29b      	uxth	r3, r3
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	83fb      	strh	r3, [r7, #30]
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	e014      	b.n	80052ac <USB_ReadPacket+0x56>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	3301      	adds	r3, #1
 8005292:	627b      	str	r3, [r7, #36]	@ 0x24
 8005294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005296:	3301      	adds	r3, #1
 8005298:	627b      	str	r3, [r7, #36]	@ 0x24
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	3301      	adds	r3, #1
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	3301      	adds	r3, #1
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	3301      	adds	r3, #1
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3e6      	bcc.n	8005282 <USB_ReadPacket+0x2c>
 80052b4:	8bfb      	ldrh	r3, [r7, #30]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d01e      	beq.n	80052f8 <USB_ReadPacket+0xa2>
 80052ba:	2300      	movs	r3, #0
 80052bc:	623b      	str	r3, [r7, #32]
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052c4:	461a      	mov	r2, r3
 80052c6:	f107 0310 	add.w	r3, r7, #16
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	b2da      	uxtb	r2, r3
 80052dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052de:	701a      	strb	r2, [r3, #0]
 80052e0:	6a3b      	ldr	r3, [r7, #32]
 80052e2:	3301      	adds	r3, #1
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	3301      	adds	r3, #1
 80052ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ec:	8bfb      	ldrh	r3, [r7, #30]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	83fb      	strh	r3, [r7, #30]
 80052f2:	8bfb      	ldrh	r3, [r7, #30]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1ea      	bne.n	80052ce <USB_ReadPacket+0x78>
 80052f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fa:	4618      	mov	r0, r3
 80052fc:	372c      	adds	r7, #44	@ 0x2c
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <USB_ReadInterrupts>:
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4013      	ands	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4618      	mov	r0, r3
 8005322:	3714      	adds	r7, #20
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_ReadChInterrupts>:
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4013      	ands	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <USB_GetMode>:
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	695b      	ldr	r3, [r3, #20]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <USB_CoreReset>:
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053a2:	d901      	bls.n	80053a8 <USB_CoreReset+0x1e>
 80053a4:	2303      	movs	r3, #3
 80053a6:	e01b      	b.n	80053e0 <USB_CoreReset+0x56>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	daf2      	bge.n	8005396 <USB_CoreReset+0xc>
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	f043 0201 	orr.w	r2, r3, #1
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	611a      	str	r2, [r3, #16]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3301      	adds	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053cc:	d901      	bls.n	80053d2 <USB_CoreReset+0x48>
 80053ce:	2303      	movs	r3, #3
 80053d0:	e006      	b.n	80053e0 <USB_CoreReset+0x56>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d0f0      	beq.n	80053c0 <USB_CoreReset+0x36>
 80053de:	2300      	movs	r3, #0
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <USB_HostInit>:
 80053ec:	b084      	sub	sp, #16
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b086      	sub	sp, #24
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80053fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800540c:	461a      	mov	r2, r3
 800540e:	2300      	movs	r3, #0
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005416:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	639a      	str	r2, [r3, #56]	@ 0x38
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	639a      	str	r2, [r3, #56]	@ 0x38
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800542e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <USB_HostInit+0x8a>
 8005442:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10a      	bne.n	8005460 <USB_HostInit+0x74>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005458:	f043 0304 	orr.w	r3, r3, #4
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e014      	b.n	800548a <USB_HostInit+0x9e>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800546e:	f023 0304 	bic.w	r3, r3, #4
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e009      	b.n	800548a <USB_HostInit+0x9e>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68fa      	ldr	r2, [r7, #12]
 8005480:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	2110      	movs	r1, #16
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fe44 	bl	800511a <USB_FlushTxFifo>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d001      	beq.n	800549c <USB_HostInit+0xb0>
 8005498:	2301      	movs	r3, #1
 800549a:	75fb      	strb	r3, [r7, #23]
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7ff fe6e 	bl	800517e <USB_FlushRxFifo>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d001      	beq.n	80054ac <USB_HostInit+0xc0>
 80054a8:	2301      	movs	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
 80054ac:	2300      	movs	r3, #0
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	e015      	b.n	80054de <USB_HostInit+0xf2>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	015a      	lsls	r2, r3, #5
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	4413      	add	r3, r2
 80054ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054be:	461a      	mov	r2, r3
 80054c0:	f04f 33ff 	mov.w	r3, #4294967295
 80054c4:	6093      	str	r3, [r2, #8]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d2:	461a      	mov	r2, r3
 80054d4:	2300      	movs	r3, #0
 80054d6:	60d3      	str	r3, [r2, #12]
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	3301      	adds	r3, #1
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054e2:	461a      	mov	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d3e3      	bcc.n	80054b2 <USB_HostInit+0xc6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	619a      	str	r2, [r3, #24]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f04f 32ff 	mov.w	r2, #4294967295
 80054f6:	615a      	str	r2, [r3, #20]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a18      	ldr	r2, [pc, #96]	@ (800555c <USB_HostInit+0x170>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10b      	bne.n	8005518 <USB_HostInit+0x12c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005506:	625a      	str	r2, [r3, #36]	@ 0x24
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a15      	ldr	r2, [pc, #84]	@ (8005560 <USB_HostInit+0x174>)
 800550c:	629a      	str	r2, [r3, #40]	@ 0x28
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a14      	ldr	r2, [pc, #80]	@ (8005564 <USB_HostInit+0x178>)
 8005512:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005516:	e009      	b.n	800552c <USB_HostInit+0x140>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2280      	movs	r2, #128	@ 0x80
 800551c:	625a      	str	r2, [r3, #36]	@ 0x24
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <USB_HostInit+0x17c>)
 8005522:	629a      	str	r2, [r3, #40]	@ 0x28
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a11      	ldr	r2, [pc, #68]	@ (800556c <USB_HostInit+0x180>)
 8005528:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800552c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <USB_HostInit+0x154>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	f043 0210 	orr.w	r2, r3, #16
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	619a      	str	r2, [r3, #24]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	4b0a      	ldr	r3, [pc, #40]	@ (8005570 <USB_HostInit+0x184>)
 8005546:	4313      	orrs	r3, r2
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6193      	str	r3, [r2, #24]
 800554c:	7dfb      	ldrb	r3, [r7, #23]
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005558:	b004      	add	sp, #16
 800555a:	4770      	bx	lr
 800555c:	40040000 	.word	0x40040000
 8005560:	01000200 	.word	0x01000200
 8005564:	00e00300 	.word	0x00e00300
 8005568:	00600080 	.word	0x00600080
 800556c:	004000e0 	.word	0x004000e0
 8005570:	a3200008 	.word	0xa3200008

08005574 <USB_InitFSLSPClkSel>:
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	60fb      	str	r3, [r7, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	6013      	str	r3, [r2, #0]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	68f9      	ldr	r1, [r7, #12]
 80055a8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80055ac:	4313      	orrs	r3, r2
 80055ae:	600b      	str	r3, [r1, #0]
 80055b0:	78fb      	ldrb	r3, [r7, #3]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d107      	bne.n	80055c6 <USB_InitFSLSPClkSel+0x52>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055bc:	461a      	mov	r2, r3
 80055be:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80055c2:	6053      	str	r3, [r2, #4]
 80055c4:	e00c      	b.n	80055e0 <USB_InitFSLSPClkSel+0x6c>
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d107      	bne.n	80055dc <USB_InitFSLSPClkSel+0x68>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055d2:	461a      	mov	r2, r3
 80055d4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80055d8:	6053      	str	r3, [r2, #4]
 80055da:	e001      	b.n	80055e0 <USB_InitFSLSPClkSel+0x6c>
 80055dc:	2301      	movs	r3, #1
 80055de:	e000      	b.n	80055e2 <USB_InitFSLSPClkSel+0x6e>
 80055e0:	2300      	movs	r3, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	3714      	adds	r7, #20
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <USB_ResetPort>:
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60bb      	str	r3, [r7, #8]
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005618:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	2064      	movs	r0, #100	@ 0x64
 8005620:	f7fb fc58 	bl	8000ed4 <HAL_Delay>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800562c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	200a      	movs	r0, #10
 8005634:	f7fb fc4e 	bl	8000ed4 <HAL_Delay>
 8005638:	2300      	movs	r3, #0
 800563a:	4618      	mov	r0, r3
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <USB_DriveVbus>:
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	460b      	mov	r3, r1
 800564c:	70fb      	strb	r3, [r7, #3]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	60fb      	str	r3, [r7, #12]
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60bb      	str	r3, [r7, #8]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005666:	60bb      	str	r3, [r7, #8]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <USB_DriveVbus+0x44>
 8005672:	78fb      	ldrb	r3, [r7, #3]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d106      	bne.n	8005686 <USB_DriveVbus+0x44>
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005690:	d109      	bne.n	80056a6 <USB_DriveVbus+0x64>
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d106      	bne.n	80056a6 <USB_DriveVbus+0x64>
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	2300      	movs	r3, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <USB_GetHostSpeed>:
 80056b4:	b480      	push	{r7}
 80056b6:	b085      	sub	sp, #20
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	2300      	movs	r3, #0
 80056c2:	60bb      	str	r3, [r7, #8]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	60bb      	str	r3, [r7, #8]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	0c5b      	lsrs	r3, r3, #17
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <USB_GetCurrentFrame>:
 80056e2:	b480      	push	{r7}
 80056e4:	b085      	sub	sp, #20
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	4618      	mov	r0, r3
 80056fa:	3714      	adds	r7, #20
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <USB_HC_Init>:
 8005704:	b580      	push	{r7, lr}
 8005706:	b088      	sub	sp, #32
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	4608      	mov	r0, r1
 800570e:	4611      	mov	r1, r2
 8005710:	461a      	mov	r2, r3
 8005712:	4603      	mov	r3, r0
 8005714:	70fb      	strb	r3, [r7, #3]
 8005716:	460b      	mov	r3, r1
 8005718:	70bb      	strb	r3, [r7, #2]
 800571a:	4613      	mov	r3, r2
 800571c:	707b      	strb	r3, [r7, #1]
 800571e:	2300      	movs	r3, #0
 8005720:	77fb      	strb	r3, [r7, #31]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	613b      	str	r3, [r7, #16]
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	4413      	add	r3, r2
 800572e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005732:	461a      	mov	r2, r3
 8005734:	f04f 33ff 	mov.w	r3, #4294967295
 8005738:	6093      	str	r3, [r2, #8]
 800573a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800573e:	2b03      	cmp	r3, #3
 8005740:	d87c      	bhi.n	800583c <USB_HC_Init+0x138>
 8005742:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <USB_HC_Init+0x44>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005759 	.word	0x08005759
 800574c:	080057ff 	.word	0x080057ff
 8005750:	08005759 	.word	0x08005759
 8005754:	080057c1 	.word	0x080057c1
 8005758:	78fb      	ldrb	r3, [r7, #3]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005764:	461a      	mov	r2, r3
 8005766:	f240 439d 	movw	r3, #1181	@ 0x49d
 800576a:	60d3      	str	r3, [r2, #12]
 800576c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005770:	2b00      	cmp	r3, #0
 8005772:	da10      	bge.n	8005796 <USB_HC_Init+0x92>
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	78fa      	ldrb	r2, [r7, #3]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	440a      	add	r2, r1
 800578a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800578e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005792:	60d3      	str	r3, [r2, #12]
 8005794:	e055      	b.n	8005842 <USB_HC_Init+0x13e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a6f      	ldr	r2, [pc, #444]	@ (8005958 <USB_HC_Init+0x254>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d151      	bne.n	8005842 <USB_HC_Init+0x13e>
 800579e:	78fb      	ldrb	r3, [r7, #3]
 80057a0:	015a      	lsls	r2, r3, #5
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	4413      	add	r3, r2
 80057a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	78fa      	ldrb	r2, [r7, #3]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057b8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057bc:	60d3      	str	r3, [r2, #12]
 80057be:	e040      	b.n	8005842 <USB_HC_Init+0x13e>
 80057c0:	78fb      	ldrb	r3, [r7, #3]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057cc:	461a      	mov	r2, r3
 80057ce:	f240 639d 	movw	r3, #1693	@ 0x69d
 80057d2:	60d3      	str	r3, [r2, #12]
 80057d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	da34      	bge.n	8005846 <USB_HC_Init+0x142>
 80057dc:	78fb      	ldrb	r3, [r7, #3]
 80057de:	015a      	lsls	r2, r3, #5
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4413      	add	r3, r2
 80057e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	78fa      	ldrb	r2, [r7, #3]
 80057ec:	0151      	lsls	r1, r2, #5
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	440a      	add	r2, r1
 80057f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057fa:	60d3      	str	r3, [r2, #12]
 80057fc:	e023      	b.n	8005846 <USB_HC_Init+0x142>
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580a:	461a      	mov	r2, r3
 800580c:	f240 2325 	movw	r3, #549	@ 0x225
 8005810:	60d3      	str	r3, [r2, #12]
 8005812:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005816:	2b00      	cmp	r3, #0
 8005818:	da17      	bge.n	800584a <USB_HC_Init+0x146>
 800581a:	78fb      	ldrb	r3, [r7, #3]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005834:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005838:	60d3      	str	r3, [r2, #12]
 800583a:	e006      	b.n	800584a <USB_HC_Init+0x146>
 800583c:	2301      	movs	r3, #1
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e004      	b.n	800584c <USB_HC_Init+0x148>
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <USB_HC_Init+0x148>
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <USB_HC_Init+0x148>
 800584a:	bf00      	nop
 800584c:	78fb      	ldrb	r3, [r7, #3]
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4413      	add	r3, r2
 8005854:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005858:	461a      	mov	r2, r3
 800585a:	2300      	movs	r3, #0
 800585c:	6053      	str	r3, [r2, #4]
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	4413      	add	r3, r2
 8005866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	440a      	add	r2, r1
 8005874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005878:	f043 0302 	orr.w	r3, r3, #2
 800587c:	60d3      	str	r3, [r2, #12]
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005884:	699a      	ldr	r2, [r3, #24]
 8005886:	78fb      	ldrb	r3, [r7, #3]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	2101      	movs	r1, #1
 800588e:	fa01 f303 	lsl.w	r3, r1, r3
 8005892:	6939      	ldr	r1, [r7, #16]
 8005894:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005898:	4313      	orrs	r3, r2
 800589a:	618b      	str	r3, [r1, #24]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	619a      	str	r2, [r3, #24]
 80058a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	da03      	bge.n	80058b8 <USB_HC_Init+0x1b4>
 80058b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e001      	b.n	80058bc <USB_HC_Init+0x1b8>
 80058b8:	2300      	movs	r3, #0
 80058ba:	61bb      	str	r3, [r7, #24]
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7ff fef9 	bl	80056b4 <USB_GetHostSpeed>
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d106      	bne.n	80058da <USB_HC_Init+0x1d6>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d003      	beq.n	80058da <USB_HC_Init+0x1d6>
 80058d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	e001      	b.n	80058de <USB_HC_Init+0x1da>
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	787b      	ldrb	r3, [r7, #1]
 80058e0:	059b      	lsls	r3, r3, #22
 80058e2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
 80058e6:	78bb      	ldrb	r3, [r7, #2]
 80058e8:	02db      	lsls	r3, r3, #11
 80058ea:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 80058ee:	431a      	orrs	r2, r3
 80058f0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80058f4:	049b      	lsls	r3, r3, #18
 80058f6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80058fa:	431a      	orrs	r2, r3
 80058fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80058fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005902:	431a      	orrs	r2, r3
 8005904:	69bb      	ldr	r3, [r7, #24]
 8005906:	431a      	orrs	r2, r3
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	0151      	lsls	r1, r2, #5
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	440a      	add	r2, r1
 8005914:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005922:	2b03      	cmp	r3, #3
 8005924:	d003      	beq.n	800592e <USB_HC_Init+0x22a>
 8005926:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800592a:	2b01      	cmp	r3, #1
 800592c:	d10f      	bne.n	800594e <USB_HC_Init+0x24a>
 800592e:	78fb      	ldrb	r3, [r7, #3]
 8005930:	015a      	lsls	r2, r3, #5
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	4413      	add	r3, r2
 8005936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	0151      	lsls	r1, r2, #5
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	440a      	add	r2, r1
 8005944:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005948:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	7ffb      	ldrb	r3, [r7, #31]
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40040000 	.word	0x40040000

0800595c <USB_HC_StartXfer>:
 800595c:	b580      	push	{r7, lr}
 800595e:	b08c      	sub	sp, #48	@ 0x30
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	4613      	mov	r3, r2
 8005968:	71fb      	strb	r3, [r7, #7]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	623b      	str	r3, [r7, #32]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	785b      	ldrb	r3, [r3, #1]
 8005972:	61fb      	str	r3, [r7, #28]
 8005974:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005978:	837b      	strh	r3, [r7, #26]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	4a5d      	ldr	r2, [pc, #372]	@ (8005af4 <USB_HC_StartXfer+0x198>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d12f      	bne.n	80059e2 <USB_HC_StartXfer+0x86>
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	2b01      	cmp	r3, #1
 8005986:	d11c      	bne.n	80059c2 <USB_HC_StartXfer+0x66>
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	7c9b      	ldrb	r3, [r3, #18]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <USB_HC_StartXfer+0x3c>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	7c9b      	ldrb	r3, [r3, #18]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d124      	bne.n	80059e2 <USB_HC_StartXfer+0x86>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	799b      	ldrb	r3, [r3, #6]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d120      	bne.n	80059e2 <USB_HC_StartXfer+0x86>
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	0151      	lsls	r1, r2, #5
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	440a      	add	r2, r1
 80059b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059be:	60d3      	str	r3, [r2, #12]
 80059c0:	e00f      	b.n	80059e2 <USB_HC_StartXfer+0x86>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	791b      	ldrb	r3, [r3, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <USB_HC_StartXfer+0x86>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	795b      	ldrb	r3, [r3, #5]
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d107      	bne.n	80059e2 <USB_HC_StartXfer+0x86>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	4619      	mov	r1, r3
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	f000 fb6b 	bl	80060b4 <USB_DoPing>
 80059de:	2300      	movs	r3, #0
 80059e0:	e232      	b.n	8005e48 <USB_HC_StartXfer+0x4ec>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	799b      	ldrb	r3, [r3, #6]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d158      	bne.n	8005a9c <USB_HC_StartXfer+0x140>
 80059ea:	2301      	movs	r3, #1
 80059ec:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	78db      	ldrb	r3, [r3, #3]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <USB_HC_StartXfer+0xaa>
 80059f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	8a92      	ldrh	r2, [r2, #20]
 80059fc:	fb03 f202 	mul.w	r2, r3, r2
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	61da      	str	r2, [r3, #28]
 8005a04:	e07c      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	7c9b      	ldrb	r3, [r3, #18]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d130      	bne.n	8005a70 <USB_HC_StartXfer+0x114>
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	2bbc      	cmp	r3, #188	@ 0xbc
 8005a14:	d918      	bls.n	8005a48 <USB_HC_StartXfer+0xec>
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	8a9b      	ldrh	r3, [r3, #20]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	61da      	str	r2, [r3, #28]
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	69da      	ldr	r2, [r3, #28]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	621a      	str	r2, [r3, #32]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d003      	beq.n	8005a38 <USB_HC_StartXfer+0xdc>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d103      	bne.n	8005a40 <USB_HC_StartXfer+0xe4>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	60da      	str	r2, [r3, #12]
 8005a3e:	e05f      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2201      	movs	r2, #1
 8005a44:	60da      	str	r2, [r3, #12]
 8005a46:	e05b      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	61da      	str	r2, [r3, #28]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d007      	beq.n	8005a68 <USB_HC_StartXfer+0x10c>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d003      	beq.n	8005a68 <USB_HC_StartXfer+0x10c>
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2204      	movs	r2, #4
 8005a64:	60da      	str	r2, [r3, #12]
 8005a66:	e04b      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2203      	movs	r2, #3
 8005a6c:	60da      	str	r2, [r3, #12]
 8005a6e:	e047      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a70:	79fb      	ldrb	r3, [r7, #7]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d10d      	bne.n	8005a92 <USB_HC_StartXfer+0x136>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	8a92      	ldrh	r2, [r2, #20]
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d907      	bls.n	8005a92 <USB_HC_StartXfer+0x136>
 8005a82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	8a92      	ldrh	r2, [r2, #20]
 8005a88:	fb03 f202 	mul.w	r2, r3, r2
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	61da      	str	r2, [r3, #28]
 8005a90:	e036      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	61da      	str	r2, [r3, #28]
 8005a9a:	e031      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	6a1b      	ldr	r3, [r3, #32]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d018      	beq.n	8005ad6 <USB_HC_StartXfer+0x17a>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	8a92      	ldrh	r2, [r2, #20]
 8005aac:	4413      	add	r3, r2
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	8a92      	ldrh	r2, [r2, #20]
 8005ab4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ab8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005aba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005abc:	8b7b      	ldrh	r3, [r7, #26]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d90b      	bls.n	8005ada <USB_HC_StartXfer+0x17e>
 8005ac2:	8b7b      	ldrh	r3, [r7, #26]
 8005ac4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005ac6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	8a92      	ldrh	r2, [r2, #20]
 8005acc:	fb03 f202 	mul.w	r2, r3, r2
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	61da      	str	r2, [r3, #28]
 8005ad4:	e001      	b.n	8005ada <USB_HC_StartXfer+0x17e>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	78db      	ldrb	r3, [r3, #3]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <USB_HC_StartXfer+0x19c>
 8005ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	8a92      	ldrh	r2, [r2, #20]
 8005ae8:	fb03 f202 	mul.w	r2, r3, r2
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	61da      	str	r2, [r3, #28]
 8005af0:	e006      	b.n	8005b00 <USB_HC_StartXfer+0x1a4>
 8005af2:	bf00      	nop
 8005af4:	40040000 	.word	0x40040000
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6a1a      	ldr	r2, [r3, #32]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	61da      	str	r2, [r3, #28]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8005b08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b0a:	04d9      	lsls	r1, r3, #19
 8005b0c:	4ba3      	ldr	r3, [pc, #652]	@ (8005d9c <USB_HC_StartXfer+0x440>)
 8005b0e:	400b      	ands	r3, r1
 8005b10:	431a      	orrs	r2, r3
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	7d9b      	ldrb	r3, [r3, #22]
 8005b16:	075b      	lsls	r3, r3, #29
 8005b18:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8005b1c:	69f9      	ldr	r1, [r7, #28]
 8005b1e:	0148      	lsls	r0, r1, #5
 8005b20:	6a39      	ldr	r1, [r7, #32]
 8005b22:	4401      	add	r1, r0
 8005b24:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	610b      	str	r3, [r1, #16]
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d009      	beq.n	8005b46 <USB_HC_StartXfer+0x1ea>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6999      	ldr	r1, [r3, #24]
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b42:	460a      	mov	r2, r1
 8005b44:	615a      	str	r2, [r3, #20]
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f003 0301 	and.w	r3, r3, #1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf0c      	ite	eq
 8005b56:	2301      	moveq	r3, #1
 8005b58:	2300      	movne	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	767b      	strb	r3, [r7, #25]
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	6a3b      	ldr	r3, [r7, #32]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	0151      	lsls	r1, r2, #5
 8005b70:	6a3a      	ldr	r2, [r7, #32]
 8005b72:	440a      	add	r2, r1
 8005b74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	015a      	lsls	r2, r3, #5
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	4413      	add	r3, r2
 8005b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	7e7b      	ldrb	r3, [r7, #25]
 8005b8e:	075b      	lsls	r3, r3, #29
 8005b90:	69f9      	ldr	r1, [r7, #28]
 8005b92:	0148      	lsls	r0, r1, #5
 8005b94:	6a39      	ldr	r1, [r7, #32]
 8005b96:	4401      	add	r1, r0
 8005b98:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	600b      	str	r3, [r1, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	799b      	ldrb	r3, [r3, #6]
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 80c3 	bne.w	8005d30 <USB_HC_StartXfer+0x3d4>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	7c5b      	ldrb	r3, [r3, #17]
 8005bae:	01db      	lsls	r3, r3, #7
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	7c12      	ldrb	r2, [r2, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	69fa      	ldr	r2, [r7, #28]
 8005bb8:	0151      	lsls	r1, r2, #5
 8005bba:	6a3a      	ldr	r2, [r7, #32]
 8005bbc:	440a      	add	r2, r1
 8005bbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bc6:	6053      	str	r3, [r2, #4]
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	69fa      	ldr	r2, [r7, #28]
 8005bd8:	0151      	lsls	r1, r2, #5
 8005bda:	6a3a      	ldr	r2, [r7, #32]
 8005bdc:	440a      	add	r2, r1
 8005bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005be2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005be6:	60d3      	str	r3, [r2, #12]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	79db      	ldrb	r3, [r3, #7]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d123      	bne.n	8005c38 <USB_HC_StartXfer+0x2dc>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	78db      	ldrb	r3, [r3, #3]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d11f      	bne.n	8005c38 <USB_HC_StartXfer+0x2dc>
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	015a      	lsls	r2, r3, #5
 8005bfc:	6a3b      	ldr	r3, [r7, #32]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	69fa      	ldr	r2, [r7, #28]
 8005c08:	0151      	lsls	r1, r2, #5
 8005c0a:	6a3a      	ldr	r2, [r7, #32]
 8005c0c:	440a      	add	r2, r1
 8005c0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c16:	6053      	str	r3, [r2, #4]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	0151      	lsls	r1, r2, #5
 8005c2a:	6a3a      	ldr	r2, [r7, #32]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c36:	60d3      	str	r3, [r2, #12]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	7c9b      	ldrb	r3, [r3, #18]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d003      	beq.n	8005c48 <USB_HC_StartXfer+0x2ec>
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	7c9b      	ldrb	r3, [r3, #18]
 8005c44:	2b03      	cmp	r3, #3
 8005c46:	d117      	bne.n	8005c78 <USB_HC_StartXfer+0x31c>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	79db      	ldrb	r3, [r3, #7]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d113      	bne.n	8005c78 <USB_HC_StartXfer+0x31c>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	78db      	ldrb	r3, [r3, #3]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d10f      	bne.n	8005c78 <USB_HC_StartXfer+0x31c>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c76:	6053      	str	r3, [r2, #4]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	7c9b      	ldrb	r3, [r3, #18]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d162      	bne.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	78db      	ldrb	r3, [r3, #3]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d15e      	bne.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d858      	bhi.n	8005d44 <USB_HC_StartXfer+0x3e8>
 8005c92:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <USB_HC_StartXfer+0x33c>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005ccb 	.word	0x08005ccb
 8005ca0:	08005ced 	.word	0x08005ced
 8005ca4:	08005d0f 	.word	0x08005d0f
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	6a3a      	ldr	r2, [r7, #32]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cc6:	6053      	str	r3, [r2, #4]
 8005cc8:	e03d      	b.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	69fa      	ldr	r2, [r7, #28]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ce4:	f043 030e 	orr.w	r3, r3, #14
 8005ce8:	6053      	str	r3, [r2, #4]
 8005cea:	e02c      	b.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	69fa      	ldr	r2, [r7, #28]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	6a3a      	ldr	r2, [r7, #32]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005d0a:	6053      	str	r3, [r2, #4]
 8005d0c:	e01b      	b.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	69fa      	ldr	r2, [r7, #28]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d2c:	6053      	str	r3, [r2, #4]
 8005d2e:	e00a      	b.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	2300      	movs	r3, #0
 8005d40:	6053      	str	r3, [r2, #4]
 8005d42:	e000      	b.n	8005d46 <USB_HC_StartXfer+0x3ea>
 8005d44:	bf00      	nop
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	78db      	ldrb	r3, [r3, #3]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <USB_HC_StartXfer+0x414>
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d6c:	613b      	str	r3, [r7, #16]
 8005d6e:	e003      	b.n	8005d78 <USB_HC_StartXfer+0x41c>
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <USB_HC_StartXfer+0x444>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	e055      	b.n	8005e48 <USB_HC_StartXfer+0x4ec>
 8005d9c:	1ff80000 	.word	0x1ff80000
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	78db      	ldrb	r3, [r3, #3]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d14e      	bne.n	8005e46 <USB_HC_StartXfer+0x4ea>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d04a      	beq.n	8005e46 <USB_HC_StartXfer+0x4ea>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	79db      	ldrb	r3, [r3, #7]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d146      	bne.n	8005e46 <USB_HC_StartXfer+0x4ea>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	7c9b      	ldrb	r3, [r3, #18]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d831      	bhi.n	8005e24 <USB_HC_StartXfer+0x4c8>
 8005dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc8 <USB_HC_StartXfer+0x46c>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005dfd 	.word	0x08005dfd
 8005dd0:	08005dd9 	.word	0x08005dd9
 8005dd4:	08005dfd 	.word	0x08005dfd
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	3303      	adds	r3, #3
 8005dde:	089b      	lsrs	r3, r3, #2
 8005de0:	82fb      	strh	r3, [r7, #22]
 8005de2:	8afa      	ldrh	r2, [r7, #22]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d91c      	bls.n	8005e28 <USB_HC_StartXfer+0x4cc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	619a      	str	r2, [r3, #24]
 8005dfa:	e015      	b.n	8005e28 <USB_HC_StartXfer+0x4cc>
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	3303      	adds	r3, #3
 8005e02:	089b      	lsrs	r3, r3, #2
 8005e04:	82fb      	strh	r3, [r7, #22]
 8005e06:	8afa      	ldrh	r2, [r7, #22]
 8005e08:	6a3b      	ldr	r3, [r7, #32]
 8005e0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d90a      	bls.n	8005e2c <USB_HC_StartXfer+0x4d0>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	619a      	str	r2, [r3, #24]
 8005e22:	e003      	b.n	8005e2c <USB_HC_StartXfer+0x4d0>
 8005e24:	bf00      	nop
 8005e26:	e002      	b.n	8005e2e <USB_HC_StartXfer+0x4d2>
 8005e28:	bf00      	nop
 8005e2a:	e000      	b.n	8005e2e <USB_HC_StartXfer+0x4d2>
 8005e2c:	bf00      	nop
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	6999      	ldr	r1, [r3, #24]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	785a      	ldrb	r2, [r3, #1]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	9000      	str	r0, [sp, #0]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff f9ca 	bl	80051da <USB_WritePacket>
 8005e46:	2300      	movs	r3, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	@ 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USB_HC_ReadInterrupt>:
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <USB_HC_Halt>:
 8005e72:	b480      	push	{r7}
 8005e74:	b089      	sub	sp, #36	@ 0x24
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	61fb      	str	r3, [r7, #28]
 8005e82:	78fb      	ldrb	r3, [r7, #3]
 8005e84:	61bb      	str	r3, [r7, #24]
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	0c9b      	lsrs	r3, r3, #18
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	0fdb      	lsrs	r3, r3, #31
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	0fdb      	lsrs	r3, r3, #31
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	f003 0320 	and.w	r3, r3, #32
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d10d      	bne.n	8005ef4 <USB_HC_Halt+0x82>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <USB_HC_Halt+0x82>
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <USB_HC_Halt+0x7e>
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d002      	beq.n	8005ef0 <USB_HC_Halt+0x7e>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	d101      	bne.n	8005ef4 <USB_HC_Halt+0x82>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	e0d8      	b.n	80060a6 <USB_HC_Halt+0x234>
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d002      	beq.n	8005f00 <USB_HC_Halt+0x8e>
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d173      	bne.n	8005fe8 <USB_HC_Halt+0x176>
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f1a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d14a      	bne.n	8005fc2 <USB_HC_Halt+0x150>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d133      	bne.n	8005fa0 <USB_HC_Halt+0x12e>
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	0151      	lsls	r1, r2, #5
 8005f4a:	69fa      	ldr	r2, [r7, #28]
 8005f4c:	440a      	add	r2, r1
 8005f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f52:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	015a      	lsls	r2, r3, #5
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	4413      	add	r3, r2
 8005f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	0151      	lsls	r1, r2, #5
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	440a      	add	r2, r1
 8005f6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f84:	d82e      	bhi.n	8005fe4 <USB_HC_Halt+0x172>
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f9c:	d0ec      	beq.n	8005f78 <USB_HC_Halt+0x106>
 8005f9e:	e081      	b.n	80060a4 <USB_HC_Halt+0x232>
 8005fa0:	69bb      	ldr	r3, [r7, #24]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e070      	b.n	80060a4 <USB_HC_Halt+0x232>
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fdc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e05f      	b.n	80060a4 <USB_HC_Halt+0x232>
 8005fe4:	bf00      	nop
 8005fe6:	e05d      	b.n	80060a4 <USB_HC_Halt+0x232>
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	015a      	lsls	r2, r3, #5
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	4413      	add	r3, r2
 8005ff0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	0151      	lsls	r1, r2, #5
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	440a      	add	r2, r1
 8005ffe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006002:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d133      	bne.n	8006080 <USB_HC_Halt+0x20e>
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006032:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	015a      	lsls	r2, r3, #5
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	4413      	add	r3, r2
 8006040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	0151      	lsls	r1, r2, #5
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	440a      	add	r2, r1
 800604e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006052:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	3301      	adds	r3, #1
 800605c:	60bb      	str	r3, [r7, #8]
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006064:	d81d      	bhi.n	80060a2 <USB_HC_Halt+0x230>
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800607c:	d0ec      	beq.n	8006058 <USB_HC_Halt+0x1e6>
 800607e:	e011      	b.n	80060a4 <USB_HC_Halt+0x232>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	69ba      	ldr	r2, [r7, #24]
 8006090:	0151      	lsls	r1, r2, #5
 8006092:	69fa      	ldr	r2, [r7, #28]
 8006094:	440a      	add	r2, r1
 8006096:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800609a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800609e:	6013      	str	r3, [r2, #0]
 80060a0:	e000      	b.n	80060a4 <USB_HC_Halt+0x232>
 80060a2:	bf00      	nop
 80060a4:	2300      	movs	r3, #0
 80060a6:	4618      	mov	r0, r3
 80060a8:	3724      	adds	r7, #36	@ 0x24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <USB_DoPing>:
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	2301      	movs	r3, #1
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	04da      	lsls	r2, r3, #19
 80060d0:	4b15      	ldr	r3, [pc, #84]	@ (8006128 <USB_DoPing+0x74>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80060e4:	6113      	str	r3, [r2, #16]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	461a      	mov	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	2300      	movs	r3, #0
 800611a:	4618      	mov	r0, r3
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	1ff80000 	.word	0x1ff80000

0800612c <USB_StopHost>:
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	2300      	movs	r3, #0
 8006136:	77fb      	strb	r3, [r7, #31]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fe ff8d 	bl	8005060 <USB_DisableGlobalInt>
 8006146:	2110      	movs	r1, #16
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7fe ffe6 	bl	800511a <USB_FlushTxFifo>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d001      	beq.n	8006158 <USB_StopHost+0x2c>
 8006154:	2301      	movs	r3, #1
 8006156:	77fb      	strb	r3, [r7, #31]
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f7ff f810 	bl	800517e <USB_FlushRxFifo>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <USB_StopHost+0x3c>
 8006164:	2301      	movs	r3, #1
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	2300      	movs	r3, #0
 800616a:	61bb      	str	r3, [r7, #24]
 800616c:	e01f      	b.n	80061ae <USB_StopHost+0x82>
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006184:	613b      	str	r3, [r7, #16]
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a2:	461a      	mov	r2, r3
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	6013      	str	r3, [r2, #0]
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	3301      	adds	r3, #1
 80061ac:	61bb      	str	r3, [r7, #24]
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	2b0f      	cmp	r3, #15
 80061b2:	d9dc      	bls.n	800616e <USB_StopHost+0x42>
 80061b4:	2300      	movs	r3, #0
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e034      	b.n	8006224 <USB_StopHost+0xf8>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061e0:	613b      	str	r3, [r7, #16]
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ee:	461a      	mov	r2, r3
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	3301      	adds	r3, #1
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006200:	d80c      	bhi.n	800621c <USB_StopHost+0xf0>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	015a      	lsls	r2, r3, #5
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	4413      	add	r3, r2
 800620a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006218:	d0ec      	beq.n	80061f4 <USB_StopHost+0xc8>
 800621a:	e000      	b.n	800621e <USB_StopHost+0xf2>
 800621c:	bf00      	nop
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	3301      	adds	r3, #1
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b0f      	cmp	r3, #15
 8006228:	d9c7      	bls.n	80061ba <USB_StopHost+0x8e>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006230:	461a      	mov	r2, r3
 8006232:	f04f 33ff 	mov.w	r3, #4294967295
 8006236:	6153      	str	r3, [r2, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f04f 32ff 	mov.w	r2, #4294967295
 800623e:	615a      	str	r2, [r3, #20]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fe fefc 	bl	800503e <USB_EnableGlobalInt>
 8006246:	7ffb      	ldrb	r3, [r7, #31]
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b089      	sub	sp, #36	@ 0x24
 8006254:	af04      	add	r7, sp, #16
 8006256:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006258:	2301      	movs	r3, #1
 800625a:	2202      	movs	r2, #2
 800625c:	2102      	movs	r1, #2
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fc85 	bl	8006b6e <USBH_FindInterface>
 8006264:	4603      	mov	r3, r0
 8006266:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	2bff      	cmp	r3, #255	@ 0xff
 800626c:	d002      	beq.n	8006274 <USBH_CDC_InterfaceInit+0x24>
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d901      	bls.n	8006278 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006274:	2302      	movs	r3, #2
 8006276:	e13d      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f000 fc5a 	bl	8006b36 <USBH_SelectInterface>
 8006282:	4603      	mov	r3, r0
 8006284:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800628c:	2302      	movs	r3, #2
 800628e:	e131      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006296:	2050      	movs	r0, #80	@ 0x50
 8006298:	f002 fb64 	bl	8008964 <malloc>
 800629c:	4603      	mov	r3, r0
 800629e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d101      	bne.n	80062b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80062b0:	2302      	movs	r3, #2
 80062b2:	e11f      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80062b4:	2250      	movs	r2, #80	@ 0x50
 80062b6:	2100      	movs	r1, #0
 80062b8:	68b8      	ldr	r0, [r7, #8]
 80062ba:	f002 fc11 	bl	8008ae0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062be:	7bfb      	ldrb	r3, [r7, #15]
 80062c0:	687a      	ldr	r2, [r7, #4]
 80062c2:	211a      	movs	r1, #26
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b25b      	sxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da15      	bge.n	8006302 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062d6:	7bfb      	ldrb	r3, [r7, #15]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	211a      	movs	r1, #26
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062e6:	781a      	ldrb	r2, [r3, #0]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	211a      	movs	r1, #26
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80062fc:	881a      	ldrh	r2, [r3, #0]
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 ffbe 	bl	800828a <USBH_AllocPipe>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7819      	ldrb	r1, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	7858      	ldrb	r0, [r3, #1]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	8952      	ldrh	r2, [r2, #10]
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	2203      	movs	r2, #3
 8006332:	9201      	str	r2, [sp, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	4623      	mov	r3, r4
 8006338:	4602      	mov	r2, r0
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f001 ff76 	bl	800822c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2200      	movs	r2, #0
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f002 fa85 	bl	8008858 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800634e:	2300      	movs	r3, #0
 8006350:	2200      	movs	r2, #0
 8006352:	210a      	movs	r1, #10
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fc0a 	bl	8006b6e <USBH_FindInterface>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2bff      	cmp	r3, #255	@ 0xff
 8006362:	d002      	beq.n	800636a <USBH_CDC_InterfaceInit+0x11a>
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d901      	bls.n	800636e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800636a:	2302      	movs	r3, #2
 800636c:	e0c2      	b.n	80064f4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	211a      	movs	r1, #26
 8006374:	fb01 f303 	mul.w	r3, r1, r3
 8006378:	4413      	add	r3, r2
 800637a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	b25b      	sxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	da16      	bge.n	80063b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	211a      	movs	r1, #26
 800638c:	fb01 f303 	mul.w	r3, r1, r3
 8006390:	4413      	add	r3, r2
 8006392:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	211a      	movs	r1, #26
 80063a2:	fb01 f303 	mul.w	r3, r1, r3
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063ac:	881a      	ldrh	r2, [r3, #0]
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	835a      	strh	r2, [r3, #26]
 80063b2:	e015      	b.n	80063e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063b4:	7bfb      	ldrb	r3, [r7, #15]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	211a      	movs	r1, #26
 80063ba:	fb01 f303 	mul.w	r3, r1, r3
 80063be:	4413      	add	r3, r2
 80063c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063c4:	781a      	ldrb	r2, [r3, #0]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	211a      	movs	r1, #26
 80063d0:	fb01 f303 	mul.w	r3, r1, r3
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063da:	881a      	ldrh	r2, [r3, #0]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	211a      	movs	r1, #26
 80063e6:	fb01 f303 	mul.w	r3, r1, r3
 80063ea:	4413      	add	r3, r2
 80063ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	b25b      	sxtb	r3, r3
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	da16      	bge.n	8006426 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	211a      	movs	r1, #26
 80063fe:	fb01 f303 	mul.w	r3, r1, r3
 8006402:	4413      	add	r3, r2
 8006404:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006408:	781a      	ldrb	r2, [r3, #0]
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	211a      	movs	r1, #26
 8006414:	fb01 f303 	mul.w	r3, r1, r3
 8006418:	4413      	add	r3, r2
 800641a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800641e:	881a      	ldrh	r2, [r3, #0]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	835a      	strh	r2, [r3, #26]
 8006424:	e015      	b.n	8006452 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006426:	7bfb      	ldrb	r3, [r7, #15]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	211a      	movs	r1, #26
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	4413      	add	r3, r2
 8006432:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	211a      	movs	r1, #26
 8006442:	fb01 f303 	mul.w	r3, r1, r3
 8006446:	4413      	add	r3, r2
 8006448:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800644c:	881a      	ldrh	r2, [r3, #0]
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	7b9b      	ldrb	r3, [r3, #14]
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f001 ff16 	bl	800828a <USBH_AllocPipe>
 800645e:	4603      	mov	r3, r0
 8006460:	461a      	mov	r2, r3
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	7bdb      	ldrb	r3, [r3, #15]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f001 ff0c 	bl	800828a <USBH_AllocPipe>
 8006472:	4603      	mov	r3, r0
 8006474:	461a      	mov	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	7b59      	ldrb	r1, [r3, #13]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	7b98      	ldrb	r0, [r3, #14]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800648e:	68ba      	ldr	r2, [r7, #8]
 8006490:	8b12      	ldrh	r2, [r2, #24]
 8006492:	9202      	str	r2, [sp, #8]
 8006494:	2202      	movs	r2, #2
 8006496:	9201      	str	r2, [sp, #4]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	4623      	mov	r3, r4
 800649c:	4602      	mov	r2, r0
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f001 fec4 	bl	800822c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	7b19      	ldrb	r1, [r3, #12]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	7bd8      	ldrb	r0, [r3, #15]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80064b8:	68ba      	ldr	r2, [r7, #8]
 80064ba:	8b52      	ldrh	r2, [r2, #26]
 80064bc:	9202      	str	r2, [sp, #8]
 80064be:	2202      	movs	r2, #2
 80064c0:	9201      	str	r2, [sp, #4]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	4623      	mov	r3, r4
 80064c6:	4602      	mov	r2, r0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f001 feaf 	bl	800822c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	7b5b      	ldrb	r3, [r3, #13]
 80064da:	2200      	movs	r2, #0
 80064dc:	4619      	mov	r1, r3
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f002 f9ba 	bl	8008858 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	7b1b      	ldrb	r3, [r3, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f002 f9b3 	bl	8008858 <USBH_LL_SetToggle>

  return USBH_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd90      	pop	{r4, r7, pc}

080064fc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00e      	beq.n	8006534 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	4619      	mov	r1, r3
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f001 fea4 	bl	800826a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 fecf 	bl	80082cc <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	7b1b      	ldrb	r3, [r3, #12]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00e      	beq.n	800655a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	7b1b      	ldrb	r3, [r3, #12]
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f001 fe91 	bl	800826a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	7b1b      	ldrb	r3, [r3, #12]
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 febc 	bl	80082cc <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	7b5b      	ldrb	r3, [r3, #13]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00e      	beq.n	8006580 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	7b5b      	ldrb	r3, [r3, #13]
 8006566:	4619      	mov	r1, r3
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f001 fe7e 	bl	800826a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	7b5b      	ldrb	r3, [r3, #13]
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fea9 	bl	80082cc <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2200      	movs	r2, #0
 800657e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d00b      	beq.n	80065a4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	4618      	mov	r0, r3
 8006596:	f002 f9ed 	bl	8008974 <free>
    phost->pActiveClass->pData = 0U;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065a0:	2200      	movs	r2, #0
 80065a2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065bc:	69db      	ldr	r3, [r3, #28]
 80065be:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3340      	adds	r3, #64	@ 0x40
 80065c4:	4619      	mov	r1, r3
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f8b1 	bl	800672e <GetLineCoding>
 80065cc:	4603      	mov	r3, r0
 80065ce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80065d0:	7afb      	ldrb	r3, [r7, #11]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d105      	bne.n	80065e2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80065dc:	2102      	movs	r1, #2
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80065e2:	7afb      	ldrb	r3, [r7, #11]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800660c:	2b04      	cmp	r3, #4
 800660e:	d877      	bhi.n	8006700 <USBH_CDC_Process+0x114>
 8006610:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <USBH_CDC_Process+0x2c>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	0800662d 	.word	0x0800662d
 800661c:	08006633 	.word	0x08006633
 8006620:	08006663 	.word	0x08006663
 8006624:	080066d7 	.word	0x080066d7
 8006628:	080066e5 	.word	0x080066e5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	73fb      	strb	r3, [r7, #15]
      break;
 8006630:	e06d      	b.n	800670e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006636:	4619      	mov	r1, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f897 	bl	800676c <SetLineCoding>
 800663e:	4603      	mov	r3, r0
 8006640:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	2202      	movs	r2, #2
 800664c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006650:	e058      	b.n	8006704 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006652:	7bbb      	ldrb	r3, [r7, #14]
 8006654:	2b01      	cmp	r3, #1
 8006656:	d055      	beq.n	8006704 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	2204      	movs	r2, #4
 800665c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006660:	e050      	b.n	8006704 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	3340      	adds	r3, #64	@ 0x40
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f860 	bl	800672e <GetLineCoding>
 800666e:	4603      	mov	r3, r0
 8006670:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006672:	7bbb      	ldrb	r3, [r7, #14]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d126      	bne.n	80066c6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800668a:	791b      	ldrb	r3, [r3, #4]
 800668c:	429a      	cmp	r2, r3
 800668e:	d13b      	bne.n	8006708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800669a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800669c:	429a      	cmp	r2, r3
 800669e:	d133      	bne.n	8006708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066aa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d12b      	bne.n	8006708 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066b8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d124      	bne.n	8006708 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f958 	bl	8006974 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80066c4:	e020      	b.n	8006708 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d01d      	beq.n	8006708 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2204      	movs	r2, #4
 80066d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80066d4:	e018      	b.n	8006708 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f867 	bl	80067aa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f8da 	bl	8006896 <CDC_ProcessReception>
      break;
 80066e2:	e014      	b.n	800670e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80066e4:	2100      	movs	r1, #0
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f001 f81a 	bl	8007720 <USBH_ClrFeature>
 80066ec:	4603      	mov	r3, r0
 80066ee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066f0:	7bbb      	ldrb	r3, [r7, #14]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80066fe:	e005      	b.n	800670c <USBH_CDC_Process+0x120>

    default:
      break;
 8006700:	bf00      	nop
 8006702:	e004      	b.n	800670e <USBH_CDC_Process+0x122>
      break;
 8006704:	bf00      	nop
 8006706:	e002      	b.n	800670e <USBH_CDC_Process+0x122>
      break;
 8006708:	bf00      	nop
 800670a:	e000      	b.n	800670e <USBH_CDC_Process+0x122>
      break;
 800670c:	bf00      	nop

  }

  return status;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr

0800672e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
 8006736:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	22a1      	movs	r2, #161	@ 0xa1
 800673c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2221      	movs	r2, #33	@ 0x21
 8006742:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2207      	movs	r2, #7
 8006754:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2207      	movs	r2, #7
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f001 fb14 	bl	8007d8a <USBH_CtlReq>
 8006762:	4603      	mov	r3, r0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2221      	movs	r2, #33	@ 0x21
 800677a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2207      	movs	r2, #7
 8006792:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	2207      	movs	r2, #7
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f001 faf5 	bl	8007d8a <USBH_CtlReq>
 80067a0:	4603      	mov	r3, r0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af02      	add	r7, sp, #8
 80067b0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80067bc:	2300      	movs	r3, #0
 80067be:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d002      	beq.n	80067d0 <CDC_ProcessTransmission+0x26>
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d023      	beq.n	8006816 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80067ce:	e05e      	b.n	800688e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	8b12      	ldrh	r2, [r2, #24]
 80067d8:	4293      	cmp	r3, r2
 80067da:	d90b      	bls.n	80067f4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	69d9      	ldr	r1, [r3, #28]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8b1a      	ldrh	r2, [r3, #24]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	7b5b      	ldrb	r3, [r3, #13]
 80067e8:	2001      	movs	r0, #1
 80067ea:	9000      	str	r0, [sp, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fcda 	bl	80081a6 <USBH_BulkSendData>
 80067f2:	e00b      	b.n	800680c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7b5b      	ldrb	r3, [r3, #13]
 8006802:	2001      	movs	r0, #1
 8006804:	9000      	str	r0, [sp, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 fccd 	bl	80081a6 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	2202      	movs	r2, #2
 8006810:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006814:	e03b      	b.n	800688e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	7b5b      	ldrb	r3, [r3, #13]
 800681a:	4619      	mov	r1, r3
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f001 fff1 	bl	8008804 <USBH_LL_GetURBState>
 8006822:	4603      	mov	r3, r0
 8006824:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006826:	7afb      	ldrb	r3, [r7, #11]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d128      	bne.n	800687e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	8b12      	ldrh	r2, [r2, #24]
 8006834:	4293      	cmp	r3, r2
 8006836:	d90e      	bls.n	8006856 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	8b12      	ldrh	r2, [r2, #24]
 8006840:	1a9a      	subs	r2, r3, r2
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	8b12      	ldrh	r2, [r2, #24]
 800684e:	441a      	add	r2, r3
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	61da      	str	r2, [r3, #28]
 8006854:	e002      	b.n	800685c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006860:	2b00      	cmp	r3, #0
 8006862:	d004      	beq.n	800686e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800686c:	e00e      	b.n	800688c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f868 	bl	800694c <USBH_CDC_TransmitCallback>
      break;
 800687c:	e006      	b.n	800688c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800687e:	7afb      	ldrb	r3, [r7, #11]
 8006880:	2b02      	cmp	r3, #2
 8006882:	d103      	bne.n	800688c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800688c:	bf00      	nop
  }
}
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b086      	sub	sp, #24
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80068a8:	2300      	movs	r3, #0
 80068aa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d002      	beq.n	80068bc <CDC_ProcessReception+0x26>
 80068b6:	2b04      	cmp	r3, #4
 80068b8:	d00e      	beq.n	80068d8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80068ba:	e043      	b.n	8006944 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	6a19      	ldr	r1, [r3, #32]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	8b5a      	ldrh	r2, [r3, #26]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	7b1b      	ldrb	r3, [r3, #12]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fc91 	bl	80081f0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2204      	movs	r2, #4
 80068d2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80068d6:	e035      	b.n	8006944 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	7b1b      	ldrb	r3, [r3, #12]
 80068dc:	4619      	mov	r1, r3
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 ff90 	bl	8008804 <USBH_LL_GetURBState>
 80068e4:	4603      	mov	r3, r0
 80068e6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80068e8:	7cfb      	ldrb	r3, [r7, #19]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d129      	bne.n	8006942 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	7b1b      	ldrb	r3, [r3, #12]
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fef3 	bl	80086e0 <USBH_LL_GetLastXferSize>
 80068fa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	429a      	cmp	r2, r3
 8006904:	d016      	beq.n	8006934 <CDC_ProcessReception+0x9e>
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	8b5b      	ldrh	r3, [r3, #26]
 800690a:	461a      	mov	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4293      	cmp	r3, r2
 8006910:	d910      	bls.n	8006934 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	1ad2      	subs	r2, r2, r3
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6a1a      	ldr	r2, [r3, #32]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	441a      	add	r2, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	2203      	movs	r2, #3
 800692e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006932:	e006      	b.n	8006942 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f80f 	bl	8006960 <USBH_CDC_ReceiveCallback>
      break;
 8006942:	bf00      	nop
  }
}
 8006944:	bf00      	nop
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	4613      	mov	r3, r2
 8006994:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800699c:	2302      	movs	r3, #2
 800699e:	e029      	b.n	80069f4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	79fa      	ldrb	r2, [r7, #7]
 80069a4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 f81f 	bl	80069fc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80069ec:	68f8      	ldr	r0, [r7, #12]
 80069ee:	f001 fdc3 	bl	8008578 <USBH_LL_Init>

  return USBH_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	e009      	b.n	8006a22 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	33e0      	adds	r3, #224	@ 0xe0
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	2200      	movs	r2, #0
 8006a1a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2b0f      	cmp	r3, #15
 8006a26:	d9f2      	bls.n	8006a0e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	e009      	b.n	8006a42 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a48:	d3f1      	bcc.n	8006a2e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2240      	movs	r2, #64	@ 0x40
 8006a6e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	331c      	adds	r3, #28
 8006a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f002 f81d 	bl	8008ae0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006aac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f002 f814 	bl	8008ae0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006abe:	2212      	movs	r2, #18
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 f80c 	bl	8008ae0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006ace:	223e      	movs	r2, #62	@ 0x3e
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 f804 	bl	8008ae0 <memset>

  return USBH_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006ae2:	b480      	push	{r7}
 8006ae4:	b085      	sub	sp, #20
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
 8006aea:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006aec:	2300      	movs	r3, #0
 8006aee:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d016      	beq.n	8006b24 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10e      	bne.n	8006b1e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006b06:	1c59      	adds	r1, r3, #1
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	33de      	adds	r3, #222	@ 0xde
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	e004      	b.n	8006b28 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	73fb      	strb	r3, [r7, #15]
 8006b22:	e001      	b.n	8006b28 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006b42:	2300      	movs	r3, #0
 8006b44:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006b4c:	78fa      	ldrb	r2, [r7, #3]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d204      	bcs.n	8006b5c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	78fa      	ldrb	r2, [r7, #3]
 8006b56:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006b5a:	e001      	b.n	8006b60 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006b5c:	2302      	movs	r3, #2
 8006b5e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b087      	sub	sp, #28
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	4608      	mov	r0, r1
 8006b78:	4611      	mov	r1, r2
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	70fb      	strb	r3, [r7, #3]
 8006b80:	460b      	mov	r3, r1
 8006b82:	70bb      	strb	r3, [r7, #2]
 8006b84:	4613      	mov	r3, r2
 8006b86:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b96:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b98:	e025      	b.n	8006be6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	221a      	movs	r2, #26
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	3302      	adds	r3, #2
 8006baa:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	795b      	ldrb	r3, [r3, #5]
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d002      	beq.n	8006bbc <USBH_FindInterface+0x4e>
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	2bff      	cmp	r3, #255	@ 0xff
 8006bba:	d111      	bne.n	8006be0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006bc0:	78ba      	ldrb	r2, [r7, #2]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d002      	beq.n	8006bcc <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bc6:	78bb      	ldrb	r3, [r7, #2]
 8006bc8:	2bff      	cmp	r3, #255	@ 0xff
 8006bca:	d109      	bne.n	8006be0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006bd0:	787a      	ldrb	r2, [r7, #1]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d002      	beq.n	8006bdc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006bd6:	787b      	ldrb	r3, [r7, #1]
 8006bd8:	2bff      	cmp	r3, #255	@ 0xff
 8006bda:	d101      	bne.n	8006be0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	e006      	b.n	8006bee <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006be0:	7dfb      	ldrb	r3, [r7, #23]
 8006be2:	3301      	adds	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d9d6      	bls.n	8006b9a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006bec:	23ff      	movs	r3, #255	@ 0xff
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fcf4 	bl	80085f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006c08:	2101      	movs	r1, #1
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f001 fe0d 	bl	800882a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3708      	adds	r7, #8
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af04      	add	r7, sp, #16
 8006c22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006c24:	2302      	movs	r3, #2
 8006c26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d102      	bne.n	8006c3e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2203      	movs	r2, #3
 8006c3c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b0b      	cmp	r3, #11
 8006c46:	f200 81bb 	bhi.w	8006fc0 <USBH_Process+0x3a4>
 8006c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c50 <USBH_Process+0x34>)
 8006c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c50:	08006c81 	.word	0x08006c81
 8006c54:	08006cb3 	.word	0x08006cb3
 8006c58:	08006d1b 	.word	0x08006d1b
 8006c5c:	08006f5b 	.word	0x08006f5b
 8006c60:	08006fc1 	.word	0x08006fc1
 8006c64:	08006dbb 	.word	0x08006dbb
 8006c68:	08006f01 	.word	0x08006f01
 8006c6c:	08006df1 	.word	0x08006df1
 8006c70:	08006e11 	.word	0x08006e11
 8006c74:	08006e2f 	.word	0x08006e2f
 8006c78:	08006e73 	.word	0x08006e73
 8006c7c:	08006f43 	.word	0x08006f43
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 819b 	beq.w	8006fc4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c94:	20c8      	movs	r0, #200	@ 0xc8
 8006c96:	f001 fe12 	bl	80088be <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 fd05 	bl	80086aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006cb0:	e188      	b.n	8006fc4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d107      	bne.n	8006ccc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cca:	e18a      	b.n	8006fe2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006cd2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cd6:	d914      	bls.n	8006d02 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cde:	3301      	adds	r3, #1
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006cee:	2b03      	cmp	r3, #3
 8006cf0:	d903      	bls.n	8006cfa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	220d      	movs	r2, #13
 8006cf6:	701a      	strb	r2, [r3, #0]
      break;
 8006cf8:	e173      	b.n	8006fe2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	701a      	strb	r2, [r3, #0]
      break;
 8006d00:	e16f      	b.n	8006fe2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d08:	f103 020a 	add.w	r2, r3, #10
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006d12:	200a      	movs	r0, #10
 8006d14:	f001 fdd3 	bl	80088be <USBH_Delay>
      break;
 8006d18:	e163      	b.n	8006fe2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d005      	beq.n	8006d30 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006d30:	2064      	movs	r0, #100	@ 0x64
 8006d32:	f001 fdc4 	bl	80088be <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f001 fc90 	bl	800865c <USBH_LL_GetSpeed>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	461a      	mov	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2205      	movs	r2, #5
 8006d4a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f001 fa9b 	bl	800828a <USBH_AllocPipe>
 8006d54:	4603      	mov	r3, r0
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006d5c:	2180      	movs	r1, #128	@ 0x80
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fa93 	bl	800828a <USBH_AllocPipe>
 8006d64:	4603      	mov	r3, r0
 8006d66:	461a      	mov	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	7919      	ldrb	r1, [r3, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	9201      	str	r2, [sp, #4]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2280      	movs	r2, #128	@ 0x80
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fa4d 	bl	800822c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	7959      	ldrb	r1, [r3, #5]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006da6:	9202      	str	r2, [sp, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	9201      	str	r2, [sp, #4]
 8006dac:	9300      	str	r3, [sp, #0]
 8006dae:	4603      	mov	r3, r0
 8006db0:	2200      	movs	r2, #0
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f001 fa3a 	bl	800822c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006db8:	e113      	b.n	8006fe2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f916 	bl	8006fec <USBH_HandleEnum>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	f040 80fd 	bne.w	8006fc8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d103      	bne.n	8006de8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2208      	movs	r2, #8
 8006de4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006de6:	e0ef      	b.n	8006fc8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2207      	movs	r2, #7
 8006dec:	701a      	strb	r2, [r3, #0]
      break;
 8006dee:	e0eb      	b.n	8006fc8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80e8 	beq.w	8006fcc <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e02:	2101      	movs	r1, #1
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2208      	movs	r2, #8
 8006e0c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006e0e:	e0dd      	b.n	8006fcc <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc3a 	bl	8007692 <USBH_SetCfg>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f040 80d5 	bne.w	8006fd0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2209      	movs	r2, #9
 8006e2a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e2c:	e0d0      	b.n	8006fd0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d016      	beq.n	8006e6a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006e3c:	2101      	movs	r1, #1
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f000 fc4a 	bl	80076d8 <USBH_SetFeature>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d103      	bne.n	8006e58 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	220a      	movs	r2, #10
 8006e54:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e56:	e0bd      	b.n	8006fd4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	f040 80b9 	bne.w	8006fd4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	220a      	movs	r2, #10
 8006e66:	701a      	strb	r2, [r3, #0]
      break;
 8006e68:	e0b4      	b.n	8006fd4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	220a      	movs	r2, #10
 8006e6e:	701a      	strb	r2, [r3, #0]
      break;
 8006e70:	e0b0      	b.n	8006fd4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 80ad 	beq.w	8006fd8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
 8006e8a:	e016      	b.n	8006eba <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006e8c:	7bfa      	ldrb	r2, [r7, #15]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	32de      	adds	r2, #222	@ 0xde
 8006e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e96:	791a      	ldrb	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d108      	bne.n	8006eb4 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	32de      	adds	r2, #222	@ 0xde
 8006ea8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006eb2:	e005      	b.n	8006ec0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	73fb      	strb	r3, [r7, #15]
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0e5      	beq.n	8006e8c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d016      	beq.n	8006ef8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	4798      	blx	r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d109      	bne.n	8006ef0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2206      	movs	r2, #6
 8006ee0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ee8:	2103      	movs	r1, #3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006eee:	e073      	b.n	8006fd8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	220d      	movs	r2, #13
 8006ef4:	701a      	strb	r2, [r3, #0]
      break;
 8006ef6:	e06f      	b.n	8006fd8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	220d      	movs	r2, #13
 8006efc:	701a      	strb	r2, [r3, #0]
      break;
 8006efe:	e06b      	b.n	8006fd8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d017      	beq.n	8006f3a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	4798      	blx	r3
 8006f16:	4603      	mov	r3, r0
 8006f18:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f1a:	7bbb      	ldrb	r3, [r7, #14]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	220b      	movs	r2, #11
 8006f26:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f28:	e058      	b.n	8006fdc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d154      	bne.n	8006fdc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	220d      	movs	r2, #13
 8006f36:	701a      	strb	r2, [r3, #0]
      break;
 8006f38:	e050      	b.n	8006fdc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	220d      	movs	r2, #13
 8006f3e:	701a      	strb	r2, [r3, #0]
      break;
 8006f40:	e04c      	b.n	8006fdc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d049      	beq.n	8006fe0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f52:	695b      	ldr	r3, [r3, #20]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
      }
      break;
 8006f58:	e042      	b.n	8006fe0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fd4a 	bl	80069fc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d009      	beq.n	8006f86 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f96:	2105      	movs	r1, #5
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d107      	bne.n	8006fb8 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f7ff fe22 	bl	8006bfa <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fb6:	e014      	b.n	8006fe2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fb19 	bl	80085f0 <USBH_LL_Start>
      break;
 8006fbe:	e010      	b.n	8006fe2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006fc0:	bf00      	nop
 8006fc2:	e00e      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fc4:	bf00      	nop
 8006fc6:	e00c      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fc8:	bf00      	nop
 8006fca:	e00a      	b.n	8006fe2 <USBH_Process+0x3c6>
    break;
 8006fcc:	bf00      	nop
 8006fce:	e008      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fd0:	bf00      	nop
 8006fd2:	e006      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fd4:	bf00      	nop
 8006fd6:	e004      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fd8:	bf00      	nop
 8006fda:	e002      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <USBH_Process+0x3c6>
      break;
 8006fe0:	bf00      	nop
  }
  return USBH_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af04      	add	r7, sp, #16
 8006ff2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	785b      	ldrb	r3, [r3, #1]
 8007000:	2b07      	cmp	r3, #7
 8007002:	f200 81bd 	bhi.w	8007380 <USBH_HandleEnum+0x394>
 8007006:	a201      	add	r2, pc, #4	@ (adr r2, 800700c <USBH_HandleEnum+0x20>)
 8007008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700c:	0800702d 	.word	0x0800702d
 8007010:	080070e7 	.word	0x080070e7
 8007014:	08007151 	.word	0x08007151
 8007018:	080071db 	.word	0x080071db
 800701c:	08007245 	.word	0x08007245
 8007020:	080072b5 	.word	0x080072b5
 8007024:	080072fb 	.word	0x080072fb
 8007028:	08007341 	.word	0x08007341
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800702c:	2108      	movs	r1, #8
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 fa4c 	bl	80074cc <USBH_Get_DevDesc>
 8007034:	4603      	mov	r3, r0
 8007036:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007038:	7bbb      	ldrb	r3, [r7, #14]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d12e      	bne.n	800709c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7919      	ldrb	r1, [r3, #4]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007062:	9202      	str	r2, [sp, #8]
 8007064:	2200      	movs	r2, #0
 8007066:	9201      	str	r2, [sp, #4]
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	4603      	mov	r3, r0
 800706c:	2280      	movs	r2, #128	@ 0x80
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f001 f8dc 	bl	800822c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7959      	ldrb	r1, [r3, #5]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007088:	9202      	str	r2, [sp, #8]
 800708a:	2200      	movs	r2, #0
 800708c:	9201      	str	r2, [sp, #4]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4603      	mov	r3, r0
 8007092:	2200      	movs	r2, #0
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f001 f8c9 	bl	800822c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800709a:	e173      	b.n	8007384 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	f040 8170 	bne.w	8007384 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070aa:	3301      	adds	r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d903      	bls.n	80070c6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220d      	movs	r2, #13
 80070c2:	701a      	strb	r2, [r3, #0]
      break;
 80070c4:	e15e      	b.n	8007384 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	795b      	ldrb	r3, [r3, #5]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f001 f8fd 	bl	80082cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	791b      	ldrb	r3, [r3, #4]
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 f8f7 	bl	80082cc <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	701a      	strb	r2, [r3, #0]
      break;
 80070e4:	e14e      	b.n	8007384 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80070e6:	2112      	movs	r1, #18
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f9ef 	bl	80074cc <USBH_Get_DevDesc>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d103      	bne.n	8007100 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80070fe:	e143      	b.n	8007388 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007100:	7bbb      	ldrb	r3, [r7, #14]
 8007102:	2b03      	cmp	r3, #3
 8007104:	f040 8140 	bne.w	8007388 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800710e:	3301      	adds	r3, #1
 8007110:	b2da      	uxtb	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800711e:	2b03      	cmp	r3, #3
 8007120:	d903      	bls.n	800712a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	220d      	movs	r2, #13
 8007126:	701a      	strb	r2, [r3, #0]
      break;
 8007128:	e12e      	b.n	8007388 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	795b      	ldrb	r3, [r3, #5]
 800712e:	4619      	mov	r1, r3
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f001 f8cb 	bl	80082cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f8c5 	bl	80082cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	701a      	strb	r2, [r3, #0]
      break;
 800714e:	e11b      	b.n	8007388 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007150:	2101      	movs	r1, #1
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa79 	bl	800764a <USBH_SetAddress>
 8007158:	4603      	mov	r3, r0
 800715a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800715c:	7bbb      	ldrb	r3, [r7, #14]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d130      	bne.n	80071c4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007162:	2002      	movs	r0, #2
 8007164:	f001 fbab 	bl	80088be <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2203      	movs	r2, #3
 8007174:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	7919      	ldrb	r1, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800718a:	9202      	str	r2, [sp, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	9201      	str	r2, [sp, #4]
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	4603      	mov	r3, r0
 8007194:	2280      	movs	r2, #128	@ 0x80
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f001 f848 	bl	800822c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	7959      	ldrb	r1, [r3, #5]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80071b0:	9202      	str	r2, [sp, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	9201      	str	r2, [sp, #4]
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	4603      	mov	r3, r0
 80071ba:	2200      	movs	r2, #0
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 f835 	bl	800822c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80071c2:	e0e3      	b.n	800738c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071c4:	7bbb      	ldrb	r3, [r7, #14]
 80071c6:	2b03      	cmp	r3, #3
 80071c8:	f040 80e0 	bne.w	800738c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	220d      	movs	r2, #13
 80071d0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	705a      	strb	r2, [r3, #1]
      break;
 80071d8:	e0d8      	b.n	800738c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80071da:	2109      	movs	r1, #9
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f9a1 	bl	8007524 <USBH_Get_CfgDesc>
 80071e2:	4603      	mov	r3, r0
 80071e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071e6:	7bbb      	ldrb	r3, [r7, #14]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2204      	movs	r2, #4
 80071f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071f2:	e0cd      	b.n	8007390 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071f4:	7bbb      	ldrb	r3, [r7, #14]
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	f040 80ca 	bne.w	8007390 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007202:	3301      	adds	r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007212:	2b03      	cmp	r3, #3
 8007214:	d903      	bls.n	800721e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	220d      	movs	r2, #13
 800721a:	701a      	strb	r2, [r3, #0]
      break;
 800721c:	e0b8      	b.n	8007390 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	795b      	ldrb	r3, [r3, #5]
 8007222:	4619      	mov	r1, r3
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 f851 	bl	80082cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	791b      	ldrb	r3, [r3, #4]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f001 f84b 	bl	80082cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	701a      	strb	r2, [r3, #0]
      break;
 8007242:	e0a5      	b.n	8007390 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f000 f969 	bl	8007524 <USBH_Get_CfgDesc>
 8007252:	4603      	mov	r3, r0
 8007254:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2205      	movs	r2, #5
 8007260:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007262:	e097      	b.n	8007394 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b03      	cmp	r3, #3
 8007268:	f040 8094 	bne.w	8007394 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007272:	3301      	adds	r3, #1
 8007274:	b2da      	uxtb	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007282:	2b03      	cmp	r3, #3
 8007284:	d903      	bls.n	800728e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	220d      	movs	r2, #13
 800728a:	701a      	strb	r2, [r3, #0]
      break;
 800728c:	e082      	b.n	8007394 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	795b      	ldrb	r3, [r3, #5]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 f819 	bl	80082cc <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	791b      	ldrb	r3, [r3, #4]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f813 	bl	80082cc <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
      break;
 80072b2:	e06f      	b.n	8007394 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d019      	beq.n	80072f2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80072ca:	23ff      	movs	r3, #255	@ 0xff
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f953 	bl	8007578 <USBH_Get_StringDesc>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2206      	movs	r2, #6
 80072e0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80072e2:	e059      	b.n	8007398 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d156      	bne.n	8007398 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2206      	movs	r2, #6
 80072ee:	705a      	strb	r2, [r3, #1]
      break;
 80072f0:	e052      	b.n	8007398 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2206      	movs	r2, #6
 80072f6:	705a      	strb	r2, [r3, #1]
      break;
 80072f8:	e04e      	b.n	8007398 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007300:	2b00      	cmp	r3, #0
 8007302:	d019      	beq.n	8007338 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007310:	23ff      	movs	r3, #255	@ 0xff
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f930 	bl	8007578 <USBH_Get_StringDesc>
 8007318:	4603      	mov	r3, r0
 800731a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2207      	movs	r2, #7
 8007326:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007328:	e038      	b.n	800739c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800732a:	7bbb      	ldrb	r3, [r7, #14]
 800732c:	2b03      	cmp	r3, #3
 800732e:	d135      	bne.n	800739c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2207      	movs	r2, #7
 8007334:	705a      	strb	r2, [r3, #1]
      break;
 8007336:	e031      	b.n	800739c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2207      	movs	r2, #7
 800733c:	705a      	strb	r2, [r3, #1]
      break;
 800733e:	e02d      	b.n	800739c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007346:	2b00      	cmp	r3, #0
 8007348:	d017      	beq.n	800737a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007356:	23ff      	movs	r3, #255	@ 0xff
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f90d 	bl	8007578 <USBH_Get_StringDesc>
 800735e:	4603      	mov	r3, r0
 8007360:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d102      	bne.n	800736e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800736c:	e018      	b.n	80073a0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b03      	cmp	r3, #3
 8007372:	d115      	bne.n	80073a0 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007374:	2300      	movs	r3, #0
 8007376:	73fb      	strb	r3, [r7, #15]
      break;
 8007378:	e012      	b.n	80073a0 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
      break;
 800737e:	e00f      	b.n	80073a0 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007380:	bf00      	nop
 8007382:	e00e      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 8007384:	bf00      	nop
 8007386:	e00c      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 8007388:	bf00      	nop
 800738a:	e00a      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 800738c:	bf00      	nop
 800738e:	e008      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 8007390:	bf00      	nop
 8007392:	e006      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 8007394:	bf00      	nop
 8007396:	e004      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 8007398:	bf00      	nop
 800739a:	e002      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 800739c:	bf00      	nop
 800739e:	e000      	b.n	80073a2 <USBH_HandleEnum+0x3b6>
      break;
 80073a0:	bf00      	nop
  }
  return Status;
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80073be:	bf00      	nop
 80073c0:	370c      	adds	r7, #12
 80073c2:	46bd      	mov	sp, r7
 80073c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c8:	4770      	bx	lr

080073ca <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 f804 	bl	80073ee <USBH_HandleSof>
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	2b0b      	cmp	r3, #11
 80073fe:	d10a      	bne.n	8007416 <USBH_HandleSof+0x28>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007406:	2b00      	cmp	r3, #0
 8007408:	d005      	beq.n	8007416 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	4798      	blx	r3
  }
}
 8007416:	bf00      	nop
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2201      	movs	r2, #1
 800742a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800742e:	bf00      	nop
}
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800743a:	b480      	push	{r7}
 800743c:	b083      	sub	sp, #12
 800743e:	af00      	add	r7, sp, #0
 8007440:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800744a:	bf00      	nop
}
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007456:	b480      	push	{r7}
 8007458:	b083      	sub	sp, #12
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2201      	movs	r2, #1
 8007462:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f001 f8be 	bl	8008626 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	791b      	ldrb	r3, [r3, #4]
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 ff0b 	bl	80082cc <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	795b      	ldrb	r3, [r3, #5]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 ff05 	bl	80082cc <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80074d8:	887b      	ldrh	r3, [r7, #2]
 80074da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074de:	d901      	bls.n	80074e4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074e0:	2303      	movs	r3, #3
 80074e2:	e01b      	b.n	800751c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80074ea:	887b      	ldrh	r3, [r7, #2]
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4613      	mov	r3, r2
 80074f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074f4:	2100      	movs	r1, #0
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f872 	bl	80075e0 <USBH_GetDescriptor>
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d109      	bne.n	800751a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800750c:	887a      	ldrh	r2, [r7, #2]
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f929 	bl	8007768 <USBH_ParseDevDesc>
 8007516:	4603      	mov	r3, r0
 8007518:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800751a:	7bfb      	ldrb	r3, [r7, #15]
}
 800751c:	4618      	mov	r0, r3
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af02      	add	r7, sp, #8
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	331c      	adds	r3, #28
 8007534:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007536:	887b      	ldrh	r3, [r7, #2]
 8007538:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800753c:	d901      	bls.n	8007542 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800753e:	2303      	movs	r3, #3
 8007540:	e016      	b.n	8007570 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007542:	887b      	ldrh	r3, [r7, #2]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	68bb      	ldr	r3, [r7, #8]
 8007548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800754c:	2100      	movs	r1, #0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f846 	bl	80075e0 <USBH_GetDescriptor>
 8007554:	4603      	mov	r3, r0
 8007556:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007558:	7bfb      	ldrb	r3, [r7, #15]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800755e:	887b      	ldrh	r3, [r7, #2]
 8007560:	461a      	mov	r2, r3
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f9af 	bl	80078c8 <USBH_ParseCfgDesc>
 800756a:	4603      	mov	r3, r0
 800756c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800756e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	461a      	mov	r2, r3
 8007584:	460b      	mov	r3, r1
 8007586:	72fb      	strb	r3, [r7, #11]
 8007588:	4613      	mov	r3, r2
 800758a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800758c:	893b      	ldrh	r3, [r7, #8]
 800758e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007592:	d802      	bhi.n	800759a <USBH_Get_StringDesc+0x22>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d101      	bne.n	800759e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800759a:	2303      	movs	r3, #3
 800759c:	e01c      	b.n	80075d8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800759e:	7afb      	ldrb	r3, [r7, #11]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80075a6:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80075ae:	893b      	ldrh	r3, [r7, #8]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	460b      	mov	r3, r1
 80075b4:	2100      	movs	r1, #0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f000 f812 	bl	80075e0 <USBH_GetDescriptor>
 80075bc:	4603      	mov	r3, r0
 80075be:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d107      	bne.n	80075d6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075cc:	893a      	ldrh	r2, [r7, #8]
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 fb8d 	bl	8007cf0 <USBH_ParseStringDesc>
  }

  return status;
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3718      	adds	r7, #24
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	607b      	str	r3, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	72fb      	strb	r3, [r7, #11]
 80075ee:	4613      	mov	r3, r2
 80075f0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	789b      	ldrb	r3, [r3, #2]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d11c      	bne.n	8007634 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075fa:	7afb      	ldrb	r3, [r7, #11]
 80075fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007600:	b2da      	uxtb	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2206      	movs	r2, #6
 800760a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	893a      	ldrh	r2, [r7, #8]
 8007610:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007612:	893b      	ldrh	r3, [r7, #8]
 8007614:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800761c:	d104      	bne.n	8007628 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f240 4209 	movw	r2, #1033	@ 0x409
 8007624:	829a      	strh	r2, [r3, #20]
 8007626:	e002      	b.n	800762e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8b3a      	ldrh	r2, [r7, #24]
 8007632:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007634:	8b3b      	ldrh	r3, [r7, #24]
 8007636:	461a      	mov	r2, r3
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	68f8      	ldr	r0, [r7, #12]
 800763c:	f000 fba5 	bl	8007d8a <USBH_CtlReq>
 8007640:	4603      	mov	r3, r0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b082      	sub	sp, #8
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	789b      	ldrb	r3, [r3, #2]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d10f      	bne.n	800767e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2205      	movs	r2, #5
 8007668:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800766a:	78fb      	ldrb	r3, [r7, #3]
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800767e:	2200      	movs	r2, #0
 8007680:	2100      	movs	r1, #0
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fb81 	bl	8007d8a <USBH_CtlReq>
 8007688:	4603      	mov	r3, r0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b082      	sub	sp, #8
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	460b      	mov	r3, r1
 800769c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	789b      	ldrb	r3, [r3, #2]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d10e      	bne.n	80076c4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2200      	movs	r2, #0
 80076aa:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2209      	movs	r2, #9
 80076b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	887a      	ldrh	r2, [r7, #2]
 80076b6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2200      	movs	r2, #0
 80076c2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076c4:	2200      	movs	r2, #0
 80076c6:	2100      	movs	r1, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 fb5e 	bl	8007d8a <USBH_CtlReq>
 80076ce:	4603      	mov	r3, r0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3708      	adds	r7, #8
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	789b      	ldrb	r3, [r3, #2]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10f      	bne.n	800770c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2203      	movs	r2, #3
 80076f6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076f8:	78fb      	ldrb	r3, [r7, #3]
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800770c:	2200      	movs	r2, #0
 800770e:	2100      	movs	r1, #0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 fb3a 	bl	8007d8a <USBH_CtlReq>
 8007716:	4603      	mov	r3, r0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	789b      	ldrb	r3, [r3, #2]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d10f      	bne.n	8007754 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2201      	movs	r2, #1
 800773e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007746:	78fb      	ldrb	r3, [r7, #3]
 8007748:	b29a      	uxth	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007754:	2200      	movs	r2, #0
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fb16 	bl	8007d8a <USBH_CtlReq>
 800775e:	4603      	mov	r3, r0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800777c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007788:	2302      	movs	r3, #2
 800778a:	e094      	b.n	80078b6 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	781a      	ldrb	r2, [r3, #0]
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	785a      	ldrb	r2, [r3, #1]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3302      	adds	r3, #2
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	3303      	adds	r3, #3
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	021b      	lsls	r3, r3, #8
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	4313      	orrs	r3, r2
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	791a      	ldrb	r2, [r3, #4]
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	795a      	ldrb	r2, [r3, #5]
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	799a      	ldrb	r2, [r3, #6]
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	79da      	ldrb	r2, [r3, #7]
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d004      	beq.n	80077ea <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d11b      	bne.n	8007822 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	79db      	ldrb	r3, [r3, #7]
 80077ee:	2b20      	cmp	r3, #32
 80077f0:	dc0f      	bgt.n	8007812 <USBH_ParseDevDesc+0xaa>
 80077f2:	2b08      	cmp	r3, #8
 80077f4:	db0f      	blt.n	8007816 <USBH_ParseDevDesc+0xae>
 80077f6:	3b08      	subs	r3, #8
 80077f8:	4a32      	ldr	r2, [pc, #200]	@ (80078c4 <USBH_ParseDevDesc+0x15c>)
 80077fa:	fa22 f303 	lsr.w	r3, r2, r3
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	bf14      	ite	ne
 8007806:	2301      	movne	r3, #1
 8007808:	2300      	moveq	r3, #0
 800780a:	b2db      	uxtb	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	d106      	bne.n	800781e <USBH_ParseDevDesc+0xb6>
 8007810:	e001      	b.n	8007816 <USBH_ParseDevDesc+0xae>
 8007812:	2b40      	cmp	r3, #64	@ 0x40
 8007814:	d003      	beq.n	800781e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2208      	movs	r2, #8
 800781a:	71da      	strb	r2, [r3, #7]
        break;
 800781c:	e000      	b.n	8007820 <USBH_ParseDevDesc+0xb8>
        break;
 800781e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8007820:	e00e      	b.n	8007840 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007828:	2b02      	cmp	r3, #2
 800782a:	d107      	bne.n	800783c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	79db      	ldrb	r3, [r3, #7]
 8007830:	2b08      	cmp	r3, #8
 8007832:	d005      	beq.n	8007840 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2208      	movs	r2, #8
 8007838:	71da      	strb	r2, [r3, #7]
 800783a:	e001      	b.n	8007840 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800783c:	2303      	movs	r3, #3
 800783e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8007840:	88fb      	ldrh	r3, [r7, #6]
 8007842:	2b08      	cmp	r3, #8
 8007844:	d936      	bls.n	80078b4 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	3308      	adds	r3, #8
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	3309      	adds	r3, #9
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	b29b      	uxth	r3, r3
 8007858:	4313      	orrs	r3, r2
 800785a:	b29a      	uxth	r2, r3
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	330a      	adds	r3, #10
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	461a      	mov	r2, r3
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	330b      	adds	r3, #11
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	021b      	lsls	r3, r3, #8
 8007870:	b29b      	uxth	r3, r3
 8007872:	4313      	orrs	r3, r2
 8007874:	b29a      	uxth	r2, r3
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	330c      	adds	r3, #12
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	461a      	mov	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	330d      	adds	r3, #13
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b29b      	uxth	r3, r3
 800788c:	4313      	orrs	r3, r2
 800788e:	b29a      	uxth	r2, r3
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	7b9a      	ldrb	r2, [r3, #14]
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	7bda      	ldrb	r2, [r3, #15]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	7c1a      	ldrb	r2, [r3, #16]
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	7c5a      	ldrb	r2, [r3, #17]
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	371c      	adds	r7, #28
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	01000101 	.word	0x01000101

080078c8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	@ 0x30
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80078dc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80078f6:	2302      	movs	r3, #2
 80078f8:	e0da      	b.n	8007ab0 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	781a      	ldrb	r2, [r3, #0]
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	785a      	ldrb	r2, [r3, #1]
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3302      	adds	r3, #2
 8007912:	781b      	ldrb	r3, [r3, #0]
 8007914:	461a      	mov	r2, r3
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3303      	adds	r3, #3
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b29b      	uxth	r3, r3
 8007920:	4313      	orrs	r3, r2
 8007922:	b29b      	uxth	r3, r3
 8007924:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007928:	bf28      	it	cs
 800792a:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800792e:	b29a      	uxth	r2, r3
 8007930:	6a3b      	ldr	r3, [r7, #32]
 8007932:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	791a      	ldrb	r2, [r3, #4]
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	795a      	ldrb	r2, [r3, #5]
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	799a      	ldrb	r2, [r3, #6]
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	79da      	ldrb	r2, [r3, #7]
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	7a1a      	ldrb	r2, [r3, #8]
 8007958:	6a3b      	ldr	r3, [r7, #32]
 800795a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	2b09      	cmp	r3, #9
 8007962:	d002      	beq.n	800796a <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	2209      	movs	r2, #9
 8007968:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800796a:	88fb      	ldrh	r3, [r7, #6]
 800796c:	2b09      	cmp	r3, #9
 800796e:	f240 809d 	bls.w	8007aac <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007972:	2309      	movs	r3, #9
 8007974:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800797a:	e081      	b.n	8007a80 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800797c:	f107 0316 	add.w	r3, r7, #22
 8007980:	4619      	mov	r1, r3
 8007982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007984:	f000 f9e7 	bl	8007d56 <USBH_GetNextDesc>
 8007988:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800798a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800798c:	785b      	ldrb	r3, [r3, #1]
 800798e:	2b04      	cmp	r3, #4
 8007990:	d176      	bne.n	8007a80 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b09      	cmp	r3, #9
 8007998:	d002      	beq.n	80079a0 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	2209      	movs	r2, #9
 800799e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80079a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079a4:	221a      	movs	r2, #26
 80079a6:	fb02 f303 	mul.w	r3, r2, r3
 80079aa:	3308      	adds	r3, #8
 80079ac:	6a3a      	ldr	r2, [r7, #32]
 80079ae:	4413      	add	r3, r2
 80079b0:	3302      	adds	r3, #2
 80079b2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80079b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079b6:	69f8      	ldr	r0, [r7, #28]
 80079b8:	f000 f87e 	bl	8007ab8 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80079bc:	2300      	movs	r3, #0
 80079be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079c6:	e043      	b.n	8007a50 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80079c8:	f107 0316 	add.w	r3, r7, #22
 80079cc:	4619      	mov	r1, r3
 80079ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079d0:	f000 f9c1 	bl	8007d56 <USBH_GetNextDesc>
 80079d4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	785b      	ldrb	r3, [r3, #1]
 80079da:	2b05      	cmp	r3, #5
 80079dc:	d138      	bne.n	8007a50 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	795b      	ldrb	r3, [r3, #5]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d113      	bne.n	8007a0e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d003      	beq.n	80079f6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80079ee:	69fb      	ldr	r3, [r7, #28]
 80079f0:	799b      	ldrb	r3, [r3, #6]
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d10b      	bne.n	8007a0e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	79db      	ldrb	r3, [r3, #7]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <USBH_ParseCfgDesc+0x14e>
 80079fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	d007      	beq.n	8007a16 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a08:	2209      	movs	r2, #9
 8007a0a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a0c:	e003      	b.n	8007a16 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a10:	2207      	movs	r2, #7
 8007a12:	701a      	strb	r2, [r3, #0]
 8007a14:	e000      	b.n	8007a18 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007a16:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a1c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a20:	3201      	adds	r2, #1
 8007a22:	00d2      	lsls	r2, r2, #3
 8007a24:	211a      	movs	r1, #26
 8007a26:	fb01 f303 	mul.w	r3, r1, r3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	3308      	adds	r3, #8
 8007a2e:	6a3a      	ldr	r2, [r7, #32]
 8007a30:	4413      	add	r3, r2
 8007a32:	3304      	adds	r3, #4
 8007a34:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a38:	69b9      	ldr	r1, [r7, #24]
 8007a3a:	68f8      	ldr	r0, [r7, #12]
 8007a3c:	f000 f870 	bl	8007b20 <USBH_ParseEPDesc>
 8007a40:	4603      	mov	r3, r0
 8007a42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007a46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	791b      	ldrb	r3, [r3, #4]
 8007a54:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d204      	bcs.n	8007a66 <USBH_ParseCfgDesc+0x19e>
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	885a      	ldrh	r2, [r3, #2]
 8007a60:	8afb      	ldrh	r3, [r7, #22]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d8b0      	bhi.n	80079c8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d201      	bcs.n	8007a76 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e01c      	b.n	8007ab0 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007a76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d805      	bhi.n	8007a94 <USBH_ParseCfgDesc+0x1cc>
 8007a88:	6a3b      	ldr	r3, [r7, #32]
 8007a8a:	885a      	ldrh	r2, [r3, #2]
 8007a8c:	8afb      	ldrh	r3, [r7, #22]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	f63f af74 	bhi.w	800797c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	791b      	ldrb	r3, [r3, #4]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	bf28      	it	cs
 8007a9c:	2302      	movcs	r3, #2
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d201      	bcs.n	8007aac <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e001      	b.n	8007ab0 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007aac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3730      	adds	r7, #48	@ 0x30
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781a      	ldrb	r2, [r3, #0]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	785a      	ldrb	r2, [r3, #1]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	789a      	ldrb	r2, [r3, #2]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	78da      	ldrb	r2, [r3, #3]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	bf28      	it	cs
 8007aec:	2302      	movcs	r3, #2
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	795a      	ldrb	r2, [r3, #5]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	799a      	ldrb	r2, [r3, #6]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	79da      	ldrb	r2, [r3, #7]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	7a1a      	ldrb	r2, [r3, #8]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	721a      	strb	r2, [r3, #8]
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b087      	sub	sp, #28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	60f8      	str	r0, [r7, #12]
 8007b28:	60b9      	str	r1, [r7, #8]
 8007b2a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	785a      	ldrb	r2, [r3, #1]
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	789a      	ldrb	r2, [r3, #2]
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	78da      	ldrb	r2, [r3, #3]
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	461a      	mov	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	3305      	adds	r3, #5
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	021b      	lsls	r3, r3, #8
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	799a      	ldrb	r2, [r3, #6]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	889b      	ldrh	r3, [r3, #4]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b82:	d804      	bhi.n	8007b8e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8c:	d901      	bls.n	8007b92 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d136      	bne.n	8007c0a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	78db      	ldrb	r3, [r3, #3]
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d108      	bne.n	8007bba <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	889b      	ldrh	r3, [r3, #4]
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb0:	f240 8097 	bls.w	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	75fb      	strb	r3, [r7, #23]
 8007bb8:	e093      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	78db      	ldrb	r3, [r3, #3]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d107      	bne.n	8007bd6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	889b      	ldrh	r3, [r3, #4]
 8007bca:	2b40      	cmp	r3, #64	@ 0x40
 8007bcc:	f240 8089 	bls.w	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	75fb      	strb	r3, [r7, #23]
 8007bd4:	e085      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	78db      	ldrb	r3, [r3, #3]
 8007bda:	f003 0303 	and.w	r3, r3, #3
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d005      	beq.n	8007bee <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	78db      	ldrb	r3, [r3, #3]
 8007be6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007bea:	2b03      	cmp	r3, #3
 8007bec:	d10a      	bne.n	8007c04 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	799b      	ldrb	r3, [r3, #6]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <USBH_ParseEPDesc+0xde>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	799b      	ldrb	r3, [r3, #6]
 8007bfa:	2b10      	cmp	r3, #16
 8007bfc:	d970      	bls.n	8007ce0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c02:	e06d      	b.n	8007ce0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c04:	2303      	movs	r3, #3
 8007c06:	75fb      	strb	r3, [r7, #23]
 8007c08:	e06b      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d13c      	bne.n	8007c8e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	78db      	ldrb	r3, [r3, #3]
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d005      	beq.n	8007c2c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	78db      	ldrb	r3, [r3, #3]
 8007c24:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d106      	bne.n	8007c3a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	889b      	ldrh	r3, [r3, #4]
 8007c30:	2b40      	cmp	r3, #64	@ 0x40
 8007c32:	d956      	bls.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c34:	2303      	movs	r3, #3
 8007c36:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c38:	e053      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	78db      	ldrb	r3, [r3, #3]
 8007c3e:	f003 0303 	and.w	r3, r3, #3
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d10e      	bne.n	8007c64 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	799b      	ldrb	r3, [r3, #6]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007c52:	2b10      	cmp	r3, #16
 8007c54:	d803      	bhi.n	8007c5e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007c5a:	2b40      	cmp	r3, #64	@ 0x40
 8007c5c:	d941      	bls.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	75fb      	strb	r3, [r7, #23]
 8007c62:	e03e      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	78db      	ldrb	r3, [r3, #3]
 8007c68:	f003 0303 	and.w	r3, r3, #3
 8007c6c:	2b03      	cmp	r3, #3
 8007c6e:	d10b      	bne.n	8007c88 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	799b      	ldrb	r3, [r3, #6]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d004      	beq.n	8007c82 <USBH_ParseEPDesc+0x162>
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	889b      	ldrh	r3, [r3, #4]
 8007c7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c80:	d32f      	bcc.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c82:	2303      	movs	r3, #3
 8007c84:	75fb      	strb	r3, [r7, #23]
 8007c86:	e02c      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	75fb      	strb	r3, [r7, #23]
 8007c8c:	e029      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d120      	bne.n	8007cda <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	78db      	ldrb	r3, [r3, #3]
 8007c9c:	f003 0303 	and.w	r3, r3, #3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d106      	bne.n	8007cb2 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	889b      	ldrh	r3, [r3, #4]
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d01a      	beq.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cac:	2303      	movs	r3, #3
 8007cae:	75fb      	strb	r3, [r7, #23]
 8007cb0:	e017      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	78db      	ldrb	r3, [r3, #3]
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	2b03      	cmp	r3, #3
 8007cbc:	d10a      	bne.n	8007cd4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	799b      	ldrb	r3, [r3, #6]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d003      	beq.n	8007cce <USBH_ParseEPDesc+0x1ae>
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	889b      	ldrh	r3, [r3, #4]
 8007cca:	2b08      	cmp	r3, #8
 8007ccc:	d909      	bls.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	75fb      	strb	r3, [r7, #23]
 8007cd2:	e006      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	75fb      	strb	r3, [r7, #23]
 8007cd8:	e003      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	75fb      	strb	r3, [r7, #23]
 8007cde:	e000      	b.n	8007ce2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007ce0:	bf00      	nop
  }

  return status;
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	371c      	adds	r7, #28
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	60f8      	str	r0, [r7, #12]
 8007cf8:	60b9      	str	r1, [r7, #8]
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3301      	adds	r3, #1
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d120      	bne.n	8007d4a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	1e9a      	subs	r2, r3, #2
 8007d0e:	88fb      	ldrh	r3, [r7, #6]
 8007d10:	4293      	cmp	r3, r2
 8007d12:	bf28      	it	cs
 8007d14:	4613      	movcs	r3, r2
 8007d16:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3302      	adds	r3, #2
 8007d1c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007d1e:	2300      	movs	r3, #0
 8007d20:	82fb      	strh	r3, [r7, #22]
 8007d22:	e00b      	b.n	8007d3c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007d24:	8afb      	ldrh	r3, [r7, #22]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4413      	add	r3, r2
 8007d2a:	781a      	ldrb	r2, [r3, #0]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007d36:	8afb      	ldrh	r3, [r7, #22]
 8007d38:	3302      	adds	r3, #2
 8007d3a:	82fb      	strh	r3, [r7, #22]
 8007d3c:	8afa      	ldrh	r2, [r7, #22]
 8007d3e:	8abb      	ldrh	r3, [r7, #20]
 8007d40:	429a      	cmp	r2, r3
 8007d42:	d3ef      	bcc.n	8007d24 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
  }
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	4413      	add	r3, r2
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4413      	add	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b086      	sub	sp, #24
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	4613      	mov	r3, r2
 8007d96:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	789b      	ldrb	r3, [r3, #2]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d002      	beq.n	8007daa <USBH_CtlReq+0x20>
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d00f      	beq.n	8007dc8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007da8:	e027      	b.n	8007dfa <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2201      	movs	r2, #1
 8007dba:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2202      	movs	r2, #2
 8007dc0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc6:	e018      	b.n	8007dfa <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f81b 	bl	8007e04 <USBH_HandleControl>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007dd2:	7dfb      	ldrb	r3, [r7, #23]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <USBH_CtlReq+0x54>
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	2b03      	cmp	r3, #3
 8007ddc:	d106      	bne.n	8007dec <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2200      	movs	r2, #0
 8007de8:	761a      	strb	r2, [r3, #24]
      break;
 8007dea:	e005      	b.n	8007df8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007dec:	7dfb      	ldrb	r3, [r7, #23]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d102      	bne.n	8007df8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	709a      	strb	r2, [r3, #2]
      break;
 8007df8:	bf00      	nop
  }
  return status;
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	7e1b      	ldrb	r3, [r3, #24]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	2b0a      	cmp	r3, #10
 8007e1c:	f200 8156 	bhi.w	80080cc <USBH_HandleControl+0x2c8>
 8007e20:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <USBH_HandleControl+0x24>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e55 	.word	0x08007e55
 8007e2c:	08007e6f 	.word	0x08007e6f
 8007e30:	08007ed9 	.word	0x08007ed9
 8007e34:	08007eff 	.word	0x08007eff
 8007e38:	08007f37 	.word	0x08007f37
 8007e3c:	08007f61 	.word	0x08007f61
 8007e40:	08007fb3 	.word	0x08007fb3
 8007e44:	08007fd5 	.word	0x08007fd5
 8007e48:	08008011 	.word	0x08008011
 8007e4c:	08008037 	.word	0x08008037
 8007e50:	08008075 	.word	0x08008075
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f103 0110 	add.w	r1, r3, #16
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	795b      	ldrb	r3, [r3, #5]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f943 	bl	80080ec <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	761a      	strb	r2, [r3, #24]
      break;
 8007e6c:	e139      	b.n	80080e2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	795b      	ldrb	r3, [r3, #5]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 fcc5 	bl	8008804 <USBH_LL_GetURBState>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e7e:	7bbb      	ldrb	r3, [r7, #14]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d11e      	bne.n	8007ec2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	7c1b      	ldrb	r3, [r3, #16]
 8007e88:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007e8c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	8adb      	ldrh	r3, [r3, #22]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00a      	beq.n	8007eac <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e96:	7b7b      	ldrb	r3, [r7, #13]
 8007e98:	2b80      	cmp	r3, #128	@ 0x80
 8007e9a:	d103      	bne.n	8007ea4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2203      	movs	r2, #3
 8007ea0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ea2:	e115      	b.n	80080d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2205      	movs	r2, #5
 8007ea8:	761a      	strb	r2, [r3, #24]
      break;
 8007eaa:	e111      	b.n	80080d0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007eac:	7b7b      	ldrb	r3, [r7, #13]
 8007eae:	2b80      	cmp	r3, #128	@ 0x80
 8007eb0:	d103      	bne.n	8007eba <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2209      	movs	r2, #9
 8007eb6:	761a      	strb	r2, [r3, #24]
      break;
 8007eb8:	e10a      	b.n	80080d0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2207      	movs	r2, #7
 8007ebe:	761a      	strb	r2, [r3, #24]
      break;
 8007ec0:	e106      	b.n	80080d0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ec2:	7bbb      	ldrb	r3, [r7, #14]
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d003      	beq.n	8007ed0 <USBH_HandleControl+0xcc>
 8007ec8:	7bbb      	ldrb	r3, [r7, #14]
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	f040 8100 	bne.w	80080d0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	220b      	movs	r2, #11
 8007ed4:	761a      	strb	r2, [r3, #24]
      break;
 8007ed6:	e0fb      	b.n	80080d0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6899      	ldr	r1, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	899a      	ldrh	r2, [r3, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	791b      	ldrb	r3, [r3, #4]
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 f93a 	bl	800816a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	761a      	strb	r2, [r3, #24]
      break;
 8007efc:	e0f1      	b.n	80080e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	791b      	ldrb	r3, [r3, #4]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc7d 	bl	8008804 <USBH_LL_GetURBState>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f0e:	7bbb      	ldrb	r3, [r7, #14]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d102      	bne.n	8007f1a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2209      	movs	r2, #9
 8007f18:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	d102      	bne.n	8007f26 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f20:	2303      	movs	r3, #3
 8007f22:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f24:	e0d6      	b.n	80080d4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b04      	cmp	r3, #4
 8007f2a:	f040 80d3 	bne.w	80080d4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	220b      	movs	r2, #11
 8007f32:	761a      	strb	r2, [r3, #24]
      break;
 8007f34:	e0ce      	b.n	80080d4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6899      	ldr	r1, [r3, #8]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	899a      	ldrh	r2, [r3, #12]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	795b      	ldrb	r3, [r3, #5]
 8007f42:	2001      	movs	r0, #1
 8007f44:	9000      	str	r0, [sp, #0]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f8ea 	bl	8008120 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2206      	movs	r2, #6
 8007f5c:	761a      	strb	r2, [r3, #24]
      break;
 8007f5e:	e0c0      	b.n	80080e2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	795b      	ldrb	r3, [r3, #5]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fc4c 	bl	8008804 <USBH_LL_GetURBState>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d103      	bne.n	8007f7e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2207      	movs	r2, #7
 8007f7a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f7c:	e0ac      	b.n	80080d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b05      	cmp	r3, #5
 8007f82:	d105      	bne.n	8007f90 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	220c      	movs	r2, #12
 8007f88:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8e:	e0a3      	b.n	80080d8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f90:	7bbb      	ldrb	r3, [r7, #14]
 8007f92:	2b02      	cmp	r3, #2
 8007f94:	d103      	bne.n	8007f9e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2205      	movs	r2, #5
 8007f9a:	761a      	strb	r2, [r3, #24]
      break;
 8007f9c:	e09c      	b.n	80080d8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f9e:	7bbb      	ldrb	r3, [r7, #14]
 8007fa0:	2b04      	cmp	r3, #4
 8007fa2:	f040 8099 	bne.w	80080d8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	220b      	movs	r2, #11
 8007faa:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fac:	2302      	movs	r3, #2
 8007fae:	73fb      	strb	r3, [r7, #15]
      break;
 8007fb0:	e092      	b.n	80080d8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	791b      	ldrb	r3, [r3, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	2100      	movs	r1, #0
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f8d5 	bl	800816a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007fc6:	b29a      	uxth	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2208      	movs	r2, #8
 8007fd0:	761a      	strb	r2, [r3, #24]

      break;
 8007fd2:	e086      	b.n	80080e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	791b      	ldrb	r3, [r3, #4]
 8007fd8:	4619      	mov	r1, r3
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fc12 	bl	8008804 <USBH_LL_GetURBState>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007fe4:	7bbb      	ldrb	r3, [r7, #14]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d105      	bne.n	8007ff6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	220d      	movs	r2, #13
 8007fee:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ff4:	e072      	b.n	80080dc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b04      	cmp	r3, #4
 8007ffa:	d103      	bne.n	8008004 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	220b      	movs	r2, #11
 8008000:	761a      	strb	r2, [r3, #24]
      break;
 8008002:	e06b      	b.n	80080dc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	2b05      	cmp	r3, #5
 8008008:	d168      	bne.n	80080dc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800800a:	2303      	movs	r3, #3
 800800c:	73fb      	strb	r3, [r7, #15]
      break;
 800800e:	e065      	b.n	80080dc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	795b      	ldrb	r3, [r3, #5]
 8008014:	2201      	movs	r2, #1
 8008016:	9200      	str	r2, [sp, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	2100      	movs	r1, #0
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f87f 	bl	8008120 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008028:	b29a      	uxth	r2, r3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	220a      	movs	r2, #10
 8008032:	761a      	strb	r2, [r3, #24]
      break;
 8008034:	e055      	b.n	80080e2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	795b      	ldrb	r3, [r3, #5]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fbe1 	bl	8008804 <USBH_LL_GetURBState>
 8008042:	4603      	mov	r3, r0
 8008044:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d105      	bne.n	8008058 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	220d      	movs	r2, #13
 8008054:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008056:	e043      	b.n	80080e0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008058:	7bbb      	ldrb	r3, [r7, #14]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d103      	bne.n	8008066 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2209      	movs	r2, #9
 8008062:	761a      	strb	r2, [r3, #24]
      break;
 8008064:	e03c      	b.n	80080e0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008066:	7bbb      	ldrb	r3, [r7, #14]
 8008068:	2b04      	cmp	r3, #4
 800806a:	d139      	bne.n	80080e0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	220b      	movs	r2, #11
 8008070:	761a      	strb	r2, [r3, #24]
      break;
 8008072:	e035      	b.n	80080e0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	7e5b      	ldrb	r3, [r3, #25]
 8008078:	3301      	adds	r3, #1
 800807a:	b2da      	uxtb	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	765a      	strb	r2, [r3, #25]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7e5b      	ldrb	r3, [r3, #25]
 8008084:	2b02      	cmp	r3, #2
 8008086:	d806      	bhi.n	8008096 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008094:	e025      	b.n	80080e2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800809c:	2106      	movs	r1, #6
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	795b      	ldrb	r3, [r3, #5]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f90c 	bl	80082cc <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	791b      	ldrb	r3, [r3, #4]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f906 	bl	80082cc <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080c6:	2302      	movs	r3, #2
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	e00a      	b.n	80080e2 <USBH_HandleControl+0x2de>

    default:
      break;
 80080cc:	bf00      	nop
 80080ce:	e008      	b.n	80080e2 <USBH_HandleControl+0x2de>
      break;
 80080d0:	bf00      	nop
 80080d2:	e006      	b.n	80080e2 <USBH_HandleControl+0x2de>
      break;
 80080d4:	bf00      	nop
 80080d6:	e004      	b.n	80080e2 <USBH_HandleControl+0x2de>
      break;
 80080d8:	bf00      	nop
 80080da:	e002      	b.n	80080e2 <USBH_HandleControl+0x2de>
      break;
 80080dc:	bf00      	nop
 80080de:	e000      	b.n	80080e2 <USBH_HandleControl+0x2de>
      break;
 80080e0:	bf00      	nop
  }

  return status;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af04      	add	r7, sp, #16
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080fa:	79f9      	ldrb	r1, [r7, #7]
 80080fc:	2300      	movs	r3, #0
 80080fe:	9303      	str	r3, [sp, #12]
 8008100:	2308      	movs	r3, #8
 8008102:	9302      	str	r3, [sp, #8]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	2300      	movs	r3, #0
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	2300      	movs	r3, #0
 800810e:	2200      	movs	r2, #0
 8008110:	68f8      	ldr	r0, [r7, #12]
 8008112:	f000 fb46 	bl	80087a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b088      	sub	sp, #32
 8008124:	af04      	add	r7, sp, #16
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4611      	mov	r1, r2
 800812c:	461a      	mov	r2, r3
 800812e:	460b      	mov	r3, r1
 8008130:	80fb      	strh	r3, [r7, #6]
 8008132:	4613      	mov	r3, r2
 8008134:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800813c:	2b00      	cmp	r3, #0
 800813e:	d001      	beq.n	8008144 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008140:	2300      	movs	r3, #0
 8008142:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008144:	7979      	ldrb	r1, [r7, #5]
 8008146:	7e3b      	ldrb	r3, [r7, #24]
 8008148:	9303      	str	r3, [sp, #12]
 800814a:	88fb      	ldrh	r3, [r7, #6]
 800814c:	9302      	str	r3, [sp, #8]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	2301      	movs	r3, #1
 8008154:	9300      	str	r3, [sp, #0]
 8008156:	2300      	movs	r3, #0
 8008158:	2200      	movs	r2, #0
 800815a:	68f8      	ldr	r0, [r7, #12]
 800815c:	f000 fb21 	bl	80087a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b088      	sub	sp, #32
 800816e:	af04      	add	r7, sp, #16
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	4611      	mov	r1, r2
 8008176:	461a      	mov	r2, r3
 8008178:	460b      	mov	r3, r1
 800817a:	80fb      	strh	r3, [r7, #6]
 800817c:	4613      	mov	r3, r2
 800817e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008180:	7979      	ldrb	r1, [r7, #5]
 8008182:	2300      	movs	r3, #0
 8008184:	9303      	str	r3, [sp, #12]
 8008186:	88fb      	ldrh	r3, [r7, #6]
 8008188:	9302      	str	r3, [sp, #8]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	9301      	str	r3, [sp, #4]
 800818e:	2301      	movs	r3, #1
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	2300      	movs	r3, #0
 8008194:	2201      	movs	r2, #1
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fb03 	bl	80087a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800819c:	2300      	movs	r3, #0

}
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b088      	sub	sp, #32
 80081aa:	af04      	add	r7, sp, #16
 80081ac:	60f8      	str	r0, [r7, #12]
 80081ae:	60b9      	str	r1, [r7, #8]
 80081b0:	4611      	mov	r1, r2
 80081b2:	461a      	mov	r2, r3
 80081b4:	460b      	mov	r3, r1
 80081b6:	80fb      	strh	r3, [r7, #6]
 80081b8:	4613      	mov	r3, r2
 80081ba:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d001      	beq.n	80081ca <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081ca:	7979      	ldrb	r1, [r7, #5]
 80081cc:	7e3b      	ldrb	r3, [r7, #24]
 80081ce:	9303      	str	r3, [sp, #12]
 80081d0:	88fb      	ldrh	r3, [r7, #6]
 80081d2:	9302      	str	r3, [sp, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	9301      	str	r3, [sp, #4]
 80081d8:	2301      	movs	r3, #1
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2302      	movs	r3, #2
 80081de:	2200      	movs	r2, #0
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f000 fade 	bl	80087a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af04      	add	r7, sp, #16
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	4611      	mov	r1, r2
 80081fc:	461a      	mov	r2, r3
 80081fe:	460b      	mov	r3, r1
 8008200:	80fb      	strh	r3, [r7, #6]
 8008202:	4613      	mov	r3, r2
 8008204:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008206:	7979      	ldrb	r1, [r7, #5]
 8008208:	2300      	movs	r3, #0
 800820a:	9303      	str	r3, [sp, #12]
 800820c:	88fb      	ldrh	r3, [r7, #6]
 800820e:	9302      	str	r3, [sp, #8]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	2301      	movs	r3, #1
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	2302      	movs	r3, #2
 800821a:	2201      	movs	r2, #1
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fac0 	bl	80087a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af04      	add	r7, sp, #16
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	4608      	mov	r0, r1
 8008236:	4611      	mov	r1, r2
 8008238:	461a      	mov	r2, r3
 800823a:	4603      	mov	r3, r0
 800823c:	70fb      	strb	r3, [r7, #3]
 800823e:	460b      	mov	r3, r1
 8008240:	70bb      	strb	r3, [r7, #2]
 8008242:	4613      	mov	r3, r2
 8008244:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008246:	7878      	ldrb	r0, [r7, #1]
 8008248:	78ba      	ldrb	r2, [r7, #2]
 800824a:	78f9      	ldrb	r1, [r7, #3]
 800824c:	8b3b      	ldrh	r3, [r7, #24]
 800824e:	9302      	str	r3, [sp, #8]
 8008250:	7d3b      	ldrb	r3, [r7, #20]
 8008252:	9301      	str	r3, [sp, #4]
 8008254:	7c3b      	ldrb	r3, [r7, #16]
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	4603      	mov	r3, r0
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fa53 	bl	8008706 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	4619      	mov	r1, r3
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fa72 	bl	8008764 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	460b      	mov	r3, r1
 8008294:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 f836 	bl	8008308 <USBH_GetFreePipe>
 800829c:	4603      	mov	r3, r0
 800829e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80082a0:	89fb      	ldrh	r3, [r7, #14]
 80082a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d00a      	beq.n	80082c0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80082aa:	78fa      	ldrb	r2, [r7, #3]
 80082ac:	89fb      	ldrh	r3, [r7, #14]
 80082ae:	f003 030f 	and.w	r3, r3, #15
 80082b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	33e0      	adds	r3, #224	@ 0xe0
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	440b      	add	r3, r1
 80082be:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082c0:	89fb      	ldrh	r3, [r7, #14]
 80082c2:	b2db      	uxtb	r3, r3
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	460b      	mov	r3, r1
 80082d6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	2b0f      	cmp	r3, #15
 80082dc:	d80d      	bhi.n	80082fa <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	33e0      	adds	r3, #224	@ 0xe0
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	4413      	add	r3, r2
 80082e8:	685a      	ldr	r2, [r3, #4]
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	33e0      	adds	r3, #224	@ 0xe0
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	440b      	add	r3, r1
 80082f8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008314:	2300      	movs	r3, #0
 8008316:	73fb      	strb	r3, [r7, #15]
 8008318:	e00f      	b.n	800833a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800831a:	7bfb      	ldrb	r3, [r7, #15]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	33e0      	adds	r3, #224	@ 0xe0
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	b29b      	uxth	r3, r3
 8008332:	e007      	b.n	8008344 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	3301      	adds	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	2b0f      	cmp	r3, #15
 800833e:	d9ec      	bls.n	800831a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008340:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008354:	2201      	movs	r2, #1
 8008356:	490e      	ldr	r1, [pc, #56]	@ (8008390 <MX_USB_HOST_Init+0x40>)
 8008358:	480e      	ldr	r0, [pc, #56]	@ (8008394 <MX_USB_HOST_Init+0x44>)
 800835a:	f7fe fb15 	bl	8006988 <USBH_Init>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d001      	beq.n	8008368 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008364:	f7f8 fb54 	bl	8000a10 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008368:	490b      	ldr	r1, [pc, #44]	@ (8008398 <MX_USB_HOST_Init+0x48>)
 800836a:	480a      	ldr	r0, [pc, #40]	@ (8008394 <MX_USB_HOST_Init+0x44>)
 800836c:	f7fe fbb9 	bl	8006ae2 <USBH_RegisterClass>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008376:	f7f8 fb4b 	bl	8000a10 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800837a:	4806      	ldr	r0, [pc, #24]	@ (8008394 <MX_USB_HOST_Init+0x44>)
 800837c:	f7fe fc3d 	bl	8006bfa <USBH_Start>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008386:	f7f8 fb43 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800838a:	bf00      	nop
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	080083b1 	.word	0x080083b1
 8008394:	20000198 	.word	0x20000198
 8008398:	2000000c 	.word	0x2000000c

0800839c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80083a0:	4802      	ldr	r0, [pc, #8]	@ (80083ac <MX_USB_HOST_Process+0x10>)
 80083a2:	f7fe fc3b 	bl	8006c1c <USBH_Process>
}
 80083a6:	bf00      	nop
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	20000198 	.word	0x20000198

080083b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
 80083b8:	460b      	mov	r3, r1
 80083ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083bc:	78fb      	ldrb	r3, [r7, #3]
 80083be:	3b01      	subs	r3, #1
 80083c0:	2b04      	cmp	r3, #4
 80083c2:	d819      	bhi.n	80083f8 <USBH_UserProcess+0x48>
 80083c4:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <USBH_UserProcess+0x1c>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	080083f1 	.word	0x080083f1
 80083dc:	080083e1 	.word	0x080083e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083e0:	4b09      	ldr	r3, [pc, #36]	@ (8008408 <USBH_UserProcess+0x58>)
 80083e2:	2203      	movs	r2, #3
 80083e4:	701a      	strb	r2, [r3, #0]
  break;
 80083e6:	e008      	b.n	80083fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083e8:	4b07      	ldr	r3, [pc, #28]	@ (8008408 <USBH_UserProcess+0x58>)
 80083ea:	2202      	movs	r2, #2
 80083ec:	701a      	strb	r2, [r3, #0]
  break;
 80083ee:	e004      	b.n	80083fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083f0:	4b05      	ldr	r3, [pc, #20]	@ (8008408 <USBH_UserProcess+0x58>)
 80083f2:	2201      	movs	r2, #1
 80083f4:	701a      	strb	r2, [r3, #0]
  break;
 80083f6:	e000      	b.n	80083fa <USBH_UserProcess+0x4a>

  default:
  break;
 80083f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083fa:	bf00      	nop
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	20000570 	.word	0x20000570

0800840c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	@ 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008414:	f107 0314 	add.w	r3, r7, #20
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800842c:	d147      	bne.n	80084be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	4b25      	ldr	r3, [pc, #148]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 8008434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008436:	4a24      	ldr	r2, [pc, #144]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	6313      	str	r3, [r2, #48]	@ 0x30
 800843e:	4b22      	ldr	r3, [pc, #136]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 8008440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008442:	f003 0301 	and.w	r3, r3, #1
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800844a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800844e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008450:	2300      	movs	r3, #0
 8008452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	4619      	mov	r1, r3
 800845e:	481b      	ldr	r0, [pc, #108]	@ (80084cc <HAL_HCD_MspInit+0xc0>)
 8008460:	f7f8 fe6e 	bl	8001140 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008464:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800846a:	2302      	movs	r3, #2
 800846c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800846e:	2300      	movs	r3, #0
 8008470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008472:	2300      	movs	r3, #0
 8008474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008476:	230a      	movs	r3, #10
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800847a:	f107 0314 	add.w	r3, r7, #20
 800847e:	4619      	mov	r1, r3
 8008480:	4812      	ldr	r0, [pc, #72]	@ (80084cc <HAL_HCD_MspInit+0xc0>)
 8008482:	f7f8 fe5d 	bl	8001140 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008486:	4b10      	ldr	r3, [pc, #64]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 8008488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800848a:	4a0f      	ldr	r2, [pc, #60]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 800848c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008490:	6353      	str	r3, [r2, #52]	@ 0x34
 8008492:	2300      	movs	r3, #0
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	4b0c      	ldr	r3, [pc, #48]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 8008498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849a:	4a0b      	ldr	r2, [pc, #44]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 800849c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80084a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80084a2:	4b09      	ldr	r3, [pc, #36]	@ (80084c8 <HAL_HCD_MspInit+0xbc>)
 80084a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2100      	movs	r1, #0
 80084b2:	2043      	movs	r0, #67	@ 0x43
 80084b4:	f7f8 fe0d 	bl	80010d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084b8:	2043      	movs	r0, #67	@ 0x43
 80084ba:	f7f8 fe26 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084be:	bf00      	nop
 80084c0:	3728      	adds	r7, #40	@ 0x28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	40023800 	.word	0x40023800
 80084cc:	40020000 	.word	0x40020000

080084d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084de:	4618      	mov	r0, r3
 80084e0:	f7fe ff73 	bl	80073ca <USBH_LL_IncTimer>
}
 80084e4:	bf00      	nop
 80084e6:	3708      	adds	r7, #8
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe ffab 	bl	8007456 <USBH_LL_Connect>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008516:	4618      	mov	r0, r3
 8008518:	f7fe ffb4 	bl	8007484 <USBH_LL_Disconnect>
}
 800851c:	bf00      	nop
 800851e:	3708      	adds	r7, #8
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	460b      	mov	r3, r1
 800852e:	70fb      	strb	r3, [r7, #3]
 8008530:	4613      	mov	r3, r2
 8008532:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008534:	bf00      	nop
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800854e:	4618      	mov	r0, r3
 8008550:	f7fe ff65 	bl	800741e <USBH_LL_PortEnabled>
}
 8008554:	bf00      	nop
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe ff65 	bl	800743a <USBH_LL_PortDisabled>
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008586:	2b01      	cmp	r3, #1
 8008588:	d12a      	bne.n	80085e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800858a:	4a18      	ldr	r2, [pc, #96]	@ (80085ec <USBH_LL_Init+0x74>)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a15      	ldr	r2, [pc, #84]	@ (80085ec <USBH_LL_Init+0x74>)
 8008596:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800859a:	4b14      	ldr	r3, [pc, #80]	@ (80085ec <USBH_LL_Init+0x74>)
 800859c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80085a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80085a2:	4b12      	ldr	r3, [pc, #72]	@ (80085ec <USBH_LL_Init+0x74>)
 80085a4:	2208      	movs	r2, #8
 80085a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80085a8:	4b10      	ldr	r3, [pc, #64]	@ (80085ec <USBH_LL_Init+0x74>)
 80085aa:	2201      	movs	r2, #1
 80085ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085ae:	4b0f      	ldr	r3, [pc, #60]	@ (80085ec <USBH_LL_Init+0x74>)
 80085b0:	2200      	movs	r2, #0
 80085b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085b4:	4b0d      	ldr	r3, [pc, #52]	@ (80085ec <USBH_LL_Init+0x74>)
 80085b6:	2202      	movs	r2, #2
 80085b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085ba:	4b0c      	ldr	r3, [pc, #48]	@ (80085ec <USBH_LL_Init+0x74>)
 80085bc:	2200      	movs	r2, #0
 80085be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085c0:	480a      	ldr	r0, [pc, #40]	@ (80085ec <USBH_LL_Init+0x74>)
 80085c2:	f7f8 ff8b 	bl	80014dc <HAL_HCD_Init>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085cc:	f7f8 fa20 	bl	8000a10 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085d0:	4806      	ldr	r0, [pc, #24]	@ (80085ec <USBH_LL_Init+0x74>)
 80085d2:	f7f9 fbeb 	bl	8001dac <HAL_HCD_GetCurrentFrame>
 80085d6:	4603      	mov	r3, r0
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f7fe fee6 	bl	80073ac <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000574 	.word	0x20000574

080085f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008606:	4618      	mov	r0, r3
 8008608:	f7f9 fb58 	bl	8001cbc <HAL_HCD_Start>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f95e 	bl	80088d4 <USBH_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b084      	sub	sp, #16
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800863c:	4618      	mov	r0, r3
 800863e:	f7f9 fb60 	bl	8001d02 <HAL_HCD_Stop>
 8008642:	4603      	mov	r3, r0
 8008644:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	4618      	mov	r0, r3
 800864a:	f000 f943 	bl	80088d4 <USBH_Get_USB_Status>
 800864e:	4603      	mov	r3, r0
 8008650:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008652:	7bbb      	ldrb	r3, [r7, #14]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800866e:	4618      	mov	r0, r3
 8008670:	f7f9 fbaa 	bl	8001dc8 <HAL_HCD_GetCurrentSpeed>
 8008674:	4603      	mov	r3, r0
 8008676:	2b02      	cmp	r3, #2
 8008678:	d00c      	beq.n	8008694 <USBH_LL_GetSpeed+0x38>
 800867a:	2b02      	cmp	r3, #2
 800867c:	d80d      	bhi.n	800869a <USBH_LL_GetSpeed+0x3e>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <USBH_LL_GetSpeed+0x2c>
 8008682:	2b01      	cmp	r3, #1
 8008684:	d003      	beq.n	800868e <USBH_LL_GetSpeed+0x32>
 8008686:	e008      	b.n	800869a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
    break;
 800868c:	e008      	b.n	80086a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800868e:	2301      	movs	r3, #1
 8008690:	73fb      	strb	r3, [r7, #15]
    break;
 8008692:	e005      	b.n	80086a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008694:	2302      	movs	r3, #2
 8008696:	73fb      	strb	r3, [r7, #15]
    break;
 8008698:	e002      	b.n	80086a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800869a:	2301      	movs	r3, #1
 800869c:	73fb      	strb	r3, [r7, #15]
    break;
 800869e:	bf00      	nop
  }
  return  speed;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b2:	2300      	movs	r3, #0
 80086b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086b6:	2300      	movs	r3, #0
 80086b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7f9 fb3b 	bl	8001d3c <HAL_HCD_ResetPort>
 80086c6:	4603      	mov	r3, r0
 80086c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ca:	7bfb      	ldrb	r3, [r7, #15]
 80086cc:	4618      	mov	r0, r3
 80086ce:	f000 f901 	bl	80088d4 <USBH_Get_USB_Status>
 80086d2:	4603      	mov	r3, r0
 80086d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b082      	sub	sp, #8
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	460b      	mov	r3, r1
 80086ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7f9 fb43 	bl	8001d82 <HAL_HCD_HC_GetXferCount>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008706:	b590      	push	{r4, r7, lr}
 8008708:	b089      	sub	sp, #36	@ 0x24
 800870a:	af04      	add	r7, sp, #16
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	4608      	mov	r0, r1
 8008710:	4611      	mov	r1, r2
 8008712:	461a      	mov	r2, r3
 8008714:	4603      	mov	r3, r0
 8008716:	70fb      	strb	r3, [r7, #3]
 8008718:	460b      	mov	r3, r1
 800871a:	70bb      	strb	r3, [r7, #2]
 800871c:	4613      	mov	r3, r2
 800871e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008720:	2300      	movs	r3, #0
 8008722:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800872e:	787c      	ldrb	r4, [r7, #1]
 8008730:	78ba      	ldrb	r2, [r7, #2]
 8008732:	78f9      	ldrb	r1, [r7, #3]
 8008734:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	4623      	mov	r3, r4
 8008746:	f7f8 ff30 	bl	80015aa <HAL_HCD_HC_Init>
 800874a:	4603      	mov	r3, r0
 800874c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800874e:	7bfb      	ldrb	r3, [r7, #15]
 8008750:	4618      	mov	r0, r3
 8008752:	f000 f8bf 	bl	80088d4 <USBH_Get_USB_Status>
 8008756:	4603      	mov	r3, r0
 8008758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800875a:	7bbb      	ldrb	r3, [r7, #14]
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	bd90      	pop	{r4, r7, pc}

08008764 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008770:	2300      	movs	r3, #0
 8008772:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008774:	2300      	movs	r3, #0
 8008776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800877e:	78fa      	ldrb	r2, [r7, #3]
 8008780:	4611      	mov	r1, r2
 8008782:	4618      	mov	r0, r3
 8008784:	f7f8 ffc9 	bl	800171a <HAL_HCD_HC_Halt>
 8008788:	4603      	mov	r3, r0
 800878a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	4618      	mov	r0, r3
 8008790:	f000 f8a0 	bl	80088d4 <USBH_Get_USB_Status>
 8008794:	4603      	mov	r3, r0
 8008796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008798:	7bbb      	ldrb	r3, [r7, #14]
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80087a2:	b590      	push	{r4, r7, lr}
 80087a4:	b089      	sub	sp, #36	@ 0x24
 80087a6:	af04      	add	r7, sp, #16
 80087a8:	6078      	str	r0, [r7, #4]
 80087aa:	4608      	mov	r0, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	461a      	mov	r2, r3
 80087b0:	4603      	mov	r3, r0
 80087b2:	70fb      	strb	r3, [r7, #3]
 80087b4:	460b      	mov	r3, r1
 80087b6:	70bb      	strb	r3, [r7, #2]
 80087b8:	4613      	mov	r3, r2
 80087ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087bc:	2300      	movs	r3, #0
 80087be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087c0:	2300      	movs	r3, #0
 80087c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80087ca:	787c      	ldrb	r4, [r7, #1]
 80087cc:	78ba      	ldrb	r2, [r7, #2]
 80087ce:	78f9      	ldrb	r1, [r7, #3]
 80087d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087d8:	9302      	str	r3, [sp, #8]
 80087da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087dc:	9301      	str	r3, [sp, #4]
 80087de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	4623      	mov	r3, r4
 80087e6:	f7f8 ffbb 	bl	8001760 <HAL_HCD_HC_SubmitRequest>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80087ee:	7bfb      	ldrb	r3, [r7, #15]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 f86f 	bl	80088d4 <USBH_Get_USB_Status>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bd90      	pop	{r4, r7, pc}

08008804 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b082      	sub	sp, #8
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	460b      	mov	r3, r1
 800880e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008816:	78fa      	ldrb	r2, [r7, #3]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7f9 fa9c 	bl	8001d58 <HAL_HCD_HC_GetURBState>
 8008820:	4603      	mov	r3, r0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800883c:	2b01      	cmp	r3, #1
 800883e:	d103      	bne.n	8008848 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008840:	78fb      	ldrb	r3, [r7, #3]
 8008842:	4618      	mov	r0, r3
 8008844:	f000 f872 	bl	800892c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008848:	20c8      	movs	r0, #200	@ 0xc8
 800884a:	f7f8 fb43 	bl	8000ed4 <HAL_Delay>
  return USBH_OK;
 800884e:	2300      	movs	r3, #0
}
 8008850:	4618      	mov	r0, r3
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	460b      	mov	r3, r1
 8008862:	70fb      	strb	r3, [r7, #3]
 8008864:	4613      	mov	r3, r2
 8008866:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800886e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	68f9      	ldr	r1, [r7, #12]
 8008874:	4613      	mov	r3, r2
 8008876:	011b      	lsls	r3, r3, #4
 8008878:	1a9b      	subs	r3, r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3317      	adds	r3, #23
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008886:	78fa      	ldrb	r2, [r7, #3]
 8008888:	68f9      	ldr	r1, [r7, #12]
 800888a:	4613      	mov	r3, r2
 800888c:	011b      	lsls	r3, r3, #4
 800888e:	1a9b      	subs	r3, r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	440b      	add	r3, r1
 8008894:	333c      	adds	r3, #60	@ 0x3c
 8008896:	78ba      	ldrb	r2, [r7, #2]
 8008898:	701a      	strb	r2, [r3, #0]
 800889a:	e009      	b.n	80088b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800889c:	78fa      	ldrb	r2, [r7, #3]
 800889e:	68f9      	ldr	r1, [r7, #12]
 80088a0:	4613      	mov	r3, r2
 80088a2:	011b      	lsls	r3, r3, #4
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	440b      	add	r3, r1
 80088aa:	333d      	adds	r3, #61	@ 0x3d
 80088ac:	78ba      	ldrb	r2, [r7, #2]
 80088ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3714      	adds	r7, #20
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	b082      	sub	sp, #8
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f7f8 fb04 	bl	8000ed4 <HAL_Delay>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b085      	sub	sp, #20
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d817      	bhi.n	8008918 <USBH_Get_USB_Status+0x44>
 80088e8:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <USBH_Get_USB_Status+0x1c>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008901 	.word	0x08008901
 80088f4:	08008907 	.word	0x08008907
 80088f8:	0800890d 	.word	0x0800890d
 80088fc:	08008913 	.word	0x08008913
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008900:	2300      	movs	r3, #0
 8008902:	73fb      	strb	r3, [r7, #15]
    break;
 8008904:	e00b      	b.n	800891e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008906:	2302      	movs	r3, #2
 8008908:	73fb      	strb	r3, [r7, #15]
    break;
 800890a:	e008      	b.n	800891e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
    break;
 8008910:	e005      	b.n	800891e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008912:	2302      	movs	r3, #2
 8008914:	73fb      	strb	r3, [r7, #15]
    break;
 8008916:	e002      	b.n	800891e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008918:	2302      	movs	r3, #2
 800891a:	73fb      	strb	r3, [r7, #15]
    break;
 800891c:	bf00      	nop
  }
  return usb_status;
 800891e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <MX_DriverVbusFS>:
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	4603      	mov	r3, r0
 8008934:	71fb      	strb	r3, [r7, #7]
 8008936:	79fb      	ldrb	r3, [r7, #7]
 8008938:	73fb      	strb	r3, [r7, #15]
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <MX_DriverVbusFS+0x1a>
 8008940:	2300      	movs	r3, #0
 8008942:	73fb      	strb	r3, [r7, #15]
 8008944:	e001      	b.n	800894a <MX_DriverVbusFS+0x1e>
 8008946:	2301      	movs	r3, #1
 8008948:	73fb      	strb	r3, [r7, #15]
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	461a      	mov	r2, r3
 800894e:	2101      	movs	r1, #1
 8008950:	4803      	ldr	r0, [pc, #12]	@ (8008960 <MX_DriverVbusFS+0x34>)
 8008952:	f7f8 fd91 	bl	8001478 <HAL_GPIO_WritePin>
 8008956:	bf00      	nop
 8008958:	3710      	adds	r7, #16
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40020800 	.word	0x40020800

08008964 <malloc>:
 8008964:	4b02      	ldr	r3, [pc, #8]	@ (8008970 <malloc+0xc>)
 8008966:	4601      	mov	r1, r0
 8008968:	6818      	ldr	r0, [r3, #0]
 800896a:	f000 b82d 	b.w	80089c8 <_malloc_r>
 800896e:	bf00      	nop
 8008970:	2000002c 	.word	0x2000002c

08008974 <free>:
 8008974:	4b02      	ldr	r3, [pc, #8]	@ (8008980 <free+0xc>)
 8008976:	4601      	mov	r1, r0
 8008978:	6818      	ldr	r0, [r3, #0]
 800897a:	f000 b8f5 	b.w	8008b68 <_free_r>
 800897e:	bf00      	nop
 8008980:	2000002c 	.word	0x2000002c

08008984 <sbrk_aligned>:
 8008984:	b570      	push	{r4, r5, r6, lr}
 8008986:	4e0f      	ldr	r6, [pc, #60]	@ (80089c4 <sbrk_aligned+0x40>)
 8008988:	460c      	mov	r4, r1
 800898a:	6831      	ldr	r1, [r6, #0]
 800898c:	4605      	mov	r5, r0
 800898e:	b911      	cbnz	r1, 8008996 <sbrk_aligned+0x12>
 8008990:	f000 f8ae 	bl	8008af0 <_sbrk_r>
 8008994:	6030      	str	r0, [r6, #0]
 8008996:	4621      	mov	r1, r4
 8008998:	4628      	mov	r0, r5
 800899a:	f000 f8a9 	bl	8008af0 <_sbrk_r>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d103      	bne.n	80089aa <sbrk_aligned+0x26>
 80089a2:	f04f 34ff 	mov.w	r4, #4294967295
 80089a6:	4620      	mov	r0, r4
 80089a8:	bd70      	pop	{r4, r5, r6, pc}
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d0f8      	beq.n	80089a6 <sbrk_aligned+0x22>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f000 f89a 	bl	8008af0 <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d1f2      	bne.n	80089a6 <sbrk_aligned+0x22>
 80089c0:	e7ef      	b.n	80089a2 <sbrk_aligned+0x1e>
 80089c2:	bf00      	nop
 80089c4:	20000954 	.word	0x20000954

080089c8 <_malloc_r>:
 80089c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089cc:	1ccd      	adds	r5, r1, #3
 80089ce:	f025 0503 	bic.w	r5, r5, #3
 80089d2:	3508      	adds	r5, #8
 80089d4:	2d0c      	cmp	r5, #12
 80089d6:	bf38      	it	cc
 80089d8:	250c      	movcc	r5, #12
 80089da:	2d00      	cmp	r5, #0
 80089dc:	4606      	mov	r6, r0
 80089de:	db01      	blt.n	80089e4 <_malloc_r+0x1c>
 80089e0:	42a9      	cmp	r1, r5
 80089e2:	d904      	bls.n	80089ee <_malloc_r+0x26>
 80089e4:	230c      	movs	r3, #12
 80089e6:	6033      	str	r3, [r6, #0]
 80089e8:	2000      	movs	r0, #0
 80089ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ac4 <_malloc_r+0xfc>
 80089f2:	f000 f869 	bl	8008ac8 <__malloc_lock>
 80089f6:	f8d8 3000 	ldr.w	r3, [r8]
 80089fa:	461c      	mov	r4, r3
 80089fc:	bb44      	cbnz	r4, 8008a50 <_malloc_r+0x88>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff ffbf 	bl	8008984 <sbrk_aligned>
 8008a06:	1c43      	adds	r3, r0, #1
 8008a08:	4604      	mov	r4, r0
 8008a0a:	d158      	bne.n	8008abe <_malloc_r+0xf6>
 8008a0c:	f8d8 4000 	ldr.w	r4, [r8]
 8008a10:	4627      	mov	r7, r4
 8008a12:	2f00      	cmp	r7, #0
 8008a14:	d143      	bne.n	8008a9e <_malloc_r+0xd6>
 8008a16:	2c00      	cmp	r4, #0
 8008a18:	d04b      	beq.n	8008ab2 <_malloc_r+0xea>
 8008a1a:	6823      	ldr	r3, [r4, #0]
 8008a1c:	4639      	mov	r1, r7
 8008a1e:	4630      	mov	r0, r6
 8008a20:	eb04 0903 	add.w	r9, r4, r3
 8008a24:	f000 f864 	bl	8008af0 <_sbrk_r>
 8008a28:	4581      	cmp	r9, r0
 8008a2a:	d142      	bne.n	8008ab2 <_malloc_r+0xea>
 8008a2c:	6821      	ldr	r1, [r4, #0]
 8008a2e:	1a6d      	subs	r5, r5, r1
 8008a30:	4629      	mov	r1, r5
 8008a32:	4630      	mov	r0, r6
 8008a34:	f7ff ffa6 	bl	8008984 <sbrk_aligned>
 8008a38:	3001      	adds	r0, #1
 8008a3a:	d03a      	beq.n	8008ab2 <_malloc_r+0xea>
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	442b      	add	r3, r5
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	f8d8 3000 	ldr.w	r3, [r8]
 8008a46:	685a      	ldr	r2, [r3, #4]
 8008a48:	bb62      	cbnz	r2, 8008aa4 <_malloc_r+0xdc>
 8008a4a:	f8c8 7000 	str.w	r7, [r8]
 8008a4e:	e00f      	b.n	8008a70 <_malloc_r+0xa8>
 8008a50:	6822      	ldr	r2, [r4, #0]
 8008a52:	1b52      	subs	r2, r2, r5
 8008a54:	d420      	bmi.n	8008a98 <_malloc_r+0xd0>
 8008a56:	2a0b      	cmp	r2, #11
 8008a58:	d917      	bls.n	8008a8a <_malloc_r+0xc2>
 8008a5a:	1961      	adds	r1, r4, r5
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	6025      	str	r5, [r4, #0]
 8008a60:	bf18      	it	ne
 8008a62:	6059      	strne	r1, [r3, #4]
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	bf08      	it	eq
 8008a68:	f8c8 1000 	streq.w	r1, [r8]
 8008a6c:	5162      	str	r2, [r4, r5]
 8008a6e:	604b      	str	r3, [r1, #4]
 8008a70:	4630      	mov	r0, r6
 8008a72:	f000 f82f 	bl	8008ad4 <__malloc_unlock>
 8008a76:	f104 000b 	add.w	r0, r4, #11
 8008a7a:	1d23      	adds	r3, r4, #4
 8008a7c:	f020 0007 	bic.w	r0, r0, #7
 8008a80:	1ac2      	subs	r2, r0, r3
 8008a82:	bf1c      	itt	ne
 8008a84:	1a1b      	subne	r3, r3, r0
 8008a86:	50a3      	strne	r3, [r4, r2]
 8008a88:	e7af      	b.n	80089ea <_malloc_r+0x22>
 8008a8a:	6862      	ldr	r2, [r4, #4]
 8008a8c:	42a3      	cmp	r3, r4
 8008a8e:	bf0c      	ite	eq
 8008a90:	f8c8 2000 	streq.w	r2, [r8]
 8008a94:	605a      	strne	r2, [r3, #4]
 8008a96:	e7eb      	b.n	8008a70 <_malloc_r+0xa8>
 8008a98:	4623      	mov	r3, r4
 8008a9a:	6864      	ldr	r4, [r4, #4]
 8008a9c:	e7ae      	b.n	80089fc <_malloc_r+0x34>
 8008a9e:	463c      	mov	r4, r7
 8008aa0:	687f      	ldr	r7, [r7, #4]
 8008aa2:	e7b6      	b.n	8008a12 <_malloc_r+0x4a>
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	42a3      	cmp	r3, r4
 8008aaa:	d1fb      	bne.n	8008aa4 <_malloc_r+0xdc>
 8008aac:	2300      	movs	r3, #0
 8008aae:	6053      	str	r3, [r2, #4]
 8008ab0:	e7de      	b.n	8008a70 <_malloc_r+0xa8>
 8008ab2:	230c      	movs	r3, #12
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 f80c 	bl	8008ad4 <__malloc_unlock>
 8008abc:	e794      	b.n	80089e8 <_malloc_r+0x20>
 8008abe:	6005      	str	r5, [r0, #0]
 8008ac0:	e7d6      	b.n	8008a70 <_malloc_r+0xa8>
 8008ac2:	bf00      	nop
 8008ac4:	20000958 	.word	0x20000958

08008ac8 <__malloc_lock>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	@ (8008ad0 <__malloc_lock+0x8>)
 8008aca:	f000 b84b 	b.w	8008b64 <__retarget_lock_acquire_recursive>
 8008ace:	bf00      	nop
 8008ad0:	20000a98 	.word	0x20000a98

08008ad4 <__malloc_unlock>:
 8008ad4:	4801      	ldr	r0, [pc, #4]	@ (8008adc <__malloc_unlock+0x8>)
 8008ad6:	f000 b846 	b.w	8008b66 <__retarget_lock_release_recursive>
 8008ada:	bf00      	nop
 8008adc:	20000a98 	.word	0x20000a98

08008ae0 <memset>:
 8008ae0:	4402      	add	r2, r0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d100      	bne.n	8008aea <memset+0xa>
 8008ae8:	4770      	bx	lr
 8008aea:	f803 1b01 	strb.w	r1, [r3], #1
 8008aee:	e7f9      	b.n	8008ae4 <memset+0x4>

08008af0 <_sbrk_r>:
 8008af0:	b538      	push	{r3, r4, r5, lr}
 8008af2:	4d06      	ldr	r5, [pc, #24]	@ (8008b0c <_sbrk_r+0x1c>)
 8008af4:	2300      	movs	r3, #0
 8008af6:	4604      	mov	r4, r0
 8008af8:	4608      	mov	r0, r1
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f7f8 f906 	bl	8000d0c <_sbrk>
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	d102      	bne.n	8008b0a <_sbrk_r+0x1a>
 8008b04:	682b      	ldr	r3, [r5, #0]
 8008b06:	b103      	cbz	r3, 8008b0a <_sbrk_r+0x1a>
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	bd38      	pop	{r3, r4, r5, pc}
 8008b0c:	20000a94 	.word	0x20000a94

08008b10 <__errno>:
 8008b10:	4b01      	ldr	r3, [pc, #4]	@ (8008b18 <__errno+0x8>)
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	2000002c 	.word	0x2000002c

08008b1c <__libc_init_array>:
 8008b1c:	b570      	push	{r4, r5, r6, lr}
 8008b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8008b54 <__libc_init_array+0x38>)
 8008b20:	4c0d      	ldr	r4, [pc, #52]	@ (8008b58 <__libc_init_array+0x3c>)
 8008b22:	1b64      	subs	r4, r4, r5
 8008b24:	10a4      	asrs	r4, r4, #2
 8008b26:	2600      	movs	r6, #0
 8008b28:	42a6      	cmp	r6, r4
 8008b2a:	d109      	bne.n	8008b40 <__libc_init_array+0x24>
 8008b2c:	4d0b      	ldr	r5, [pc, #44]	@ (8008b5c <__libc_init_array+0x40>)
 8008b2e:	4c0c      	ldr	r4, [pc, #48]	@ (8008b60 <__libc_init_array+0x44>)
 8008b30:	f000 f864 	bl	8008bfc <_init>
 8008b34:	1b64      	subs	r4, r4, r5
 8008b36:	10a4      	asrs	r4, r4, #2
 8008b38:	2600      	movs	r6, #0
 8008b3a:	42a6      	cmp	r6, r4
 8008b3c:	d105      	bne.n	8008b4a <__libc_init_array+0x2e>
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b44:	4798      	blx	r3
 8008b46:	3601      	adds	r6, #1
 8008b48:	e7ee      	b.n	8008b28 <__libc_init_array+0xc>
 8008b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4e:	4798      	blx	r3
 8008b50:	3601      	adds	r6, #1
 8008b52:	e7f2      	b.n	8008b3a <__libc_init_array+0x1e>
 8008b54:	08008c38 	.word	0x08008c38
 8008b58:	08008c38 	.word	0x08008c38
 8008b5c:	08008c38 	.word	0x08008c38
 8008b60:	08008c3c 	.word	0x08008c3c

08008b64 <__retarget_lock_acquire_recursive>:
 8008b64:	4770      	bx	lr

08008b66 <__retarget_lock_release_recursive>:
 8008b66:	4770      	bx	lr

08008b68 <_free_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	4605      	mov	r5, r0
 8008b6c:	2900      	cmp	r1, #0
 8008b6e:	d041      	beq.n	8008bf4 <_free_r+0x8c>
 8008b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b74:	1f0c      	subs	r4, r1, #4
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	bfb8      	it	lt
 8008b7a:	18e4      	addlt	r4, r4, r3
 8008b7c:	f7ff ffa4 	bl	8008ac8 <__malloc_lock>
 8008b80:	4a1d      	ldr	r2, [pc, #116]	@ (8008bf8 <_free_r+0x90>)
 8008b82:	6813      	ldr	r3, [r2, #0]
 8008b84:	b933      	cbnz	r3, 8008b94 <_free_r+0x2c>
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	6014      	str	r4, [r2, #0]
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b90:	f7ff bfa0 	b.w	8008ad4 <__malloc_unlock>
 8008b94:	42a3      	cmp	r3, r4
 8008b96:	d908      	bls.n	8008baa <_free_r+0x42>
 8008b98:	6820      	ldr	r0, [r4, #0]
 8008b9a:	1821      	adds	r1, r4, r0
 8008b9c:	428b      	cmp	r3, r1
 8008b9e:	bf01      	itttt	eq
 8008ba0:	6819      	ldreq	r1, [r3, #0]
 8008ba2:	685b      	ldreq	r3, [r3, #4]
 8008ba4:	1809      	addeq	r1, r1, r0
 8008ba6:	6021      	streq	r1, [r4, #0]
 8008ba8:	e7ed      	b.n	8008b86 <_free_r+0x1e>
 8008baa:	461a      	mov	r2, r3
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	b10b      	cbz	r3, 8008bb4 <_free_r+0x4c>
 8008bb0:	42a3      	cmp	r3, r4
 8008bb2:	d9fa      	bls.n	8008baa <_free_r+0x42>
 8008bb4:	6811      	ldr	r1, [r2, #0]
 8008bb6:	1850      	adds	r0, r2, r1
 8008bb8:	42a0      	cmp	r0, r4
 8008bba:	d10b      	bne.n	8008bd4 <_free_r+0x6c>
 8008bbc:	6820      	ldr	r0, [r4, #0]
 8008bbe:	4401      	add	r1, r0
 8008bc0:	1850      	adds	r0, r2, r1
 8008bc2:	4283      	cmp	r3, r0
 8008bc4:	6011      	str	r1, [r2, #0]
 8008bc6:	d1e0      	bne.n	8008b8a <_free_r+0x22>
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	6053      	str	r3, [r2, #4]
 8008bce:	4408      	add	r0, r1
 8008bd0:	6010      	str	r0, [r2, #0]
 8008bd2:	e7da      	b.n	8008b8a <_free_r+0x22>
 8008bd4:	d902      	bls.n	8008bdc <_free_r+0x74>
 8008bd6:	230c      	movs	r3, #12
 8008bd8:	602b      	str	r3, [r5, #0]
 8008bda:	e7d6      	b.n	8008b8a <_free_r+0x22>
 8008bdc:	6820      	ldr	r0, [r4, #0]
 8008bde:	1821      	adds	r1, r4, r0
 8008be0:	428b      	cmp	r3, r1
 8008be2:	bf04      	itt	eq
 8008be4:	6819      	ldreq	r1, [r3, #0]
 8008be6:	685b      	ldreq	r3, [r3, #4]
 8008be8:	6063      	str	r3, [r4, #4]
 8008bea:	bf04      	itt	eq
 8008bec:	1809      	addeq	r1, r1, r0
 8008bee:	6021      	streq	r1, [r4, #0]
 8008bf0:	6054      	str	r4, [r2, #4]
 8008bf2:	e7ca      	b.n	8008b8a <_free_r+0x22>
 8008bf4:	bd38      	pop	{r3, r4, r5, pc}
 8008bf6:	bf00      	nop
 8008bf8:	20000958 	.word	0x20000958

08008bfc <_init>:
 8008bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfe:	bf00      	nop
 8008c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c02:	bc08      	pop	{r3}
 8008c04:	469e      	mov	lr, r3
 8008c06:	4770      	bx	lr

08008c08 <_fini>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	bf00      	nop
 8008c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0e:	bc08      	pop	{r3}
 8008c10:	469e      	mov	lr, r3
 8008c12:	4770      	bx	lr
