
UART_FuncGen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007730  08007730  00008730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800774c  0800774c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007754  08007754  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007754  08007754  00008754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007758  08007758  00008758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800775c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000907c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000907c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000907c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c08  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e4  00000000  00000000  0001ecb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00022198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d65  00000000  00000000  000232f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e7b  00000000  00000000  0002405d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000176b3  00000000  00000000  00046ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbec9  00000000  00000000  0005e58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a454  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c38  00000000  00000000  0012a498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b6  00000000  00000000  0012f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007718 	.word	0x08007718

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007718 	.word	0x08007718

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b092      	sub	sp, #72	@ 0x48
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fbff 	bl	8000cd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f847 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f93d 	bl	8000754 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004da:	f000 f8ad 	bl	8000638 <MX_I2C1_Init>
  MX_SPI1_Init();
 80004de:	f000 f8d9 	bl	8000694 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004e2:	f006 fd19 	bl	8006f18 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80004e6:	f000 f90b 	bl	8000700 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  char buffer[64]="";
 80004ea:	2300      	movs	r3, #0
 80004ec:	603b      	str	r3, [r7, #0]
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	223c      	movs	r2, #60	@ 0x3c
 80004f2:	2100      	movs	r1, #0
 80004f4:	4618      	mov	r0, r3
 80004f6:	f007 f881 	bl	80075fc <memset>
  char voltage;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 if (HAL_UART_Receive(&huart5, (uint8_t*)buffer, 1, 500) == HAL_OK){
 80004fa:	4639      	mov	r1, r7
 80004fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000500:	2201      	movs	r2, #1
 8000502:	4815      	ldr	r0, [pc, #84]	@ (8000558 <main+0x90>)
 8000504:	f003 ff80 	bl	8004408 <HAL_UART_Receive>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d115      	bne.n	800053a <main+0x72>
		 voltage = buffer[0];
 800050e:	783b      	ldrb	r3, [r7, #0]
 8000510:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800051a:	4810      	ldr	r0, [pc, #64]	@ (800055c <main+0x94>)
 800051c:	f000 ff1c 	bl	8001358 <HAL_GPIO_WritePin>
//		 sprintf(buffer, sizeof(buffer), "%d@", value);
		 HAL_UART_Transmit(&huart5, (uint8_t*)buffer, strlen(buffer), 500);
 8000520:	463b      	mov	r3, r7
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff fe50 	bl	80001c8 <strlen>
 8000528:	4603      	mov	r3, r0
 800052a:	b29a      	uxth	r2, r3
 800052c:	4639      	mov	r1, r7
 800052e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000532:	4809      	ldr	r0, [pc, #36]	@ (8000558 <main+0x90>)
 8000534:	f003 fedd 	bl	80042f2 <HAL_UART_Transmit>
 8000538:	e005      	b.n	8000546 <main+0x7e>
	 }
	 else{
		 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000540:	4806      	ldr	r0, [pc, #24]	@ (800055c <main+0x94>)
 8000542:	f000 ff09 	bl	8001358 <HAL_GPIO_WritePin>
	 }
	 uint32_t value = (uint32_t)voltage;
 8000546:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800054a:	643b      	str	r3, [r7, #64]	@ 0x40
	 GPIOE->ODR = value << 8;
 800054c:	4a04      	ldr	r2, [pc, #16]	@ (8000560 <main+0x98>)
 800054e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000550:	021b      	lsls	r3, r3, #8
 8000552:	6153      	str	r3, [r2, #20]
  {
 8000554:	e7d1      	b.n	80004fa <main+0x32>
 8000556:	bf00      	nop
 8000558:	20000144 	.word	0x20000144
 800055c:	40020c00 	.word	0x40020c00
 8000560:	40021000 	.word	0x40021000

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	@ 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	@ 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f007 f842 	bl	80075fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	@ (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	@ (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	@ 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	@ (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	@ (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d4:	2308      	movs	r3, #8
 80005d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005d8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005de:	2302      	movs	r3, #2
 80005e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f910 	bl	8003810 <HAL_RCC_OscConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005f6:	f000 f999 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fa:	230f      	movs	r3, #15
 80005fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fe:	2302      	movs	r3, #2
 8000600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000606:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800060a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000610:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2105      	movs	r1, #5
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fb71 	bl	8003d00 <HAL_RCC_ClockConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000624:	f000 f982 	bl	800092c <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	3750      	adds	r7, #80	@ 0x50
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800063c:	4b12      	ldr	r3, [pc, #72]	@ (8000688 <MX_I2C1_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	@ (800068c <MX_I2C1_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_I2C1_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_I2C1_Init+0x50>)
 8000676:	f002 ff87 	bl	8003588 <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 f954 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098
 800068c:	40005400 	.word	0x40005400
 8000690:	000186a0 	.word	0x000186a0

08000694 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <MX_SPI1_Init+0x64>)
 800069a:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <MX_SPI1_Init+0x68>)
 800069c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006a6:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006be:	4b0e      	ldr	r3, [pc, #56]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006d8:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006de:	4b06      	ldr	r3, [pc, #24]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006e0:	220a      	movs	r2, #10
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e4:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <MX_SPI1_Init+0x64>)
 80006e6:	f003 fd2b 	bl	8004140 <HAL_SPI_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006f0:	f000 f91c 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000ec 	.word	0x200000ec
 80006fc:	40013000 	.word	0x40013000

08000700 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_UART5_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	@ (8000750 <MX_UART5_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	@ (800074c <MX_UART5_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_UART5_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_UART5_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	@ (800074c <MX_UART5_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_UART5_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	@ (800074c <MX_UART5_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_UART5_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	@ (800074c <MX_UART5_Init+0x4c>)
 8000738:	f003 fd8b 	bl	8004252 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f8f3 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000144 	.word	0x20000144
 8000750:	40005000 	.word	0x40005000

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	@ 0x30
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
 800076e:	4b69      	ldr	r3, [pc, #420]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a68      	ldr	r2, [pc, #416]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 8000774:	f043 0310 	orr.w	r3, r3, #16
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b66      	ldr	r3, [pc, #408]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	61bb      	str	r3, [r7, #24]
 8000784:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	4b62      	ldr	r3, [pc, #392]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a61      	ldr	r2, [pc, #388]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b5f      	ldr	r3, [pc, #380]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	617b      	str	r3, [r7, #20]
 80007a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	4b5b      	ldr	r3, [pc, #364]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a5a      	ldr	r2, [pc, #360]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b58      	ldr	r3, [pc, #352]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	613b      	str	r3, [r7, #16]
 80007bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b54      	ldr	r3, [pc, #336]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a53      	ldr	r2, [pc, #332]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b51      	ldr	r3, [pc, #324]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b4d      	ldr	r3, [pc, #308]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a4c      	ldr	r2, [pc, #304]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b4a      	ldr	r3, [pc, #296]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b46      	ldr	r3, [pc, #280]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a45      	ldr	r2, [pc, #276]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b43      	ldr	r3, [pc, #268]	@ (8000914 <MX_GPIO_Init+0x1c0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000812:	2200      	movs	r2, #0
 8000814:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000818:	483f      	ldr	r0, [pc, #252]	@ (8000918 <MX_GPIO_Init+0x1c4>)
 800081a:	f000 fd9d 	bl	8001358 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800081e:	2201      	movs	r2, #1
 8000820:	2101      	movs	r1, #1
 8000822:	483e      	ldr	r0, [pc, #248]	@ (800091c <MX_GPIO_Init+0x1c8>)
 8000824:	f000 fd98 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000828:	2200      	movs	r2, #0
 800082a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800082e:	483c      	ldr	r0, [pc, #240]	@ (8000920 <MX_GPIO_Init+0x1cc>)
 8000830:	f000 fd92 	bl	8001358 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000834:	2308      	movs	r3, #8
 8000836:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000838:	2301      	movs	r3, #1
 800083a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4833      	ldr	r0, [pc, #204]	@ (8000918 <MX_GPIO_Init+0x1c4>)
 800084c:	f000 fbe8 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	482d      	ldr	r0, [pc, #180]	@ (800091c <MX_GPIO_Init+0x1c8>)
 8000868:	f000 fbda 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000870:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 031c 	add.w	r3, r7, #28
 800087e:	4619      	mov	r1, r3
 8000880:	4828      	ldr	r0, [pc, #160]	@ (8000924 <MX_GPIO_Init+0x1d0>)
 8000882:	f000 fbcd 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000886:	2304      	movs	r3, #4
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_GPIO_Init+0x1d4>)
 800089a:	f000 fbc1 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800089e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80008a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008a8:	2302      	movs	r3, #2
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4818      	ldr	r0, [pc, #96]	@ (8000918 <MX_GPIO_Init+0x1c4>)
 80008b8:	f000 fbb2 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008bc:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008c0:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4812      	ldr	r0, [pc, #72]	@ (8000920 <MX_GPIO_Init+0x1cc>)
 80008d6:	f000 fba3 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008da:	2320      	movs	r3, #32
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	480c      	ldr	r0, [pc, #48]	@ (8000920 <MX_GPIO_Init+0x1cc>)
 80008ee:	f000 fb97 	bl	8001020 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	@ (8000918 <MX_GPIO_Init+0x1c4>)
 8000908:	f000 fb8a 	bl	8001020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090c:	bf00      	nop
 800090e:	3730      	adds	r7, #48	@ 0x30
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	40021000 	.word	0x40021000
 800091c:	40020800 	.word	0x40020800
 8000920:	40020c00 	.word	0x40020c00
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000976:	2007      	movs	r0, #7
 8000978:	f000 fb10 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a19      	ldr	r2, [pc, #100]	@ (8000a0c <HAL_I2C_MspInit+0x84>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d12c      	bne.n	8000a04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	4a17      	ldr	r2, [pc, #92]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009b4:	f043 0302 	orr.w	r3, r3, #2
 80009b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	f003 0302 	and.w	r3, r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009c6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009cc:	2312      	movs	r3, #18
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d8:	2304      	movs	r3, #4
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	@ (8000a14 <HAL_I2C_MspInit+0x8c>)
 80009e4:	f000 fb1c 	bl	8001020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f0:	4a07      	ldr	r2, [pc, #28]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_I2C_MspInit+0x88>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	@ 0x28
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	2200      	movs	r2, #0
 8000a26:	601a      	str	r2, [r3, #0]
 8000a28:	605a      	str	r2, [r3, #4]
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	60da      	str	r2, [r3, #12]
 8000a2e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a19      	ldr	r2, [pc, #100]	@ (8000a9c <HAL_SPI_MspInit+0x84>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d12b      	bne.n	8000a92 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	@ (8000aa0 <HAL_SPI_MspInit+0x88>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	4a17      	ldr	r2, [pc, #92]	@ (8000aa0 <HAL_SPI_MspInit+0x88>)
 8000a44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4a:	4b15      	ldr	r3, [pc, #84]	@ (8000aa0 <HAL_SPI_MspInit+0x88>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	4b11      	ldr	r3, [pc, #68]	@ (8000aa0 <HAL_SPI_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	4a10      	ldr	r2, [pc, #64]	@ (8000aa0 <HAL_SPI_MspInit+0x88>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a66:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa0 <HAL_SPI_MspInit+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a72:	23e0      	movs	r3, #224	@ 0xe0
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a82:	2305      	movs	r3, #5
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <HAL_SPI_MspInit+0x8c>)
 8000a8e:	f000 fac7 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	@ 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40013000 	.word	0x40013000
 8000aa0:	40023800 	.word	0x40023800
 8000aa4:	40020000 	.word	0x40020000

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a28      	ldr	r2, [pc, #160]	@ (8000b68 <HAL_UART_MspInit+0xc0>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d14a      	bne.n	8000b60 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a26      	ldr	r2, [pc, #152]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000ad4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a1f      	ldr	r2, [pc, #124]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0304 	and.w	r3, r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a18      	ldr	r2, [pc, #96]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000b0c:	f043 0308 	orr.w	r3, r3, #8
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <HAL_UART_MspInit+0xc4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b30:	2308      	movs	r3, #8
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	@ (8000b70 <HAL_UART_MspInit+0xc8>)
 8000b3c:	f000 fa70 	bl	8001020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b40:	2304      	movs	r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b50:	2308      	movs	r3, #8
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <HAL_UART_MspInit+0xcc>)
 8000b5c:	f000 fa60 	bl	8001020 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b60:	bf00      	nop
 8000b62:	3728      	adds	r7, #40	@ 0x28
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40005000 	.word	0x40005000
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020800 	.word	0x40020800
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <NMI_Handler+0x4>

08000b80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <HardFault_Handler+0x4>

08000b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <MemManage_Handler+0x4>

08000b90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <BusFault_Handler+0x4>

08000b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <UsageFault_Handler+0x4>

08000ba0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bce:	f000 f8d1 	bl	8000d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000bdc:	4802      	ldr	r0, [pc, #8]	@ (8000be8 <OTG_FS_IRQHandler+0x10>)
 8000bde:	f000 feb5 	bl	800194c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000570 	.word	0x20000570

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f006 fd06 	bl	800762c <__errno>
 8000c20:	4603      	mov	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	4a05      	ldr	r2, [pc, #20]	@ (8000c50 <_sbrk+0x64>)
 8000c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3718      	adds	r7, #24
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20020000 	.word	0x20020000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	2000018c 	.word	0x2000018c
 8000c54:	20000a98 	.word	0x20000a98

08000c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <SystemInit+0x20>)
 8000c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c62:	4a05      	ldr	r2, [pc, #20]	@ (8000c78 <SystemInit+0x20>)
 8000c64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c80:	f7ff ffea 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000caa:	f006 fcc5 	bl	8007638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fc0b 	bl	80004c8 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000cc0:	0800775c 	.word	0x0800775c
  ldr r2, =_sbss
 8000cc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cc8:	20000a98 	.word	0x20000a98

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>
	...

08000cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d10 <HAL_Init+0x40>)
 8000cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_Init+0x40>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <HAL_Init+0x40>)
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000cea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cec:	4b08      	ldr	r3, [pc, #32]	@ (8000d10 <HAL_Init+0x40>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a07      	ldr	r2, [pc, #28]	@ (8000d10 <HAL_Init+0x40>)
 8000cf2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cf6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f94f 	bl	8000f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f808 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d04:	f7ff fe18 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00

08000d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d1c:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_InitTick+0x54>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <HAL_InitTick+0x58>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4619      	mov	r1, r3
 8000d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d32:	4618      	mov	r0, r3
 8000d34:	f000 f967 	bl	8001006 <HAL_SYSTICK_Config>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00e      	b.n	8000d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d80a      	bhi.n	8000d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	6879      	ldr	r1, [r7, #4]
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d50:	f000 f92f 	bl	8000fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d54:	4a06      	ldr	r2, [pc, #24]	@ (8000d70 <HAL_InitTick+0x5c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e000      	b.n	8000d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	20000004 	.word	0x20000004

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000008 	.word	0x20000008
 8000d98:	20000190 	.word	0x20000190

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20000190 	.word	0x20000190

08000db4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dbc:	f7ff ffee 	bl	8000d9c <HAL_GetTick>
 8000dc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dcc:	d005      	beq.n	8000dda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dce:	4b0a      	ldr	r3, [pc, #40]	@ (8000df8 <HAL_Delay+0x44>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dda:	bf00      	nop
 8000ddc:	f7ff ffde 	bl	8000d9c <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d8f7      	bhi.n	8000ddc <HAL_Delay+0x28>
  {
  }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b085      	sub	sp, #20
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2e:	4a04      	ldr	r2, [pc, #16]	@ (8000e40 <__NVIC_SetPriorityGrouping+0x44>)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	60d3      	str	r3, [r2, #12]
}
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e48:	4b04      	ldr	r3, [pc, #16]	@ (8000e5c <__NVIC_GetPriorityGrouping+0x18>)
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	0a1b      	lsrs	r3, r3, #8
 8000e4e:	f003 0307 	and.w	r3, r3, #7
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	db0b      	blt.n	8000e8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	f003 021f 	and.w	r2, r3, #31
 8000e78:	4907      	ldr	r1, [pc, #28]	@ (8000e98 <__NVIC_EnableIRQ+0x38>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	095b      	lsrs	r3, r3, #5
 8000e80:	2001      	movs	r0, #1
 8000e82:	fa00 f202 	lsl.w	r2, r0, r2
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e8a:	bf00      	nop
 8000e8c:	370c      	adds	r7, #12
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	e000e100 	.word	0xe000e100

08000e9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	db0a      	blt.n	8000ec6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	490c      	ldr	r1, [pc, #48]	@ (8000ee8 <__NVIC_SetPriority+0x4c>)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	0112      	lsls	r2, r2, #4
 8000ebc:	b2d2      	uxtb	r2, r2
 8000ebe:	440b      	add	r3, r1
 8000ec0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ec4:	e00a      	b.n	8000edc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4908      	ldr	r1, [pc, #32]	@ (8000eec <__NVIC_SetPriority+0x50>)
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	f003 030f 	and.w	r3, r3, #15
 8000ed2:	3b04      	subs	r3, #4
 8000ed4:	0112      	lsls	r2, r2, #4
 8000ed6:	b2d2      	uxtb	r2, r2
 8000ed8:	440b      	add	r3, r1
 8000eda:	761a      	strb	r2, [r3, #24]
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b089      	sub	sp, #36	@ 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2b04      	cmp	r3, #4
 8000f0c:	bf28      	it	cs
 8000f0e:	2304      	movcs	r3, #4
 8000f10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3304      	adds	r3, #4
 8000f16:	2b06      	cmp	r3, #6
 8000f18:	d902      	bls.n	8000f20 <NVIC_EncodePriority+0x30>
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3b03      	subs	r3, #3
 8000f1e:	e000      	b.n	8000f22 <NVIC_EncodePriority+0x32>
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f38:	f04f 31ff 	mov.w	r1, #4294967295
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f42:	43d9      	mvns	r1, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	4313      	orrs	r3, r2
         );
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3724      	adds	r7, #36	@ 0x24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
	...

08000f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3b01      	subs	r3, #1
 8000f64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f68:	d301      	bcc.n	8000f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00f      	b.n	8000f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <SysTick_Config+0x40>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f76:	210f      	movs	r1, #15
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f7ff ff8e 	bl	8000e9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <SysTick_Config+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <SysTick_Config+0x40>)
 8000f88:	2207      	movs	r2, #7
 8000f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010

08000f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff29 	bl	8000dfc <__NVIC_SetPriorityGrouping>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	4603      	mov	r3, r0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
 8000fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc4:	f7ff ff3e 	bl	8000e44 <__NVIC_GetPriorityGrouping>
 8000fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	6978      	ldr	r0, [r7, #20]
 8000fd0:	f7ff ff8e 	bl	8000ef0 <NVIC_EncodePriority>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fda:	4611      	mov	r1, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff5d 	bl	8000e9c <__NVIC_SetPriority>
}
 8000fe2:	bf00      	nop
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff31 	bl	8000e60 <__NVIC_EnableIRQ>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffa2 	bl	8000f58 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001020:	b480      	push	{r7}
 8001022:	b089      	sub	sp, #36	@ 0x24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
 800103a:	e16b      	b.n	8001314 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800103c:	2201      	movs	r2, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001050:	693a      	ldr	r2, [r7, #16]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 815a 	bne.w	800130e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b01      	cmp	r3, #1
 8001064:	d005      	beq.n	8001072 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106e:	2b02      	cmp	r3, #2
 8001070:	d130      	bne.n	80010d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	2203      	movs	r2, #3
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4013      	ands	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a8:	2201      	movs	r2, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	091b      	lsrs	r3, r3, #4
 80010be:	f003 0201 	and.w	r2, r3, #1
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b03      	cmp	r3, #3
 80010de:	d017      	beq.n	8001110 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d123      	bne.n	8001164 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	69b9      	ldr	r1, [r7, #24]
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80b4 	beq.w	800130e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b60      	ldr	r3, [pc, #384]	@ (800132c <HAL_GPIO_Init+0x30c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a5f      	ldr	r2, [pc, #380]	@ (800132c <HAL_GPIO_Init+0x30c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b5d      	ldr	r3, [pc, #372]	@ (800132c <HAL_GPIO_Init+0x30c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c2:	4a5b      	ldr	r2, [pc, #364]	@ (8001330 <HAL_GPIO_Init+0x310>)
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	089b      	lsrs	r3, r3, #2
 80011c8:	3302      	adds	r3, #2
 80011ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	f003 0303 	and.w	r3, r3, #3
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	220f      	movs	r2, #15
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a52      	ldr	r2, [pc, #328]	@ (8001334 <HAL_GPIO_Init+0x314>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x226>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a51      	ldr	r2, [pc, #324]	@ (8001338 <HAL_GPIO_Init+0x318>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x222>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a50      	ldr	r2, [pc, #320]	@ (800133c <HAL_GPIO_Init+0x31c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x21e>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a4f      	ldr	r2, [pc, #316]	@ (8001340 <HAL_GPIO_Init+0x320>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x21a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a4e      	ldr	r2, [pc, #312]	@ (8001344 <HAL_GPIO_Init+0x324>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x216>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a4d      	ldr	r2, [pc, #308]	@ (8001348 <HAL_GPIO_Init+0x328>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x212>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a4c      	ldr	r2, [pc, #304]	@ (800134c <HAL_GPIO_Init+0x32c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x20e>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a4b      	ldr	r2, [pc, #300]	@ (8001350 <HAL_GPIO_Init+0x330>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x20a>
 8001226:	2307      	movs	r3, #7
 8001228:	e00e      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122a:	2308      	movs	r3, #8
 800122c:	e00c      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800122e:	2306      	movs	r3, #6
 8001230:	e00a      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001232:	2305      	movs	r3, #5
 8001234:	e008      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001236:	2304      	movs	r3, #4
 8001238:	e006      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123a:	2303      	movs	r3, #3
 800123c:	e004      	b.n	8001248 <HAL_GPIO_Init+0x228>
 800123e:	2302      	movs	r3, #2
 8001240:	e002      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_GPIO_Init+0x228>
 8001246:	2300      	movs	r3, #0
 8001248:	69fa      	ldr	r2, [r7, #28]
 800124a:	f002 0203 	and.w	r2, r2, #3
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	4093      	lsls	r3, r2
 8001252:	69ba      	ldr	r2, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001258:	4935      	ldr	r1, [pc, #212]	@ (8001330 <HAL_GPIO_Init+0x310>)
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	089b      	lsrs	r3, r3, #2
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001266:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <HAL_GPIO_Init+0x334>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	43db      	mvns	r3, r3
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	4013      	ands	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800128a:	4a32      	ldr	r2, [pc, #200]	@ (8001354 <HAL_GPIO_Init+0x334>)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001290:	4b30      	ldr	r3, [pc, #192]	@ (8001354 <HAL_GPIO_Init+0x334>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	43db      	mvns	r3, r3
 800129a:	69ba      	ldr	r2, [r7, #24]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d003      	beq.n	80012b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012b4:	4a27      	ldr	r2, [pc, #156]	@ (8001354 <HAL_GPIO_Init+0x334>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ba:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <HAL_GPIO_Init+0x334>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012de:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_GPIO_Init+0x334>)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001354 <HAL_GPIO_Init+0x334>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	43db      	mvns	r3, r3
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	4013      	ands	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d003      	beq.n	8001308 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <HAL_GPIO_Init+0x334>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3301      	adds	r3, #1
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	f67f ae90 	bls.w	800103c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3724      	adds	r7, #36	@ 0x24
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40013c00 	.word	0x40013c00

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001374:	e003      	b.n	800137e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001376:	887b      	ldrh	r3, [r7, #2]
 8001378:	041a      	lsls	r2, r3, #16
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	619a      	str	r2, [r3, #24]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af02      	add	r7, sp, #8
 8001390:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e059      	b.n	8001450 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d106      	bne.n	80013bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f005 fe02 	bl	8006fc0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013ca:	d102      	bne.n	80013d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f003 fc53 	bl	8004c82 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	7c1a      	ldrb	r2, [r3, #16]
 80013e4:	f88d 2000 	strb.w	r2, [sp]
 80013e8:	3304      	adds	r3, #4
 80013ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ec:	f003 fbd4 	bl	8004b98 <USB_CoreInit>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d005      	beq.n	8001402 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2202      	movs	r2, #2
 80013fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e026      	b.n	8001450 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fc4b 	bl	8004ca4 <USB_SetCurrentMode>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d005      	beq.n	8001420 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e017      	b.n	8001450 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6818      	ldr	r0, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7c1a      	ldrb	r2, [r3, #16]
 8001428:	f88d 2000 	strb.w	r2, [sp]
 800142c:	3304      	adds	r3, #4
 800142e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001430:	f003 fdee 	bl	8005010 <USB_HostInit>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2202      	movs	r2, #2
 800143e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e004      	b.n	8001450 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b08b      	sub	sp, #44	@ 0x2c
 800145c:	af04      	add	r7, sp, #16
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	461a      	mov	r2, r3
 8001466:	4603      	mov	r3, r0
 8001468:	70fb      	strb	r3, [r7, #3]
 800146a:	460b      	mov	r3, r1
 800146c:	70bb      	strb	r3, [r7, #2]
 800146e:	4613      	mov	r3, r2
 8001470:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001472:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001474:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800147c:	2b01      	cmp	r3, #1
 800147e:	d101      	bne.n	8001484 <HAL_HCD_HC_Init+0x2c>
 8001480:	2302      	movs	r3, #2
 8001482:	e09d      	b.n	80015c0 <HAL_HCD_HC_Init+0x168>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800148c:	78fa      	ldrb	r2, [r7, #3]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	011b      	lsls	r3, r3, #4
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	3319      	adds	r3, #25
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80014a0:	78fa      	ldrb	r2, [r7, #3]
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	011b      	lsls	r3, r3, #4
 80014a8:	1a9b      	subs	r3, r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3314      	adds	r3, #20
 80014b0:	787a      	ldrb	r2, [r7, #1]
 80014b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80014b4:	78fa      	ldrb	r2, [r7, #3]
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	011b      	lsls	r3, r3, #4
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3315      	adds	r3, #21
 80014c4:	78fa      	ldrb	r2, [r7, #3]
 80014c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80014c8:	78fa      	ldrb	r2, [r7, #3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	011b      	lsls	r3, r3, #4
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3326      	adds	r3, #38	@ 0x26
 80014d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80014dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80014de:	78fa      	ldrb	r2, [r7, #3]
 80014e0:	78bb      	ldrb	r3, [r7, #2]
 80014e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80014e6:	b2d8      	uxtb	r0, r3
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	440b      	add	r3, r1
 80014f4:	3316      	adds	r3, #22
 80014f6:	4602      	mov	r2, r0
 80014f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80014fa:	78fb      	ldrb	r3, [r7, #3]
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 fbac 	bl	8001c5c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001504:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001508:	2b00      	cmp	r3, #0
 800150a:	da0a      	bge.n	8001522 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800150c:	78fa      	ldrb	r2, [r7, #3]
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	4613      	mov	r3, r2
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	440b      	add	r3, r1
 800151a:	3317      	adds	r3, #23
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
 8001520:	e009      	b.n	8001536 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	4613      	mov	r3, r2
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	1a9b      	subs	r3, r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	440b      	add	r3, r1
 8001530:	3317      	adds	r3, #23
 8001532:	2200      	movs	r2, #0
 8001534:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4618      	mov	r0, r3
 800153c:	f003 fea2 	bl	8005284 <USB_GetHostSpeed>
 8001540:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001542:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10b      	bne.n	8001562 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800154a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_HCD_HC_Init+0x10a>
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d104      	bne.n	8001562 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2bbc      	cmp	r3, #188	@ 0xbc
 800155c:	d901      	bls.n	8001562 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800155e:	23bc      	movs	r3, #188	@ 0xbc
 8001560:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001562:	78fa      	ldrb	r2, [r7, #3]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3318      	adds	r3, #24
 8001572:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001576:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001578:	78fa      	ldrb	r2, [r7, #3]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	b298      	uxth	r0, r3
 800157e:	6879      	ldr	r1, [r7, #4]
 8001580:	4613      	mov	r3, r2
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	3328      	adds	r3, #40	@ 0x28
 800158c:	4602      	mov	r2, r0
 800158e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	b29b      	uxth	r3, r3
 8001598:	787c      	ldrb	r4, [r7, #1]
 800159a:	78ba      	ldrb	r2, [r7, #2]
 800159c:	78f9      	ldrb	r1, [r7, #3]
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4623      	mov	r3, r4
 80015ae:	f003 fe91 	bl	80052d4 <USB_HC_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}

080015c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d101      	bne.n	80015e6 <HAL_HCD_HC_Halt+0x1e>
 80015e2:	2302      	movs	r3, #2
 80015e4:	e00f      	b.n	8001606 <HAL_HCD_HC_Halt+0x3e>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2201      	movs	r2, #1
 80015ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	78fa      	ldrb	r2, [r7, #3]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f004 fa23 	bl	8005a42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001604:	7bfb      	ldrb	r3, [r7, #15]
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	4608      	mov	r0, r1
 800161a:	4611      	mov	r1, r2
 800161c:	461a      	mov	r2, r3
 800161e:	4603      	mov	r3, r0
 8001620:	70fb      	strb	r3, [r7, #3]
 8001622:	460b      	mov	r3, r1
 8001624:	70bb      	strb	r3, [r7, #2]
 8001626:	4613      	mov	r3, r2
 8001628:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3317      	adds	r3, #23
 800163a:	78ba      	ldrb	r2, [r7, #2]
 800163c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800163e:	78fa      	ldrb	r2, [r7, #3]
 8001640:	6879      	ldr	r1, [r7, #4]
 8001642:	4613      	mov	r3, r2
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	1a9b      	subs	r3, r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	440b      	add	r3, r1
 800164c:	3326      	adds	r3, #38	@ 0x26
 800164e:	787a      	ldrb	r2, [r7, #1]
 8001650:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001652:	7c3b      	ldrb	r3, [r7, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d114      	bne.n	8001682 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	332a      	adds	r3, #42	@ 0x2a
 8001668:	2203      	movs	r2, #3
 800166a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800166c:	78fa      	ldrb	r2, [r7, #3]
 800166e:	6879      	ldr	r1, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	440b      	add	r3, r1
 800167a:	3319      	adds	r3, #25
 800167c:	7f3a      	ldrb	r2, [r7, #28]
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e009      	b.n	8001696 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001682:	78fa      	ldrb	r2, [r7, #3]
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	4613      	mov	r3, r2
 8001688:	011b      	lsls	r3, r3, #4
 800168a:	1a9b      	subs	r3, r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	440b      	add	r3, r1
 8001690:	332a      	adds	r3, #42	@ 0x2a
 8001692:	2202      	movs	r2, #2
 8001694:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001696:	787b      	ldrb	r3, [r7, #1]
 8001698:	2b03      	cmp	r3, #3
 800169a:	f200 8102 	bhi.w	80018a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800169e:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	0800188d 	.word	0x0800188d
 80016ac:	08001779 	.word	0x08001779
 80016b0:	08001803 	.word	0x08001803
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80016b4:	7c3b      	ldrb	r3, [r7, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	f040 80f5 	bne.w	80018a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80016bc:	78bb      	ldrb	r3, [r7, #2]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d12d      	bne.n	800171e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80016c2:	8b3b      	ldrh	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d109      	bne.n	80016dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80016c8:	78fa      	ldrb	r2, [r7, #3]
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	333d      	adds	r3, #61	@ 0x3d
 80016d8:	2201      	movs	r2, #1
 80016da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80016dc:	78fa      	ldrb	r2, [r7, #3]
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4613      	mov	r3, r2
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	333d      	adds	r3, #61	@ 0x3d
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d10a      	bne.n	8001708 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016f2:	78fa      	ldrb	r2, [r7, #3]
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	332a      	adds	r3, #42	@ 0x2a
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001706:	e0ce      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4613      	mov	r3, r2
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	1a9b      	subs	r3, r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	332a      	adds	r3, #42	@ 0x2a
 8001718:	2202      	movs	r2, #2
 800171a:	701a      	strb	r2, [r3, #0]
      break;
 800171c:	e0c3      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	011b      	lsls	r3, r3, #4
 8001726:	1a9b      	subs	r3, r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	331a      	adds	r3, #26
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	2b01      	cmp	r3, #1
 8001732:	f040 80b8 	bne.w	80018a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	4613      	mov	r3, r2
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	1a9b      	subs	r3, r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	440b      	add	r3, r1
 8001744:	333c      	adds	r3, #60	@ 0x3c
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d10a      	bne.n	8001762 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4613      	mov	r3, r2
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	1a9b      	subs	r3, r3, r2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	332a      	adds	r3, #42	@ 0x2a
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
      break;
 8001760:	e0a1      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	011b      	lsls	r3, r3, #4
 800176a:	1a9b      	subs	r3, r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	332a      	adds	r3, #42	@ 0x2a
 8001772:	2202      	movs	r2, #2
 8001774:	701a      	strb	r2, [r3, #0]
      break;
 8001776:	e096      	b.n	80018a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001778:	78bb      	ldrb	r3, [r7, #2]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d120      	bne.n	80017c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	333d      	adds	r3, #61	@ 0x3d
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d10a      	bne.n	80017aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	6879      	ldr	r1, [r7, #4]
 8001798:	4613      	mov	r3, r2
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	1a9b      	subs	r3, r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	332a      	adds	r3, #42	@ 0x2a
 80017a4:	2200      	movs	r2, #0
 80017a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80017a8:	e07e      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017aa:	78fa      	ldrb	r2, [r7, #3]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	011b      	lsls	r3, r3, #4
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	332a      	adds	r3, #42	@ 0x2a
 80017ba:	2202      	movs	r2, #2
 80017bc:	701a      	strb	r2, [r3, #0]
      break;
 80017be:	e073      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017c0:	78fa      	ldrb	r2, [r7, #3]
 80017c2:	6879      	ldr	r1, [r7, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	1a9b      	subs	r3, r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	333c      	adds	r3, #60	@ 0x3c
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10a      	bne.n	80017ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d6:	78fa      	ldrb	r2, [r7, #3]
 80017d8:	6879      	ldr	r1, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	1a9b      	subs	r3, r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	440b      	add	r3, r1
 80017e4:	332a      	adds	r3, #42	@ 0x2a
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
      break;
 80017ea:	e05d      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ec:	78fa      	ldrb	r2, [r7, #3]
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	332a      	adds	r3, #42	@ 0x2a
 80017fc:	2202      	movs	r2, #2
 80017fe:	701a      	strb	r2, [r3, #0]
      break;
 8001800:	e052      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001802:	78bb      	ldrb	r3, [r7, #2]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d120      	bne.n	800184a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	4613      	mov	r3, r2
 800180e:	011b      	lsls	r3, r3, #4
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	440b      	add	r3, r1
 8001816:	333d      	adds	r3, #61	@ 0x3d
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10a      	bne.n	8001834 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181e:	78fa      	ldrb	r2, [r7, #3]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	1a9b      	subs	r3, r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	440b      	add	r3, r1
 800182c:	332a      	adds	r3, #42	@ 0x2a
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001832:	e039      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001834:	78fa      	ldrb	r2, [r7, #3]
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	011b      	lsls	r3, r3, #4
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	332a      	adds	r3, #42	@ 0x2a
 8001844:	2202      	movs	r2, #2
 8001846:	701a      	strb	r2, [r3, #0]
      break;
 8001848:	e02e      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	333c      	adds	r3, #60	@ 0x3c
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10a      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a9b      	subs	r3, r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	332a      	adds	r3, #42	@ 0x2a
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
      break;
 8001874:	e018      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	6879      	ldr	r1, [r7, #4]
 800187a:	4613      	mov	r3, r2
 800187c:	011b      	lsls	r3, r3, #4
 800187e:	1a9b      	subs	r3, r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	440b      	add	r3, r1
 8001884:	332a      	adds	r3, #42	@ 0x2a
 8001886:	2202      	movs	r2, #2
 8001888:	701a      	strb	r2, [r3, #0]
      break;
 800188a:	e00d      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800188c:	78fa      	ldrb	r2, [r7, #3]
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	011b      	lsls	r3, r3, #4
 8001894:	1a9b      	subs	r3, r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	332a      	adds	r3, #42	@ 0x2a
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
      break;
 80018a0:	e002      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80018a2:	bf00      	nop
 80018a4:	e000      	b.n	80018a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80018a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80018a8:	78fa      	ldrb	r2, [r7, #3]
 80018aa:	6879      	ldr	r1, [r7, #4]
 80018ac:	4613      	mov	r3, r2
 80018ae:	011b      	lsls	r3, r3, #4
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	332c      	adds	r3, #44	@ 0x2c
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	8b39      	ldrh	r1, [r7, #24]
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	4613      	mov	r3, r2
 80018c4:	011b      	lsls	r3, r3, #4
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4403      	add	r3, r0
 80018cc:	3334      	adds	r3, #52	@ 0x34
 80018ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80018d0:	78fa      	ldrb	r2, [r7, #3]
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	4613      	mov	r3, r2
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a9b      	subs	r3, r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	334c      	adds	r3, #76	@ 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80018e4:	78fa      	ldrb	r2, [r7, #3]
 80018e6:	6879      	ldr	r1, [r7, #4]
 80018e8:	4613      	mov	r3, r2
 80018ea:	011b      	lsls	r3, r3, #4
 80018ec:	1a9b      	subs	r3, r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	440b      	add	r3, r1
 80018f2:	3338      	adds	r3, #56	@ 0x38
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80018f8:	78fa      	ldrb	r2, [r7, #3]
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	4613      	mov	r3, r2
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	3315      	adds	r3, #21
 8001908:	78fa      	ldrb	r2, [r7, #3]
 800190a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	334d      	adds	r3, #77	@ 0x4d
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	4613      	mov	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	3310      	adds	r3, #16
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	4413      	add	r3, r2
 8001934:	1d19      	adds	r1, r3, #4
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	799b      	ldrb	r3, [r3, #6]
 800193a:	461a      	mov	r2, r3
 800193c:	f003 fdf6 	bl	800552c <USB_HC_StartXfer>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop

0800194c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f003 fb14 	bl	8004f90 <USB_GetMode>
 8001968:	4603      	mov	r3, r0
 800196a:	2b01      	cmp	r3, #1
 800196c:	f040 80fb 	bne.w	8001b66 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fad7 	bl	8004f28 <USB_ReadInterrupts>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f000 80f1 	beq.w	8001b64 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 face 	bl	8004f28 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001992:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001996:	d104      	bne.n	80019a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80019a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 fabe 	bl	8004f28 <USB_ReadInterrupts>
 80019ac:	4603      	mov	r3, r0
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80019b6:	d104      	bne.n	80019c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80019c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f003 faae 	bl	8004f28 <USB_ReadInterrupts>
 80019cc:	4603      	mov	r3, r0
 80019ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80019d6:	d104      	bne.n	80019e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80019e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f003 fa9e 	bl	8004f28 <USB_ReadInterrupts>
 80019ec:	4603      	mov	r3, r0
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d103      	bne.n	80019fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2202      	movs	r2, #2
 80019fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4618      	mov	r0, r3
 8001a04:	f003 fa90 	bl	8004f28 <USB_ReadInterrupts>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a12:	d120      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a1c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d113      	bne.n	8001a56 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001a2e:	2110      	movs	r1, #16
 8001a30:	6938      	ldr	r0, [r7, #16]
 8001a32:	f003 f983 	bl	8004d3c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001a36:	6938      	ldr	r0, [r7, #16]
 8001a38:	f003 f9b2 	bl	8004da0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	7a5b      	ldrb	r3, [r3, #9]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d105      	bne.n	8001a50 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2101      	movs	r1, #1
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 fba4 	bl	8005198 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f005 fb33 	bl	80070bc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fa64 	bl	8004f28 <USB_ReadInterrupts>
 8001a60:	4603      	mov	r3, r0
 8001a62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a6a:	d102      	bne.n	8001a72 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f001 fd17 	bl	80034a0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f003 fa56 	bl	8004f28 <USB_ReadInterrupts>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f003 0308 	and.w	r3, r3, #8
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d106      	bne.n	8001a94 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f005 fafc 	bl	8007084 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2208      	movs	r2, #8
 8001a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f003 fa45 	bl	8004f28 <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001aa8:	d139      	bne.n	8001b1e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 ffb6 	bl	8005a20 <USB_HC_ReadInterrupt>
 8001ab4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e025      	b.n	8001b08 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d018      	beq.n	8001b02 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	015a      	lsls	r2, r3, #5
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ae6:	d106      	bne.n	8001af6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8e9 	bl	8001cc6 <HCD_HC_IN_IRQHandler>
 8001af4:	e005      	b.n	8001b02 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 ff4b 	bl	8002998 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	795b      	ldrb	r3, [r3, #5]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d3d3      	bcc.n	8001abc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fa00 	bl	8004f28 <USB_ReadInterrupts>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	f003 0310 	and.w	r3, r3, #16
 8001b2e:	2b10      	cmp	r3, #16
 8001b30:	d101      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x1ea>
 8001b32:	2301      	movs	r3, #1
 8001b34:	e000      	b.n	8001b38 <HAL_HCD_IRQHandler+0x1ec>
 8001b36:	2300      	movs	r3, #0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d014      	beq.n	8001b66 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	699a      	ldr	r2, [r3, #24]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0210 	bic.w	r2, r2, #16
 8001b4a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f001 fbc8 	bl	80032e2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f042 0210 	orr.w	r2, r2, #16
 8001b60:	619a      	str	r2, [r3, #24]
 8001b62:	e000      	b.n	8001b66 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001b64:	bf00      	nop
    }
  }
}
 8001b66:	3718      	adds	r7, #24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d101      	bne.n	8001b82 <HAL_HCD_Start+0x16>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e013      	b.n	8001baa <HAL_HCD_Start+0x3e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2101      	movs	r1, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fb3e 	bl	8005212 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f860 	bl	8004c60 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d101      	bne.n	8001bc8 <HAL_HCD_Stop+0x16>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e00d      	b.n	8001be4 <HAL_HCD_Stop+0x32>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 f891 	bl	8005cfc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001bf8:	78fa      	ldrb	r2, [r7, #3]
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	011b      	lsls	r3, r3, #4
 8001c00:	1a9b      	subs	r3, r3, r2
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	440b      	add	r3, r1
 8001c06:	334c      	adds	r3, #76	@ 0x4c
 8001c08:	781b      	ldrb	r3, [r3, #0]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	3338      	adds	r3, #56	@ 0x38
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 fb30 	bl	80052b2 <USB_GetCurrentFrame>
 8001c52:	4603      	mov	r3, r0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001c68:	78fa      	ldrb	r2, [r7, #3]
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	011b      	lsls	r3, r3, #4
 8001c70:	1a9b      	subs	r3, r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	331a      	adds	r3, #26
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001c7c:	78fa      	ldrb	r2, [r7, #3]
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	1a9b      	subs	r3, r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	440b      	add	r3, r1
 8001c8a:	331b      	adds	r3, #27
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3325      	adds	r3, #37	@ 0x25
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001ca4:	78fa      	ldrb	r2, [r7, #3]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	3324      	adds	r3, #36	@ 0x24
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	460b      	mov	r3, r1
 8001cd0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	78fa      	ldrb	r2, [r7, #3]
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 f932 	bl	8004f4e <USB_ReadChInterrupts>
 8001cea:	4603      	mov	r3, r0
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d11a      	bne.n	8001d2a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	015a      	lsls	r2, r3, #5
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d00:	461a      	mov	r2, r3
 8001d02:	2304      	movs	r3, #4
 8001d04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d06:	78fa      	ldrb	r2, [r7, #3]
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	011b      	lsls	r3, r3, #4
 8001d0e:	1a9b      	subs	r3, r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	440b      	add	r3, r1
 8001d14:	334d      	adds	r3, #77	@ 0x4d
 8001d16:	2207      	movs	r2, #7
 8001d18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	78fa      	ldrb	r2, [r7, #3]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 fe8d 	bl	8005a42 <USB_HC_Halt>
 8001d28:	e09e      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	78fa      	ldrb	r2, [r7, #3]
 8001d30:	4611      	mov	r1, r2
 8001d32:	4618      	mov	r0, r3
 8001d34:	f003 f90b 	bl	8004f4e <USB_ReadChInterrupts>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d42:	d11b      	bne.n	8001d7c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	015a      	lsls	r2, r3, #5
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d50:	461a      	mov	r2, r3
 8001d52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001d58:	78fa      	ldrb	r2, [r7, #3]
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	1a9b      	subs	r3, r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	440b      	add	r3, r1
 8001d66:	334d      	adds	r3, #77	@ 0x4d
 8001d68:	2208      	movs	r2, #8
 8001d6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fe64 	bl	8005a42 <USB_HC_Halt>
 8001d7a:	e075      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f003 f8e2 	bl	8004f4e <USB_ReadChInterrupts>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d11a      	bne.n	8001dca <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da0:	461a      	mov	r2, r3
 8001da2:	2308      	movs	r3, #8
 8001da4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001da6:	78fa      	ldrb	r2, [r7, #3]
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	011b      	lsls	r3, r3, #4
 8001dae:	1a9b      	subs	r3, r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	440b      	add	r3, r1
 8001db4:	334d      	adds	r3, #77	@ 0x4d
 8001db6:	2206      	movs	r2, #6
 8001db8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	78fa      	ldrb	r2, [r7, #3]
 8001dc0:	4611      	mov	r1, r2
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f003 fe3d 	bl	8005a42 <USB_HC_Halt>
 8001dc8:	e04e      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	78fa      	ldrb	r2, [r7, #3]
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f003 f8bb 	bl	8004f4e <USB_ReadChInterrupts>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de2:	d11b      	bne.n	8001e1c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001de4:	78fb      	ldrb	r3, [r7, #3]
 8001de6:	015a      	lsls	r2, r3, #5
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001df0:	461a      	mov	r2, r3
 8001df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001df6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001df8:	78fa      	ldrb	r2, [r7, #3]
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	011b      	lsls	r3, r3, #4
 8001e00:	1a9b      	subs	r3, r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	334d      	adds	r3, #77	@ 0x4d
 8001e08:	2209      	movs	r2, #9
 8001e0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	4611      	mov	r1, r2
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fe14 	bl	8005a42 <USB_HC_Halt>
 8001e1a:	e025      	b.n	8001e68 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f003 f892 	bl	8004f4e <USB_ReadChInterrupts>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e30:	2b80      	cmp	r3, #128	@ 0x80
 8001e32:	d119      	bne.n	8001e68 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	015a      	lsls	r2, r3, #5
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e40:	461a      	mov	r2, r3
 8001e42:	2380      	movs	r3, #128	@ 0x80
 8001e44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e46:	78fa      	ldrb	r2, [r7, #3]
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	011b      	lsls	r3, r3, #4
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	334d      	adds	r3, #77	@ 0x4d
 8001e56:	2207      	movs	r2, #7
 8001e58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	78fa      	ldrb	r2, [r7, #3]
 8001e60:	4611      	mov	r1, r2
 8001e62:	4618      	mov	r0, r3
 8001e64:	f003 fded 	bl	8005a42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	78fa      	ldrb	r2, [r7, #3]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f003 f86c 	bl	8004f4e <USB_ReadChInterrupts>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e80:	d112      	bne.n	8001ea8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	78fa      	ldrb	r2, [r7, #3]
 8001e88:	4611      	mov	r1, r2
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fdd9 	bl	8005a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ea2:	6093      	str	r3, [r2, #8]
 8001ea4:	f000 bd75 	b.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	4611      	mov	r1, r2
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f003 f84c 	bl	8004f4e <USB_ReadChInterrupts>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	f040 8128 	bne.w	8002112 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2320      	movs	r3, #32
 8001ed2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	331b      	adds	r3, #27
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d119      	bne.n	8001f1e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	331b      	adds	r3, #27
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001efe:	78fb      	ldrb	r3, [r7, #3]
 8001f00:	015a      	lsls	r2, r3, #5
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	0151      	lsls	r1, r2, #5
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	440a      	add	r2, r1
 8001f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	799b      	ldrb	r3, [r3, #6]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d01b      	beq.n	8001f5e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	011b      	lsls	r3, r3, #4
 8001f2e:	1a9b      	subs	r3, r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	3330      	adds	r3, #48	@ 0x30
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	1ac9      	subs	r1, r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	1a9b      	subs	r3, r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4403      	add	r3, r0
 8001f5a:	3338      	adds	r3, #56	@ 0x38
 8001f5c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001f5e:	78fa      	ldrb	r2, [r7, #3]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	334d      	adds	r3, #77	@ 0x4d
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3344      	adds	r3, #68	@ 0x44
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001f86:	78fb      	ldrb	r3, [r7, #3]
 8001f88:	015a      	lsls	r2, r3, #5
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f92:	461a      	mov	r2, r3
 8001f94:	2301      	movs	r3, #1
 8001f96:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3326      	adds	r3, #38	@ 0x26
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3326      	adds	r3, #38	@ 0x26
 8001fbe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d110      	bne.n	8001fe6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fd38 	bl	8005a42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	6093      	str	r3, [r2, #8]
 8001fe4:	e03d      	b.n	8002062 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3326      	adds	r3, #38	@ 0x26
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b03      	cmp	r3, #3
 8001ffa:	d00a      	beq.n	8002012 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001ffc:	78fa      	ldrb	r2, [r7, #3]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	1a9b      	subs	r3, r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	3326      	adds	r3, #38	@ 0x26
 800200c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800200e:	2b01      	cmp	r3, #1
 8002010:	d127      	bne.n	8002062 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4413      	add	r3, r2
 800201a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	78fa      	ldrb	r2, [r7, #3]
 8002022:	0151      	lsls	r1, r2, #5
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	440a      	add	r2, r1
 8002028:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800202c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002030:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	334c      	adds	r3, #76	@ 0x4c
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002046:	78fa      	ldrb	r2, [r7, #3]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	1a9b      	subs	r3, r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	334c      	adds	r3, #76	@ 0x4c
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f005 f83b 	bl	80070d8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	799b      	ldrb	r3, [r3, #6]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d13b      	bne.n	80020e2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800206a:	78fa      	ldrb	r2, [r7, #3]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	3338      	adds	r3, #56	@ 0x38
 800207a:	6819      	ldr	r1, [r3, #0]
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4403      	add	r3, r0
 800208a:	3328      	adds	r3, #40	@ 0x28
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	440b      	add	r3, r1
 8002090:	1e59      	subs	r1, r3, #1
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4403      	add	r3, r0
 80020a0:	3328      	adds	r3, #40	@ 0x28
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8470 	beq.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80020b2:	78fa      	ldrb	r2, [r7, #3]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	1a9b      	subs	r3, r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	333c      	adds	r3, #60	@ 0x3c
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	f083 0301 	eor.w	r3, r3, #1
 80020ca:	b2d8      	uxtb	r0, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	011b      	lsls	r3, r3, #4
 80020d2:	1a9b      	subs	r3, r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	333c      	adds	r3, #60	@ 0x3c
 80020da:	4602      	mov	r2, r0
 80020dc:	701a      	strb	r2, [r3, #0]
 80020de:	f000 bc58 	b.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	333c      	adds	r3, #60	@ 0x3c
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2d8      	uxtb	r0, r3
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	1a9b      	subs	r3, r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	440b      	add	r3, r1
 8002108:	333c      	adds	r3, #60	@ 0x3c
 800210a:	4602      	mov	r2, r0
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	f000 bc40 	b.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	78fa      	ldrb	r2, [r7, #3]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f002 ff17 	bl	8004f4e <USB_ReadChInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	2b20      	cmp	r3, #32
 8002128:	d131      	bne.n	800218e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800212a:	78fb      	ldrb	r3, [r7, #3]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002136:	461a      	mov	r2, r3
 8002138:	2320      	movs	r3, #32
 800213a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	331a      	adds	r3, #26
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b01      	cmp	r3, #1
 8002150:	f040 841f 	bne.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	331b      	adds	r3, #27
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	334d      	adds	r3, #77	@ 0x4d
 8002178:	2203      	movs	r2, #3
 800217a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f003 fc5c 	bl	8005a42 <USB_HC_Halt>
 800218a:	f000 bc02 	b.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	78fa      	ldrb	r2, [r7, #3]
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fed9 	bl	8004f4e <USB_ReadChInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	f040 8305 	bne.w	80027b2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	015a      	lsls	r2, r3, #5
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4413      	add	r3, r2
 80021b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021b4:	461a      	mov	r2, r3
 80021b6:	2302      	movs	r3, #2
 80021b8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	334d      	adds	r3, #77	@ 0x4d
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d114      	bne.n	80021fa <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	334d      	adds	r3, #77	@ 0x4d
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	334c      	adds	r3, #76	@ 0x4c
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
 80021f8:	e2cc      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	1a9b      	subs	r3, r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	440b      	add	r3, r1
 8002208:	334d      	adds	r3, #77	@ 0x4d
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b06      	cmp	r3, #6
 800220e:	d114      	bne.n	800223a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002210:	78fa      	ldrb	r2, [r7, #3]
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	1a9b      	subs	r3, r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	440b      	add	r3, r1
 800221e:	334d      	adds	r3, #77	@ 0x4d
 8002220:	2202      	movs	r2, #2
 8002222:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	334c      	adds	r3, #76	@ 0x4c
 8002234:	2205      	movs	r2, #5
 8002236:	701a      	strb	r2, [r3, #0]
 8002238:	e2ac      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	334d      	adds	r3, #77	@ 0x4d
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b07      	cmp	r3, #7
 800224e:	d00b      	beq.n	8002268 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	334d      	adds	r3, #77	@ 0x4d
 8002260:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002262:	2b09      	cmp	r3, #9
 8002264:	f040 80a6 	bne.w	80023b4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002268:	78fa      	ldrb	r2, [r7, #3]
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	4613      	mov	r3, r2
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	1a9b      	subs	r3, r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	440b      	add	r3, r1
 8002276:	334d      	adds	r3, #77	@ 0x4d
 8002278:	2202      	movs	r2, #2
 800227a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	3344      	adds	r3, #68	@ 0x44
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	1c59      	adds	r1, r3, #1
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4403      	add	r3, r0
 800229c:	3344      	adds	r3, #68	@ 0x44
 800229e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	3344      	adds	r3, #68	@ 0x44
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d943      	bls.n	800233e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3344      	adds	r3, #68	@ 0x44
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	331a      	adds	r3, #26
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d123      	bne.n	8002328 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	331b      	adds	r3, #27
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	331c      	adds	r3, #28
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002308:	78fb      	ldrb	r3, [r7, #3]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	0151      	lsls	r1, r2, #5
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	440a      	add	r2, r1
 800231e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002326:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	334c      	adds	r3, #76	@ 0x4c
 8002338:	2204      	movs	r2, #4
 800233a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800233c:	e229      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	334c      	adds	r3, #76	@ 0x4c
 800234e:	2202      	movs	r2, #2
 8002350:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002352:	78fa      	ldrb	r2, [r7, #3]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	011b      	lsls	r3, r3, #4
 800235a:	1a9b      	subs	r3, r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	3326      	adds	r3, #38	@ 0x26
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00b      	beq.n	8002380 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	3326      	adds	r3, #38	@ 0x26
 8002378:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800237a:	2b02      	cmp	r3, #2
 800237c:	f040 8209 	bne.w	8002792 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	015a      	lsls	r2, r3, #5
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4413      	add	r3, r2
 8002388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002396:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800239e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	015a      	lsls	r2, r3, #5
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ac:	461a      	mov	r2, r3
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023b2:	e1ee      	b.n	8002792 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334d      	adds	r3, #77	@ 0x4d
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b05      	cmp	r3, #5
 80023c8:	f040 80c8 	bne.w	800255c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023cc:	78fa      	ldrb	r2, [r7, #3]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	334d      	adds	r3, #77	@ 0x4d
 80023dc:	2202      	movs	r2, #2
 80023de:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80023e0:	78fa      	ldrb	r2, [r7, #3]
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	4613      	mov	r3, r2
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	1a9b      	subs	r3, r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	440b      	add	r3, r1
 80023ee:	331b      	adds	r3, #27
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f040 81ce 	bne.w	8002794 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80023f8:	78fa      	ldrb	r2, [r7, #3]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	3326      	adds	r3, #38	@ 0x26
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d16b      	bne.n	80024e6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800240e:	78fa      	ldrb	r2, [r7, #3]
 8002410:	6879      	ldr	r1, [r7, #4]
 8002412:	4613      	mov	r3, r2
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	440b      	add	r3, r1
 800241c:	3348      	adds	r3, #72	@ 0x48
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4403      	add	r3, r0
 800242e:	3348      	adds	r3, #72	@ 0x48
 8002430:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3348      	adds	r3, #72	@ 0x48
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b02      	cmp	r3, #2
 8002446:	d943      	bls.n	80024d0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3348      	adds	r3, #72	@ 0x48
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800245c:	78fa      	ldrb	r2, [r7, #3]
 800245e:	6879      	ldr	r1, [r7, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	1a9b      	subs	r3, r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	331b      	adds	r3, #27
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3344      	adds	r3, #68	@ 0x44
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d809      	bhi.n	800249a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	331c      	adds	r3, #28
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	0151      	lsls	r1, r2, #5
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	440a      	add	r2, r1
 80024b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024b8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80024ba:	78fa      	ldrb	r2, [r7, #3]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	1a9b      	subs	r3, r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	440b      	add	r3, r1
 80024c8:	334c      	adds	r3, #76	@ 0x4c
 80024ca:	2204      	movs	r2, #4
 80024cc:	701a      	strb	r2, [r3, #0]
 80024ce:	e014      	b.n	80024fa <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	334c      	adds	r3, #76	@ 0x4c
 80024e0:	2202      	movs	r2, #2
 80024e2:	701a      	strb	r2, [r3, #0]
 80024e4:	e009      	b.n	80024fa <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	334c      	adds	r3, #76	@ 0x4c
 80024f6:	2202      	movs	r2, #2
 80024f8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3326      	adds	r3, #38	@ 0x26
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00b      	beq.n	8002528 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3326      	adds	r3, #38	@ 0x26
 8002520:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002522:	2b02      	cmp	r3, #2
 8002524:	f040 8136 	bne.w	8002794 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002528:	78fb      	ldrb	r3, [r7, #3]
 800252a:	015a      	lsls	r2, r3, #5
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	4413      	add	r3, r2
 8002530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800253e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002546:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4413      	add	r3, r2
 8002550:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002554:	461a      	mov	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e11b      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	334d      	adds	r3, #77	@ 0x4d
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b03      	cmp	r3, #3
 8002570:	f040 8081 	bne.w	8002676 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	334d      	adds	r3, #77	@ 0x4d
 8002584:	2202      	movs	r2, #2
 8002586:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	331b      	adds	r3, #27
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f040 80fa 	bne.w	8002794 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334c      	adds	r3, #76	@ 0x4c
 80025b0:	2202      	movs	r2, #2
 80025b2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80025b4:	78fb      	ldrb	r3, [r7, #3]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	0151      	lsls	r1, r2, #5
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	440a      	add	r2, r1
 80025ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80025d4:	78fb      	ldrb	r3, [r7, #3]
 80025d6:	015a      	lsls	r2, r3, #5
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4413      	add	r3, r2
 80025dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	78fa      	ldrb	r2, [r7, #3]
 80025e4:	0151      	lsls	r1, r2, #5
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	440a      	add	r2, r1
 80025ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025f2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	015a      	lsls	r2, r3, #5
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4413      	add	r3, r2
 80025fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	78fa      	ldrb	r2, [r7, #3]
 8002604:	0151      	lsls	r1, r2, #5
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	440a      	add	r2, r1
 800260a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800260e:	f023 0320 	bic.w	r3, r3, #32
 8002612:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002614:	78fa      	ldrb	r2, [r7, #3]
 8002616:	6879      	ldr	r1, [r7, #4]
 8002618:	4613      	mov	r3, r2
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	1a9b      	subs	r3, r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3326      	adds	r3, #38	@ 0x26
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800262a:	78fa      	ldrb	r2, [r7, #3]
 800262c:	6879      	ldr	r1, [r7, #4]
 800262e:	4613      	mov	r3, r2
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	440b      	add	r3, r1
 8002638:	3326      	adds	r3, #38	@ 0x26
 800263a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800263c:	2b02      	cmp	r3, #2
 800263e:	f040 80a9 	bne.w	8002794 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4413      	add	r3, r2
 800264a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002658:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002660:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800266e:	461a      	mov	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e08e      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	334d      	adds	r3, #77	@ 0x4d
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	2b04      	cmp	r3, #4
 800268a:	d143      	bne.n	8002714 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	334d      	adds	r3, #77	@ 0x4d
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	334c      	adds	r3, #76	@ 0x4c
 80026b0:	2202      	movs	r2, #2
 80026b2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3326      	adds	r3, #38	@ 0x26
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	3326      	adds	r3, #38	@ 0x26
 80026da:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d159      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80026e0:	78fb      	ldrb	r3, [r7, #3]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026f6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026fe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002700:	78fb      	ldrb	r3, [r7, #3]
 8002702:	015a      	lsls	r2, r3, #5
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	4413      	add	r3, r2
 8002708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	e03f      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334d      	adds	r3, #77	@ 0x4d
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b08      	cmp	r3, #8
 8002728:	d126      	bne.n	8002778 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334d      	adds	r3, #77	@ 0x4d
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3344      	adds	r3, #68	@ 0x44
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	1c59      	adds	r1, r3, #1
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	1a9b      	subs	r3, r3, r2
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	4403      	add	r3, r0
 800275e:	3344      	adds	r3, #68	@ 0x44
 8002760:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002762:	78fa      	ldrb	r2, [r7, #3]
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	440b      	add	r3, r1
 8002770:	334c      	adds	r3, #76	@ 0x4c
 8002772:	2204      	movs	r2, #4
 8002774:	701a      	strb	r2, [r3, #0]
 8002776:	e00d      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	334d      	adds	r3, #77	@ 0x4d
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b02      	cmp	r3, #2
 800278c:	f000 8100 	beq.w	8002990 <HCD_HC_IN_IRQHandler+0xcca>
 8002790:	e000      	b.n	8002794 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002792:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002794:	78fa      	ldrb	r2, [r7, #3]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	011b      	lsls	r3, r3, #4
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	334c      	adds	r3, #76	@ 0x4c
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	78fb      	ldrb	r3, [r7, #3]
 80027a8:	4619      	mov	r1, r3
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f004 fc94 	bl	80070d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80027b0:	e0ef      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 fbc7 	bl	8004f4e <USB_ReadChInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027c6:	2b40      	cmp	r3, #64	@ 0x40
 80027c8:	d12f      	bne.n	800282a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80027ca:	78fb      	ldrb	r3, [r7, #3]
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d6:	461a      	mov	r2, r3
 80027d8:	2340      	movs	r3, #64	@ 0x40
 80027da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334d      	adds	r3, #77	@ 0x4d
 80027ec:	2205      	movs	r2, #5
 80027ee:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	331a      	adds	r3, #26
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	1a9b      	subs	r3, r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	3344      	adds	r3, #68	@ 0x44
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	78fa      	ldrb	r2, [r7, #3]
 8002820:	4611      	mov	r1, r2
 8002822:	4618      	mov	r0, r3
 8002824:	f003 f90d 	bl	8005a42 <USB_HC_Halt>
 8002828:	e0b3      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f002 fb8b 	bl	8004f4e <USB_ReadChInterrupts>
 8002838:	4603      	mov	r3, r0
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b10      	cmp	r3, #16
 8002840:	f040 80a7 	bne.w	8002992 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3326      	adds	r3, #38	@ 0x26
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b03      	cmp	r3, #3
 8002858:	d11b      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	3344      	adds	r3, #68	@ 0x44
 800286a:	2200      	movs	r2, #0
 800286c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	334d      	adds	r3, #77	@ 0x4d
 800287e:	2204      	movs	r2, #4
 8002880:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f003 f8d9 	bl	8005a42 <USB_HC_Halt>
 8002890:	e03f      	b.n	8002912 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002892:	78fa      	ldrb	r2, [r7, #3]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	3326      	adds	r3, #38	@ 0x26
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00a      	beq.n	80028be <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3326      	adds	r3, #38	@ 0x26
 80028b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d129      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3344      	adds	r3, #68	@ 0x44
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	799b      	ldrb	r3, [r3, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HCD_HC_IN_IRQHandler+0xc2a>
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	331b      	adds	r3, #27
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d110      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	334d      	adds	r3, #77	@ 0x4d
 8002900:	2204      	movs	r2, #4
 8002902:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	4611      	mov	r1, r2
 800290c:	4618      	mov	r0, r3
 800290e:	f003 f898 	bl	8005a42 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002912:	78fa      	ldrb	r2, [r7, #3]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	4613      	mov	r3, r2
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	1a9b      	subs	r3, r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	440b      	add	r3, r1
 8002920:	331b      	adds	r3, #27
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d129      	bne.n	800297c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	4613      	mov	r3, r2
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	1a9b      	subs	r3, r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	331b      	adds	r3, #27
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	0151      	lsls	r1, r2, #5
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	440a      	add	r2, r1
 8002952:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800295c:	78fb      	ldrb	r3, [r7, #3]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	0151      	lsls	r1, r2, #5
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	440a      	add	r2, r1
 8002972:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002976:	f043 0320 	orr.w	r3, r3, #32
 800297a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	015a      	lsls	r2, r3, #5
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	4413      	add	r3, r2
 8002984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002988:	461a      	mov	r2, r3
 800298a:	2310      	movs	r3, #16
 800298c:	6093      	str	r3, [r2, #8]
 800298e:	e000      	b.n	8002992 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002990:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 fac9 	bl	8004f4e <USB_ReadChInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d11b      	bne.n	80029fe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d2:	461a      	mov	r2, r3
 80029d4:	2304      	movs	r3, #4
 80029d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	334d      	adds	r3, #77	@ 0x4d
 80029e8:	2207      	movs	r2, #7
 80029ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	4611      	mov	r1, r2
 80029f4:	4618      	mov	r0, r3
 80029f6:	f003 f824 	bl	8005a42 <USB_HC_Halt>
 80029fa:	f000 bc6f 	b.w	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	4611      	mov	r1, r2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f002 faa1 	bl	8004f4e <USB_ReadChInterrupts>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 8082 	bne.w	8002b1c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a24:	461a      	mov	r2, r3
 8002a26:	2320      	movs	r3, #32
 8002a28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	011b      	lsls	r3, r3, #4
 8002a32:	1a9b      	subs	r3, r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3319      	adds	r3, #25
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d124      	bne.n	8002a8a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	3319      	adds	r3, #25
 8002a50:	2200      	movs	r2, #0
 8002a52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334c      	adds	r3, #76	@ 0x4c
 8002a64:	2202      	movs	r2, #2
 8002a66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	334d      	adds	r3, #77	@ 0x4d
 8002a78:	2203      	movs	r2, #3
 8002a7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f002 ffdc 	bl	8005a42 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	331a      	adds	r3, #26
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	f040 841d 	bne.w	80032dc <HCD_HC_OUT_IRQHandler+0x944>
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	331b      	adds	r3, #27
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f040 8411 	bne.w	80032dc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002aba:	78fa      	ldrb	r2, [r7, #3]
 8002abc:	6879      	ldr	r1, [r7, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	011b      	lsls	r3, r3, #4
 8002ac2:	1a9b      	subs	r3, r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	3326      	adds	r3, #38	@ 0x26
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d009      	beq.n	8002ae4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	331b      	adds	r3, #27
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	@ 0x4d
 8002af4:	2203      	movs	r2, #3
 8002af6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 ff9e 	bl	8005a42 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3344      	adds	r3, #68	@ 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e3df      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 fa12 	bl	8004f4e <USB_ReadChInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b34:	d111      	bne.n	8002b5a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	4611      	mov	r1, r2
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 ff75 	bl	8005a42 <USB_HC_Halt>
 8002b58:	e3c0      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f002 f9f3 	bl	8004f4e <USB_ReadChInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d168      	bne.n	8002c44 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	3344      	adds	r3, #68	@ 0x44
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f002 f9dd 	bl	8004f4e <USB_ReadChInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9a:	2b40      	cmp	r3, #64	@ 0x40
 8002b9c:	d112      	bne.n	8002bc4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3319      	adds	r3, #25
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	015a      	lsls	r2, r3, #5
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	4413      	add	r3, r2
 8002bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	2340      	movs	r3, #64	@ 0x40
 8002bc2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	331b      	adds	r3, #27
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d019      	beq.n	8002c0e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bda:	78fa      	ldrb	r2, [r7, #3]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	1a9b      	subs	r3, r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	331b      	adds	r3, #27
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	015a      	lsls	r2, r3, #5
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	0151      	lsls	r1, r2, #5
 8002c00:	693a      	ldr	r2, [r7, #16]
 8002c02:	440a      	add	r2, r1
 8002c04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c0c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c0e:	78fb      	ldrb	r3, [r7, #3]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002c20:	78fa      	ldrb	r2, [r7, #3]
 8002c22:	6879      	ldr	r1, [r7, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	1a9b      	subs	r3, r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	334d      	adds	r3, #77	@ 0x4d
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	4611      	mov	r1, r2
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f002 ff00 	bl	8005a42 <USB_HC_Halt>
 8002c42:	e34b      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 f97e 	bl	8004f4e <USB_ReadChInterrupts>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c58:	2b40      	cmp	r3, #64	@ 0x40
 8002c5a:	d139      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	334d      	adds	r3, #77	@ 0x4d
 8002c6c:	2205      	movs	r2, #5
 8002c6e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331a      	adds	r3, #26
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d109      	bne.n	8002c9a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c86:	78fa      	ldrb	r2, [r7, #3]
 8002c88:	6879      	ldr	r1, [r7, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	1a9b      	subs	r3, r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	3319      	adds	r3, #25
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	3344      	adds	r3, #68	@ 0x44
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f002 fec3 	bl	8005a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2340      	movs	r3, #64	@ 0x40
 8002ccc:	6093      	str	r3, [r2, #8]
 8002cce:	e305      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f002 f938 	bl	8004f4e <USB_ReadChInterrupts>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d11a      	bne.n	8002d1e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	015a      	lsls	r2, r3, #5
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	4413      	add	r3, r2
 8002cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	2308      	movs	r3, #8
 8002cf8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334d      	adds	r3, #77	@ 0x4d
 8002d0a:	2206      	movs	r2, #6
 8002d0c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f002 fe93 	bl	8005a42 <USB_HC_Halt>
 8002d1c:	e2de      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 f911 	bl	8004f4e <USB_ReadChInterrupts>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	2b10      	cmp	r3, #16
 8002d34:	d144      	bne.n	8002dc0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3344      	adds	r3, #68	@ 0x44
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	334d      	adds	r3, #77	@ 0x4d
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	3319      	adds	r3, #25
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d114      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3318      	adds	r3, #24
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	3319      	adds	r3, #25
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fe4b 	bl	8005a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002dac:	78fb      	ldrb	r3, [r7, #3]
 8002dae:	015a      	lsls	r2, r3, #5
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4413      	add	r3, r2
 8002db4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db8:	461a      	mov	r2, r3
 8002dba:	2310      	movs	r3, #16
 8002dbc:	6093      	str	r3, [r2, #8]
 8002dbe:	e28d      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f8c0 	bl	8004f4e <USB_ReadChInterrupts>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd4:	2b80      	cmp	r3, #128	@ 0x80
 8002dd6:	d169      	bne.n	8002eac <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	799b      	ldrb	r3, [r3, #6]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d111      	bne.n	8002e04 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334d      	adds	r3, #77	@ 0x4d
 8002df0:	2207      	movs	r2, #7
 8002df2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 fe20 	bl	8005a42 <USB_HC_Halt>
 8002e02:	e049      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3344      	adds	r3, #68	@ 0x44
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	1c59      	adds	r1, r3, #1
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4403      	add	r3, r0
 8002e24:	3344      	adds	r3, #68	@ 0x44
 8002e26:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3344      	adds	r3, #68	@ 0x44
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d922      	bls.n	8002e84 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002e3e:	78fa      	ldrb	r2, [r7, #3]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	1a9b      	subs	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3344      	adds	r3, #68	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	334c      	adds	r3, #76	@ 0x4c
 8002e62:	2204      	movs	r2, #4
 8002e64:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	334c      	adds	r3, #76	@ 0x4c
 8002e76:	781a      	ldrb	r2, [r3, #0]
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f004 f92b 	bl	80070d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e82:	e009      	b.n	8002e98 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	334c      	adds	r3, #76	@ 0x4c
 8002e94:	2202      	movs	r2, #2
 8002e96:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2380      	movs	r3, #128	@ 0x80
 8002ea8:	6093      	str	r3, [r2, #8]
 8002eaa:	e217      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 f84a 	bl	8004f4e <USB_ReadChInterrupts>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec4:	d11b      	bne.n	8002efe <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	334d      	adds	r3, #77	@ 0x4d
 8002ed6:	2209      	movs	r2, #9
 8002ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fdad 	bl	8005a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002efa:	6093      	str	r3, [r2, #8]
 8002efc:	e1ee      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 f821 	bl	8004f4e <USB_ReadChInterrupts>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	f040 81df 	bne.w	80032d6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f24:	461a      	mov	r2, r3
 8002f26:	2302      	movs	r3, #2
 8002f28:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	334d      	adds	r3, #77	@ 0x4d
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	f040 8093 	bne.w	8003068 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f42:	78fa      	ldrb	r2, [r7, #3]
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	334d      	adds	r3, #77	@ 0x4d
 8002f52:	2202      	movs	r2, #2
 8002f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	1a9b      	subs	r3, r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	334c      	adds	r3, #76	@ 0x4c
 8002f66:	2201      	movs	r2, #1
 8002f68:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	3326      	adds	r3, #38	@ 0x26
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d00b      	beq.n	8002f98 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	3326      	adds	r3, #38	@ 0x26
 8002f90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	f040 8190 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	799b      	ldrb	r3, [r3, #6]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d115      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	333d      	adds	r3, #61	@ 0x3d
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	f083 0301 	eor.w	r3, r3, #1
 8002fb8:	b2d8      	uxtb	r0, r3
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	333d      	adds	r3, #61	@ 0x3d
 8002fc8:	4602      	mov	r2, r0
 8002fca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	799b      	ldrb	r3, [r3, #6]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	f040 8171 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	3334      	adds	r3, #52	@ 0x34
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 8165 	beq.w	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	6879      	ldr	r1, [r7, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	3334      	adds	r3, #52	@ 0x34
 8002ffe:	6819      	ldr	r1, [r3, #0]
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4403      	add	r3, r0
 800300e:	3328      	adds	r3, #40	@ 0x28
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	440b      	add	r3, r1
 8003014:	1e59      	subs	r1, r3, #1
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4403      	add	r3, r0
 8003024:	3328      	adds	r3, #40	@ 0x28
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	fbb1 f3f3 	udiv	r3, r1, r3
 800302c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 813f 	beq.w	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	333d      	adds	r3, #61	@ 0x3d
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	f083 0301 	eor.w	r3, r3, #1
 8003052:	b2d8      	uxtb	r0, r3
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	333d      	adds	r3, #61	@ 0x3d
 8003062:	4602      	mov	r2, r0
 8003064:	701a      	strb	r2, [r3, #0]
 8003066:	e127      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	334d      	adds	r3, #77	@ 0x4d
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b03      	cmp	r3, #3
 800307c:	d120      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334d      	adds	r3, #77	@ 0x4d
 800308e:	2202      	movs	r2, #2
 8003090:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	331b      	adds	r3, #27
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 8107 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334c      	adds	r3, #76	@ 0x4c
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
 80030be:	e0fb      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	334d      	adds	r3, #77	@ 0x4d
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d13a      	bne.n	800314c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	334d      	adds	r3, #77	@ 0x4d
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	011b      	lsls	r3, r3, #4
 80030f2:	1a9b      	subs	r3, r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	334c      	adds	r3, #76	@ 0x4c
 80030fa:	2202      	movs	r2, #2
 80030fc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	331b      	adds	r3, #27
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b01      	cmp	r3, #1
 8003112:	f040 80d1 	bne.w	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	6879      	ldr	r1, [r7, #4]
 800311a:	4613      	mov	r3, r2
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	1a9b      	subs	r3, r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	440b      	add	r3, r1
 8003124:	331b      	adds	r3, #27
 8003126:	2200      	movs	r2, #0
 8003128:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	0151      	lsls	r1, r2, #5
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	440a      	add	r2, r1
 8003140:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003148:	6053      	str	r3, [r2, #4]
 800314a:	e0b5      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	334d      	adds	r3, #77	@ 0x4d
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d114      	bne.n	800318c <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	334c      	adds	r3, #76	@ 0x4c
 8003186:	2202      	movs	r2, #2
 8003188:	701a      	strb	r2, [r3, #0]
 800318a:	e095      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334d      	adds	r3, #77	@ 0x4d
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d114      	bne.n	80031cc <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334d      	adds	r3, #77	@ 0x4d
 80031b2:	2202      	movs	r2, #2
 80031b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	334c      	adds	r3, #76	@ 0x4c
 80031c6:	2205      	movs	r2, #5
 80031c8:	701a      	strb	r2, [r3, #0]
 80031ca:	e075      	b.n	80032b8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	334d      	adds	r3, #77	@ 0x4d
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b07      	cmp	r3, #7
 80031e0:	d00a      	beq.n	80031f8 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	334d      	adds	r3, #77	@ 0x4d
 80031f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	d170      	bne.n	80032da <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	334d      	adds	r3, #77	@ 0x4d
 8003208:	2202      	movs	r2, #2
 800320a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3344      	adds	r3, #68	@ 0x44
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	1c59      	adds	r1, r3, #1
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4403      	add	r3, r0
 800322c:	3344      	adds	r3, #68	@ 0x44
 800322e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	3344      	adds	r3, #68	@ 0x44
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d914      	bls.n	8003270 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	3344      	adds	r3, #68	@ 0x44
 8003256:	2200      	movs	r2, #0
 8003258:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	@ 0x4c
 800326a:	2204      	movs	r2, #4
 800326c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800326e:	e022      	b.n	80032b6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	334c      	adds	r3, #76	@ 0x4c
 8003280:	2202      	movs	r2, #2
 8003282:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4413      	add	r3, r2
 800328c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800329a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032b0:	461a      	mov	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032b6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	334c      	adds	r3, #76	@ 0x4c
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f003 ff02 	bl	80070d8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80032d4:	e002      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80032d6:	bf00      	nop
 80032d8:	e000      	b.n	80032dc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80032da:	bf00      	nop
  }
}
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b08a      	sub	sp, #40	@ 0x28
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	0c5b      	lsrs	r3, r3, #17
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003316:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d004      	beq.n	8003328 <HCD_RXQLVL_IRQHandler+0x46>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b05      	cmp	r3, #5
 8003322:	f000 80b6 	beq.w	8003492 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003326:	e0b7      	b.n	8003498 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80b3 	beq.w	8003496 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	332c      	adds	r3, #44	@ 0x2c
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 80a7 	beq.w	8003496 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3338      	adds	r3, #56	@ 0x38
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	18d1      	adds	r1, r2, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4403      	add	r3, r0
 800336c:	3334      	adds	r3, #52	@ 0x34
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4299      	cmp	r1, r3
 8003372:	f200 8083 	bhi.w	800347c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	4613      	mov	r3, r2
 8003380:	011b      	lsls	r3, r3, #4
 8003382:	1a9b      	subs	r3, r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	440b      	add	r3, r1
 8003388:	332c      	adds	r3, #44	@ 0x2c
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	b292      	uxth	r2, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f001 fd71 	bl	8004e78 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	332c      	adds	r3, #44	@ 0x2c
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	18d1      	adds	r1, r2, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4403      	add	r3, r0
 80033ba:	332c      	adds	r3, #44	@ 0x2c
 80033bc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80033be:	6879      	ldr	r1, [r7, #4]
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3338      	adds	r3, #56	@ 0x38
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	18d1      	adds	r1, r2, r3
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	4403      	add	r3, r0
 80033e2:	3338      	adds	r3, #56	@ 0x38
 80033e4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	6a3b      	ldr	r3, [r7, #32]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	0cdb      	lsrs	r3, r3, #19
 80033f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fa:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3328      	adds	r3, #40	@ 0x28
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4293      	cmp	r3, r2
 8003414:	d13f      	bne.n	8003496 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d03c      	beq.n	8003496 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	015a      	lsls	r2, r3, #5
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	4413      	add	r3, r2
 8003424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003432:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800343a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4613      	mov	r3, r2
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	1a9b      	subs	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	333c      	adds	r3, #60	@ 0x3c
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f083 0301 	eor.w	r3, r3, #1
 8003464:	b2d8      	uxtb	r0, r3
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	333c      	adds	r3, #60	@ 0x3c
 8003476:	4602      	mov	r2, r0
 8003478:	701a      	strb	r2, [r3, #0]
      break;
 800347a:	e00c      	b.n	8003496 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	@ 0x4c
 800348c:	2204      	movs	r2, #4
 800348e:	701a      	strb	r2, [r3, #0]
      break;
 8003490:	e001      	b.n	8003496 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003492:	bf00      	nop
 8003494:	e000      	b.n	8003498 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003496:	bf00      	nop
  }
}
 8003498:	bf00      	nop
 800349a:	3728      	adds	r7, #40	@ 0x28
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b086      	sub	sp, #24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80034cc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d10b      	bne.n	80034f0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 0301 	and.w	r3, r3, #1
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d102      	bne.n	80034e8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f003 fddc 	bl	80070a0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f043 0302 	orr.w	r3, r3, #2
 80034ee:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0308 	and.w	r3, r3, #8
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d132      	bne.n	8003560 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f043 0308 	orr.w	r3, r3, #8
 8003500:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b04      	cmp	r3, #4
 800350a:	d126      	bne.n	800355a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7a5b      	ldrb	r3, [r3, #9]
 8003510:	2b02      	cmp	r3, #2
 8003512:	d113      	bne.n	800353c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800351a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800351e:	d106      	bne.n	800352e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2102      	movs	r1, #2
 8003526:	4618      	mov	r0, r3
 8003528:	f001 fe36 	bl	8005198 <USB_InitFSLSPClkSel>
 800352c:	e011      	b.n	8003552 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2101      	movs	r1, #1
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fe2f 	bl	8005198 <USB_InitFSLSPClkSel>
 800353a:	e00a      	b.n	8003552 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	79db      	ldrb	r3, [r3, #7]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d106      	bne.n	8003552 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800354a:	461a      	mov	r2, r3
 800354c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003550:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f003 fdce 	bl	80070f4 <HAL_HCD_PortEnabled_Callback>
 8003558:	e002      	b.n	8003560 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f003 fdd8 	bl	8007110 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b20      	cmp	r3, #32
 8003568:	d103      	bne.n	8003572 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	f043 0320 	orr.w	r3, r3, #32
 8003570:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003578:	461a      	mov	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6013      	str	r3, [r2, #0]
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
	...

08003588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e12b      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fd f9ea 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	@ 0x24
 80035b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0201 	bic.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035ec:	f000 fd80 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 80035f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	4a81      	ldr	r2, [pc, #516]	@ (80037fc <HAL_I2C_Init+0x274>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d807      	bhi.n	800360c <HAL_I2C_Init+0x84>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4a80      	ldr	r2, [pc, #512]	@ (8003800 <HAL_I2C_Init+0x278>)
 8003600:	4293      	cmp	r3, r2
 8003602:	bf94      	ite	ls
 8003604:	2301      	movls	r3, #1
 8003606:	2300      	movhi	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e006      	b.n	800361a <HAL_I2C_Init+0x92>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	4a7d      	ldr	r2, [pc, #500]	@ (8003804 <HAL_I2C_Init+0x27c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	bf94      	ite	ls
 8003614:	2301      	movls	r3, #1
 8003616:	2300      	movhi	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e0e7      	b.n	80037f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a78      	ldr	r2, [pc, #480]	@ (8003808 <HAL_I2C_Init+0x280>)
 8003626:	fba2 2303 	umull	r2, r3, r2, r3
 800362a:	0c9b      	lsrs	r3, r3, #18
 800362c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	4a6a      	ldr	r2, [pc, #424]	@ (80037fc <HAL_I2C_Init+0x274>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d802      	bhi.n	800365c <HAL_I2C_Init+0xd4>
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	3301      	adds	r3, #1
 800365a:	e009      	b.n	8003670 <HAL_I2C_Init+0xe8>
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003662:	fb02 f303 	mul.w	r3, r2, r3
 8003666:	4a69      	ldr	r2, [pc, #420]	@ (800380c <HAL_I2C_Init+0x284>)
 8003668:	fba2 2303 	umull	r2, r3, r2, r3
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	3301      	adds	r3, #1
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003682:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	495c      	ldr	r1, [pc, #368]	@ (80037fc <HAL_I2C_Init+0x274>)
 800368c:	428b      	cmp	r3, r1
 800368e:	d819      	bhi.n	80036c4 <HAL_I2C_Init+0x13c>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	1e59      	subs	r1, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	fbb1 f3f3 	udiv	r3, r1, r3
 800369e:	1c59      	adds	r1, r3, #1
 80036a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036a4:	400b      	ands	r3, r1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_I2C_Init+0x138>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	1e59      	subs	r1, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036be:	e051      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c0:	2304      	movs	r3, #4
 80036c2:	e04f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d111      	bne.n	80036f0 <HAL_I2C_Init+0x168>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	440b      	add	r3, r1
 80036da:	fbb0 f3f3 	udiv	r3, r0, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	e012      	b.n	8003716 <HAL_I2C_Init+0x18e>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e58      	subs	r0, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	0099      	lsls	r1, r3, #2
 8003700:	440b      	add	r3, r1
 8003702:	fbb0 f3f3 	udiv	r3, r0, r3
 8003706:	3301      	adds	r3, #1
 8003708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_I2C_Init+0x196>
 800371a:	2301      	movs	r3, #1
 800371c:	e022      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10e      	bne.n	8003744 <HAL_I2C_Init+0x1bc>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1e58      	subs	r0, r3, #1
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6859      	ldr	r1, [r3, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	440b      	add	r3, r1
 8003734:	fbb0 f3f3 	udiv	r3, r0, r3
 8003738:	3301      	adds	r3, #1
 800373a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003742:	e00f      	b.n	8003764 <HAL_I2C_Init+0x1dc>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	0099      	lsls	r1, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	6809      	ldr	r1, [r1, #0]
 8003768:	4313      	orrs	r3, r2
 800376a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003792:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6911      	ldr	r1, [r2, #16]
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68d2      	ldr	r2, [r2, #12]
 800379e:	4311      	orrs	r1, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695a      	ldr	r2, [r3, #20]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	431a      	orrs	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2220      	movs	r2, #32
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	000186a0 	.word	0x000186a0
 8003800:	001e847f 	.word	0x001e847f
 8003804:	003d08ff 	.word	0x003d08ff
 8003808:	431bde83 	.word	0x431bde83
 800380c:	10624dd3 	.word	0x10624dd3

08003810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e267      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	2b00      	cmp	r3, #0
 800382c:	d075      	beq.n	800391a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800382e:	4b88      	ldr	r3, [pc, #544]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f003 030c 	and.w	r3, r3, #12
 8003836:	2b04      	cmp	r3, #4
 8003838:	d00c      	beq.n	8003854 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800383a:	4b85      	ldr	r3, [pc, #532]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003842:	2b08      	cmp	r3, #8
 8003844:	d112      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003846:	4b82      	ldr	r3, [pc, #520]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800384e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003852:	d10b      	bne.n	800386c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	4b7e      	ldr	r3, [pc, #504]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05b      	beq.n	8003918 <HAL_RCC_OscConfig+0x108>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d157      	bne.n	8003918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e242      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x74>
 8003876:	4b76      	ldr	r3, [pc, #472]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a75      	ldr	r2, [pc, #468]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 800387c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e01d      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800388c:	d10c      	bne.n	80038a8 <HAL_RCC_OscConfig+0x98>
 800388e:	4b70      	ldr	r3, [pc, #448]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6f      	ldr	r2, [pc, #444]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003898:	6013      	str	r3, [r2, #0]
 800389a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a6c      	ldr	r2, [pc, #432]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCC_OscConfig+0xb0>
 80038a8:	4b69      	ldr	r3, [pc, #420]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a68      	ldr	r2, [pc, #416]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80038ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	4b66      	ldr	r3, [pc, #408]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a65      	ldr	r2, [pc, #404]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80038ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7fd fa68 	bl	8000d9c <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038d0:	f7fd fa64 	bl	8000d9c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b64      	cmp	r3, #100	@ 0x64
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e207      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0xc0>
 80038ee:	e014      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fd fa54 	bl	8000d9c <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f8:	f7fd fa50 	bl	8000d9c <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b64      	cmp	r3, #100	@ 0x64
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1f3      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800390a:	4b51      	ldr	r3, [pc, #324]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0xe8>
 8003916:	e000      	b.n	800391a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d063      	beq.n	80039ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003926:	4b4a      	ldr	r3, [pc, #296]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	f003 030c 	and.w	r3, r3, #12
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00b      	beq.n	800394a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003932:	4b47      	ldr	r3, [pc, #284]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800393a:	2b08      	cmp	r3, #8
 800393c:	d11c      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800393e:	4b44      	ldr	r3, [pc, #272]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d116      	bne.n	8003978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800394a:	4b41      	ldr	r3, [pc, #260]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0302 	and.w	r3, r3, #2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d005      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e1c7      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003962:	4b3b      	ldr	r3, [pc, #236]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	4937      	ldr	r1, [pc, #220]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003972:	4313      	orrs	r3, r2
 8003974:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003976:	e03a      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d020      	beq.n	80039c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003980:	4b34      	ldr	r3, [pc, #208]	@ (8003a54 <HAL_RCC_OscConfig+0x244>)
 8003982:	2201      	movs	r2, #1
 8003984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fd fa09 	bl	8000d9c <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800398e:	f7fd fa05 	bl	8000d9c <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e1a8      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0f0      	beq.n	800398e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ac:	4b28      	ldr	r3, [pc, #160]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	4925      	ldr	r1, [pc, #148]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e015      	b.n	80039ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039c2:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <HAL_RCC_OscConfig+0x244>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039c8:	f7fd f9e8 	bl	8000d9c <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039d0:	f7fd f9e4 	bl	8000d9c <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e187      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0308 	and.w	r3, r3, #8
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d036      	beq.n	8003a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d016      	beq.n	8003a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a02:	4b15      	ldr	r3, [pc, #84]	@ (8003a58 <HAL_RCC_OscConfig+0x248>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a08:	f7fd f9c8 	bl	8000d9c <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a10:	f7fd f9c4 	bl	8000d9c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e167      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a22:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_RCC_OscConfig+0x240>)
 8003a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d0f0      	beq.n	8003a10 <HAL_RCC_OscConfig+0x200>
 8003a2e:	e01b      	b.n	8003a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a30:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_RCC_OscConfig+0x248>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fd f9b1 	bl	8000d9c <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a3c:	e00e      	b.n	8003a5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fd f9ad 	bl	8000d9c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d907      	bls.n	8003a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e150      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
 8003a50:	40023800 	.word	0x40023800
 8003a54:	42470000 	.word	0x42470000
 8003a58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	4b88      	ldr	r3, [pc, #544]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ea      	bne.n	8003a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8097 	beq.w	8003ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b81      	ldr	r3, [pc, #516]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a96:	4b7a      	ldr	r3, [pc, #488]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa6:	4b77      	ldr	r3, [pc, #476]	@ (8003c84 <HAL_RCC_OscConfig+0x474>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d118      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ab2:	4b74      	ldr	r3, [pc, #464]	@ (8003c84 <HAL_RCC_OscConfig+0x474>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a73      	ldr	r2, [pc, #460]	@ (8003c84 <HAL_RCC_OscConfig+0x474>)
 8003ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003abe:	f7fd f96d 	bl	8000d9c <HAL_GetTick>
 8003ac2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac4:	e008      	b.n	8003ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ac6:	f7fd f969 	bl	8000d9c <HAL_GetTick>
 8003aca:	4602      	mov	r2, r0
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d901      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e10c      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8003c84 <HAL_RCC_OscConfig+0x474>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0f0      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d106      	bne.n	8003afa <HAL_RCC_OscConfig+0x2ea>
 8003aec:	4b64      	ldr	r3, [pc, #400]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4a63      	ldr	r2, [pc, #396]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003af8:	e01c      	b.n	8003b34 <HAL_RCC_OscConfig+0x324>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b05      	cmp	r3, #5
 8003b00:	d10c      	bne.n	8003b1c <HAL_RCC_OscConfig+0x30c>
 8003b02:	4b5f      	ldr	r3, [pc, #380]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b06:	4a5e      	ldr	r2, [pc, #376]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b08:	f043 0304 	orr.w	r3, r3, #4
 8003b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b12:	4a5b      	ldr	r2, [pc, #364]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b14:	f043 0301 	orr.w	r3, r3, #1
 8003b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_OscConfig+0x324>
 8003b1c:	4b58      	ldr	r3, [pc, #352]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b20:	4a57      	ldr	r2, [pc, #348]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b22:	f023 0301 	bic.w	r3, r3, #1
 8003b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b28:	4b55      	ldr	r3, [pc, #340]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2c:	4a54      	ldr	r2, [pc, #336]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	f023 0304 	bic.w	r3, r3, #4
 8003b32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b3c:	f7fd f92e 	bl	8000d9c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b42:	e00a      	b.n	8003b5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b44:	f7fd f92a 	bl	8000d9c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e0cb      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b5a:	4b49      	ldr	r3, [pc, #292]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0ee      	beq.n	8003b44 <HAL_RCC_OscConfig+0x334>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b68:	f7fd f918 	bl	8000d9c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b70:	f7fd f914 	bl	8000d9c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e0b5      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b86:	4b3e      	ldr	r3, [pc, #248]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1ee      	bne.n	8003b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b92:	7dfb      	ldrb	r3, [r7, #23]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b98:	4b39      	ldr	r3, [pc, #228]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	4a38      	ldr	r2, [pc, #224]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ba2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f000 80a1 	beq.w	8003cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bae:	4b34      	ldr	r3, [pc, #208]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d05c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d141      	bne.n	8003c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bc2:	4b31      	ldr	r3, [pc, #196]	@ (8003c88 <HAL_RCC_OscConfig+0x478>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fd f8e8 	bl	8000d9c <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd f8e4 	bl	8000d9c <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e087      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003be2:	4b27      	ldr	r3, [pc, #156]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	69da      	ldr	r2, [r3, #28]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	019b      	lsls	r3, r3, #6
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c04:	085b      	lsrs	r3, r3, #1
 8003c06:	3b01      	subs	r3, #1
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c10:	061b      	lsls	r3, r3, #24
 8003c12:	491b      	ldr	r1, [pc, #108]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c18:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <HAL_RCC_OscConfig+0x478>)
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1e:	f7fd f8bd 	bl	8000d9c <HAL_GetTick>
 8003c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c24:	e008      	b.n	8003c38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c26:	f7fd f8b9 	bl	8000d9c <HAL_GetTick>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e05c      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c38:	4b11      	ldr	r3, [pc, #68]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0f0      	beq.n	8003c26 <HAL_RCC_OscConfig+0x416>
 8003c44:	e054      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c46:	4b10      	ldr	r3, [pc, #64]	@ (8003c88 <HAL_RCC_OscConfig+0x478>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fd f8a6 	bl	8000d9c <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c54:	f7fd f8a2 	bl	8000d9c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e045      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c66:	4b06      	ldr	r3, [pc, #24]	@ (8003c80 <HAL_RCC_OscConfig+0x470>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0x444>
 8003c72:	e03d      	b.n	8003cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e038      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40007000 	.word	0x40007000
 8003c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cfc <HAL_RCC_OscConfig+0x4ec>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d028      	beq.n	8003cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d121      	bne.n	8003cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d11a      	bne.n	8003cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d111      	bne.n	8003cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	085b      	lsrs	r3, r3, #1
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d107      	bne.n	8003cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800

08003d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0cc      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d14:	4b68      	ldr	r3, [pc, #416]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d90c      	bls.n	8003d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b65      	ldr	r3, [pc, #404]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b63      	ldr	r3, [pc, #396]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0b8      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d54:	4b59      	ldr	r3, [pc, #356]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a58      	ldr	r2, [pc, #352]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d005      	beq.n	8003d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d6c:	4b53      	ldr	r3, [pc, #332]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4a52      	ldr	r2, [pc, #328]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d78:	4b50      	ldr	r3, [pc, #320]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	494d      	ldr	r1, [pc, #308]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d044      	beq.n	8003e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9e:	4b47      	ldr	r3, [pc, #284]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d119      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e07f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d003      	beq.n	8003dbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e06f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dce:	4b3b      	ldr	r3, [pc, #236]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e067      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dde:	4b37      	ldr	r3, [pc, #220]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f023 0203 	bic.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4934      	ldr	r1, [pc, #208]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003df0:	f7fc ffd4 	bl	8000d9c <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df8:	f7fc ffd0 	bl	8000d9c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e04f      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 020c 	and.w	r2, r3, #12
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d1eb      	bne.n	8003df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e20:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d20c      	bcs.n	8003e48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2e:	4b22      	ldr	r3, [pc, #136]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e36:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e032      	b.n	8003eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e54:	4b19      	ldr	r3, [pc, #100]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4916      	ldr	r1, [pc, #88]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d009      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e72:	4b12      	ldr	r3, [pc, #72]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	490e      	ldr	r1, [pc, #56]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e86:	f000 f821 	bl	8003ecc <HAL_RCC_GetSysClockFreq>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	091b      	lsrs	r3, r3, #4
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	490a      	ldr	r1, [pc, #40]	@ (8003ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e98:	5ccb      	ldrb	r3, [r1, r3]
 8003e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9e:	4a09      	ldr	r2, [pc, #36]	@ (8003ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ea2:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc ff34 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	40023c00 	.word	0x40023c00
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	08007734 	.word	0x08007734
 8003ec4:	20000000 	.word	0x20000000
 8003ec8:	20000004 	.word	0x20000004

08003ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed0:	b094      	sub	sp, #80	@ 0x50
 8003ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ed8:	2300      	movs	r3, #0
 8003eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003edc:	2300      	movs	r3, #0
 8003ede:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ee4:	4b79      	ldr	r3, [pc, #484]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d00d      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x40>
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	f200 80e1 	bhi.w	80040b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_RCC_GetSysClockFreq+0x34>
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d003      	beq.n	8003f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8003efe:	e0db      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f00:	4b73      	ldr	r3, [pc, #460]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f02:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003f04:	e0db      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f06:	4b73      	ldr	r3, [pc, #460]	@ (80040d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f0a:	e0d8      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f14:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f16:	4b6d      	ldr	r3, [pc, #436]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f22:	4b6a      	ldr	r3, [pc, #424]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	099b      	lsrs	r3, r3, #6
 8003f28:	2200      	movs	r2, #0
 8003f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f36:	2300      	movs	r3, #0
 8003f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	f04f 0000 	mov.w	r0, #0
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	0159      	lsls	r1, r3, #5
 8003f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f50:	0150      	lsls	r0, r2, #5
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4621      	mov	r1, r4
 8003f58:	1a51      	subs	r1, r2, r1
 8003f5a:	6139      	str	r1, [r7, #16]
 8003f5c:	4629      	mov	r1, r5
 8003f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f70:	4659      	mov	r1, fp
 8003f72:	018b      	lsls	r3, r1, #6
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	018a      	lsls	r2, r1, #6
 8003f7e:	4651      	mov	r1, sl
 8003f80:	ebb2 0801 	subs.w	r8, r2, r1
 8003f84:	4659      	mov	r1, fp
 8003f86:	eb63 0901 	sbc.w	r9, r3, r1
 8003f8a:	f04f 0200 	mov.w	r2, #0
 8003f8e:	f04f 0300 	mov.w	r3, #0
 8003f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9e:	4690      	mov	r8, r2
 8003fa0:	4699      	mov	r9, r3
 8003fa2:	4623      	mov	r3, r4
 8003fa4:	eb18 0303 	adds.w	r3, r8, r3
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	462b      	mov	r3, r5
 8003fac:	eb49 0303 	adc.w	r3, r9, r3
 8003fb0:	60fb      	str	r3, [r7, #12]
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	024b      	lsls	r3, r1, #9
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fc8:	4621      	mov	r1, r4
 8003fca:	024a      	lsls	r2, r1, #9
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fdc:	f7fc f8fc 	bl	80001d8 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fe8:	e058      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fea:	4b38      	ldr	r3, [pc, #224]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ffa:	623b      	str	r3, [r7, #32]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004004:	4642      	mov	r2, r8
 8004006:	464b      	mov	r3, r9
 8004008:	f04f 0000 	mov.w	r0, #0
 800400c:	f04f 0100 	mov.w	r1, #0
 8004010:	0159      	lsls	r1, r3, #5
 8004012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004016:	0150      	lsls	r0, r2, #5
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4641      	mov	r1, r8
 800401e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004022:	4649      	mov	r1, r9
 8004024:	eb63 0b01 	sbc.w	fp, r3, r1
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800403c:	ebb2 040a 	subs.w	r4, r2, sl
 8004040:	eb63 050b 	sbc.w	r5, r3, fp
 8004044:	f04f 0200 	mov.w	r2, #0
 8004048:	f04f 0300 	mov.w	r3, #0
 800404c:	00eb      	lsls	r3, r5, #3
 800404e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004052:	00e2      	lsls	r2, r4, #3
 8004054:	4614      	mov	r4, r2
 8004056:	461d      	mov	r5, r3
 8004058:	4643      	mov	r3, r8
 800405a:	18e3      	adds	r3, r4, r3
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	464b      	mov	r3, r9
 8004060:	eb45 0303 	adc.w	r3, r5, r3
 8004064:	607b      	str	r3, [r7, #4]
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004072:	4629      	mov	r1, r5
 8004074:	028b      	lsls	r3, r1, #10
 8004076:	4621      	mov	r1, r4
 8004078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800407c:	4621      	mov	r1, r4
 800407e:	028a      	lsls	r2, r1, #10
 8004080:	4610      	mov	r0, r2
 8004082:	4619      	mov	r1, r3
 8004084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004086:	2200      	movs	r2, #0
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	61fa      	str	r2, [r7, #28]
 800408c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004090:	f7fc f8a2 	bl	80001d8 <__aeabi_uldivmod>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4613      	mov	r3, r2
 800409a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800409c:	4b0b      	ldr	r3, [pc, #44]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x200>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0c1b      	lsrs	r3, r3, #16
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	3301      	adds	r3, #1
 80040a8:	005b      	lsls	r3, r3, #1
 80040aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80040ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040b6:	e002      	b.n	80040be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80040ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3750      	adds	r7, #80	@ 0x50
 80040c4:	46bd      	mov	sp, r7
 80040c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ca:	bf00      	nop
 80040cc:	40023800 	.word	0x40023800
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	007a1200 	.word	0x007a1200

080040d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040dc:	4b03      	ldr	r3, [pc, #12]	@ (80040ec <HAL_RCC_GetHCLKFreq+0x14>)
 80040de:	681b      	ldr	r3, [r3, #0]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000000 	.word	0x20000000

080040f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040f4:	f7ff fff0 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0a9b      	lsrs	r3, r3, #10
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	@ (8004114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08007744 	.word	0x08007744

08004118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800411c:	f7ff ffdc 	bl	80040d8 <HAL_RCC_GetHCLKFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	0b5b      	lsrs	r3, r3, #13
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	4903      	ldr	r1, [pc, #12]	@ (800413c <HAL_RCC_GetPCLK2Freq+0x24>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004134:	4618      	mov	r0, r3
 8004136:	bd80      	pop	{r7, pc}
 8004138:	40023800 	.word	0x40023800
 800413c:	08007744 	.word	0x08007744

08004140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e07b      	b.n	800424a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004156:	2b00      	cmp	r3, #0
 8004158:	d108      	bne.n	800416c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004162:	d009      	beq.n	8004178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	61da      	str	r2, [r3, #28]
 800416a:	e005      	b.n	8004178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7fc fc40 	bl	8000a18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80041c0:	431a      	orrs	r2, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e8:	431a      	orrs	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041fc:	ea42 0103 	orr.w	r1, r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	0c1b      	lsrs	r3, r3, #16
 8004216:	f003 0104 	and.w	r1, r3, #4
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421e:	f003 0210 	and.w	r2, r3, #16
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e042      	b.n	80042ea <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d106      	bne.n	800427e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7fc fc15 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2224      	movs	r2, #36	@ 0x24
 8004282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004294:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 fa0a 	bl	80046b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695a      	ldr	r2, [r3, #20]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	@ 0x28
 80042f6:	af02      	add	r7, sp, #8
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	d175      	bne.n	80043fe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_Transmit+0x2c>
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e06e      	b.n	8004400 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2221      	movs	r2, #33	@ 0x21
 800432c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004330:	f7fc fd34 	bl	8000d9c <HAL_GetTick>
 8004334:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	88fa      	ldrh	r2, [r7, #6]
 8004340:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800434a:	d108      	bne.n	800435e <HAL_UART_Transmit+0x6c>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	61bb      	str	r3, [r7, #24]
 800435c:	e003      	b.n	8004366 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004366:	e02e      	b.n	80043c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	2200      	movs	r2, #0
 8004370:	2180      	movs	r1, #128	@ 0x80
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f8df 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e03a      	b.n	8004400 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	3302      	adds	r3, #2
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e007      	b.n	80043b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	781a      	ldrb	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043bc:	b29b      	uxth	r3, r3
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1cb      	bne.n	8004368 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	697b      	ldr	r3, [r7, #20]
 80043d6:	2200      	movs	r2, #0
 80043d8:	2140      	movs	r1, #64	@ 0x40
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f8ab 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e006      	b.n	8004400 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3720      	adds	r7, #32
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	@ 0x28
 800440c:	af02      	add	r7, sp, #8
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	4613      	mov	r3, r2
 8004416:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004422:	b2db      	uxtb	r3, r3
 8004424:	2b20      	cmp	r3, #32
 8004426:	f040 8081 	bne.w	800452c <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_UART_Receive+0x2e>
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e079      	b.n	800452e <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2222      	movs	r2, #34	@ 0x22
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444e:	f7fc fca5 	bl	8000d9c <HAL_GetTick>
 8004452:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004468:	d108      	bne.n	800447c <HAL_UART_Receive+0x74>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e003      	b.n	8004484 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004484:	e047      	b.n	8004516 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	2120      	movs	r1, #32
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 f850 	bl	8004536 <UART_WaitOnFlagUntilTimeout>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d005      	beq.n	80044a8 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e042      	b.n	800452e <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10c      	bne.n	80044c8 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	3302      	adds	r3, #2
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	e01f      	b.n	8004508 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044d0:	d007      	beq.n	80044e2 <HAL_UART_Receive+0xda>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_UART_Receive+0xe8>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e008      	b.n	8004502 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3301      	adds	r3, #1
 8004506:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800450c:	b29b      	uxth	r3, r3
 800450e:	3b01      	subs	r3, #1
 8004510:	b29a      	uxth	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1b2      	bne.n	8004486 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	e000      	b.n	800452e <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800452c:	2302      	movs	r3, #2
  }
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b086      	sub	sp, #24
 800453a:	af00      	add	r7, sp, #0
 800453c:	60f8      	str	r0, [r7, #12]
 800453e:	60b9      	str	r1, [r7, #8]
 8004540:	603b      	str	r3, [r7, #0]
 8004542:	4613      	mov	r3, r2
 8004544:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004546:	e03b      	b.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	6a3b      	ldr	r3, [r7, #32]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d037      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fc fc24 	bl	8000d9c <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	6a3a      	ldr	r2, [r7, #32]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <UART_WaitOnFlagUntilTimeout+0x30>
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e03a      	b.n	80045e0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d023      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	2b80      	cmp	r3, #128	@ 0x80
 800457c:	d020      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d01d      	beq.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d116      	bne.n	80045c0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f81d 	bl	80045e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2208      	movs	r2, #8
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e00f      	b.n	80045e0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	bf0c      	ite	eq
 80045d0:	2301      	moveq	r3, #1
 80045d2:	2300      	movne	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	461a      	mov	r2, r3
 80045d8:	79fb      	ldrb	r3, [r7, #7]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d0b4      	beq.n	8004548 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b095      	sub	sp, #84	@ 0x54
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004610:	643a      	str	r2, [r7, #64]	@ 0x40
 8004612:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004616:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	3314      	adds	r3, #20
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	3314      	adds	r3, #20
 8004642:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004644:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e5      	bne.n	8004624 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465c:	2b01      	cmp	r3, #1
 800465e:	d119      	bne.n	8004694 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	330c      	adds	r3, #12
 8004666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	e853 3f00 	ldrex	r3, [r3]
 800466e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 0310 	bic.w	r3, r3, #16
 8004676:	647b      	str	r3, [r7, #68]	@ 0x44
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004680:	61ba      	str	r2, [r7, #24]
 8004682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004684:	6979      	ldr	r1, [r7, #20]
 8004686:	69ba      	ldr	r2, [r7, #24]
 8004688:	e841 2300 	strex	r3, r2, [r1]
 800468c:	613b      	str	r3, [r7, #16]
   return(result);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1e5      	bne.n	8004660 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046a2:	bf00      	nop
 80046a4:	3754      	adds	r7, #84	@ 0x54
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b4:	b0c0      	sub	sp, #256	@ 0x100
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046cc:	68d9      	ldr	r1, [r3, #12]
 80046ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	ea40 0301 	orr.w	r3, r0, r1
 80046d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	431a      	orrs	r2, r3
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004708:	f021 010c 	bic.w	r1, r1, #12
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004716:	430b      	orrs	r3, r1
 8004718:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800471a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472a:	6999      	ldr	r1, [r3, #24]
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	ea40 0301 	orr.w	r3, r0, r1
 8004736:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	4b8f      	ldr	r3, [pc, #572]	@ (800497c <UART_SetConfig+0x2cc>)
 8004740:	429a      	cmp	r2, r3
 8004742:	d005      	beq.n	8004750 <UART_SetConfig+0xa0>
 8004744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	4b8d      	ldr	r3, [pc, #564]	@ (8004980 <UART_SetConfig+0x2d0>)
 800474c:	429a      	cmp	r2, r3
 800474e:	d104      	bne.n	800475a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7ff fce2 	bl	8004118 <HAL_RCC_GetPCLK2Freq>
 8004754:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004758:	e003      	b.n	8004762 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800475a:	f7ff fcc9 	bl	80040f0 <HAL_RCC_GetPCLK1Freq>
 800475e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800476c:	f040 810c 	bne.w	8004988 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004770:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004774:	2200      	movs	r2, #0
 8004776:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800477a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800477e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004782:	4622      	mov	r2, r4
 8004784:	462b      	mov	r3, r5
 8004786:	1891      	adds	r1, r2, r2
 8004788:	65b9      	str	r1, [r7, #88]	@ 0x58
 800478a:	415b      	adcs	r3, r3
 800478c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800478e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004792:	4621      	mov	r1, r4
 8004794:	eb12 0801 	adds.w	r8, r2, r1
 8004798:	4629      	mov	r1, r5
 800479a:	eb43 0901 	adc.w	r9, r3, r1
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047b2:	4690      	mov	r8, r2
 80047b4:	4699      	mov	r9, r3
 80047b6:	4623      	mov	r3, r4
 80047b8:	eb18 0303 	adds.w	r3, r8, r3
 80047bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047c0:	462b      	mov	r3, r5
 80047c2:	eb49 0303 	adc.w	r3, r9, r3
 80047c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047de:	460b      	mov	r3, r1
 80047e0:	18db      	adds	r3, r3, r3
 80047e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047e4:	4613      	mov	r3, r2
 80047e6:	eb42 0303 	adc.w	r3, r2, r3
 80047ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80047ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047f4:	f7fb fcf0 	bl	80001d8 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4b61      	ldr	r3, [pc, #388]	@ (8004984 <UART_SetConfig+0x2d4>)
 80047fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	011c      	lsls	r4, r3, #4
 8004806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800480a:	2200      	movs	r2, #0
 800480c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004810:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004814:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004818:	4642      	mov	r2, r8
 800481a:	464b      	mov	r3, r9
 800481c:	1891      	adds	r1, r2, r2
 800481e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004820:	415b      	adcs	r3, r3
 8004822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004824:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004828:	4641      	mov	r1, r8
 800482a:	eb12 0a01 	adds.w	sl, r2, r1
 800482e:	4649      	mov	r1, r9
 8004830:	eb43 0b01 	adc.w	fp, r3, r1
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004840:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004848:	4692      	mov	sl, r2
 800484a:	469b      	mov	fp, r3
 800484c:	4643      	mov	r3, r8
 800484e:	eb1a 0303 	adds.w	r3, sl, r3
 8004852:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004856:	464b      	mov	r3, r9
 8004858:	eb4b 0303 	adc.w	r3, fp, r3
 800485c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800486c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004870:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004874:	460b      	mov	r3, r1
 8004876:	18db      	adds	r3, r3, r3
 8004878:	643b      	str	r3, [r7, #64]	@ 0x40
 800487a:	4613      	mov	r3, r2
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	647b      	str	r3, [r7, #68]	@ 0x44
 8004882:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004886:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800488a:	f7fb fca5 	bl	80001d8 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4611      	mov	r1, r2
 8004894:	4b3b      	ldr	r3, [pc, #236]	@ (8004984 <UART_SetConfig+0x2d4>)
 8004896:	fba3 2301 	umull	r2, r3, r3, r1
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2264      	movs	r2, #100	@ 0x64
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	1acb      	subs	r3, r1, r3
 80048a4:	00db      	lsls	r3, r3, #3
 80048a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048aa:	4b36      	ldr	r3, [pc, #216]	@ (8004984 <UART_SetConfig+0x2d4>)
 80048ac:	fba3 2302 	umull	r2, r3, r3, r2
 80048b0:	095b      	lsrs	r3, r3, #5
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048b8:	441c      	add	r4, r3
 80048ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	1891      	adds	r1, r2, r2
 80048d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048d4:	415b      	adcs	r3, r3
 80048d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048dc:	4641      	mov	r1, r8
 80048de:	1851      	adds	r1, r2, r1
 80048e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80048e2:	4649      	mov	r1, r9
 80048e4:	414b      	adcs	r3, r1
 80048e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048e8:	f04f 0200 	mov.w	r2, #0
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048f4:	4659      	mov	r1, fp
 80048f6:	00cb      	lsls	r3, r1, #3
 80048f8:	4651      	mov	r1, sl
 80048fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048fe:	4651      	mov	r1, sl
 8004900:	00ca      	lsls	r2, r1, #3
 8004902:	4610      	mov	r0, r2
 8004904:	4619      	mov	r1, r3
 8004906:	4603      	mov	r3, r0
 8004908:	4642      	mov	r2, r8
 800490a:	189b      	adds	r3, r3, r2
 800490c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004910:	464b      	mov	r3, r9
 8004912:	460a      	mov	r2, r1
 8004914:	eb42 0303 	adc.w	r3, r2, r3
 8004918:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004928:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800492c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004930:	460b      	mov	r3, r1
 8004932:	18db      	adds	r3, r3, r3
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004936:	4613      	mov	r3, r2
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800493e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004942:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004946:	f7fb fc47 	bl	80001d8 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <UART_SetConfig+0x2d4>)
 8004950:	fba3 1302 	umull	r1, r3, r3, r2
 8004954:	095b      	lsrs	r3, r3, #5
 8004956:	2164      	movs	r1, #100	@ 0x64
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	00db      	lsls	r3, r3, #3
 8004960:	3332      	adds	r3, #50	@ 0x32
 8004962:	4a08      	ldr	r2, [pc, #32]	@ (8004984 <UART_SetConfig+0x2d4>)
 8004964:	fba2 2303 	umull	r2, r3, r2, r3
 8004968:	095b      	lsrs	r3, r3, #5
 800496a:	f003 0207 	and.w	r2, r3, #7
 800496e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4422      	add	r2, r4
 8004976:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004978:	e106      	b.n	8004b88 <UART_SetConfig+0x4d8>
 800497a:	bf00      	nop
 800497c:	40011000 	.word	0x40011000
 8004980:	40011400 	.word	0x40011400
 8004984:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004988:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800498c:	2200      	movs	r2, #0
 800498e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004992:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004996:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800499a:	4642      	mov	r2, r8
 800499c:	464b      	mov	r3, r9
 800499e:	1891      	adds	r1, r2, r2
 80049a0:	6239      	str	r1, [r7, #32]
 80049a2:	415b      	adcs	r3, r3
 80049a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049aa:	4641      	mov	r1, r8
 80049ac:	1854      	adds	r4, r2, r1
 80049ae:	4649      	mov	r1, r9
 80049b0:	eb43 0501 	adc.w	r5, r3, r1
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	00eb      	lsls	r3, r5, #3
 80049be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049c2:	00e2      	lsls	r2, r4, #3
 80049c4:	4614      	mov	r4, r2
 80049c6:	461d      	mov	r5, r3
 80049c8:	4643      	mov	r3, r8
 80049ca:	18e3      	adds	r3, r4, r3
 80049cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049d0:	464b      	mov	r3, r9
 80049d2:	eb45 0303 	adc.w	r3, r5, r3
 80049d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049f6:	4629      	mov	r1, r5
 80049f8:	008b      	lsls	r3, r1, #2
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a00:	4621      	mov	r1, r4
 8004a02:	008a      	lsls	r2, r1, #2
 8004a04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a08:	f7fb fbe6 	bl	80001d8 <__aeabi_uldivmod>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	460b      	mov	r3, r1
 8004a10:	4b60      	ldr	r3, [pc, #384]	@ (8004b94 <UART_SetConfig+0x4e4>)
 8004a12:	fba3 2302 	umull	r2, r3, r3, r2
 8004a16:	095b      	lsrs	r3, r3, #5
 8004a18:	011c      	lsls	r4, r3, #4
 8004a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a2c:	4642      	mov	r2, r8
 8004a2e:	464b      	mov	r3, r9
 8004a30:	1891      	adds	r1, r2, r2
 8004a32:	61b9      	str	r1, [r7, #24]
 8004a34:	415b      	adcs	r3, r3
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a3c:	4641      	mov	r1, r8
 8004a3e:	1851      	adds	r1, r2, r1
 8004a40:	6139      	str	r1, [r7, #16]
 8004a42:	4649      	mov	r1, r9
 8004a44:	414b      	adcs	r3, r1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	f04f 0200 	mov.w	r2, #0
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a54:	4659      	mov	r1, fp
 8004a56:	00cb      	lsls	r3, r1, #3
 8004a58:	4651      	mov	r1, sl
 8004a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a5e:	4651      	mov	r1, sl
 8004a60:	00ca      	lsls	r2, r1, #3
 8004a62:	4610      	mov	r0, r2
 8004a64:	4619      	mov	r1, r3
 8004a66:	4603      	mov	r3, r0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	189b      	adds	r3, r3, r2
 8004a6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a70:	464b      	mov	r3, r9
 8004a72:	460a      	mov	r2, r1
 8004a74:	eb42 0303 	adc.w	r3, r2, r3
 8004a78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a94:	4649      	mov	r1, r9
 8004a96:	008b      	lsls	r3, r1, #2
 8004a98:	4641      	mov	r1, r8
 8004a9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	008a      	lsls	r2, r1, #2
 8004aa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004aa6:	f7fb fb97 	bl	80001d8 <__aeabi_uldivmod>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4611      	mov	r1, r2
 8004ab0:	4b38      	ldr	r3, [pc, #224]	@ (8004b94 <UART_SetConfig+0x4e4>)
 8004ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ab6:	095b      	lsrs	r3, r3, #5
 8004ab8:	2264      	movs	r2, #100	@ 0x64
 8004aba:	fb02 f303 	mul.w	r3, r2, r3
 8004abe:	1acb      	subs	r3, r1, r3
 8004ac0:	011b      	lsls	r3, r3, #4
 8004ac2:	3332      	adds	r3, #50	@ 0x32
 8004ac4:	4a33      	ldr	r2, [pc, #204]	@ (8004b94 <UART_SetConfig+0x4e4>)
 8004ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ad0:	441c      	add	r4, r3
 8004ad2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ada:	677a      	str	r2, [r7, #116]	@ 0x74
 8004adc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ae0:	4642      	mov	r2, r8
 8004ae2:	464b      	mov	r3, r9
 8004ae4:	1891      	adds	r1, r2, r2
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	415b      	adcs	r3, r3
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004af0:	4641      	mov	r1, r8
 8004af2:	1851      	adds	r1, r2, r1
 8004af4:	6039      	str	r1, [r7, #0]
 8004af6:	4649      	mov	r1, r9
 8004af8:	414b      	adcs	r3, r1
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	f04f 0200 	mov.w	r2, #0
 8004b00:	f04f 0300 	mov.w	r3, #0
 8004b04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b08:	4659      	mov	r1, fp
 8004b0a:	00cb      	lsls	r3, r1, #3
 8004b0c:	4651      	mov	r1, sl
 8004b0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b12:	4651      	mov	r1, sl
 8004b14:	00ca      	lsls	r2, r1, #3
 8004b16:	4610      	mov	r0, r2
 8004b18:	4619      	mov	r1, r3
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b22:	464b      	mov	r3, r9
 8004b24:	460a      	mov	r2, r1
 8004b26:	eb42 0303 	adc.w	r3, r2, r3
 8004b2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b36:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b44:	4649      	mov	r1, r9
 8004b46:	008b      	lsls	r3, r1, #2
 8004b48:	4641      	mov	r1, r8
 8004b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b4e:	4641      	mov	r1, r8
 8004b50:	008a      	lsls	r2, r1, #2
 8004b52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b56:	f7fb fb3f 	bl	80001d8 <__aeabi_uldivmod>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b94 <UART_SetConfig+0x4e4>)
 8004b60:	fba3 1302 	umull	r1, r3, r3, r2
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	2164      	movs	r1, #100	@ 0x64
 8004b68:	fb01 f303 	mul.w	r3, r1, r3
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	3332      	adds	r3, #50	@ 0x32
 8004b72:	4a08      	ldr	r2, [pc, #32]	@ (8004b94 <UART_SetConfig+0x4e4>)
 8004b74:	fba2 2303 	umull	r2, r3, r2, r3
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4422      	add	r2, r4
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b94:	51eb851f 	.word	0x51eb851f

08004b98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b98:	b084      	sub	sp, #16
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	f107 001c 	add.w	r0, r7, #28
 8004ba6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004baa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d123      	bne.n	8004bfa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004bda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d105      	bne.n	8004bee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f9dc 	bl	8004fac <USB_CoreReset>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	73fb      	strb	r3, [r7, #15]
 8004bf8:	e01b      	b.n	8004c32 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f9d0 	bl	8004fac <USB_CoreReset>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004c10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d106      	bne.n	8004c26 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c24:	e005      	b.n	8004c32 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004c32:	7fbb      	ldrb	r3, [r7, #30]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d10b      	bne.n	8004c50 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f043 0206 	orr.w	r2, r3, #6
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f043 0220 	orr.w	r2, r3, #32
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c5c:	b004      	add	sp, #16
 8004c5e:	4770      	bx	lr

08004c60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	f043 0201 	orr.w	r2, r3, #1
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d115      	bne.n	8004cf2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004cd2:	200a      	movs	r0, #10
 8004cd4:	f7fc f86e 	bl	8000db4 <HAL_Delay>
      ms += 10U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	330a      	adds	r3, #10
 8004cdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f956 	bl	8004f90 <USB_GetMode>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d01e      	beq.n	8004d28 <USB_SetCurrentMode+0x84>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2bc7      	cmp	r3, #199	@ 0xc7
 8004cee:	d9f0      	bls.n	8004cd2 <USB_SetCurrentMode+0x2e>
 8004cf0:	e01a      	b.n	8004d28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004cf2:	78fb      	ldrb	r3, [r7, #3]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d115      	bne.n	8004d24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004d04:	200a      	movs	r0, #10
 8004d06:	f7fc f855 	bl	8000db4 <HAL_Delay>
      ms += 10U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	330a      	adds	r3, #10
 8004d0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f93d 	bl	8004f90 <USB_GetMode>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d005      	beq.n	8004d28 <USB_SetCurrentMode+0x84>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004d20:	d9f0      	bls.n	8004d04 <USB_SetCurrentMode+0x60>
 8004d22:	e001      	b.n	8004d28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e005      	b.n	8004d34 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004d2c:	d101      	bne.n	8004d32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e000      	b.n	8004d34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d56:	d901      	bls.n	8004d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e01b      	b.n	8004d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	daf2      	bge.n	8004d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d64:	2300      	movs	r3, #0
 8004d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	019b      	lsls	r3, r3, #6
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	3301      	adds	r3, #1
 8004d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d80:	d901      	bls.n	8004d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e006      	b.n	8004d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d0f0      	beq.n	8004d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004db8:	d901      	bls.n	8004dbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e018      	b.n	8004df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	daf2      	bge.n	8004dac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ddc:	d901      	bls.n	8004de2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e006      	b.n	8004df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b10      	cmp	r3, #16
 8004dec:	d0f0      	beq.n	8004dd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	@ 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d123      	bne.n	8004e6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e22:	88bb      	ldrh	r3, [r7, #4]
 8004e24:	3303      	adds	r3, #3
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e018      	b.n	8004e62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	031a      	lsls	r2, r3, #12
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	3301      	adds	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3e2      	bcc.n	8004e30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3724      	adds	r7, #36	@ 0x24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b08b      	sub	sp, #44	@ 0x2c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	089b      	lsrs	r3, r3, #2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e014      	b.n	8004ece <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	3301      	adds	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	6a3a      	ldr	r2, [r7, #32]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3e6      	bcc.n	8004ea4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ed6:	8bfb      	ldrh	r3, [r7, #30]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01e      	beq.n	8004f1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f00:	701a      	strb	r2, [r3, #0]
      i++;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	3301      	adds	r3, #1
 8004f06:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004f0e:	8bfb      	ldrh	r3, [r7, #30]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f14:	8bfb      	ldrh	r3, [r7, #30]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ea      	bne.n	8004ef0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	372c      	adds	r7, #44	@ 0x2c
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004f40:	68fb      	ldr	r3, [r7, #12]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b085      	sub	sp, #20
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8004f5e:	78fb      	ldrb	r3, [r7, #3]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8004f6e:	78fb      	ldrb	r3, [r7, #3]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	4013      	ands	r3, r2
 8004f80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f82:	68bb      	ldr	r3, [r7, #8]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fc4:	d901      	bls.n	8004fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e01b      	b.n	8005002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	daf2      	bge.n	8004fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fee:	d901      	bls.n	8004ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e006      	b.n	8005002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d0f0      	beq.n	8004fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3714      	adds	r7, #20
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
	...

08005010 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005010:	b084      	sub	sp, #16
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800501e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005030:	461a      	mov	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005046:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005052:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d119      	bne.n	800509a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800506a:	2b01      	cmp	r3, #1
 800506c:	d10a      	bne.n	8005084 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	6013      	str	r3, [r2, #0]
 8005082:	e014      	b.n	80050ae <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005092:	f023 0304 	bic.w	r3, r3, #4
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	e009      	b.n	80050ae <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80050a8:	f023 0304 	bic.w	r3, r3, #4
 80050ac:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ae:	2110      	movs	r1, #16
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fe43 	bl	8004d3c <USB_FlushTxFifo>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fe6d 	bl	8004da0 <USB_FlushRxFifo>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80050d0:	2300      	movs	r3, #0
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	e015      	b.n	8005102 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050e2:	461a      	mov	r2, r3
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295
 80050e8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f6:	461a      	mov	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	3301      	adds	r3, #1
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005106:	461a      	mov	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	4293      	cmp	r3, r2
 800510c:	d3e3      	bcc.n	80050d6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a18      	ldr	r2, [pc, #96]	@ (8005180 <USB_HostInit+0x170>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d10b      	bne.n	800513c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800512a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <USB_HostInit+0x174>)
 8005130:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a14      	ldr	r2, [pc, #80]	@ (8005188 <USB_HostInit+0x178>)
 8005136:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800513a:	e009      	b.n	8005150 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2280      	movs	r2, #128	@ 0x80
 8005140:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a11      	ldr	r2, [pc, #68]	@ (800518c <USB_HostInit+0x17c>)
 8005146:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a11      	ldr	r2, [pc, #68]	@ (8005190 <USB_HostInit+0x180>)
 800514c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005150:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	f043 0210 	orr.w	r2, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <USB_HostInit+0x184>)
 800516a:	4313      	orrs	r3, r2
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800517c:	b004      	add	sp, #16
 800517e:	4770      	bx	lr
 8005180:	40040000 	.word	0x40040000
 8005184:	01000200 	.word	0x01000200
 8005188:	00e00300 	.word	0x00e00300
 800518c:	00600080 	.word	0x00600080
 8005190:	004000e0 	.word	0x004000e0
 8005194:	a3200008 	.word	0xa3200008

08005198 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80051b6:	f023 0303 	bic.w	r3, r3, #3
 80051ba:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	68f9      	ldr	r1, [r7, #12]
 80051cc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d107      	bne.n	80051ea <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051e0:	461a      	mov	r2, r3
 80051e2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80051e6:	6053      	str	r3, [r2, #4]
 80051e8:	e00c      	b.n	8005204 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80051ea:	78fb      	ldrb	r3, [r7, #3]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d107      	bne.n	8005200 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051f6:	461a      	mov	r2, r3
 80051f8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80051fc:	6053      	str	r3, [r2, #4]
 80051fe:	e001      	b.n	8005204 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005204:	2300      	movs	r3, #0
}
 8005206:	4618      	mov	r0, r3
 8005208:	3714      	adds	r7, #20
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005212:	b480      	push	{r7}
 8005214:	b085      	sub	sp, #20
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005236:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d109      	bne.n	8005256 <USB_DriveVbus+0x44>
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d106      	bne.n	8005256 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005254:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005260:	d109      	bne.n	8005276 <USB_DriveVbus+0x64>
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005274:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005290:	2300      	movs	r3, #0
 8005292:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0c5b      	lsrs	r3, r3, #17
 80052a2:	f003 0303 	and.w	r3, r3, #3
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3714      	adds	r7, #20
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr

080052b2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	b29b      	uxth	r3, r3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3714      	adds	r7, #20
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	4608      	mov	r0, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	461a      	mov	r2, r3
 80052e2:	4603      	mov	r3, r0
 80052e4:	70fb      	strb	r3, [r7, #3]
 80052e6:	460b      	mov	r3, r1
 80052e8:	70bb      	strb	r3, [r7, #2]
 80052ea:	4613      	mov	r3, r2
 80052ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80052ee:	2300      	movs	r3, #0
 80052f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80052f6:	78fb      	ldrb	r3, [r7, #3]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005302:	461a      	mov	r2, r3
 8005304:	f04f 33ff 	mov.w	r3, #4294967295
 8005308:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800530a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800530e:	2b03      	cmp	r3, #3
 8005310:	d87c      	bhi.n	800540c <USB_HC_Init+0x138>
 8005312:	a201      	add	r2, pc, #4	@ (adr r2, 8005318 <USB_HC_Init+0x44>)
 8005314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005318:	08005329 	.word	0x08005329
 800531c:	080053cf 	.word	0x080053cf
 8005320:	08005329 	.word	0x08005329
 8005324:	08005391 	.word	0x08005391
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005328:	78fb      	ldrb	r3, [r7, #3]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	4413      	add	r3, r2
 8005330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005334:	461a      	mov	r2, r3
 8005336:	f240 439d 	movw	r3, #1181	@ 0x49d
 800533a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800533c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005340:	2b00      	cmp	r3, #0
 8005342:	da10      	bge.n	8005366 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	0151      	lsls	r1, r2, #5
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	440a      	add	r2, r1
 800535a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800535e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005362:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005364:	e055      	b.n	8005412 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a6f      	ldr	r2, [pc, #444]	@ (8005528 <USB_HC_Init+0x254>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d151      	bne.n	8005412 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800536e:	78fb      	ldrb	r3, [r7, #3]
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	4413      	add	r3, r2
 8005376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	78fa      	ldrb	r2, [r7, #3]
 800537e:	0151      	lsls	r1, r2, #5
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	440a      	add	r2, r1
 8005384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005388:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800538c:	60d3      	str	r3, [r2, #12]
      break;
 800538e:	e040      	b.n	8005412 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800539c:	461a      	mov	r2, r3
 800539e:	f240 639d 	movw	r3, #1693	@ 0x69d
 80053a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	da34      	bge.n	8005416 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	015a      	lsls	r2, r3, #5
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	4413      	add	r3, r2
 80053b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	78fa      	ldrb	r2, [r7, #3]
 80053bc:	0151      	lsls	r1, r2, #5
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	440a      	add	r2, r1
 80053c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80053c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80053cc:	e023      	b.n	8005416 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80053ce:	78fb      	ldrb	r3, [r7, #3]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053da:	461a      	mov	r2, r3
 80053dc:	f240 2325 	movw	r3, #549	@ 0x225
 80053e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80053e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	da17      	bge.n	800541a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80053ea:	78fb      	ldrb	r3, [r7, #3]
 80053ec:	015a      	lsls	r2, r3, #5
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	4413      	add	r3, r2
 80053f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	78fa      	ldrb	r2, [r7, #3]
 80053fa:	0151      	lsls	r1, r2, #5
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	440a      	add	r2, r1
 8005400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005404:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005408:	60d3      	str	r3, [r2, #12]
      }
      break;
 800540a:	e006      	b.n	800541a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	77fb      	strb	r3, [r7, #31]
      break;
 8005410:	e004      	b.n	800541c <USB_HC_Init+0x148>
      break;
 8005412:	bf00      	nop
 8005414:	e002      	b.n	800541c <USB_HC_Init+0x148>
      break;
 8005416:	bf00      	nop
 8005418:	e000      	b.n	800541c <USB_HC_Init+0x148>
      break;
 800541a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800541c:	78fb      	ldrb	r3, [r7, #3]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4413      	add	r3, r2
 8005424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005428:	461a      	mov	r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	4413      	add	r3, r2
 8005436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	78fa      	ldrb	r2, [r7, #3]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	440a      	add	r2, r1
 8005444:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005448:	f043 0302 	orr.w	r3, r3, #2
 800544c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	f003 030f 	and.w	r3, r3, #15
 800545c:	2101      	movs	r1, #1
 800545e:	fa01 f303 	lsl.w	r3, r1, r3
 8005462:	6939      	ldr	r1, [r7, #16]
 8005464:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005468:	4313      	orrs	r3, r2
 800546a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005478:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da03      	bge.n	8005488 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005484:	61bb      	str	r3, [r7, #24]
 8005486:	e001      	b.n	800548c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff fef9 	bl	8005284 <USB_GetHostSpeed>
 8005492:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005494:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005498:	2b02      	cmp	r3, #2
 800549a:	d106      	bne.n	80054aa <USB_HC_Init+0x1d6>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d003      	beq.n	80054aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80054a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e001      	b.n	80054ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ae:	787b      	ldrb	r3, [r7, #1]
 80054b0:	059b      	lsls	r3, r3, #22
 80054b2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054b6:	78bb      	ldrb	r3, [r7, #2]
 80054b8:	02db      	lsls	r3, r3, #11
 80054ba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80054c4:	049b      	lsls	r3, r3, #18
 80054c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80054ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80054cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80054ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80054d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	431a      	orrs	r2, r3
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	0151      	lsls	r1, r2, #5
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	440a      	add	r2, r1
 80054e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80054e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80054ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80054ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d003      	beq.n	80054fe <USB_HC_Init+0x22a>
 80054f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d10f      	bne.n	800551e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80054fe:	78fb      	ldrb	r3, [r7, #3]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	78fa      	ldrb	r2, [r7, #3]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	440a      	add	r2, r1
 8005514:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005518:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800551c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800551e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3720      	adds	r7, #32
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	40040000 	.word	0x40040000

0800552c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	@ 0x30
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	785b      	ldrb	r3, [r3, #1]
 8005542:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005548:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	4a5d      	ldr	r2, [pc, #372]	@ (80056c4 <USB_HC_StartXfer+0x198>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d12f      	bne.n	80055b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005552:	79fb      	ldrb	r3, [r7, #7]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d11c      	bne.n	8005592 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	7c9b      	ldrb	r3, [r3, #18]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <USB_HC_StartXfer+0x3c>
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	7c9b      	ldrb	r3, [r3, #18]
 8005564:	2b02      	cmp	r3, #2
 8005566:	d124      	bne.n	80055b2 <USB_HC_StartXfer+0x86>
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	799b      	ldrb	r3, [r3, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d120      	bne.n	80055b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	69fa      	ldr	r2, [r7, #28]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	6a3a      	ldr	r2, [r7, #32]
 8005584:	440a      	add	r2, r1
 8005586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800558a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800558e:	60d3      	str	r3, [r2, #12]
 8005590:	e00f      	b.n	80055b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	791b      	ldrb	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <USB_HC_StartXfer+0x86>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	795b      	ldrb	r3, [r3, #5]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d107      	bne.n	80055b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	785b      	ldrb	r3, [r3, #1]
 80055a6:	4619      	mov	r1, r3
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fb6b 	bl	8005c84 <USB_DoPing>
        return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e232      	b.n	8005a18 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	799b      	ldrb	r3, [r3, #6]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d158      	bne.n	800566c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	78db      	ldrb	r3, [r3, #3]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80055c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	8a92      	ldrh	r2, [r2, #20]
 80055cc:	fb03 f202 	mul.w	r2, r3, r2
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	61da      	str	r2, [r3, #28]
 80055d4:	e07c      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	7c9b      	ldrb	r3, [r3, #18]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d130      	bne.n	8005640 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80055e4:	d918      	bls.n	8005618 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	8a9b      	ldrh	r3, [r3, #20]
 80055ea:	461a      	mov	r2, r3
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d003      	beq.n	8005608 <USB_HC_StartXfer+0xdc>
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d103      	bne.n	8005610 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2202      	movs	r2, #2
 800560c:	60da      	str	r2, [r3, #12]
 800560e:	e05f      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2201      	movs	r2, #1
 8005614:	60da      	str	r2, [r3, #12]
 8005616:	e05b      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	6a1a      	ldr	r2, [r3, #32]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d007      	beq.n	8005638 <USB_HC_StartXfer+0x10c>
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	2b02      	cmp	r3, #2
 800562e:	d003      	beq.n	8005638 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	2204      	movs	r2, #4
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	e04b      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2203      	movs	r2, #3
 800563c:	60da      	str	r2, [r3, #12]
 800563e:	e047      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d10d      	bne.n	8005662 <USB_HC_StartXfer+0x136>
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	8a92      	ldrh	r2, [r2, #20]
 800564e:	4293      	cmp	r3, r2
 8005650:	d907      	bls.n	8005662 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005652:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	8a92      	ldrh	r2, [r2, #20]
 8005658:	fb03 f202 	mul.w	r2, r3, r2
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	61da      	str	r2, [r3, #28]
 8005660:	e036      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	6a1a      	ldr	r2, [r3, #32]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	61da      	str	r2, [r3, #28]
 800566a:	e031      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d018      	beq.n	80056a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	8a92      	ldrh	r2, [r2, #20]
 800567c:	4413      	add	r3, r2
 800567e:	3b01      	subs	r3, #1
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	8a92      	ldrh	r2, [r2, #20]
 8005684:	fbb3 f3f2 	udiv	r3, r3, r2
 8005688:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800568a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800568c:	8b7b      	ldrh	r3, [r7, #26]
 800568e:	429a      	cmp	r2, r3
 8005690:	d90b      	bls.n	80056aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005692:	8b7b      	ldrh	r3, [r7, #26]
 8005694:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005696:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	8a92      	ldrh	r2, [r2, #20]
 800569c:	fb03 f202 	mul.w	r2, r3, r2
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	61da      	str	r2, [r3, #28]
 80056a4:	e001      	b.n	80056aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80056a6:	2301      	movs	r3, #1
 80056a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	78db      	ldrb	r3, [r3, #3]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80056b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	8a92      	ldrh	r2, [r2, #20]
 80056b8:	fb03 f202 	mul.w	r2, r3, r2
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	61da      	str	r2, [r3, #28]
 80056c0:	e006      	b.n	80056d0 <USB_HC_StartXfer+0x1a4>
 80056c2:	bf00      	nop
 80056c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056da:	04d9      	lsls	r1, r3, #19
 80056dc:	4ba3      	ldr	r3, [pc, #652]	@ (800596c <USB_HC_StartXfer+0x440>)
 80056de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	7d9b      	ldrb	r3, [r3, #22]
 80056e6:	075b      	lsls	r3, r3, #29
 80056e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056ec:	69f9      	ldr	r1, [r7, #28]
 80056ee:	0148      	lsls	r0, r1, #5
 80056f0:	6a39      	ldr	r1, [r7, #32]
 80056f2:	4401      	add	r1, r0
 80056f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80056f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80056fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	6999      	ldr	r1, [r3, #24]
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005712:	460a      	mov	r2, r1
 8005714:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005716:	6a3b      	ldr	r3, [r7, #32]
 8005718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf0c      	ite	eq
 8005726:	2301      	moveq	r3, #1
 8005728:	2300      	movne	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	015a      	lsls	r2, r3, #5
 8005732:	6a3b      	ldr	r3, [r7, #32]
 8005734:	4413      	add	r3, r2
 8005736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69fa      	ldr	r2, [r7, #28]
 800573e:	0151      	lsls	r1, r2, #5
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	440a      	add	r2, r1
 8005744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005748:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800574c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	4413      	add	r3, r2
 8005756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	7e7b      	ldrb	r3, [r7, #25]
 800575e:	075b      	lsls	r3, r3, #29
 8005760:	69f9      	ldr	r1, [r7, #28]
 8005762:	0148      	lsls	r0, r1, #5
 8005764:	6a39      	ldr	r1, [r7, #32]
 8005766:	4401      	add	r1, r0
 8005768:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800576c:	4313      	orrs	r3, r2
 800576e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	799b      	ldrb	r3, [r3, #6]
 8005774:	2b01      	cmp	r3, #1
 8005776:	f040 80c3 	bne.w	8005900 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	7c5b      	ldrb	r3, [r3, #17]
 800577e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005784:	4313      	orrs	r3, r2
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	440a      	add	r2, r1
 800578e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005792:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005796:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80057b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	79db      	ldrb	r3, [r3, #7]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d123      	bne.n	8005808 <USB_HC_StartXfer+0x2dc>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	78db      	ldrb	r3, [r3, #3]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d11f      	bne.n	8005808 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	6a3a      	ldr	r2, [r7, #32]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057e6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	69fa      	ldr	r2, [r7, #28]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	6a3a      	ldr	r2, [r7, #32]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005806:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	7c9b      	ldrb	r3, [r3, #18]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d003      	beq.n	8005818 <USB_HC_StartXfer+0x2ec>
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	7c9b      	ldrb	r3, [r3, #18]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d117      	bne.n	8005848 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800581c:	2b01      	cmp	r3, #1
 800581e:	d113      	bne.n	8005848 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	78db      	ldrb	r3, [r3, #3]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10f      	bne.n	8005848 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	015a      	lsls	r2, r3, #5
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	4413      	add	r3, r2
 8005830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	69fa      	ldr	r2, [r7, #28]
 8005838:	0151      	lsls	r1, r2, #5
 800583a:	6a3a      	ldr	r2, [r7, #32]
 800583c:	440a      	add	r2, r1
 800583e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005846:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	7c9b      	ldrb	r3, [r3, #18]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d162      	bne.n	8005916 <USB_HC_StartXfer+0x3ea>
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	78db      	ldrb	r3, [r3, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d15e      	bne.n	8005916 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	3b01      	subs	r3, #1
 800585e:	2b03      	cmp	r3, #3
 8005860:	d858      	bhi.n	8005914 <USB_HC_StartXfer+0x3e8>
 8005862:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <USB_HC_StartXfer+0x33c>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	08005879 	.word	0x08005879
 800586c:	0800589b 	.word	0x0800589b
 8005870:	080058bd 	.word	0x080058bd
 8005874:	080058df 	.word	0x080058df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	4413      	add	r3, r2
 8005880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	0151      	lsls	r1, r2, #5
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	440a      	add	r2, r1
 800588e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005896:	6053      	str	r3, [r2, #4]
          break;
 8005898:	e03d      	b.n	8005916 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	69fa      	ldr	r2, [r7, #28]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	6a3a      	ldr	r2, [r7, #32]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058b4:	f043 030e 	orr.w	r3, r3, #14
 80058b8:	6053      	str	r3, [r2, #4]
          break;
 80058ba:	e02c      	b.n	8005916 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	6a3b      	ldr	r3, [r7, #32]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	6a3a      	ldr	r2, [r7, #32]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058da:	6053      	str	r3, [r2, #4]
          break;
 80058dc:	e01b      	b.n	8005916 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	0151      	lsls	r1, r2, #5
 80058f0:	6a3a      	ldr	r2, [r7, #32]
 80058f2:	440a      	add	r2, r1
 80058f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058fc:	6053      	str	r3, [r2, #4]
          break;
 80058fe:	e00a      	b.n	8005916 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6053      	str	r3, [r2, #4]
 8005912:	e000      	b.n	8005916 <USB_HC_StartXfer+0x3ea>
          break;
 8005914:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800592c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	78db      	ldrb	r3, [r3, #3]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d004      	beq.n	8005940 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	e003      	b.n	8005948 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005946:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800594e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	4413      	add	r3, r2
 8005958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800595c:	461a      	mov	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005968:	2300      	movs	r3, #0
 800596a:	e055      	b.n	8005a18 <USB_HC_StartXfer+0x4ec>
 800596c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	78db      	ldrb	r3, [r3, #3]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d14e      	bne.n	8005a16 <USB_HC_StartXfer+0x4ea>
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d04a      	beq.n	8005a16 <USB_HC_StartXfer+0x4ea>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	79db      	ldrb	r3, [r3, #7]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d146      	bne.n	8005a16 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	7c9b      	ldrb	r3, [r3, #18]
 800598c:	2b03      	cmp	r3, #3
 800598e:	d831      	bhi.n	80059f4 <USB_HC_StartXfer+0x4c8>
 8005990:	a201      	add	r2, pc, #4	@ (adr r2, 8005998 <USB_HC_StartXfer+0x46c>)
 8005992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005996:	bf00      	nop
 8005998:	080059a9 	.word	0x080059a9
 800599c:	080059cd 	.word	0x080059cd
 80059a0:	080059a9 	.word	0x080059a9
 80059a4:	080059cd 	.word	0x080059cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	3303      	adds	r3, #3
 80059ae:	089b      	lsrs	r3, r3, #2
 80059b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80059b2:	8afa      	ldrh	r2, [r7, #22]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d91c      	bls.n	80059f8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80059ca:	e015      	b.n	80059f8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	3303      	adds	r3, #3
 80059d2:	089b      	lsrs	r3, r3, #2
 80059d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80059d6:	8afa      	ldrh	r2, [r7, #22]
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d90a      	bls.n	80059fc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80059f2:	e003      	b.n	80059fc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80059f4:	bf00      	nop
 80059f6:	e002      	b.n	80059fe <USB_HC_StartXfer+0x4d2>
        break;
 80059f8:	bf00      	nop
 80059fa:	e000      	b.n	80059fe <USB_HC_StartXfer+0x4d2>
        break;
 80059fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6999      	ldr	r1, [r3, #24]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	785a      	ldrb	r2, [r3, #1]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	9000      	str	r0, [sp, #0]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff f9f3 	bl	8004dfc <USB_WritePacket>
  }

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3728      	adds	r7, #40	@ 0x28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	b29b      	uxth	r3, r3
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b089      	sub	sp, #36	@ 0x24
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	460b      	mov	r3, r1
 8005a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	0c9b      	lsrs	r3, r3, #18
 8005a6a:	f003 0303 	and.w	r3, r3, #3
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	015a      	lsls	r2, r3, #5
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	0fdb      	lsrs	r3, r3, #31
 8005a80:	f003 0301 	and.w	r3, r3, #1
 8005a84:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	0fdb      	lsrs	r3, r3, #31
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	f003 0320 	and.w	r3, r3, #32
 8005aa4:	2b20      	cmp	r3, #32
 8005aa6:	d10d      	bne.n	8005ac4 <USB_HC_Halt+0x82>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <USB_HC_Halt+0x82>
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d002      	beq.n	8005ac0 <USB_HC_Halt+0x7e>
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	d101      	bne.n	8005ac4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e0d8      	b.n	8005c76 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <USB_HC_Halt+0x8e>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d173      	bne.n	8005bb8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	69ba      	ldr	r2, [r7, #24]
 8005ae0:	0151      	lsls	r1, r2, #5
 8005ae2:	69fa      	ldr	r2, [r7, #28]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005aea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d14a      	bne.n	8005b92 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d133      	bne.n	8005b70 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b26:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b46:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b54:	d82e      	bhi.n	8005bb4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b6c:	d0ec      	beq.n	8005b48 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b6e:	e081      	b.n	8005c74 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	0151      	lsls	r1, r2, #5
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	440a      	add	r2, r1
 8005b86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005b8e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b90:	e070      	b.n	8005c74 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69ba      	ldr	r2, [r7, #24]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	69fa      	ldr	r2, [r7, #28]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bb2:	e05f      	b.n	8005c74 <USB_HC_Halt+0x232>
            break;
 8005bb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005bb6:	e05d      	b.n	8005c74 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bd6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d133      	bne.n	8005c50 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69ba      	ldr	r2, [r7, #24]
 8005bf8:	0151      	lsls	r1, r2, #5
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	440a      	add	r2, r1
 8005bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005c34:	d81d      	bhi.n	8005c72 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c4c:	d0ec      	beq.n	8005c28 <USB_HC_Halt+0x1e6>
 8005c4e:	e011      	b.n	8005c74 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	0151      	lsls	r1, r2, #5
 8005c62:	69fa      	ldr	r2, [r7, #28]
 8005c64:	440a      	add	r2, r1
 8005c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	e000      	b.n	8005c74 <USB_HC_Halt+0x232>
          break;
 8005c72:	bf00      	nop
    }
  }

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3724      	adds	r7, #36	@ 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
	...

08005c84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005c94:	78fb      	ldrb	r3, [r7, #3]
 8005c96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	04da      	lsls	r2, r3, #19
 8005ca0:	4b15      	ldr	r3, [pc, #84]	@ (8005cf8 <USB_DoPing+0x74>)
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cb4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005ccc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cd4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	1ff80000 	.word	0x1ff80000

08005cfc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fe ffb6 	bl	8004c82 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d16:	2110      	movs	r1, #16
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f7ff f80f 	bl	8004d3c <USB_FlushTxFifo>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff f839 	bl	8004da0 <USB_FlushRxFifo>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d001      	beq.n	8005d38 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005d38:	2300      	movs	r3, #0
 8005d3a:	61bb      	str	r3, [r7, #24]
 8005d3c:	e01f      	b.n	8005d7e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	015a      	lsls	r2, r3, #5
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d72:	461a      	mov	r2, r3
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b0f      	cmp	r3, #15
 8005d82:	d9dc      	bls.n	8005d3e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	e034      	b.n	8005df4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005da0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005da8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005db0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dd0:	d80c      	bhi.n	8005dec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	015a      	lsls	r2, r3, #5
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	4413      	add	r3, r2
 8005dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005de8:	d0ec      	beq.n	8005dc4 <USB_StopHost+0xc8>
 8005dea:	e000      	b.n	8005dee <USB_StopHost+0xf2>
        break;
 8005dec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	3301      	adds	r3, #1
 8005df2:	61bb      	str	r3, [r7, #24]
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b0f      	cmp	r3, #15
 8005df8:	d9c7      	bls.n	8005d8a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e00:	461a      	mov	r2, r3
 8005e02:	f04f 33ff 	mov.w	r3, #4294967295
 8005e06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7fe ff25 	bl	8004c60 <USB_EnableGlobalInt>

  return ret;
 8005e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3720      	adds	r7, #32
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b089      	sub	sp, #36	@ 0x24
 8005e24:	af04      	add	r7, sp, #16
 8005e26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005e28:	2301      	movs	r3, #1
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	2102      	movs	r1, #2
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fc85 	bl	800673e <USBH_FindInterface>
 8005e34:	4603      	mov	r3, r0
 8005e36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
 8005e3a:	2bff      	cmp	r3, #255	@ 0xff
 8005e3c:	d002      	beq.n	8005e44 <USBH_CDC_InterfaceInit+0x24>
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d901      	bls.n	8005e48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e44:	2302      	movs	r3, #2
 8005e46:	e13d      	b.n	80060c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fc5a 	bl	8006706 <USBH_SelectInterface>
 8005e52:	4603      	mov	r3, r0
 8005e54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005e56:	7bbb      	ldrb	r3, [r7, #14]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e131      	b.n	80060c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8005e66:	2050      	movs	r0, #80	@ 0x50
 8005e68:	f001 fb0a 	bl	8007480 <malloc>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005e76:	69db      	ldr	r3, [r3, #28]
 8005e78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d101      	bne.n	8005e84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005e80:	2302      	movs	r3, #2
 8005e82:	e11f      	b.n	80060c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005e84:	2250      	movs	r2, #80	@ 0x50
 8005e86:	2100      	movs	r1, #0
 8005e88:	68b8      	ldr	r0, [r7, #8]
 8005e8a:	f001 fbb7 	bl	80075fc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	211a      	movs	r1, #26
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	4413      	add	r3, r2
 8005e9a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b25b      	sxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	da15      	bge.n	8005ed2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ea6:	7bfb      	ldrb	r3, [r7, #15]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	211a      	movs	r1, #26
 8005eac:	fb01 f303 	mul.w	r3, r1, r3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005eb6:	781a      	ldrb	r2, [r3, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	211a      	movs	r1, #26
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005ecc:	881a      	ldrh	r2, [r3, #0]
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	785b      	ldrb	r3, [r3, #1]
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 ffba 	bl	8006e52 <USBH_AllocPipe>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	7819      	ldrb	r1, [r3, #0]
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	7858      	ldrb	r0, [r3, #1]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	8952      	ldrh	r2, [r2, #10]
 8005efe:	9202      	str	r2, [sp, #8]
 8005f00:	2203      	movs	r2, #3
 8005f02:	9201      	str	r2, [sp, #4]
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	4623      	mov	r3, r4
 8005f08:	4602      	mov	r2, r0
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 ff72 	bl	8006df4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2200      	movs	r2, #0
 8005f16:	4619      	mov	r1, r3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f001 fa35 	bl	8007388 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005f1e:	2300      	movs	r3, #0
 8005f20:	2200      	movs	r2, #0
 8005f22:	210a      	movs	r1, #10
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 fc0a 	bl	800673e <USBH_FindInterface>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2bff      	cmp	r3, #255	@ 0xff
 8005f32:	d002      	beq.n	8005f3a <USBH_CDC_InterfaceInit+0x11a>
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d901      	bls.n	8005f3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e0c2      	b.n	80060c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	211a      	movs	r1, #26
 8005f44:	fb01 f303 	mul.w	r3, r1, r3
 8005f48:	4413      	add	r3, r2
 8005f4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	b25b      	sxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da16      	bge.n	8005f84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	211a      	movs	r1, #26
 8005f5c:	fb01 f303 	mul.w	r3, r1, r3
 8005f60:	4413      	add	r3, r2
 8005f62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005f66:	781a      	ldrb	r2, [r3, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f6c:	7bfb      	ldrb	r3, [r7, #15]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	211a      	movs	r1, #26
 8005f72:	fb01 f303 	mul.w	r3, r1, r3
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005f7c:	881a      	ldrh	r2, [r3, #0]
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	835a      	strh	r2, [r3, #26]
 8005f82:	e015      	b.n	8005fb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	211a      	movs	r1, #26
 8005f8a:	fb01 f303 	mul.w	r3, r1, r3
 8005f8e:	4413      	add	r3, r2
 8005f90:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8005f94:	781a      	ldrb	r2, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	211a      	movs	r1, #26
 8005fa0:	fb01 f303 	mul.w	r3, r1, r3
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005faa:	881a      	ldrh	r2, [r3, #0]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	211a      	movs	r1, #26
 8005fb6:	fb01 f303 	mul.w	r3, r1, r3
 8005fba:	4413      	add	r3, r2
 8005fbc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	b25b      	sxtb	r3, r3
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	da16      	bge.n	8005ff6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	211a      	movs	r1, #26
 8005fce:	fb01 f303 	mul.w	r3, r1, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	211a      	movs	r1, #26
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8005fee:	881a      	ldrh	r2, [r3, #0]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	835a      	strh	r2, [r3, #26]
 8005ff4:	e015      	b.n	8006022 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ff6:	7bfb      	ldrb	r3, [r7, #15]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	211a      	movs	r1, #26
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	4413      	add	r3, r2
 8006002:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006006:	781a      	ldrb	r2, [r3, #0]
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	211a      	movs	r1, #26
 8006012:	fb01 f303 	mul.w	r3, r1, r3
 8006016:	4413      	add	r3, r2
 8006018:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800601c:	881a      	ldrh	r2, [r3, #0]
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	7b9b      	ldrb	r3, [r3, #14]
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 ff12 	bl	8006e52 <USBH_AllocPipe>
 800602e:	4603      	mov	r3, r0
 8006030:	461a      	mov	r2, r3
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7bdb      	ldrb	r3, [r3, #15]
 800603a:	4619      	mov	r1, r3
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 ff08 	bl	8006e52 <USBH_AllocPipe>
 8006042:	4603      	mov	r3, r0
 8006044:	461a      	mov	r2, r3
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	7b59      	ldrb	r1, [r3, #13]
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	7b98      	ldrb	r0, [r3, #14]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	8b12      	ldrh	r2, [r2, #24]
 8006062:	9202      	str	r2, [sp, #8]
 8006064:	2202      	movs	r2, #2
 8006066:	9201      	str	r2, [sp, #4]
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	4623      	mov	r3, r4
 800606c:	4602      	mov	r2, r0
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fec0 	bl	8006df4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	7b19      	ldrb	r1, [r3, #12]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	7bd8      	ldrb	r0, [r3, #15]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	8b52      	ldrh	r2, [r2, #26]
 800608c:	9202      	str	r2, [sp, #8]
 800608e:	2202      	movs	r2, #2
 8006090:	9201      	str	r2, [sp, #4]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	4623      	mov	r3, r4
 8006096:	4602      	mov	r2, r0
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 feab 	bl	8006df4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	7b5b      	ldrb	r3, [r3, #13]
 80060aa:	2200      	movs	r2, #0
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 f96a 	bl	8007388 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	7b1b      	ldrb	r3, [r3, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 f963 	bl	8007388 <USBH_LL_SetToggle>

  return USBH_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd90      	pop	{r4, r7, pc}

080060cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060da:	69db      	ldr	r3, [r3, #28]
 80060dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00e      	beq.n	8006104 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fea0 	bl	8006e32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	4619      	mov	r1, r3
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fecb 	bl	8006e94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	7b1b      	ldrb	r3, [r3, #12]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00e      	beq.n	800612a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	7b1b      	ldrb	r3, [r3, #12]
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fe8d 	bl	8006e32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	7b1b      	ldrb	r3, [r3, #12]
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 feb8 	bl	8006e94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	7b5b      	ldrb	r3, [r3, #13]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00e      	beq.n	8006150 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	7b5b      	ldrb	r3, [r3, #13]
 8006136:	4619      	mov	r1, r3
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fe7a 	bl	8006e32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	7b5b      	ldrb	r3, [r3, #13]
 8006142:	4619      	mov	r1, r3
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 fea5 	bl	8006e94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00b      	beq.n	8006174 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	4618      	mov	r0, r3
 8006166:	f001 f993 	bl	8007490 <free>
    phost->pActiveClass->pData = 0U;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006170:	2200      	movs	r2, #0
 8006172:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3340      	adds	r3, #64	@ 0x40
 8006194:	4619      	mov	r1, r3
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f8b1 	bl	80062fe <GetLineCoding>
 800619c:	4603      	mov	r3, r0
 800619e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d105      	bne.n	80061b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80061ac:	2102      	movs	r1, #2
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80061b2:	7afb      	ldrb	r3, [r7, #11]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80061c4:	2301      	movs	r3, #1
 80061c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d877      	bhi.n	80062d0 <USBH_CDC_Process+0x114>
 80061e0:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <USBH_CDC_Process+0x2c>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	080061fd 	.word	0x080061fd
 80061ec:	08006203 	.word	0x08006203
 80061f0:	08006233 	.word	0x08006233
 80061f4:	080062a7 	.word	0x080062a7
 80061f8:	080062b5 	.word	0x080062b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006200:	e06d      	b.n	80062de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f897 	bl	800633c <SetLineCoding>
 800620e:	4603      	mov	r3, r0
 8006210:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006212:	7bbb      	ldrb	r3, [r7, #14]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006220:	e058      	b.n	80062d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006222:	7bbb      	ldrb	r3, [r7, #14]
 8006224:	2b01      	cmp	r3, #1
 8006226:	d055      	beq.n	80062d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	2204      	movs	r2, #4
 800622c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006230:	e050      	b.n	80062d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	3340      	adds	r3, #64	@ 0x40
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 f860 	bl	80062fe <GetLineCoding>
 800623e:	4603      	mov	r3, r0
 8006240:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006242:	7bbb      	ldrb	r3, [r7, #14]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d126      	bne.n	8006296 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800625a:	791b      	ldrb	r3, [r3, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	d13b      	bne.n	80062d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800626a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800626c:	429a      	cmp	r2, r3
 800626e:	d133      	bne.n	80062d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800627a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800627c:	429a      	cmp	r2, r3
 800627e:	d12b      	bne.n	80062d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006288:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800628a:	429a      	cmp	r2, r3
 800628c:	d124      	bne.n	80062d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f958 	bl	8006544 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006294:	e020      	b.n	80062d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006296:	7bbb      	ldrb	r3, [r7, #14]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d01d      	beq.n	80062d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	2204      	movs	r2, #4
 80062a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80062a4:	e018      	b.n	80062d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 f867 	bl	800637a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8da 	bl	8006466 <CDC_ProcessReception>
      break;
 80062b2:	e014      	b.n	80062de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80062b4:	2100      	movs	r1, #0
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb27 	bl	800690a <USBH_ClrFeature>
 80062bc:	4603      	mov	r3, r0
 80062be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80062c0:	7bbb      	ldrb	r3, [r7, #14]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80062ce:	e005      	b.n	80062dc <USBH_CDC_Process+0x120>

    default:
      break;
 80062d0:	bf00      	nop
 80062d2:	e004      	b.n	80062de <USBH_CDC_Process+0x122>
      break;
 80062d4:	bf00      	nop
 80062d6:	e002      	b.n	80062de <USBH_CDC_Process+0x122>
      break;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <USBH_CDC_Process+0x122>
      break;
 80062dc:	bf00      	nop

  }

  return status;
 80062de:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	22a1      	movs	r2, #161	@ 0xa1
 800630c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2221      	movs	r2, #33	@ 0x21
 8006312:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2207      	movs	r2, #7
 8006324:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2207      	movs	r2, #7
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 fb10 	bl	8006952 <USBH_CtlReq>
 8006332:	4603      	mov	r3, r0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2221      	movs	r2, #33	@ 0x21
 800634a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2207      	movs	r2, #7
 8006362:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	2207      	movs	r2, #7
 8006368:	4619      	mov	r1, r3
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 faf1 	bl	8006952 <USBH_CtlReq>
 8006370:	4603      	mov	r3, r0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b086      	sub	sp, #24
 800637e:	af02      	add	r7, sp, #8
 8006380:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006388:	69db      	ldr	r3, [r3, #28]
 800638a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800638c:	2300      	movs	r3, #0
 800638e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006396:	2b01      	cmp	r3, #1
 8006398:	d002      	beq.n	80063a0 <CDC_ProcessTransmission+0x26>
 800639a:	2b02      	cmp	r3, #2
 800639c:	d023      	beq.n	80063e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800639e:	e05e      	b.n	800645e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	68fa      	ldr	r2, [r7, #12]
 80063a6:	8b12      	ldrh	r2, [r2, #24]
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d90b      	bls.n	80063c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	69d9      	ldr	r1, [r3, #28]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	8b1a      	ldrh	r2, [r3, #24]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	7b5b      	ldrb	r3, [r3, #13]
 80063b8:	2001      	movs	r0, #1
 80063ba:	9000      	str	r0, [sp, #0]
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fcd6 	bl	8006d6e <USBH_BulkSendData>
 80063c2:	e00b      	b.n	80063dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80063cc:	b29a      	uxth	r2, r3
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	7b5b      	ldrb	r3, [r3, #13]
 80063d2:	2001      	movs	r0, #1
 80063d4:	9000      	str	r0, [sp, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fcc9 	bl	8006d6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2202      	movs	r2, #2
 80063e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80063e4:	e03b      	b.n	800645e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	7b5b      	ldrb	r3, [r3, #13]
 80063ea:	4619      	mov	r1, r3
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 ffa1 	bl	8007334 <USBH_LL_GetURBState>
 80063f2:	4603      	mov	r3, r0
 80063f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80063f6:	7afb      	ldrb	r3, [r7, #11]
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	d128      	bne.n	800644e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	8b12      	ldrh	r2, [r2, #24]
 8006404:	4293      	cmp	r3, r2
 8006406:	d90e      	bls.n	8006426 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	8b12      	ldrh	r2, [r2, #24]
 8006410:	1a9a      	subs	r2, r3, r2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	8b12      	ldrh	r2, [r2, #24]
 800641e:	441a      	add	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	61da      	str	r2, [r3, #28]
 8006424:	e002      	b.n	800642c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800643c:	e00e      	b.n	800645c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f868 	bl	800651c <USBH_CDC_TransmitCallback>
      break;
 800644c:	e006      	b.n	800645c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800644e:	7afb      	ldrb	r3, [r7, #11]
 8006450:	2b02      	cmp	r3, #2
 8006452:	d103      	bne.n	800645c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800645c:	bf00      	nop
  }
}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b086      	sub	sp, #24
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006478:	2300      	movs	r3, #0
 800647a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006482:	2b03      	cmp	r3, #3
 8006484:	d002      	beq.n	800648c <CDC_ProcessReception+0x26>
 8006486:	2b04      	cmp	r3, #4
 8006488:	d00e      	beq.n	80064a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800648a:	e043      	b.n	8006514 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	6a19      	ldr	r1, [r3, #32]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	8b5a      	ldrh	r2, [r3, #26]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	7b1b      	ldrb	r3, [r3, #12]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fc8d 	bl	8006db8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	2204      	movs	r2, #4
 80064a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80064a6:	e035      	b.n	8006514 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	7b1b      	ldrb	r3, [r3, #12]
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 ff40 	bl	8007334 <USBH_LL_GetURBState>
 80064b4:	4603      	mov	r3, r0
 80064b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d129      	bne.n	8006512 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	7b1b      	ldrb	r3, [r3, #12]
 80064c2:	4619      	mov	r1, r3
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fea3 	bl	8007210 <USBH_LL_GetLastXferSize>
 80064ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d016      	beq.n	8006504 <CDC_ProcessReception+0x9e>
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	8b5b      	ldrh	r3, [r3, #26]
 80064da:	461a      	mov	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4293      	cmp	r3, r2
 80064e0:	d910      	bls.n	8006504 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6a1a      	ldr	r2, [r3, #32]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	441a      	add	r2, r3
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2203      	movs	r2, #3
 80064fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006502:	e006      	b.n	8006512 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 f80f 	bl	8006530 <USBH_CDC_ReceiveCallback>
      break;
 8006512:	bf00      	nop
  }
}
 8006514:	bf00      	nop
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800656c:	2302      	movs	r3, #2
 800656e:	e029      	b.n	80065c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	79fa      	ldrb	r2, [r7, #7]
 8006574:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006588:	68f8      	ldr	r0, [r7, #12]
 800658a:	f000 f81f 	bl	80065cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 fdb5 	bl	800712c <USBH_LL_Init>

  return USBH_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	e009      	b.n	80065f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	33e0      	adds	r3, #224	@ 0xe0
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	2200      	movs	r2, #0
 80065ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3301      	adds	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b0f      	cmp	r3, #15
 80065f6:	d9f2      	bls.n	80065de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
 80065fc:	e009      	b.n	8006612 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3301      	adds	r3, #1
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006618:	d3f1      	bcc.n	80065fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2240      	movs	r2, #64	@ 0x40
 800663e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	331c      	adds	r3, #28
 800666a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800666e:	2100      	movs	r1, #0
 8006670:	4618      	mov	r0, r3
 8006672:	f000 ffc3 	bl	80075fc <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800667c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006680:	2100      	movs	r1, #0
 8006682:	4618      	mov	r0, r3
 8006684:	f000 ffba 	bl	80075fc <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800668e:	2212      	movs	r2, #18
 8006690:	2100      	movs	r1, #0
 8006692:	4618      	mov	r0, r3
 8006694:	f000 ffb2 	bl	80075fc <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800669e:	223e      	movs	r2, #62	@ 0x3e
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 ffaa 	bl	80075fc <memset>

  return USBH_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d016      	beq.n	80066f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10e      	bne.n	80066ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	33de      	adds	r3, #222	@ 0xde
 80066e2:	6839      	ldr	r1, [r7, #0]
 80066e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
 80066ec:	e004      	b.n	80066f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80066ee:	2302      	movs	r3, #2
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	e001      	b.n	80066f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80066f4:	2302      	movs	r3, #2
 80066f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006706:	b480      	push	{r7}
 8006708:	b085      	sub	sp, #20
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	460b      	mov	r3, r1
 8006710:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	429a      	cmp	r2, r3
 8006720:	d204      	bcs.n	800672c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800672a:	e001      	b.n	8006730 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800672c:	2302      	movs	r3, #2
 800672e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800673e:	b480      	push	{r7}
 8006740:	b087      	sub	sp, #28
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	4608      	mov	r0, r1
 8006748:	4611      	mov	r1, r2
 800674a:	461a      	mov	r2, r3
 800674c:	4603      	mov	r3, r0
 800674e:	70fb      	strb	r3, [r7, #3]
 8006750:	460b      	mov	r3, r1
 8006752:	70bb      	strb	r3, [r7, #2]
 8006754:	4613      	mov	r3, r2
 8006756:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800675c:	2300      	movs	r3, #0
 800675e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006766:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006768:	e025      	b.n	80067b6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	221a      	movs	r2, #26
 800676e:	fb02 f303 	mul.w	r3, r2, r3
 8006772:	3308      	adds	r3, #8
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	3302      	adds	r3, #2
 800677a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	795b      	ldrb	r3, [r3, #5]
 8006780:	78fa      	ldrb	r2, [r7, #3]
 8006782:	429a      	cmp	r2, r3
 8006784:	d002      	beq.n	800678c <USBH_FindInterface+0x4e>
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	2bff      	cmp	r3, #255	@ 0xff
 800678a:	d111      	bne.n	80067b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006790:	78ba      	ldrb	r2, [r7, #2]
 8006792:	429a      	cmp	r2, r3
 8006794:	d002      	beq.n	800679c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006796:	78bb      	ldrb	r3, [r7, #2]
 8006798:	2bff      	cmp	r3, #255	@ 0xff
 800679a:	d109      	bne.n	80067b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80067a0:	787a      	ldrb	r2, [r7, #1]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d002      	beq.n	80067ac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80067a6:	787b      	ldrb	r3, [r7, #1]
 80067a8:	2bff      	cmp	r3, #255	@ 0xff
 80067aa:	d101      	bne.n	80067b0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80067ac:	7dfb      	ldrb	r3, [r7, #23]
 80067ae:	e006      	b.n	80067be <USBH_FindInterface+0x80>
    }
    if_ix++;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	3301      	adds	r3, #1
 80067b4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d9d6      	bls.n	800676a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80067bc:	23ff      	movs	r3, #255	@ 0xff
}
 80067be:	4618      	mov	r0, r3
 80067c0:	371c      	adds	r7, #28
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fce6 	bl	80071a4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80067d8:	2101      	movs	r1, #1
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fdbd 	bl	800735a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	683a      	ldr	r2, [r7, #0]
 80067f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f804 	bl	800682c <USBH_HandleSof>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b0b      	cmp	r3, #11
 800683c:	d10a      	bne.n	8006854 <USBH_HandleSof+0x28>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
  }
}
 8006854:	bf00      	nop
 8006856:	3708      	adds	r7, #8
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800686c:	bf00      	nop
}
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006888:	bf00      	nop
}
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b082      	sub	sp, #8
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80068e2:	6878      	ldr	r0, [r7, #4]
 80068e4:	f000 fc79 	bl	80071da <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	791b      	ldrb	r3, [r3, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fad0 	bl	8006e94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	795b      	ldrb	r3, [r3, #5]
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 faca 	bl	8006e94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3708      	adds	r7, #8
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b082      	sub	sp, #8
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
 8006912:	460b      	mov	r3, r1
 8006914:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	789b      	ldrb	r3, [r3, #2]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d10f      	bne.n	800693e <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006930:	78fb      	ldrb	r3, [r7, #3]
 8006932:	b29a      	uxth	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800693e:	2200      	movs	r2, #0
 8006940:	2100      	movs	r1, #0
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f805 	bl	8006952 <USBH_CtlReq>
 8006948:	4603      	mov	r3, r0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	4613      	mov	r3, r2
 800695e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006960:	2301      	movs	r3, #1
 8006962:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	789b      	ldrb	r3, [r3, #2]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d002      	beq.n	8006972 <USBH_CtlReq+0x20>
 800696c:	2b02      	cmp	r3, #2
 800696e:	d00f      	beq.n	8006990 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006970:	e027      	b.n	80069c2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	88fa      	ldrh	r2, [r7, #6]
 800697c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2201      	movs	r2, #1
 8006982:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2202      	movs	r2, #2
 8006988:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800698a:	2301      	movs	r3, #1
 800698c:	75fb      	strb	r3, [r7, #23]
      break;
 800698e:	e018      	b.n	80069c2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 f81b 	bl	80069cc <USBH_HandleControl>
 8006996:	4603      	mov	r3, r0
 8006998:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <USBH_CtlReq+0x54>
 80069a0:	7dfb      	ldrb	r3, [r7, #23]
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d106      	bne.n	80069b4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	761a      	strb	r2, [r3, #24]
      break;
 80069b2:	e005      	b.n	80069c0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80069b4:	7dfb      	ldrb	r3, [r7, #23]
 80069b6:	2b02      	cmp	r3, #2
 80069b8:	d102      	bne.n	80069c0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2201      	movs	r2, #1
 80069be:	709a      	strb	r2, [r3, #2]
      break;
 80069c0:	bf00      	nop
  }
  return status;
 80069c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80069d4:	2301      	movs	r3, #1
 80069d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069d8:	2300      	movs	r3, #0
 80069da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	7e1b      	ldrb	r3, [r3, #24]
 80069e0:	3b01      	subs	r3, #1
 80069e2:	2b0a      	cmp	r3, #10
 80069e4:	f200 8156 	bhi.w	8006c94 <USBH_HandleControl+0x2c8>
 80069e8:	a201      	add	r2, pc, #4	@ (adr r2, 80069f0 <USBH_HandleControl+0x24>)
 80069ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ee:	bf00      	nop
 80069f0:	08006a1d 	.word	0x08006a1d
 80069f4:	08006a37 	.word	0x08006a37
 80069f8:	08006aa1 	.word	0x08006aa1
 80069fc:	08006ac7 	.word	0x08006ac7
 8006a00:	08006aff 	.word	0x08006aff
 8006a04:	08006b29 	.word	0x08006b29
 8006a08:	08006b7b 	.word	0x08006b7b
 8006a0c:	08006b9d 	.word	0x08006b9d
 8006a10:	08006bd9 	.word	0x08006bd9
 8006a14:	08006bff 	.word	0x08006bff
 8006a18:	08006c3d 	.word	0x08006c3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f103 0110 	add.w	r1, r3, #16
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	795b      	ldrb	r3, [r3, #5]
 8006a26:	461a      	mov	r2, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 f943 	bl	8006cb4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2202      	movs	r2, #2
 8006a32:	761a      	strb	r2, [r3, #24]
      break;
 8006a34:	e139      	b.n	8006caa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	795b      	ldrb	r3, [r3, #5]
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fc79 	bl	8007334 <USBH_LL_GetURBState>
 8006a42:	4603      	mov	r3, r0
 8006a44:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006a46:	7bbb      	ldrb	r3, [r7, #14]
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d11e      	bne.n	8006a8a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	7c1b      	ldrb	r3, [r3, #16]
 8006a50:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a54:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	8adb      	ldrh	r3, [r3, #22]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00a      	beq.n	8006a74 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006a5e:	7b7b      	ldrb	r3, [r7, #13]
 8006a60:	2b80      	cmp	r3, #128	@ 0x80
 8006a62:	d103      	bne.n	8006a6c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2203      	movs	r2, #3
 8006a68:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006a6a:	e115      	b.n	8006c98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2205      	movs	r2, #5
 8006a70:	761a      	strb	r2, [r3, #24]
      break;
 8006a72:	e111      	b.n	8006c98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006a74:	7b7b      	ldrb	r3, [r7, #13]
 8006a76:	2b80      	cmp	r3, #128	@ 0x80
 8006a78:	d103      	bne.n	8006a82 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2209      	movs	r2, #9
 8006a7e:	761a      	strb	r2, [r3, #24]
      break;
 8006a80:	e10a      	b.n	8006c98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2207      	movs	r2, #7
 8006a86:	761a      	strb	r2, [r3, #24]
      break;
 8006a88:	e106      	b.n	8006c98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d003      	beq.n	8006a98 <USBH_HandleControl+0xcc>
 8006a90:	7bbb      	ldrb	r3, [r7, #14]
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	f040 8100 	bne.w	8006c98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	220b      	movs	r2, #11
 8006a9c:	761a      	strb	r2, [r3, #24]
      break;
 8006a9e:	e0fb      	b.n	8006c98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6899      	ldr	r1, [r3, #8]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	899a      	ldrh	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	791b      	ldrb	r3, [r3, #4]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 f93a 	bl	8006d32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	761a      	strb	r2, [r3, #24]
      break;
 8006ac4:	e0f1      	b.n	8006caa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	791b      	ldrb	r3, [r3, #4]
 8006aca:	4619      	mov	r1, r3
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fc31 	bl	8007334 <USBH_LL_GetURBState>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006ad6:	7bbb      	ldrb	r3, [r7, #14]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d102      	bne.n	8006ae2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2209      	movs	r2, #9
 8006ae0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	2b05      	cmp	r3, #5
 8006ae6:	d102      	bne.n	8006aee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006aec:	e0d6      	b.n	8006c9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	2b04      	cmp	r3, #4
 8006af2:	f040 80d3 	bne.w	8006c9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	220b      	movs	r2, #11
 8006afa:	761a      	strb	r2, [r3, #24]
      break;
 8006afc:	e0ce      	b.n	8006c9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6899      	ldr	r1, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	899a      	ldrh	r2, [r3, #12]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	795b      	ldrb	r3, [r3, #5]
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	9000      	str	r0, [sp, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 f8ea 	bl	8006ce8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2206      	movs	r2, #6
 8006b24:	761a      	strb	r2, [r3, #24]
      break;
 8006b26:	e0c0      	b.n	8006caa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	795b      	ldrb	r3, [r3, #5]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fc00 	bl	8007334 <USBH_LL_GetURBState>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d103      	bne.n	8006b46 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2207      	movs	r2, #7
 8006b42:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b44:	e0ac      	b.n	8006ca0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b05      	cmp	r3, #5
 8006b4a:	d105      	bne.n	8006b58 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	220c      	movs	r2, #12
 8006b50:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006b52:	2303      	movs	r3, #3
 8006b54:	73fb      	strb	r3, [r7, #15]
      break;
 8006b56:	e0a3      	b.n	8006ca0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006b58:	7bbb      	ldrb	r3, [r7, #14]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d103      	bne.n	8006b66 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2205      	movs	r2, #5
 8006b62:	761a      	strb	r2, [r3, #24]
      break;
 8006b64:	e09c      	b.n	8006ca0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006b66:	7bbb      	ldrb	r3, [r7, #14]
 8006b68:	2b04      	cmp	r3, #4
 8006b6a:	f040 8099 	bne.w	8006ca0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	220b      	movs	r2, #11
 8006b72:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006b74:	2302      	movs	r3, #2
 8006b76:	73fb      	strb	r3, [r7, #15]
      break;
 8006b78:	e092      	b.n	8006ca0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	791b      	ldrb	r3, [r3, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2100      	movs	r1, #0
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f8d5 	bl	8006d32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2208      	movs	r2, #8
 8006b98:	761a      	strb	r2, [r3, #24]

      break;
 8006b9a:	e086      	b.n	8006caa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	791b      	ldrb	r3, [r3, #4]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f000 fbc6 	bl	8007334 <USBH_LL_GetURBState>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006bac:	7bbb      	ldrb	r3, [r7, #14]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d105      	bne.n	8006bbe <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	220d      	movs	r2, #13
 8006bb6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006bbc:	e072      	b.n	8006ca4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006bbe:	7bbb      	ldrb	r3, [r7, #14]
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d103      	bne.n	8006bcc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	220b      	movs	r2, #11
 8006bc8:	761a      	strb	r2, [r3, #24]
      break;
 8006bca:	e06b      	b.n	8006ca4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d168      	bne.n	8006ca4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd6:	e065      	b.n	8006ca4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	795b      	ldrb	r3, [r3, #5]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	9200      	str	r2, [sp, #0]
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f87f 	bl	8006ce8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	761a      	strb	r2, [r3, #24]
      break;
 8006bfc:	e055      	b.n	8006caa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	795b      	ldrb	r3, [r3, #5]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fb95 	bl	8007334 <USBH_LL_GetURBState>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d105      	bne.n	8006c20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006c14:	2300      	movs	r3, #0
 8006c16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	220d      	movs	r2, #13
 8006c1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c1e:	e043      	b.n	8006ca8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c20:	7bbb      	ldrb	r3, [r7, #14]
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d103      	bne.n	8006c2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2209      	movs	r2, #9
 8006c2a:	761a      	strb	r2, [r3, #24]
      break;
 8006c2c:	e03c      	b.n	8006ca8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b04      	cmp	r3, #4
 8006c32:	d139      	bne.n	8006ca8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	220b      	movs	r2, #11
 8006c38:	761a      	strb	r2, [r3, #24]
      break;
 8006c3a:	e035      	b.n	8006ca8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	7e5b      	ldrb	r3, [r3, #25]
 8006c40:	3301      	adds	r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	765a      	strb	r2, [r3, #25]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	7e5b      	ldrb	r3, [r3, #25]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d806      	bhi.n	8006c5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2201      	movs	r2, #1
 8006c5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006c5c:	e025      	b.n	8006caa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c64:	2106      	movs	r1, #6
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	795b      	ldrb	r3, [r3, #5]
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f90c 	bl	8006e94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	791b      	ldrb	r3, [r3, #4]
 8006c80:	4619      	mov	r1, r3
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f906 	bl	8006e94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	73fb      	strb	r3, [r7, #15]
      break;
 8006c92:	e00a      	b.n	8006caa <USBH_HandleControl+0x2de>

    default:
      break;
 8006c94:	bf00      	nop
 8006c96:	e008      	b.n	8006caa <USBH_HandleControl+0x2de>
      break;
 8006c98:	bf00      	nop
 8006c9a:	e006      	b.n	8006caa <USBH_HandleControl+0x2de>
      break;
 8006c9c:	bf00      	nop
 8006c9e:	e004      	b.n	8006caa <USBH_HandleControl+0x2de>
      break;
 8006ca0:	bf00      	nop
 8006ca2:	e002      	b.n	8006caa <USBH_HandleControl+0x2de>
      break;
 8006ca4:	bf00      	nop
 8006ca6:	e000      	b.n	8006caa <USBH_HandleControl+0x2de>
      break;
 8006ca8:	bf00      	nop
  }

  return status;
 8006caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af04      	add	r7, sp, #16
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006cc2:	79f9      	ldrb	r1, [r7, #7]
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	9303      	str	r3, [sp, #12]
 8006cc8:	2308      	movs	r3, #8
 8006cca:	9302      	str	r3, [sp, #8]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 fafa 	bl	80072d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af04      	add	r7, sp, #16
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	460b      	mov	r3, r1
 8006cf8:	80fb      	strh	r3, [r7, #6]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d0c:	7979      	ldrb	r1, [r7, #5]
 8006d0e:	7e3b      	ldrb	r3, [r7, #24]
 8006d10:	9303      	str	r3, [sp, #12]
 8006d12:	88fb      	ldrh	r3, [r7, #6]
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	9301      	str	r3, [sp, #4]
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	2300      	movs	r3, #0
 8006d20:	2200      	movs	r2, #0
 8006d22:	68f8      	ldr	r0, [r7, #12]
 8006d24:	f000 fad5 	bl	80072d2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006d32:	b580      	push	{r7, lr}
 8006d34:	b088      	sub	sp, #32
 8006d36:	af04      	add	r7, sp, #16
 8006d38:	60f8      	str	r0, [r7, #12]
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	461a      	mov	r2, r3
 8006d40:	460b      	mov	r3, r1
 8006d42:	80fb      	strh	r3, [r7, #6]
 8006d44:	4613      	mov	r3, r2
 8006d46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d48:	7979      	ldrb	r1, [r7, #5]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9303      	str	r3, [sp, #12]
 8006d4e:	88fb      	ldrh	r3, [r7, #6]
 8006d50:	9302      	str	r3, [sp, #8]
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	9301      	str	r3, [sp, #4]
 8006d56:	2301      	movs	r3, #1
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f000 fab7 	bl	80072d2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006d64:	2300      	movs	r3, #0

}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b088      	sub	sp, #32
 8006d72:	af04      	add	r7, sp, #16
 8006d74:	60f8      	str	r0, [r7, #12]
 8006d76:	60b9      	str	r1, [r7, #8]
 8006d78:	4611      	mov	r1, r2
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	80fb      	strh	r3, [r7, #6]
 8006d80:	4613      	mov	r3, r2
 8006d82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d001      	beq.n	8006d92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006d92:	7979      	ldrb	r1, [r7, #5]
 8006d94:	7e3b      	ldrb	r3, [r7, #24]
 8006d96:	9303      	str	r3, [sp, #12]
 8006d98:	88fb      	ldrh	r3, [r7, #6]
 8006d9a:	9302      	str	r3, [sp, #8]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	9301      	str	r3, [sp, #4]
 8006da0:	2301      	movs	r3, #1
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2302      	movs	r3, #2
 8006da6:	2200      	movs	r2, #0
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fa92 	bl	80072d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af04      	add	r7, sp, #16
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	461a      	mov	r2, r3
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	80fb      	strh	r3, [r7, #6]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006dce:	7979      	ldrb	r1, [r7, #5]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9303      	str	r3, [sp, #12]
 8006dd4:	88fb      	ldrh	r3, [r7, #6]
 8006dd6:	9302      	str	r3, [sp, #8]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	2301      	movs	r3, #1
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	2302      	movs	r3, #2
 8006de2:	2201      	movs	r2, #1
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 fa74 	bl	80072d2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af04      	add	r7, sp, #16
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	70fb      	strb	r3, [r7, #3]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70bb      	strb	r3, [r7, #2]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006e0e:	7878      	ldrb	r0, [r7, #1]
 8006e10:	78ba      	ldrb	r2, [r7, #2]
 8006e12:	78f9      	ldrb	r1, [r7, #3]
 8006e14:	8b3b      	ldrh	r3, [r7, #24]
 8006e16:	9302      	str	r3, [sp, #8]
 8006e18:	7d3b      	ldrb	r3, [r7, #20]
 8006e1a:	9301      	str	r3, [sp, #4]
 8006e1c:	7c3b      	ldrb	r3, [r7, #16]
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	4603      	mov	r3, r0
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa07 	bl	8007236 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006e3e:	78fb      	ldrb	r3, [r7, #3]
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 fa26 	bl	8007294 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b084      	sub	sp, #16
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f836 	bl	8006ed0 <USBH_GetFreePipe>
 8006e64:	4603      	mov	r3, r0
 8006e66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006e68:	89fb      	ldrh	r3, [r7, #14]
 8006e6a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d00a      	beq.n	8006e88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	89fb      	ldrh	r3, [r7, #14]
 8006e76:	f003 030f 	and.w	r3, r3, #15
 8006e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	33e0      	adds	r3, #224	@ 0xe0
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	440b      	add	r3, r1
 8006e86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006e88:	89fb      	ldrh	r3, [r7, #14]
 8006e8a:	b2db      	uxtb	r3, r3
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d80d      	bhi.n	8006ec2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006ea6:	78fb      	ldrb	r3, [r7, #3]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	33e0      	adds	r3, #224	@ 0xe0
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	78fb      	ldrb	r3, [r7, #3]
 8006eb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	33e0      	adds	r3, #224	@ 0xe0
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e00f      	b.n	8006f02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	33e0      	adds	r3, #224	@ 0xe0
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	e007      	b.n	8006f0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	3301      	adds	r3, #1
 8006f00:	73fb      	strb	r3, [r7, #15]
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b0f      	cmp	r3, #15
 8006f06:	d9ec      	bls.n	8006ee2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3714      	adds	r7, #20
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	490e      	ldr	r1, [pc, #56]	@ (8006f58 <MX_USB_HOST_Init+0x40>)
 8006f20:	480e      	ldr	r0, [pc, #56]	@ (8006f5c <MX_USB_HOST_Init+0x44>)
 8006f22:	f7ff fb19 	bl	8006558 <USBH_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006f2c:	f7f9 fcfe 	bl	800092c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006f30:	490b      	ldr	r1, [pc, #44]	@ (8006f60 <MX_USB_HOST_Init+0x48>)
 8006f32:	480a      	ldr	r0, [pc, #40]	@ (8006f5c <MX_USB_HOST_Init+0x44>)
 8006f34:	f7ff fbbd 	bl	80066b2 <USBH_RegisterClass>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006f3e:	f7f9 fcf5 	bl	800092c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006f42:	4806      	ldr	r0, [pc, #24]	@ (8006f5c <MX_USB_HOST_Init+0x44>)
 8006f44:	f7ff fc41 	bl	80067ca <USBH_Start>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006f4e:	f7f9 fced 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006f52:	bf00      	nop
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	08006f65 	.word	0x08006f65
 8006f5c:	20000194 	.word	0x20000194
 8006f60:	2000000c 	.word	0x2000000c

08006f64 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d819      	bhi.n	8006fac <USBH_UserProcess+0x48>
 8006f78:	a201      	add	r2, pc, #4	@ (adr r2, 8006f80 <USBH_UserProcess+0x1c>)
 8006f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7e:	bf00      	nop
 8006f80:	08006fad 	.word	0x08006fad
 8006f84:	08006f9d 	.word	0x08006f9d
 8006f88:	08006fad 	.word	0x08006fad
 8006f8c:	08006fa5 	.word	0x08006fa5
 8006f90:	08006f95 	.word	0x08006f95
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006f94:	4b09      	ldr	r3, [pc, #36]	@ (8006fbc <USBH_UserProcess+0x58>)
 8006f96:	2203      	movs	r2, #3
 8006f98:	701a      	strb	r2, [r3, #0]
  break;
 8006f9a:	e008      	b.n	8006fae <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <USBH_UserProcess+0x58>)
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	701a      	strb	r2, [r3, #0]
  break;
 8006fa2:	e004      	b.n	8006fae <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <USBH_UserProcess+0x58>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	701a      	strb	r2, [r3, #0]
  break;
 8006faa:	e000      	b.n	8006fae <USBH_UserProcess+0x4a>

  default:
  break;
 8006fac:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	2000056c 	.word	0x2000056c

08006fc0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	@ 0x28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fc8:	f107 0314 	add.w	r3, r7, #20
 8006fcc:	2200      	movs	r2, #0
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	605a      	str	r2, [r3, #4]
 8006fd2:	609a      	str	r2, [r3, #8]
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fe0:	d147      	bne.n	8007072 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	4b25      	ldr	r3, [pc, #148]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fea:	4a24      	ldr	r2, [pc, #144]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 8006fec:	f043 0301 	orr.w	r3, r3, #1
 8006ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ff2:	4b22      	ldr	r3, [pc, #136]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 8006ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006ffe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007004:	2300      	movs	r3, #0
 8007006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007008:	2300      	movs	r3, #0
 800700a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800700c:	f107 0314 	add.w	r3, r7, #20
 8007010:	4619      	mov	r1, r3
 8007012:	481b      	ldr	r0, [pc, #108]	@ (8007080 <HAL_HCD_MspInit+0xc0>)
 8007014:	f7fa f804 	bl	8001020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007018:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800701c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800701e:	2302      	movs	r3, #2
 8007020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007022:	2300      	movs	r3, #0
 8007024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007026:	2300      	movs	r3, #0
 8007028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800702a:	230a      	movs	r3, #10
 800702c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800702e:	f107 0314 	add.w	r3, r7, #20
 8007032:	4619      	mov	r1, r3
 8007034:	4812      	ldr	r0, [pc, #72]	@ (8007080 <HAL_HCD_MspInit+0xc0>)
 8007036:	f7f9 fff3 	bl	8001020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800703a:	4b10      	ldr	r3, [pc, #64]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 800703c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800703e:	4a0f      	ldr	r2, [pc, #60]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 8007040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007044:	6353      	str	r3, [r2, #52]	@ 0x34
 8007046:	2300      	movs	r3, #0
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	4b0c      	ldr	r3, [pc, #48]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	4a0b      	ldr	r2, [pc, #44]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 8007050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007054:	6453      	str	r3, [r2, #68]	@ 0x44
 8007056:	4b09      	ldr	r3, [pc, #36]	@ (800707c <HAL_HCD_MspInit+0xbc>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007062:	2200      	movs	r2, #0
 8007064:	2100      	movs	r1, #0
 8007066:	2043      	movs	r0, #67	@ 0x43
 8007068:	f7f9 ffa3 	bl	8000fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800706c:	2043      	movs	r0, #67	@ 0x43
 800706e:	f7f9 ffbc 	bl	8000fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007072:	bf00      	nop
 8007074:	3728      	adds	r7, #40	@ 0x28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	40020000 	.word	0x40020000

08007084 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007092:	4618      	mov	r0, r3
 8007094:	f7ff fbb8 	bl	8006808 <USBH_LL_IncTimer>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fbf0 	bl	8006894 <USBH_LL_Connect>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7ff fbf9 	bl	80068c2 <USBH_LL_Disconnect>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	460b      	mov	r3, r1
 80070e2:	70fb      	strb	r3, [r7, #3]
 80070e4:	4613      	mov	r3, r2
 80070e6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007102:	4618      	mov	r0, r3
 8007104:	f7ff fbaa 	bl	800685c <USBH_LL_PortEnabled>
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800711e:	4618      	mov	r0, r3
 8007120:	f7ff fbaa 	bl	8006878 <USBH_LL_PortDisabled>
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800713a:	2b01      	cmp	r3, #1
 800713c:	d12a      	bne.n	8007194 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800713e:	4a18      	ldr	r2, [pc, #96]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a15      	ldr	r2, [pc, #84]	@ (80071a0 <USBH_LL_Init+0x74>)
 800714a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800714e:	4b14      	ldr	r3, [pc, #80]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007150:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007154:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007156:	4b12      	ldr	r3, [pc, #72]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007158:	2208      	movs	r2, #8
 800715a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800715c:	4b10      	ldr	r3, [pc, #64]	@ (80071a0 <USBH_LL_Init+0x74>)
 800715e:	2201      	movs	r2, #1
 8007160:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007162:	4b0f      	ldr	r3, [pc, #60]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007164:	2200      	movs	r2, #0
 8007166:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007168:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <USBH_LL_Init+0x74>)
 800716a:	2202      	movs	r2, #2
 800716c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800716e:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007170:	2200      	movs	r2, #0
 8007172:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007174:	480a      	ldr	r0, [pc, #40]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007176:	f7fa f908 	bl	800138a <HAL_HCD_Init>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007180:	f7f9 fbd4 	bl	800092c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007184:	4806      	ldr	r0, [pc, #24]	@ (80071a0 <USBH_LL_Init+0x74>)
 8007186:	f7fa fd5b 	bl	8001c40 <HAL_HCD_GetCurrentFrame>
 800718a:	4603      	mov	r3, r0
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7ff fb2b 	bl	80067ea <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	20000570 	.word	0x20000570

080071a4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fa fcd6 	bl	8001b6c <HAL_HCD_Start>
 80071c0:	4603      	mov	r3, r0
 80071c2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 f912 	bl	80073f0 <USBH_Get_USB_Status>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fa fcde 	bl	8001bb2 <HAL_HCD_Stop>
 80071f6:	4603      	mov	r3, r0
 80071f8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80071fa:	7bfb      	ldrb	r3, [r7, #15]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f8f7 	bl	80073f0 <USBH_Get_USB_Status>
 8007202:	4603      	mov	r3, r0
 8007204:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007206:	7bbb      	ldrb	r3, [r7, #14]
}
 8007208:	4618      	mov	r0, r3
 800720a:	3710      	adds	r7, #16
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b082      	sub	sp, #8
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
 8007218:	460b      	mov	r3, r1
 800721a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007222:	78fa      	ldrb	r2, [r7, #3]
 8007224:	4611      	mov	r1, r2
 8007226:	4618      	mov	r0, r3
 8007228:	f7fa fcf5 	bl	8001c16 <HAL_HCD_HC_GetXferCount>
 800722c:	4603      	mov	r3, r0
}
 800722e:	4618      	mov	r0, r3
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007236:	b590      	push	{r4, r7, lr}
 8007238:	b089      	sub	sp, #36	@ 0x24
 800723a:	af04      	add	r7, sp, #16
 800723c:	6078      	str	r0, [r7, #4]
 800723e:	4608      	mov	r0, r1
 8007240:	4611      	mov	r1, r2
 8007242:	461a      	mov	r2, r3
 8007244:	4603      	mov	r3, r0
 8007246:	70fb      	strb	r3, [r7, #3]
 8007248:	460b      	mov	r3, r1
 800724a:	70bb      	strb	r3, [r7, #2]
 800724c:	4613      	mov	r3, r2
 800724e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007250:	2300      	movs	r3, #0
 8007252:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800725e:	787c      	ldrb	r4, [r7, #1]
 8007260:	78ba      	ldrb	r2, [r7, #2]
 8007262:	78f9      	ldrb	r1, [r7, #3]
 8007264:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007266:	9302      	str	r3, [sp, #8]
 8007268:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800726c:	9301      	str	r3, [sp, #4]
 800726e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4623      	mov	r3, r4
 8007276:	f7fa f8ef 	bl	8001458 <HAL_HCD_HC_Init>
 800727a:	4603      	mov	r3, r0
 800727c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	4618      	mov	r0, r3
 8007282:	f000 f8b5 	bl	80073f0 <USBH_Get_USB_Status>
 8007286:	4603      	mov	r3, r0
 8007288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800728a:	7bbb      	ldrb	r3, [r7, #14]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	bd90      	pop	{r4, r7, pc}

08007294 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80072ae:	78fa      	ldrb	r2, [r7, #3]
 80072b0:	4611      	mov	r1, r2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fa f988 	bl	80015c8 <HAL_HCD_HC_Halt>
 80072b8:	4603      	mov	r3, r0
 80072ba:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072bc:	7bfb      	ldrb	r3, [r7, #15]
 80072be:	4618      	mov	r0, r3
 80072c0:	f000 f896 	bl	80073f0 <USBH_Get_USB_Status>
 80072c4:	4603      	mov	r3, r0
 80072c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80072d2:	b590      	push	{r4, r7, lr}
 80072d4:	b089      	sub	sp, #36	@ 0x24
 80072d6:	af04      	add	r7, sp, #16
 80072d8:	6078      	str	r0, [r7, #4]
 80072da:	4608      	mov	r0, r1
 80072dc:	4611      	mov	r1, r2
 80072de:	461a      	mov	r2, r3
 80072e0:	4603      	mov	r3, r0
 80072e2:	70fb      	strb	r3, [r7, #3]
 80072e4:	460b      	mov	r3, r1
 80072e6:	70bb      	strb	r3, [r7, #2]
 80072e8:	4613      	mov	r3, r2
 80072ea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80072fa:	787c      	ldrb	r4, [r7, #1]
 80072fc:	78ba      	ldrb	r2, [r7, #2]
 80072fe:	78f9      	ldrb	r1, [r7, #3]
 8007300:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007304:	9303      	str	r3, [sp, #12]
 8007306:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007308:	9302      	str	r3, [sp, #8]
 800730a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730c:	9301      	str	r3, [sp, #4]
 800730e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	4623      	mov	r3, r4
 8007316:	f7fa f97b 	bl	8001610 <HAL_HCD_HC_SubmitRequest>
 800731a:	4603      	mov	r3, r0
 800731c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 f865 	bl	80073f0 <USBH_Get_USB_Status>
 8007326:	4603      	mov	r3, r0
 8007328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800732a:	7bbb      	ldrb	r3, [r7, #14]
}
 800732c:	4618      	mov	r0, r3
 800732e:	3714      	adds	r7, #20
 8007330:	46bd      	mov	sp, r7
 8007332:	bd90      	pop	{r4, r7, pc}

08007334 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fa fc4e 	bl	8001bec <HAL_HCD_HC_GetURBState>
 8007350:	4603      	mov	r3, r0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
 8007362:	460b      	mov	r3, r1
 8007364:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800736c:	2b01      	cmp	r3, #1
 800736e:	d103      	bne.n	8007378 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	4618      	mov	r0, r3
 8007374:	f000 f868 	bl	8007448 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007378:	20c8      	movs	r0, #200	@ 0xc8
 800737a:	f7f9 fd1b 	bl	8000db4 <HAL_Delay>
  return USBH_OK;
 800737e:	2300      	movs	r3, #0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
 8007394:	4613      	mov	r3, r2
 8007396:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800739e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80073a0:	78fa      	ldrb	r2, [r7, #3]
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	4613      	mov	r3, r2
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	1a9b      	subs	r3, r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	440b      	add	r3, r1
 80073ae:	3317      	adds	r3, #23
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00a      	beq.n	80073cc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80073b6:	78fa      	ldrb	r2, [r7, #3]
 80073b8:	68f9      	ldr	r1, [r7, #12]
 80073ba:	4613      	mov	r3, r2
 80073bc:	011b      	lsls	r3, r3, #4
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	440b      	add	r3, r1
 80073c4:	333c      	adds	r3, #60	@ 0x3c
 80073c6:	78ba      	ldrb	r2, [r7, #2]
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e009      	b.n	80073e0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	4613      	mov	r3, r2
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	333d      	adds	r3, #61	@ 0x3d
 80073dc:	78ba      	ldrb	r2, [r7, #2]
 80073de:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80073fe:	79fb      	ldrb	r3, [r7, #7]
 8007400:	2b03      	cmp	r3, #3
 8007402:	d817      	bhi.n	8007434 <USBH_Get_USB_Status+0x44>
 8007404:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <USBH_Get_USB_Status+0x1c>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	0800741d 	.word	0x0800741d
 8007410:	08007423 	.word	0x08007423
 8007414:	08007429 	.word	0x08007429
 8007418:	0800742f 	.word	0x0800742f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
    break;
 8007420:	e00b      	b.n	800743a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007422:	2302      	movs	r3, #2
 8007424:	73fb      	strb	r3, [r7, #15]
    break;
 8007426:	e008      	b.n	800743a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
    break;
 800742c:	e005      	b.n	800743a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800742e:	2302      	movs	r3, #2
 8007430:	73fb      	strb	r3, [r7, #15]
    break;
 8007432:	e002      	b.n	800743a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8007434:	2302      	movs	r3, #2
 8007436:	73fb      	strb	r3, [r7, #15]
    break;
 8007438:	bf00      	nop
  }
  return usb_status;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b084      	sub	sp, #16
 800744c:	af00      	add	r7, sp, #0
 800744e:	4603      	mov	r3, r0
 8007450:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8007452:	79fb      	ldrb	r3, [r7, #7]
 8007454:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8007456:	79fb      	ldrb	r3, [r7, #7]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800745c:	2300      	movs	r3, #0
 800745e:	73fb      	strb	r3, [r7, #15]
 8007460:	e001      	b.n	8007466 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8007462:	2301      	movs	r3, #1
 8007464:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8007466:	7bfb      	ldrb	r3, [r7, #15]
 8007468:	461a      	mov	r2, r3
 800746a:	2101      	movs	r1, #1
 800746c:	4803      	ldr	r0, [pc, #12]	@ (800747c <MX_DriverVbusFS+0x34>)
 800746e:	f7f9 ff73 	bl	8001358 <HAL_GPIO_WritePin>
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	40020800 	.word	0x40020800

08007480 <malloc>:
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <malloc+0xc>)
 8007482:	4601      	mov	r1, r0
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	f000 b82d 	b.w	80074e4 <_malloc_r>
 800748a:	bf00      	nop
 800748c:	2000002c 	.word	0x2000002c

08007490 <free>:
 8007490:	4b02      	ldr	r3, [pc, #8]	@ (800749c <free+0xc>)
 8007492:	4601      	mov	r1, r0
 8007494:	6818      	ldr	r0, [r3, #0]
 8007496:	f000 b8f5 	b.w	8007684 <_free_r>
 800749a:	bf00      	nop
 800749c:	2000002c 	.word	0x2000002c

080074a0 <sbrk_aligned>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	4e0f      	ldr	r6, [pc, #60]	@ (80074e0 <sbrk_aligned+0x40>)
 80074a4:	460c      	mov	r4, r1
 80074a6:	6831      	ldr	r1, [r6, #0]
 80074a8:	4605      	mov	r5, r0
 80074aa:	b911      	cbnz	r1, 80074b2 <sbrk_aligned+0x12>
 80074ac:	f000 f8ae 	bl	800760c <_sbrk_r>
 80074b0:	6030      	str	r0, [r6, #0]
 80074b2:	4621      	mov	r1, r4
 80074b4:	4628      	mov	r0, r5
 80074b6:	f000 f8a9 	bl	800760c <_sbrk_r>
 80074ba:	1c43      	adds	r3, r0, #1
 80074bc:	d103      	bne.n	80074c6 <sbrk_aligned+0x26>
 80074be:	f04f 34ff 	mov.w	r4, #4294967295
 80074c2:	4620      	mov	r0, r4
 80074c4:	bd70      	pop	{r4, r5, r6, pc}
 80074c6:	1cc4      	adds	r4, r0, #3
 80074c8:	f024 0403 	bic.w	r4, r4, #3
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	d0f8      	beq.n	80074c2 <sbrk_aligned+0x22>
 80074d0:	1a21      	subs	r1, r4, r0
 80074d2:	4628      	mov	r0, r5
 80074d4:	f000 f89a 	bl	800760c <_sbrk_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	d1f2      	bne.n	80074c2 <sbrk_aligned+0x22>
 80074dc:	e7ef      	b.n	80074be <sbrk_aligned+0x1e>
 80074de:	bf00      	nop
 80074e0:	20000950 	.word	0x20000950

080074e4 <_malloc_r>:
 80074e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e8:	1ccd      	adds	r5, r1, #3
 80074ea:	f025 0503 	bic.w	r5, r5, #3
 80074ee:	3508      	adds	r5, #8
 80074f0:	2d0c      	cmp	r5, #12
 80074f2:	bf38      	it	cc
 80074f4:	250c      	movcc	r5, #12
 80074f6:	2d00      	cmp	r5, #0
 80074f8:	4606      	mov	r6, r0
 80074fa:	db01      	blt.n	8007500 <_malloc_r+0x1c>
 80074fc:	42a9      	cmp	r1, r5
 80074fe:	d904      	bls.n	800750a <_malloc_r+0x26>
 8007500:	230c      	movs	r3, #12
 8007502:	6033      	str	r3, [r6, #0]
 8007504:	2000      	movs	r0, #0
 8007506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800750a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075e0 <_malloc_r+0xfc>
 800750e:	f000 f869 	bl	80075e4 <__malloc_lock>
 8007512:	f8d8 3000 	ldr.w	r3, [r8]
 8007516:	461c      	mov	r4, r3
 8007518:	bb44      	cbnz	r4, 800756c <_malloc_r+0x88>
 800751a:	4629      	mov	r1, r5
 800751c:	4630      	mov	r0, r6
 800751e:	f7ff ffbf 	bl	80074a0 <sbrk_aligned>
 8007522:	1c43      	adds	r3, r0, #1
 8007524:	4604      	mov	r4, r0
 8007526:	d158      	bne.n	80075da <_malloc_r+0xf6>
 8007528:	f8d8 4000 	ldr.w	r4, [r8]
 800752c:	4627      	mov	r7, r4
 800752e:	2f00      	cmp	r7, #0
 8007530:	d143      	bne.n	80075ba <_malloc_r+0xd6>
 8007532:	2c00      	cmp	r4, #0
 8007534:	d04b      	beq.n	80075ce <_malloc_r+0xea>
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	4639      	mov	r1, r7
 800753a:	4630      	mov	r0, r6
 800753c:	eb04 0903 	add.w	r9, r4, r3
 8007540:	f000 f864 	bl	800760c <_sbrk_r>
 8007544:	4581      	cmp	r9, r0
 8007546:	d142      	bne.n	80075ce <_malloc_r+0xea>
 8007548:	6821      	ldr	r1, [r4, #0]
 800754a:	1a6d      	subs	r5, r5, r1
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffa6 	bl	80074a0 <sbrk_aligned>
 8007554:	3001      	adds	r0, #1
 8007556:	d03a      	beq.n	80075ce <_malloc_r+0xea>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	442b      	add	r3, r5
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	f8d8 3000 	ldr.w	r3, [r8]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	bb62      	cbnz	r2, 80075c0 <_malloc_r+0xdc>
 8007566:	f8c8 7000 	str.w	r7, [r8]
 800756a:	e00f      	b.n	800758c <_malloc_r+0xa8>
 800756c:	6822      	ldr	r2, [r4, #0]
 800756e:	1b52      	subs	r2, r2, r5
 8007570:	d420      	bmi.n	80075b4 <_malloc_r+0xd0>
 8007572:	2a0b      	cmp	r2, #11
 8007574:	d917      	bls.n	80075a6 <_malloc_r+0xc2>
 8007576:	1961      	adds	r1, r4, r5
 8007578:	42a3      	cmp	r3, r4
 800757a:	6025      	str	r5, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	6059      	strne	r1, [r3, #4]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	bf08      	it	eq
 8007584:	f8c8 1000 	streq.w	r1, [r8]
 8007588:	5162      	str	r2, [r4, r5]
 800758a:	604b      	str	r3, [r1, #4]
 800758c:	4630      	mov	r0, r6
 800758e:	f000 f82f 	bl	80075f0 <__malloc_unlock>
 8007592:	f104 000b 	add.w	r0, r4, #11
 8007596:	1d23      	adds	r3, r4, #4
 8007598:	f020 0007 	bic.w	r0, r0, #7
 800759c:	1ac2      	subs	r2, r0, r3
 800759e:	bf1c      	itt	ne
 80075a0:	1a1b      	subne	r3, r3, r0
 80075a2:	50a3      	strne	r3, [r4, r2]
 80075a4:	e7af      	b.n	8007506 <_malloc_r+0x22>
 80075a6:	6862      	ldr	r2, [r4, #4]
 80075a8:	42a3      	cmp	r3, r4
 80075aa:	bf0c      	ite	eq
 80075ac:	f8c8 2000 	streq.w	r2, [r8]
 80075b0:	605a      	strne	r2, [r3, #4]
 80075b2:	e7eb      	b.n	800758c <_malloc_r+0xa8>
 80075b4:	4623      	mov	r3, r4
 80075b6:	6864      	ldr	r4, [r4, #4]
 80075b8:	e7ae      	b.n	8007518 <_malloc_r+0x34>
 80075ba:	463c      	mov	r4, r7
 80075bc:	687f      	ldr	r7, [r7, #4]
 80075be:	e7b6      	b.n	800752e <_malloc_r+0x4a>
 80075c0:	461a      	mov	r2, r3
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	42a3      	cmp	r3, r4
 80075c6:	d1fb      	bne.n	80075c0 <_malloc_r+0xdc>
 80075c8:	2300      	movs	r3, #0
 80075ca:	6053      	str	r3, [r2, #4]
 80075cc:	e7de      	b.n	800758c <_malloc_r+0xa8>
 80075ce:	230c      	movs	r3, #12
 80075d0:	6033      	str	r3, [r6, #0]
 80075d2:	4630      	mov	r0, r6
 80075d4:	f000 f80c 	bl	80075f0 <__malloc_unlock>
 80075d8:	e794      	b.n	8007504 <_malloc_r+0x20>
 80075da:	6005      	str	r5, [r0, #0]
 80075dc:	e7d6      	b.n	800758c <_malloc_r+0xa8>
 80075de:	bf00      	nop
 80075e0:	20000954 	.word	0x20000954

080075e4 <__malloc_lock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__malloc_lock+0x8>)
 80075e6:	f000 b84b 	b.w	8007680 <__retarget_lock_acquire_recursive>
 80075ea:	bf00      	nop
 80075ec:	20000a94 	.word	0x20000a94

080075f0 <__malloc_unlock>:
 80075f0:	4801      	ldr	r0, [pc, #4]	@ (80075f8 <__malloc_unlock+0x8>)
 80075f2:	f000 b846 	b.w	8007682 <__retarget_lock_release_recursive>
 80075f6:	bf00      	nop
 80075f8:	20000a94 	.word	0x20000a94

080075fc <memset>:
 80075fc:	4402      	add	r2, r0
 80075fe:	4603      	mov	r3, r0
 8007600:	4293      	cmp	r3, r2
 8007602:	d100      	bne.n	8007606 <memset+0xa>
 8007604:	4770      	bx	lr
 8007606:	f803 1b01 	strb.w	r1, [r3], #1
 800760a:	e7f9      	b.n	8007600 <memset+0x4>

0800760c <_sbrk_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	@ (8007628 <_sbrk_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7f9 fae8 	bl	8000bec <_sbrk>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_sbrk_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_sbrk_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000a90 	.word	0x20000a90

0800762c <__errno>:
 800762c:	4b01      	ldr	r3, [pc, #4]	@ (8007634 <__errno+0x8>)
 800762e:	6818      	ldr	r0, [r3, #0]
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	2000002c 	.word	0x2000002c

08007638 <__libc_init_array>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4d0d      	ldr	r5, [pc, #52]	@ (8007670 <__libc_init_array+0x38>)
 800763c:	4c0d      	ldr	r4, [pc, #52]	@ (8007674 <__libc_init_array+0x3c>)
 800763e:	1b64      	subs	r4, r4, r5
 8007640:	10a4      	asrs	r4, r4, #2
 8007642:	2600      	movs	r6, #0
 8007644:	42a6      	cmp	r6, r4
 8007646:	d109      	bne.n	800765c <__libc_init_array+0x24>
 8007648:	4d0b      	ldr	r5, [pc, #44]	@ (8007678 <__libc_init_array+0x40>)
 800764a:	4c0c      	ldr	r4, [pc, #48]	@ (800767c <__libc_init_array+0x44>)
 800764c:	f000 f864 	bl	8007718 <_init>
 8007650:	1b64      	subs	r4, r4, r5
 8007652:	10a4      	asrs	r4, r4, #2
 8007654:	2600      	movs	r6, #0
 8007656:	42a6      	cmp	r6, r4
 8007658:	d105      	bne.n	8007666 <__libc_init_array+0x2e>
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007660:	4798      	blx	r3
 8007662:	3601      	adds	r6, #1
 8007664:	e7ee      	b.n	8007644 <__libc_init_array+0xc>
 8007666:	f855 3b04 	ldr.w	r3, [r5], #4
 800766a:	4798      	blx	r3
 800766c:	3601      	adds	r6, #1
 800766e:	e7f2      	b.n	8007656 <__libc_init_array+0x1e>
 8007670:	08007754 	.word	0x08007754
 8007674:	08007754 	.word	0x08007754
 8007678:	08007754 	.word	0x08007754
 800767c:	08007758 	.word	0x08007758

08007680 <__retarget_lock_acquire_recursive>:
 8007680:	4770      	bx	lr

08007682 <__retarget_lock_release_recursive>:
 8007682:	4770      	bx	lr

08007684 <_free_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4605      	mov	r5, r0
 8007688:	2900      	cmp	r1, #0
 800768a:	d041      	beq.n	8007710 <_free_r+0x8c>
 800768c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007690:	1f0c      	subs	r4, r1, #4
 8007692:	2b00      	cmp	r3, #0
 8007694:	bfb8      	it	lt
 8007696:	18e4      	addlt	r4, r4, r3
 8007698:	f7ff ffa4 	bl	80075e4 <__malloc_lock>
 800769c:	4a1d      	ldr	r2, [pc, #116]	@ (8007714 <_free_r+0x90>)
 800769e:	6813      	ldr	r3, [r2, #0]
 80076a0:	b933      	cbnz	r3, 80076b0 <_free_r+0x2c>
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	6014      	str	r4, [r2, #0]
 80076a6:	4628      	mov	r0, r5
 80076a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ac:	f7ff bfa0 	b.w	80075f0 <__malloc_unlock>
 80076b0:	42a3      	cmp	r3, r4
 80076b2:	d908      	bls.n	80076c6 <_free_r+0x42>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	1821      	adds	r1, r4, r0
 80076b8:	428b      	cmp	r3, r1
 80076ba:	bf01      	itttt	eq
 80076bc:	6819      	ldreq	r1, [r3, #0]
 80076be:	685b      	ldreq	r3, [r3, #4]
 80076c0:	1809      	addeq	r1, r1, r0
 80076c2:	6021      	streq	r1, [r4, #0]
 80076c4:	e7ed      	b.n	80076a2 <_free_r+0x1e>
 80076c6:	461a      	mov	r2, r3
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	b10b      	cbz	r3, 80076d0 <_free_r+0x4c>
 80076cc:	42a3      	cmp	r3, r4
 80076ce:	d9fa      	bls.n	80076c6 <_free_r+0x42>
 80076d0:	6811      	ldr	r1, [r2, #0]
 80076d2:	1850      	adds	r0, r2, r1
 80076d4:	42a0      	cmp	r0, r4
 80076d6:	d10b      	bne.n	80076f0 <_free_r+0x6c>
 80076d8:	6820      	ldr	r0, [r4, #0]
 80076da:	4401      	add	r1, r0
 80076dc:	1850      	adds	r0, r2, r1
 80076de:	4283      	cmp	r3, r0
 80076e0:	6011      	str	r1, [r2, #0]
 80076e2:	d1e0      	bne.n	80076a6 <_free_r+0x22>
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	6053      	str	r3, [r2, #4]
 80076ea:	4408      	add	r0, r1
 80076ec:	6010      	str	r0, [r2, #0]
 80076ee:	e7da      	b.n	80076a6 <_free_r+0x22>
 80076f0:	d902      	bls.n	80076f8 <_free_r+0x74>
 80076f2:	230c      	movs	r3, #12
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	e7d6      	b.n	80076a6 <_free_r+0x22>
 80076f8:	6820      	ldr	r0, [r4, #0]
 80076fa:	1821      	adds	r1, r4, r0
 80076fc:	428b      	cmp	r3, r1
 80076fe:	bf04      	itt	eq
 8007700:	6819      	ldreq	r1, [r3, #0]
 8007702:	685b      	ldreq	r3, [r3, #4]
 8007704:	6063      	str	r3, [r4, #4]
 8007706:	bf04      	itt	eq
 8007708:	1809      	addeq	r1, r1, r0
 800770a:	6021      	streq	r1, [r4, #0]
 800770c:	6054      	str	r4, [r2, #4]
 800770e:	e7ca      	b.n	80076a6 <_free_r+0x22>
 8007710:	bd38      	pop	{r3, r4, r5, pc}
 8007712:	bf00      	nop
 8007714:	20000954 	.word	0x20000954

08007718 <_init>:
 8007718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771a:	bf00      	nop
 800771c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800771e:	bc08      	pop	{r3}
 8007720:	469e      	mov	lr, r3
 8007722:	4770      	bx	lr

08007724 <_fini>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	bf00      	nop
 8007728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772a:	bc08      	pop	{r3}
 800772c:	469e      	mov	lr, r3
 800772e:	4770      	bx	lr
