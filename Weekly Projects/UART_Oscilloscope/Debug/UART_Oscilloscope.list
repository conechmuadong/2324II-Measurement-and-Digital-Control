
UART_Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007818  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080079a0  080079a0  000089a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079bc  080079bc  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  080079bc  080079bc  000089bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079c4  080079c4  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079c4  080079c4  000089c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079c8  080079c8  000089c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080079cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000907c  2**0
                  CONTENTS
 10 .bss          000009b8  2000007c  2000007c  0000907c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a34  20000a34  0000907c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001294b  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031c4  00000000  00000000  0001b9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db8  00000000  00000000  0001ebc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5c  00000000  00000000  0001f978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000239a7  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013031  00000000  00000000  00043d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d46c6  00000000  00000000  00056dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b472  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b30  00000000  00000000  0012b4b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000bb  00000000  00000000  0012efe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007988 	.word	0x08007988

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08007988 	.word	0x08007988

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 fbd7 	bl	8000c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f829 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c6:	f000 f90f 	bl	80006e8 <MX_GPIO_Init>
  MX_USB_HOST_Init();
 80004ca:	f006 fe5d 	bl	8007188 <MX_USB_HOST_Init>
  MX_UART5_Init();
 80004ce:	f000 f8e1 	bl	8000694 <MX_UART5_Init>
  MX_ADC1_Init();
 80004d2:	f000 f88b 	bl	80005ec <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t value = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	71fb      	strb	r3, [r7, #7]
	  if (HAL_ADC_PollForConversion(&hadc1, 10)==HAL_OK){
 80004da:	210a      	movs	r1, #10
 80004dc:	480c      	ldr	r0, [pc, #48]	@ (8000510 <main+0x58>)
 80004de:	f000 fd73 	bl	8000fc8 <HAL_ADC_PollForConversion>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d108      	bne.n	80004fa <main+0x42>
		  value = (uint8_t)HAL_ADC_GetValue(&hadc1);
 80004e8:	4809      	ldr	r0, [pc, #36]	@ (8000510 <main+0x58>)
 80004ea:	f000 fdf8 	bl	80010de <HAL_ADC_GetValue>
 80004ee:	4603      	mov	r3, r0
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	71fb      	strb	r3, [r7, #7]
		  HAL_ADC_Start(&hadc1);
 80004f4:	4806      	ldr	r0, [pc, #24]	@ (8000510 <main+0x58>)
 80004f6:	f000 fc95 	bl	8000e24 <HAL_ADC_Start>
	  }

//	  if (HAL_UART_Receive(&huart5, &c, 1, 500)==HAL_OK){
	  HAL_UART_Transmit(&huart5, &value, 1, 500);
 80004fa:	1df9      	adds	r1, r7, #7
 80004fc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000500:	2201      	movs	r2, #1
 8000502:	4804      	ldr	r0, [pc, #16]	@ (8000514 <main+0x5c>)
 8000504:	f004 f8c4 	bl	8004690 <HAL_UART_Transmit>
	  HAL_Delay(3);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 fc23 	bl	8000d54 <HAL_Delay>
  {
 800050e:	e7e2      	b.n	80004d6 <main+0x1e>
 8000510:	20000098 	.word	0x20000098
 8000514:	200000e0 	.word	0x200000e0

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f007 f9a0 	bl	800786c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b28      	ldr	r3, [pc, #160]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a27      	ldr	r2, [pc, #156]	@ (80005e4 <SystemClock_Config+0xcc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b25      	ldr	r3, [pc, #148]	@ (80005e4 <SystemClock_Config+0xcc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b22      	ldr	r3, [pc, #136]	@ (80005e8 <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b1f      	ldr	r3, [pc, #124]	@ (80005e8 <SystemClock_Config+0xd0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800058c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 fb8e 	bl	8003cc0 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f9db 	bl	8000964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	2105      	movs	r1, #5
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fdef 	bl	80041b0 <HAL_RCC_ClockConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d8:	f000 f9c4 	bl	8000964 <Error_Handler>
  }
}
 80005dc:	bf00      	nop
 80005de:	3750      	adds	r7, #80	@ 0x50
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000600:	4a22      	ldr	r2, [pc, #136]	@ (800068c <MX_ADC1_Init+0xa0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b20      	ldr	r3, [pc, #128]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000606:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800060c:	4b1e      	ldr	r3, [pc, #120]	@ (8000688 <MX_ADC1_Init+0x9c>)
 800060e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000612:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000614:	4b1c      	ldr	r3, [pc, #112]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061a:	4b1b      	ldr	r3, [pc, #108]	@ (8000688 <MX_ADC1_Init+0x9c>)
 800061c:	2201      	movs	r2, #1
 800061e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000620:	4b19      	ldr	r3, [pc, #100]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000622:	2200      	movs	r2, #0
 8000624:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_ADC1_Init+0x9c>)
 800062a:	2200      	movs	r2, #0
 800062c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <MX_ADC1_Init+0xa4>)
 8000632:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_ADC1_Init+0x9c>)
 800063c:	2201      	movs	r2, #1
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_ADC1_Init+0x9c>)
 800064a:	2201      	movs	r2, #1
 800064c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064e:	480e      	ldr	r0, [pc, #56]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000650:	f000 fba4 	bl	8000d9c <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800065a:	f000 f983 	bl	8000964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800065e:	2308      	movs	r3, #8
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000666:	2301      	movs	r3, #1
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <MX_ADC1_Init+0x9c>)
 8000670:	f000 fd42 	bl	80010f8 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800067a:	f000 f973 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000098 	.word	0x20000098
 800068c:	40012000 	.word	0x40012000
 8000690:	0f000001 	.word	0x0f000001

08000694 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000698:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_UART5_Init+0x4c>)
 800069a:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <MX_UART5_Init+0x50>)
 800069c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800069e:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006a4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006ba:	220c      	movs	r2, #12
 80006bc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c4:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_UART5_Init+0x4c>)
 80006cc:	f003 ff90 	bl	80045f0 <HAL_UART_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80006d6:	f000 f945 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200000e0 	.word	0x200000e0
 80006e4:	40005000 	.word	0x40005000

080006e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ee:	f107 031c 	add.w	r3, r7, #28
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
 80006f6:	605a      	str	r2, [r3, #4]
 80006f8:	609a      	str	r2, [r3, #8]
 80006fa:	60da      	str	r2, [r3, #12]
 80006fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	4b92      	ldr	r3, [pc, #584]	@ (800094c <MX_GPIO_Init+0x264>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a91      	ldr	r2, [pc, #580]	@ (800094c <MX_GPIO_Init+0x264>)
 8000708:	f043 0310 	orr.w	r3, r3, #16
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b8f      	ldr	r3, [pc, #572]	@ (800094c <MX_GPIO_Init+0x264>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0310 	and.w	r3, r3, #16
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
 800071e:	4b8b      	ldr	r3, [pc, #556]	@ (800094c <MX_GPIO_Init+0x264>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a8a      	ldr	r2, [pc, #552]	@ (800094c <MX_GPIO_Init+0x264>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b88      	ldr	r3, [pc, #544]	@ (800094c <MX_GPIO_Init+0x264>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b84      	ldr	r3, [pc, #528]	@ (800094c <MX_GPIO_Init+0x264>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a83      	ldr	r2, [pc, #524]	@ (800094c <MX_GPIO_Init+0x264>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b81      	ldr	r3, [pc, #516]	@ (800094c <MX_GPIO_Init+0x264>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b7d      	ldr	r3, [pc, #500]	@ (800094c <MX_GPIO_Init+0x264>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a7c      	ldr	r2, [pc, #496]	@ (800094c <MX_GPIO_Init+0x264>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b7a      	ldr	r3, [pc, #488]	@ (800094c <MX_GPIO_Init+0x264>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b76      	ldr	r3, [pc, #472]	@ (800094c <MX_GPIO_Init+0x264>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a75      	ldr	r2, [pc, #468]	@ (800094c <MX_GPIO_Init+0x264>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b73      	ldr	r3, [pc, #460]	@ (800094c <MX_GPIO_Init+0x264>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b6f      	ldr	r3, [pc, #444]	@ (800094c <MX_GPIO_Init+0x264>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a6e      	ldr	r2, [pc, #440]	@ (800094c <MX_GPIO_Init+0x264>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b6c      	ldr	r3, [pc, #432]	@ (800094c <MX_GPIO_Init+0x264>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	4869      	ldr	r0, [pc, #420]	@ (8000950 <MX_GPIO_Init+0x268>)
 80007ac:	f001 f970 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2101      	movs	r1, #1
 80007b4:	4867      	ldr	r0, [pc, #412]	@ (8000954 <MX_GPIO_Init+0x26c>)
 80007b6:	f001 f96b 	bl	8001a90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ba:	2200      	movs	r2, #0
 80007bc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007c0:	4865      	ldr	r0, [pc, #404]	@ (8000958 <MX_GPIO_Init+0x270>)
 80007c2:	f001 f965 	bl	8001a90 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007c6:	2308      	movs	r3, #8
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007d6:	f107 031c 	add.w	r3, r7, #28
 80007da:	4619      	mov	r1, r3
 80007dc:	485c      	ldr	r0, [pc, #368]	@ (8000950 <MX_GPIO_Init+0x268>)
 80007de:	f000 ffbb 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	4856      	ldr	r0, [pc, #344]	@ (8000954 <MX_GPIO_Init+0x26c>)
 80007fa:	f000 ffad 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007fe:	2308      	movs	r3, #8
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800080e:	2305      	movs	r3, #5
 8000810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	4619      	mov	r1, r3
 8000818:	484e      	ldr	r0, [pc, #312]	@ (8000954 <MX_GPIO_Init+0x26c>)
 800081a:	f000 ff9d 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	2301      	movs	r3, #1
 8000820:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000822:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	484a      	ldr	r0, [pc, #296]	@ (800095c <MX_GPIO_Init+0x274>)
 8000834:	f000 ff90 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000838:	2310      	movs	r3, #16
 800083a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083c:	2302      	movs	r3, #2
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	2300      	movs	r3, #0
 8000846:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000848:	2306      	movs	r3, #6
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	4842      	ldr	r0, [pc, #264]	@ (800095c <MX_GPIO_Init+0x274>)
 8000854:	f000 ff80 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000858:	23e0      	movs	r3, #224	@ 0xe0
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000864:	2300      	movs	r3, #0
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000868:	2305      	movs	r3, #5
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	483a      	ldr	r0, [pc, #232]	@ (800095c <MX_GPIO_Init+0x274>)
 8000874:	f000 ff70 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000878:	2304      	movs	r3, #4
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4835      	ldr	r0, [pc, #212]	@ (8000960 <MX_GPIO_Init+0x278>)
 800088c:	f000 ff64 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000890:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000896:	2302      	movs	r3, #2
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008a2:	2305      	movs	r3, #5
 80008a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	482c      	ldr	r0, [pc, #176]	@ (8000960 <MX_GPIO_Init+0x278>)
 80008ae:	f000 ff53 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008b6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	4619      	mov	r1, r3
 80008ca:	4823      	ldr	r0, [pc, #140]	@ (8000958 <MX_GPIO_Init+0x270>)
 80008cc:	f000 ff44 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_MCK_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin;
 80008d0:	2380      	movs	r3, #128	@ 0x80
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008e0:	2306      	movs	r3, #6
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481a      	ldr	r0, [pc, #104]	@ (8000954 <MX_GPIO_Init+0x26c>)
 80008ec:	f000 ff34 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80008f0:	2320      	movs	r3, #32
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4815      	ldr	r0, [pc, #84]	@ (8000958 <MX_GPIO_Init+0x270>)
 8000904:	f000 ff28 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000908:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800090e:	2312      	movs	r3, #18
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800091a:	2304      	movs	r3, #4
 800091c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_GPIO_Init+0x278>)
 8000926:	f000 ff17 	bl	8001758 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800092a:	2302      	movs	r3, #2
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800092e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 031c 	add.w	r3, r7, #28
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	@ (8000950 <MX_GPIO_Init+0x268>)
 8000940:	f000 ff0a 	bl	8001758 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3730      	adds	r7, #48	@ 0x30
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40021000 	.word	0x40021000
 8000954:	40020800 	.word	0x40020800
 8000958:	40020c00 	.word	0x40020c00
 800095c:	40020000 	.word	0x40020000
 8000960:	40020400 	.word	0x40020400

08000964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000968:	b672      	cpsid	i
}
 800096a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <Error_Handler+0x8>

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
 800097a:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <HAL_MspInit+0x4c>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	4a0f      	ldr	r2, [pc, #60]	@ (80009bc <HAL_MspInit+0x4c>)
 8000980:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000984:	6453      	str	r3, [r2, #68]	@ 0x44
 8000986:	4b0d      	ldr	r3, [pc, #52]	@ (80009bc <HAL_MspInit+0x4c>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098e:	607b      	str	r3, [r7, #4]
 8000990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	603b      	str	r3, [r7, #0]
 8000996:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <HAL_MspInit+0x4c>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099a:	4a08      	ldr	r2, [pc, #32]	@ (80009bc <HAL_MspInit+0x4c>)
 800099c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_MspInit+0x4c>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009aa:	603b      	str	r3, [r7, #0]
 80009ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ae:	2007      	movs	r0, #7
 80009b0:	f000 fe90 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40023800 	.word	0x40023800

080009c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08a      	sub	sp, #40	@ 0x28
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a17      	ldr	r2, [pc, #92]	@ (8000a3c <HAL_ADC_MspInit+0x7c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d127      	bne.n	8000a32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <HAL_ADC_MspInit+0x80>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ea:	4a15      	ldr	r2, [pc, #84]	@ (8000a40 <HAL_ADC_MspInit+0x80>)
 80009ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009f2:	4b13      	ldr	r3, [pc, #76]	@ (8000a40 <HAL_ADC_MspInit+0x80>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <HAL_ADC_MspInit+0x80>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a06:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <HAL_ADC_MspInit+0x80>)
 8000a08:	f043 0302 	orr.w	r3, r3, #2
 8000a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <HAL_ADC_MspInit+0x80>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	f003 0302 	and.w	r3, r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <HAL_ADC_MspInit+0x84>)
 8000a2e:	f000 fe93 	bl	8001758 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	@ 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40012000 	.word	0x40012000
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020400 	.word	0x40020400

08000a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08a      	sub	sp, #40	@ 0x28
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a28      	ldr	r2, [pc, #160]	@ (8000b08 <HAL_UART_MspInit+0xc0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d14a      	bne.n	8000b00 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	613b      	str	r3, [r7, #16]
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a26      	ldr	r2, [pc, #152]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000a74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a7a:	4b24      	ldr	r3, [pc, #144]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	4b20      	ldr	r3, [pc, #128]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000a90:	f043 0304 	orr.w	r3, r3, #4
 8000a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a96:	4b1d      	ldr	r3, [pc, #116]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9a:	f003 0304 	and.w	r3, r3, #4
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	4a18      	ldr	r2, [pc, #96]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_UART_MspInit+0xc4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab6:	f003 0308 	and.w	r3, r3, #8
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000abe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000acc:	2303      	movs	r3, #3
 8000ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480d      	ldr	r0, [pc, #52]	@ (8000b10 <HAL_UART_MspInit+0xc8>)
 8000adc:	f000 fe3c 	bl	8001758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000af0:	2308      	movs	r3, #8
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	@ (8000b14 <HAL_UART_MspInit+0xcc>)
 8000afc:	f000 fe2c 	bl	8001758 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3728      	adds	r7, #40	@ 0x28
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40005000 	.word	0x40005000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <NMI_Handler+0x4>

08000b20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <MemManage_Handler+0x4>

08000b30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <BusFault_Handler+0x4>

08000b38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <UsageFault_Handler+0x4>

08000b40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6e:	f000 f8d1 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000b7c:	4802      	ldr	r0, [pc, #8]	@ (8000b88 <OTG_FS_IRQHandler+0x10>)
 8000b7e:	f001 fa81 	bl	8002084 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	2000050c 	.word	0x2000050c

08000b8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b086      	sub	sp, #24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b94:	4a14      	ldr	r2, [pc, #80]	@ (8000be8 <_sbrk+0x5c>)
 8000b96:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <_sbrk+0x60>)
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ba0:	4b13      	ldr	r3, [pc, #76]	@ (8000bf0 <_sbrk+0x64>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d102      	bne.n	8000bae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <_sbrk+0x64>)
 8000baa:	4a12      	ldr	r2, [pc, #72]	@ (8000bf4 <_sbrk+0x68>)
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bae:	4b10      	ldr	r3, [pc, #64]	@ (8000bf0 <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d207      	bcs.n	8000bcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bbc:	f006 fe6e 	bl	800789c <__errno>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e009      	b.n	8000be0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bcc:	4b08      	ldr	r3, [pc, #32]	@ (8000bf0 <_sbrk+0x64>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bd2:	4b07      	ldr	r3, [pc, #28]	@ (8000bf0 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <_sbrk+0x64>)
 8000bdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bde:	68fb      	ldr	r3, [r7, #12]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3718      	adds	r7, #24
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20020000 	.word	0x20020000
 8000bec:	00000400 	.word	0x00000400
 8000bf0:	20000128 	.word	0x20000128
 8000bf4:	20000a38 	.word	0x20000a38

08000bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <SystemInit+0x20>)
 8000bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c02:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <SystemInit+0x20>)
 8000c04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c20:	f7ff ffea 	bl	8000bf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c26:	490d      	ldr	r1, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c28:	4a0d      	ldr	r2, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4a:	f006 fe2d 	bl	80078a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4e:	f7ff fc33 	bl	80004b8 <main>
  bx  lr    
 8000c52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c5c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000c60:	080079cc 	.word	0x080079cc
  ldr r2, =_sbss
 8000c64:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000c68:	20000a34 	.word	0x20000a34

08000c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c6c:	e7fe      	b.n	8000c6c <ADC_IRQHandler>
	...

08000c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c74:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <HAL_Init+0x40>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb0 <HAL_Init+0x40>)
 8000c7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c80:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <HAL_Init+0x40>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb0 <HAL_Init+0x40>)
 8000c86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c8c:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_Init+0x40>)
 8000c92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c98:	2003      	movs	r0, #3
 8000c9a:	f000 fd1b 	bl	80016d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 f808 	bl	8000cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca4:	f7ff fe64 	bl	8000970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023c00 	.word	0x40023c00

08000cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cbc:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_InitTick+0x54>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x58>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fd33 	bl	800173e <HAL_SYSTICK_Config>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e00e      	b.n	8000d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b0f      	cmp	r3, #15
 8000ce6:	d80a      	bhi.n	8000cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	6879      	ldr	r1, [r7, #4]
 8000cec:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf0:	f000 fcfb 	bl	80016ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <HAL_InitTick+0x5c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	4a04      	ldr	r2, [pc, #16]	@ (8000d38 <HAL_IncTick+0x24>)
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000008 	.word	0x20000008
 8000d38:	2000012c 	.word	0x2000012c

08000d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <HAL_GetTick+0x14>)
 8000d42:	681b      	ldr	r3, [r3, #0]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2000012c 	.word	0x2000012c

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d5c:	f7ff ffee 	bl	8000d3c <HAL_GetTick>
 8000d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d6c:	d005      	beq.n	8000d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <HAL_Delay+0x44>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4413      	add	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7a:	bf00      	nop
 8000d7c:	f7ff ffde 	bl	8000d3c <HAL_GetTick>
 8000d80:	4602      	mov	r2, r0
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	68fa      	ldr	r2, [r7, #12]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8f7      	bhi.n	8000d7c <HAL_Delay+0x28>
  {
  }
}
 8000d8c:	bf00      	nop
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000008 	.word	0x20000008

08000d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e033      	b.n	8000e1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d109      	bne.n	8000dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fe00 	bl	80009c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d118      	bne.n	8000e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000de2:	f023 0302 	bic.w	r3, r3, #2
 8000de6:	f043 0202 	orr.w	r2, r3, #2
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f000 faa4 	bl	800133c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f023 0303 	bic.w	r3, r3, #3
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0a:	e001      	b.n	8000e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d101      	bne.n	8000e3e <HAL_ADC_Start+0x1a>
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	e0b2      	b.n	8000fa4 <HAL_ADC_Start+0x180>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d018      	beq.n	8000e86 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <HAL_ADC_Start+0x18c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a52      	ldr	r2, [pc, #328]	@ (8000fb4 <HAL_ADC_Start+0x190>)
 8000e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6e:	0c9a      	lsrs	r2, r3, #18
 8000e70:	4613      	mov	r3, r2
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	4413      	add	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e78:	e002      	b.n	8000e80 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d17a      	bne.n	8000f8a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e98:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e9c:	f023 0301 	bic.w	r3, r3, #1
 8000ea0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ebe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ed2:	d106      	bne.n	8000ee2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed8:	f023 0206 	bic.w	r2, r3, #6
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ee0:	e002      	b.n	8000ee8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef0:	4b31      	ldr	r3, [pc, #196]	@ (8000fb8 <HAL_ADC_Start+0x194>)
 8000ef2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000efc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12a      	bne.n	8000f60 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fbc <HAL_ADC_Start+0x198>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d015      	beq.n	8000f40 <HAL_ADC_Start+0x11c>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a29      	ldr	r2, [pc, #164]	@ (8000fc0 <HAL_ADC_Start+0x19c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d105      	bne.n	8000f2a <HAL_ADC_Start+0x106>
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <HAL_ADC_Start+0x194>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 031f 	and.w	r3, r3, #31
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d00a      	beq.n	8000f40 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a25      	ldr	r2, [pc, #148]	@ (8000fc4 <HAL_ADC_Start+0x1a0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d136      	bne.n	8000fa2 <HAL_ADC_Start+0x17e>
 8000f34:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <HAL_ADC_Start+0x194>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0310 	and.w	r3, r3, #16
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d130      	bne.n	8000fa2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	689b      	ldr	r3, [r3, #8]
 8000f46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d129      	bne.n	8000fa2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e020      	b.n	8000fa2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a15      	ldr	r2, [pc, #84]	@ (8000fbc <HAL_ADC_Start+0x198>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d11b      	bne.n	8000fa2 <HAL_ADC_Start+0x17e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d114      	bne.n	8000fa2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	e00b      	b.n	8000fa2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f043 0210 	orr.w	r2, r3, #16
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9a:	f043 0201 	orr.w	r2, r3, #1
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	431bde83 	.word	0x431bde83
 8000fb8:	40012300 	.word	0x40012300
 8000fbc:	40012000 	.word	0x40012000
 8000fc0:	40012100 	.word	0x40012100
 8000fc4:	40012200 	.word	0x40012200

08000fc8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fe4:	d113      	bne.n	800100e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ff4:	d10b      	bne.n	800100e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f043 0220 	orr.w	r2, r3, #32
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e063      	b.n	80010d6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800100e:	f7ff fe95 	bl	8000d3c <HAL_GetTick>
 8001012:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001014:	e021      	b.n	800105a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800101c:	d01d      	beq.n	800105a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d007      	beq.n	8001034 <HAL_ADC_PollForConversion+0x6c>
 8001024:	f7ff fe8a 	bl	8000d3c <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	429a      	cmp	r2, r3
 8001032:	d212      	bcs.n	800105a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	2b02      	cmp	r3, #2
 8001040:	d00b      	beq.n	800105a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f043 0204 	orr.w	r2, r3, #4
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e03d      	b.n	80010d6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b02      	cmp	r3, #2
 8001066:	d1d6      	bne.n	8001016 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f06f 0212 	mvn.w	r2, #18
 8001070:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d123      	bne.n	80010d4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001090:	2b00      	cmp	r3, #0
 8001092:	d11f      	bne.n	80010d4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800109a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d111      	bne.n	80010d4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	f043 0201 	orr.w	r2, r3, #1
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800110c:	2b01      	cmp	r3, #1
 800110e:	d101      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1c>
 8001110:	2302      	movs	r3, #2
 8001112:	e105      	b.n	8001320 <HAL_ADC_ConfigChannel+0x228>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2201      	movs	r2, #1
 8001118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b09      	cmp	r3, #9
 8001122:	d925      	bls.n	8001170 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	68d9      	ldr	r1, [r3, #12]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	4613      	mov	r3, r2
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	4413      	add	r3, r2
 8001138:	3b1e      	subs	r3, #30
 800113a:	2207      	movs	r2, #7
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43da      	mvns	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	400a      	ands	r2, r1
 8001148:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68d9      	ldr	r1, [r3, #12]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	4603      	mov	r3, r0
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	4403      	add	r3, r0
 8001162:	3b1e      	subs	r3, #30
 8001164:	409a      	lsls	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	430a      	orrs	r2, r1
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	e022      	b.n	80011b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6919      	ldr	r1, [r3, #16]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	4613      	mov	r3, r2
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4413      	add	r3, r2
 8001184:	2207      	movs	r2, #7
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43da      	mvns	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	400a      	ands	r2, r1
 8001192:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6919      	ldr	r1, [r3, #16]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	4618      	mov	r0, r3
 80011a6:	4603      	mov	r3, r0
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4403      	add	r3, r0
 80011ac:	409a      	lsls	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	430a      	orrs	r2, r1
 80011b4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d824      	bhi.n	8001208 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	4413      	add	r3, r2
 80011ce:	3b05      	subs	r3, #5
 80011d0:	221f      	movs	r2, #31
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	43da      	mvns	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	400a      	ands	r2, r1
 80011de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	4618      	mov	r0, r3
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	4613      	mov	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	3b05      	subs	r3, #5
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	635a      	str	r2, [r3, #52]	@ 0x34
 8001206:	e04c      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b0c      	cmp	r3, #12
 800120e:	d824      	bhi.n	800125a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	3b23      	subs	r3, #35	@ 0x23
 8001222:	221f      	movs	r2, #31
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43da      	mvns	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	b29b      	uxth	r3, r3
 800123e:	4618      	mov	r0, r3
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	3b23      	subs	r3, #35	@ 0x23
 800124c:	fa00 f203 	lsl.w	r2, r0, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	631a      	str	r2, [r3, #48]	@ 0x30
 8001258:	e023      	b.n	80012a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b41      	subs	r3, #65	@ 0x41
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b41      	subs	r3, #65	@ 0x41
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012a2:	4b22      	ldr	r3, [pc, #136]	@ (800132c <HAL_ADC_ConfigChannel+0x234>)
 80012a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a21      	ldr	r2, [pc, #132]	@ (8001330 <HAL_ADC_ConfigChannel+0x238>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d109      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x1cc>
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b12      	cmp	r3, #18
 80012b6:	d105      	bne.n	80012c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a19      	ldr	r2, [pc, #100]	@ (8001330 <HAL_ADC_ConfigChannel+0x238>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d123      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d003      	beq.n	80012de <HAL_ADC_ConfigChannel+0x1e6>
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b11      	cmp	r3, #17
 80012dc:	d11b      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d111      	bne.n	8001316 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <HAL_ADC_ConfigChannel+0x23c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_ADC_ConfigChannel+0x240>)
 80012f8:	fba2 2303 	umull	r2, r3, r2, r3
 80012fc:	0c9a      	lsrs	r2, r3, #18
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001308:	e002      	b.n	8001310 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	3b01      	subs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1f9      	bne.n	800130a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40012300 	.word	0x40012300
 8001330:	40012000 	.word	0x40012000
 8001334:	20000000 	.word	0x20000000
 8001338:	431bde83 	.word	0x431bde83

0800133c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001344:	4b79      	ldr	r3, [pc, #484]	@ (800152c <ADC_Init+0x1f0>)
 8001346:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	431a      	orrs	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001370:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6859      	ldr	r1, [r3, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	021a      	lsls	r2, r3, #8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6859      	ldr	r1, [r3, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6899      	ldr	r1, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68da      	ldr	r2, [r3, #12]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ce:	4a58      	ldr	r2, [pc, #352]	@ (8001530 <ADC_Init+0x1f4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d022      	beq.n	800141a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80013e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6899      	ldr	r1, [r3, #8]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001404:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6899      	ldr	r1, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e00f      	b.n	800143a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001438:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0202 	bic.w	r2, r2, #2
 8001448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6899      	ldr	r1, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
 8001454:	005a      	lsls	r2, r3, #1
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01b      	beq.n	80014a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001476:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001486:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	6859      	ldr	r1, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001492:	3b01      	subs	r3, #1
 8001494:	035a      	lsls	r2, r3, #13
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	e007      	b.n	80014b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014ae:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	051a      	lsls	r2, r3, #20
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80014e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6899      	ldr	r1, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014f2:	025a      	lsls	r2, r3, #9
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800150a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	695b      	ldr	r3, [r3, #20]
 8001516:	029a      	lsls	r2, r3, #10
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
}
 8001520:	bf00      	nop
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012300 	.word	0x40012300
 8001530:	0f000001 	.word	0x0f000001

08001534 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001550:	4013      	ands	r3, r2
 8001552:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800155c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001566:	4a04      	ldr	r2, [pc, #16]	@ (8001578 <__NVIC_SetPriorityGrouping+0x44>)
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	60d3      	str	r3, [r2, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <__NVIC_GetPriorityGrouping+0x18>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	0a1b      	lsrs	r3, r3, #8
 8001586:	f003 0307 	and.w	r3, r3, #7
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	db0b      	blt.n	80015c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	f003 021f 	and.w	r2, r3, #31
 80015b0:	4907      	ldr	r1, [pc, #28]	@ (80015d0 <__NVIC_EnableIRQ+0x38>)
 80015b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b6:	095b      	lsrs	r3, r3, #5
 80015b8:	2001      	movs	r0, #1
 80015ba:	fa00 f202 	lsl.w	r2, r0, r2
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000e100 	.word	0xe000e100

080015d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	6039      	str	r1, [r7, #0]
 80015de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	db0a      	blt.n	80015fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	b2da      	uxtb	r2, r3
 80015ec:	490c      	ldr	r1, [pc, #48]	@ (8001620 <__NVIC_SetPriority+0x4c>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	b2d2      	uxtb	r2, r2
 80015f6:	440b      	add	r3, r1
 80015f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015fc:	e00a      	b.n	8001614 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	4908      	ldr	r1, [pc, #32]	@ (8001624 <__NVIC_SetPriority+0x50>)
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	3b04      	subs	r3, #4
 800160c:	0112      	lsls	r2, r2, #4
 800160e:	b2d2      	uxtb	r2, r2
 8001610:	440b      	add	r3, r1
 8001612:	761a      	strb	r2, [r3, #24]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	e000e100 	.word	0xe000e100
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001628:	b480      	push	{r7}
 800162a:	b089      	sub	sp, #36	@ 0x24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f1c3 0307 	rsb	r3, r3, #7
 8001642:	2b04      	cmp	r3, #4
 8001644:	bf28      	it	cs
 8001646:	2304      	movcs	r3, #4
 8001648:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3304      	adds	r3, #4
 800164e:	2b06      	cmp	r3, #6
 8001650:	d902      	bls.n	8001658 <NVIC_EncodePriority+0x30>
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3b03      	subs	r3, #3
 8001656:	e000      	b.n	800165a <NVIC_EncodePriority+0x32>
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	f04f 32ff 	mov.w	r2, #4294967295
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	43da      	mvns	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	401a      	ands	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001670:	f04f 31ff 	mov.w	r1, #4294967295
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	fa01 f303 	lsl.w	r3, r1, r3
 800167a:	43d9      	mvns	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	4313      	orrs	r3, r2
         );
}
 8001682:	4618      	mov	r0, r3
 8001684:	3724      	adds	r7, #36	@ 0x24
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a0:	d301      	bcc.n	80016a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a2:	2301      	movs	r3, #1
 80016a4:	e00f      	b.n	80016c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <SysTick_Config+0x40>)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ae:	210f      	movs	r1, #15
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	f7ff ff8e 	bl	80015d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b8:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <SysTick_Config+0x40>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <SysTick_Config+0x40>)
 80016c0:	2207      	movs	r2, #7
 80016c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	e000e010 	.word	0xe000e010

080016d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ff29 	bl	8001534 <__NVIC_SetPriorityGrouping>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4603      	mov	r3, r0
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fc:	f7ff ff3e 	bl	800157c <__NVIC_GetPriorityGrouping>
 8001700:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	68b9      	ldr	r1, [r7, #8]
 8001706:	6978      	ldr	r0, [r7, #20]
 8001708:	f7ff ff8e 	bl	8001628 <NVIC_EncodePriority>
 800170c:	4602      	mov	r2, r0
 800170e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001712:	4611      	mov	r1, r2
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff5d 	bl	80015d4 <__NVIC_SetPriority>
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff ff31 	bl	8001598 <__NVIC_EnableIRQ>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff ffa2 	bl	8001690 <SysTick_Config>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001758:	b480      	push	{r7}
 800175a:	b089      	sub	sp, #36	@ 0x24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e16b      	b.n	8001a4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	429a      	cmp	r2, r3
 800178e:	f040 815a 	bne.w	8001a46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
 800179c:	d005      	beq.n	80017aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d130      	bne.n	800180c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	2203      	movs	r2, #3
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e0:	2201      	movs	r2, #1
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	43db      	mvns	r3, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4013      	ands	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 0201 	and.w	r2, r3, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b03      	cmp	r3, #3
 8001816:	d017      	beq.n	8001848 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	2203      	movs	r2, #3
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4013      	ands	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d123      	bne.n	800189c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	08da      	lsrs	r2, r3, #3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3208      	adds	r2, #8
 800185c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	220f      	movs	r2, #15
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	08da      	lsrs	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	3208      	adds	r2, #8
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0203 	and.w	r2, r3, #3
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 80b4 	beq.w	8001a46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	4b60      	ldr	r3, [pc, #384]	@ (8001a64 <HAL_GPIO_Init+0x30c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001a64 <HAL_GPIO_Init+0x30c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001a64 <HAL_GPIO_Init+0x30c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001a68 <HAL_GPIO_Init+0x310>)
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	089b      	lsrs	r3, r3, #2
 8001900:	3302      	adds	r3, #2
 8001902:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	220f      	movs	r2, #15
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	4013      	ands	r3, r2
 800191c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a52      	ldr	r2, [pc, #328]	@ (8001a6c <HAL_GPIO_Init+0x314>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d02b      	beq.n	800197e <HAL_GPIO_Init+0x226>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a51      	ldr	r2, [pc, #324]	@ (8001a70 <HAL_GPIO_Init+0x318>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d025      	beq.n	800197a <HAL_GPIO_Init+0x222>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a50      	ldr	r2, [pc, #320]	@ (8001a74 <HAL_GPIO_Init+0x31c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d01f      	beq.n	8001976 <HAL_GPIO_Init+0x21e>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a4f      	ldr	r2, [pc, #316]	@ (8001a78 <HAL_GPIO_Init+0x320>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d019      	beq.n	8001972 <HAL_GPIO_Init+0x21a>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a4e      	ldr	r2, [pc, #312]	@ (8001a7c <HAL_GPIO_Init+0x324>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d013      	beq.n	800196e <HAL_GPIO_Init+0x216>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4d      	ldr	r2, [pc, #308]	@ (8001a80 <HAL_GPIO_Init+0x328>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <HAL_GPIO_Init+0x212>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4c      	ldr	r2, [pc, #304]	@ (8001a84 <HAL_GPIO_Init+0x32c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d007      	beq.n	8001966 <HAL_GPIO_Init+0x20e>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a4b      	ldr	r2, [pc, #300]	@ (8001a88 <HAL_GPIO_Init+0x330>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d101      	bne.n	8001962 <HAL_GPIO_Init+0x20a>
 800195e:	2307      	movs	r3, #7
 8001960:	e00e      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001962:	2308      	movs	r3, #8
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001966:	2306      	movs	r3, #6
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x228>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x228>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001990:	4935      	ldr	r1, [pc, #212]	@ (8001a68 <HAL_GPIO_Init+0x310>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c2:	4a32      	ldr	r2, [pc, #200]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c8:	4b30      	ldr	r3, [pc, #192]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ec:	4a27      	ldr	r2, [pc, #156]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019f2:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a16:	4a1d      	ldr	r2, [pc, #116]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a40:	4a12      	ldr	r2, [pc, #72]	@ (8001a8c <HAL_GPIO_Init+0x334>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae90 	bls.w	8001774 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3724      	adds	r7, #36	@ 0x24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40013800 	.word	0x40013800
 8001a6c:	40020000 	.word	0x40020000
 8001a70:	40020400 	.word	0x40020400
 8001a74:	40020800 	.word	0x40020800
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40021400 	.word	0x40021400
 8001a84:	40021800 	.word	0x40021800
 8001a88:	40021c00 	.word	0x40021c00
 8001a8c:	40013c00 	.word	0x40013c00

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	619a      	str	r2, [r3, #24]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af02      	add	r7, sp, #8
 8001ac8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e059      	b.n	8001b88 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d106      	bne.n	8001af4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f005 fb9e 	bl	8007230 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2203      	movs	r2, #3
 8001af8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b02:	d102      	bne.n	8001b0a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f003 f9ef 	bl	8004ef2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7c1a      	ldrb	r2, [r3, #16]
 8001b1c:	f88d 2000 	strb.w	r2, [sp]
 8001b20:	3304      	adds	r3, #4
 8001b22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b24:	f003 f970 	bl	8004e08 <USB_CoreInit>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2202      	movs	r2, #2
 8001b32:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e026      	b.n	8001b88 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 f9e7 	bl	8004f14 <USB_SetCurrentMode>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e017      	b.n	8001b88 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7c1a      	ldrb	r2, [r3, #16]
 8001b60:	f88d 2000 	strb.w	r2, [sp]
 8001b64:	3304      	adds	r3, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	f003 fb8a 	bl	8005280 <USB_HostInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e004      	b.n	8001b88 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001b86:	2300      	movs	r3, #0
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3710      	adds	r7, #16
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b08b      	sub	sp, #44	@ 0x2c
 8001b94:	af04      	add	r7, sp, #16
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	4608      	mov	r0, r1
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	70fb      	strb	r3, [r7, #3]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	70bb      	strb	r3, [r7, #2]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001baa:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001bac:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_HCD_HC_Init+0x2c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e09d      	b.n	8001cf8 <HAL_HCD_HC_Init+0x168>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001bc4:	78fa      	ldrb	r2, [r7, #3]
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	4613      	mov	r3, r2
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	1a9b      	subs	r3, r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	3319      	adds	r3, #25
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001bd8:	78fa      	ldrb	r2, [r7, #3]
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a9b      	subs	r3, r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3314      	adds	r3, #20
 8001be8:	787a      	ldrb	r2, [r7, #1]
 8001bea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001bec:	78fa      	ldrb	r2, [r7, #3]
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	011b      	lsls	r3, r3, #4
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	3315      	adds	r3, #21
 8001bfc:	78fa      	ldrb	r2, [r7, #3]
 8001bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001c00:	78fa      	ldrb	r2, [r7, #3]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	011b      	lsls	r3, r3, #4
 8001c08:	1a9b      	subs	r3, r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3326      	adds	r3, #38	@ 0x26
 8001c10:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001c14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	78bb      	ldrb	r3, [r7, #2]
 8001c1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c1e:	b2d8      	uxtb	r0, r3
 8001c20:	6879      	ldr	r1, [r7, #4]
 8001c22:	4613      	mov	r3, r2
 8001c24:	011b      	lsls	r3, r3, #4
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	440b      	add	r3, r1
 8001c2c:	3316      	adds	r3, #22
 8001c2e:	4602      	mov	r2, r0
 8001c30:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	4619      	mov	r1, r3
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fbac 	bl	8002394 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001c3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	da0a      	bge.n	8001c5a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3317      	adds	r3, #23
 8001c54:	2201      	movs	r2, #1
 8001c56:	701a      	strb	r2, [r3, #0]
 8001c58:	e009      	b.n	8001c6e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001c5a:	78fa      	ldrb	r2, [r7, #3]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	1a9b      	subs	r3, r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	440b      	add	r3, r1
 8001c68:	3317      	adds	r3, #23
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f003 fc3e 	bl	80054f4 <USB_GetHostSpeed>
 8001c78:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d10b      	bne.n	8001c9a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001c82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d107      	bne.n	8001c9a <HAL_HCD_HC_Init+0x10a>
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2bbc      	cmp	r3, #188	@ 0xbc
 8001c94:	d901      	bls.n	8001c9a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001c96:	23bc      	movs	r3, #188	@ 0xbc
 8001c98:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	011b      	lsls	r3, r3, #4
 8001ca2:	1a9b      	subs	r3, r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3318      	adds	r3, #24
 8001caa:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001cae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	b298      	uxth	r0, r3
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	1a9b      	subs	r3, r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3328      	adds	r3, #40	@ 0x28
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	787c      	ldrb	r4, [r7, #1]
 8001cd2:	78ba      	ldrb	r2, [r7, #2]
 8001cd4:	78f9      	ldrb	r1, [r7, #3]
 8001cd6:	9302      	str	r3, [sp, #8]
 8001cd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	f003 fc2d 	bl	8005544 <USB_HC_Init>
 8001cea:	4603      	mov	r3, r0
 8001cec:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	371c      	adds	r7, #28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd90      	pop	{r4, r7, pc}

08001d00 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <HAL_HCD_HC_Halt+0x1e>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e00f      	b.n	8001d3e <HAL_HCD_HC_Halt+0x3e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	78fa      	ldrb	r2, [r7, #3]
 8001d2c:	4611      	mov	r1, r2
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 ffbf 	bl	8005cb2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	4608      	mov	r0, r1
 8001d52:	4611      	mov	r1, r2
 8001d54:	461a      	mov	r2, r3
 8001d56:	4603      	mov	r3, r0
 8001d58:	70fb      	strb	r3, [r7, #3]
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	70bb      	strb	r3, [r7, #2]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	440b      	add	r3, r1
 8001d70:	3317      	adds	r3, #23
 8001d72:	78ba      	ldrb	r2, [r7, #2]
 8001d74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001d76:	78fa      	ldrb	r2, [r7, #3]
 8001d78:	6879      	ldr	r1, [r7, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	440b      	add	r3, r1
 8001d84:	3326      	adds	r3, #38	@ 0x26
 8001d86:	787a      	ldrb	r2, [r7, #1]
 8001d88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001d8a:	7c3b      	ldrb	r3, [r7, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d114      	bne.n	8001dba <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001d90:	78fa      	ldrb	r2, [r7, #3]
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	332a      	adds	r3, #42	@ 0x2a
 8001da0:	2203      	movs	r2, #3
 8001da2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001da4:	78fa      	ldrb	r2, [r7, #3]
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a9b      	subs	r3, r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	3319      	adds	r3, #25
 8001db4:	7f3a      	ldrb	r2, [r7, #28]
 8001db6:	701a      	strb	r2, [r3, #0]
 8001db8:	e009      	b.n	8001dce <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dba:	78fa      	ldrb	r2, [r7, #3]
 8001dbc:	6879      	ldr	r1, [r7, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	011b      	lsls	r3, r3, #4
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	332a      	adds	r3, #42	@ 0x2a
 8001dca:	2202      	movs	r2, #2
 8001dcc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001dce:	787b      	ldrb	r3, [r7, #1]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	f200 8102 	bhi.w	8001fda <HAL_HCD_HC_SubmitRequest+0x292>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <HAL_HCD_HC_SubmitRequest+0x94>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001ded 	.word	0x08001ded
 8001de0:	08001fc5 	.word	0x08001fc5
 8001de4:	08001eb1 	.word	0x08001eb1
 8001de8:	08001f3b 	.word	0x08001f3b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001dec:	7c3b      	ldrb	r3, [r7, #16]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	f040 80f5 	bne.w	8001fde <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001df4:	78bb      	ldrb	r3, [r7, #2]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12d      	bne.n	8001e56 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001dfa:	8b3b      	ldrh	r3, [r7, #24]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d109      	bne.n	8001e14 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	333d      	adds	r3, #61	@ 0x3d
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	333d      	adds	r3, #61	@ 0x3d
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	332a      	adds	r3, #42	@ 0x2a
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001e3e:	e0ce      	b.n	8001fde <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	011b      	lsls	r3, r3, #4
 8001e48:	1a9b      	subs	r3, r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	440b      	add	r3, r1
 8001e4e:	332a      	adds	r3, #42	@ 0x2a
 8001e50:	2202      	movs	r2, #2
 8001e52:	701a      	strb	r2, [r3, #0]
      break;
 8001e54:	e0c3      	b.n	8001fde <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001e56:	78fa      	ldrb	r2, [r7, #3]
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	011b      	lsls	r3, r3, #4
 8001e5e:	1a9b      	subs	r3, r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	440b      	add	r3, r1
 8001e64:	331a      	adds	r3, #26
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	f040 80b8 	bne.w	8001fde <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e6e:	78fa      	ldrb	r2, [r7, #3]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	4613      	mov	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	1a9b      	subs	r3, r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	440b      	add	r3, r1
 8001e7c:	333c      	adds	r3, #60	@ 0x3c
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d10a      	bne.n	8001e9a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e84:	78fa      	ldrb	r2, [r7, #3]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	011b      	lsls	r3, r3, #4
 8001e8c:	1a9b      	subs	r3, r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	332a      	adds	r3, #42	@ 0x2a
 8001e94:	2200      	movs	r2, #0
 8001e96:	701a      	strb	r2, [r3, #0]
      break;
 8001e98:	e0a1      	b.n	8001fde <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	332a      	adds	r3, #42	@ 0x2a
 8001eaa:	2202      	movs	r2, #2
 8001eac:	701a      	strb	r2, [r3, #0]
      break;
 8001eae:	e096      	b.n	8001fde <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001eb0:	78bb      	ldrb	r3, [r7, #2]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d120      	bne.n	8001ef8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001eb6:	78fa      	ldrb	r2, [r7, #3]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	1a9b      	subs	r3, r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	333d      	adds	r3, #61	@ 0x3d
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	332a      	adds	r3, #42	@ 0x2a
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001ee0:	e07e      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ee2:	78fa      	ldrb	r2, [r7, #3]
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	011b      	lsls	r3, r3, #4
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	440b      	add	r3, r1
 8001ef0:	332a      	adds	r3, #42	@ 0x2a
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	701a      	strb	r2, [r3, #0]
      break;
 8001ef6:	e073      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	333c      	adds	r3, #60	@ 0x3c
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d10a      	bne.n	8001f24 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0e:	78fa      	ldrb	r2, [r7, #3]
 8001f10:	6879      	ldr	r1, [r7, #4]
 8001f12:	4613      	mov	r3, r2
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	440b      	add	r3, r1
 8001f1c:	332a      	adds	r3, #42	@ 0x2a
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
      break;
 8001f22:	e05d      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	332a      	adds	r3, #42	@ 0x2a
 8001f34:	2202      	movs	r2, #2
 8001f36:	701a      	strb	r2, [r3, #0]
      break;
 8001f38:	e052      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001f3a:	78bb      	ldrb	r3, [r7, #2]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d120      	bne.n	8001f82 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f40:	78fa      	ldrb	r2, [r7, #3]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	1a9b      	subs	r3, r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	333d      	adds	r3, #61	@ 0x3d
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d10a      	bne.n	8001f6c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	332a      	adds	r3, #42	@ 0x2a
 8001f66:	2200      	movs	r2, #0
 8001f68:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f6a:	e039      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	011b      	lsls	r3, r3, #4
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	332a      	adds	r3, #42	@ 0x2a
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	701a      	strb	r2, [r3, #0]
      break;
 8001f80:	e02e      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f82:	78fa      	ldrb	r2, [r7, #3]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	333c      	adds	r3, #60	@ 0x3c
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	332a      	adds	r3, #42	@ 0x2a
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
      break;
 8001fac:	e018      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	332a      	adds	r3, #42	@ 0x2a
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	701a      	strb	r2, [r3, #0]
      break;
 8001fc2:	e00d      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	332a      	adds	r3, #42	@ 0x2a
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
      break;
 8001fd8:	e002      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001fda:	bf00      	nop
 8001fdc:	e000      	b.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001fde:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001fe0:	78fa      	ldrb	r2, [r7, #3]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	1a9b      	subs	r3, r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	332c      	adds	r3, #44	@ 0x2c
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	8b39      	ldrh	r1, [r7, #24]
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	1a9b      	subs	r3, r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4403      	add	r3, r0
 8002004:	3334      	adds	r3, #52	@ 0x34
 8002006:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	334c      	adds	r3, #76	@ 0x4c
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800201c:	78fa      	ldrb	r2, [r7, #3]
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	440b      	add	r3, r1
 800202a:	3338      	adds	r3, #56	@ 0x38
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	4613      	mov	r3, r2
 8002036:	011b      	lsls	r3, r3, #4
 8002038:	1a9b      	subs	r3, r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	3315      	adds	r3, #21
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002044:	78fa      	ldrb	r2, [r7, #3]
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	4613      	mov	r3, r2
 800204a:	011b      	lsls	r3, r3, #4
 800204c:	1a9b      	subs	r3, r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	440b      	add	r3, r1
 8002052:	334d      	adds	r3, #77	@ 0x4d
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	78fa      	ldrb	r2, [r7, #3]
 800205e:	4613      	mov	r3, r2
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	1a9b      	subs	r3, r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	3310      	adds	r3, #16
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	1d19      	adds	r1, r3, #4
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	799b      	ldrb	r3, [r3, #6]
 8002072:	461a      	mov	r2, r3
 8002074:	f003 fb92 	bl	800579c <USB_HC_StartXfer>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop

08002084 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f003 f8b0 	bl	8005200 <USB_GetMode>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 80fb 	bne.w	800229e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f003 f873 	bl	8005198 <USB_ReadInterrupts>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80f1 	beq.w	800229c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f003 f86a 	bl	8005198 <USB_ReadInterrupts>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020ce:	d104      	bne.n	80020da <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80020d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f003 f85a 	bl	8005198 <USB_ReadInterrupts>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020ee:	d104      	bne.n	80020fa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80020f8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 f84a 	bl	8005198 <USB_ReadInterrupts>
 8002104:	4603      	mov	r3, r0
 8002106:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800210a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800210e:	d104      	bne.n	800211a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002118:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 f83a 	bl	8005198 <USB_ReadInterrupts>
 8002124:	4603      	mov	r3, r0
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d103      	bne.n	8002136 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2202      	movs	r2, #2
 8002134:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f003 f82c 	bl	8005198 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002146:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800214a:	d120      	bne.n	800218e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002154:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d113      	bne.n	800218e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002166:	2110      	movs	r1, #16
 8002168:	6938      	ldr	r0, [r7, #16]
 800216a:	f002 ff1f 	bl	8004fac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800216e:	6938      	ldr	r0, [r7, #16]
 8002170:	f002 ff4e 	bl	8005010 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7a5b      	ldrb	r3, [r3, #9]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d105      	bne.n	8002188 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2101      	movs	r1, #1
 8002182:	4618      	mov	r0, r3
 8002184:	f003 f940 	bl	8005408 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f005 f8cf 	bl	800732c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f003 f800 	bl	8005198 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800219e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021a2:	d102      	bne.n	80021aa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f001 fd17 	bl	8003bd8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f002 fff2 	bl	8005198 <USB_ReadInterrupts>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d106      	bne.n	80021cc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f005 f898 	bl	80072f4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2208      	movs	r2, #8
 80021ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f002 ffe1 	bl	8005198 <USB_ReadInterrupts>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80021e0:	d139      	bne.n	8002256 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f003 fd52 	bl	8005c90 <USB_HC_ReadInterrupt>
 80021ec:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	e025      	b.n	8002240 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d018      	beq.n	800223a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800221a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800221e:	d106      	bne.n	800222e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	4619      	mov	r1, r3
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f8e9 	bl	80023fe <HCD_HC_IN_IRQHandler>
 800222c:	e005      	b.n	800223a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	4619      	mov	r1, r3
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f000 ff4b 	bl	80030d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	795b      	ldrb	r3, [r3, #5]
 8002244:	461a      	mov	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	4293      	cmp	r3, r2
 800224a:	d3d3      	bcc.n	80021f4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002254:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 ff9c 	bl	8005198 <USB_ReadInterrupts>
 8002260:	4603      	mov	r3, r0
 8002262:	f003 0310 	and.w	r3, r3, #16
 8002266:	2b10      	cmp	r3, #16
 8002268:	d101      	bne.n	800226e <HAL_HCD_IRQHandler+0x1ea>
 800226a:	2301      	movs	r3, #1
 800226c:	e000      	b.n	8002270 <HAL_HCD_IRQHandler+0x1ec>
 800226e:	2300      	movs	r3, #0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d014      	beq.n	800229e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0210 	bic.w	r2, r2, #16
 8002282:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f001 fbc8 	bl	8003a1a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f042 0210 	orr.w	r2, r2, #16
 8002298:	619a      	str	r2, [r3, #24]
 800229a:	e000      	b.n	800229e <HAL_HCD_IRQHandler+0x21a>
      return;
 800229c:	bf00      	nop
    }
  }
}
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d101      	bne.n	80022ba <HAL_HCD_Start+0x16>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e013      	b.n	80022e2 <HAL_HCD_Start+0x3e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2201      	movs	r2, #1
 80022be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f8da 	bl	8005482 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f002 fdfc 	bl	8004ed0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_HCD_Stop+0x16>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e00d      	b.n	800231c <HAL_HCD_Stop+0x32>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 fe2d 	bl	8005f6c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002330:	78fa      	ldrb	r2, [r7, #3]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	1a9b      	subs	r3, r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	334c      	adds	r3, #76	@ 0x4c
 8002340:	781b      	ldrb	r3, [r3, #0]
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	3338      	adds	r3, #56	@ 0x38
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f8cc 	bl	8005522 <USB_GetCurrentFrame>
 800238a:	4603      	mov	r3, r0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3708      	adds	r7, #8
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	331a      	adds	r3, #26
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	331b      	adds	r3, #27
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3325      	adds	r3, #37	@ 0x25
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3324      	adds	r3, #36	@ 0x24
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b086      	sub	sp, #24
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	78fa      	ldrb	r2, [r7, #3]
 800241a:	4611      	mov	r1, r2
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fece 	bl	80051be <USB_ReadChInterrupts>
 8002422:	4603      	mov	r3, r0
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b04      	cmp	r3, #4
 800242a:	d11a      	bne.n	8002462 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002438:	461a      	mov	r2, r3
 800243a:	2304      	movs	r3, #4
 800243c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	334d      	adds	r3, #77	@ 0x4d
 800244e:	2207      	movs	r2, #7
 8002450:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	78fa      	ldrb	r2, [r7, #3]
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f003 fc29 	bl	8005cb2 <USB_HC_Halt>
 8002460:	e09e      	b.n	80025a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	78fa      	ldrb	r2, [r7, #3]
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fea7 	bl	80051be <USB_ReadChInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800247a:	d11b      	bne.n	80024b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002488:	461a      	mov	r2, r3
 800248a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800248e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	334d      	adds	r3, #77	@ 0x4d
 80024a0:	2208      	movs	r2, #8
 80024a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	78fa      	ldrb	r2, [r7, #3]
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f003 fc00 	bl	8005cb2 <USB_HC_Halt>
 80024b2:	e075      	b.n	80025a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	4611      	mov	r1, r2
 80024bc:	4618      	mov	r0, r3
 80024be:	f002 fe7e 	bl	80051be <USB_ReadChInterrupts>
 80024c2:	4603      	mov	r3, r0
 80024c4:	f003 0308 	and.w	r3, r3, #8
 80024c8:	2b08      	cmp	r3, #8
 80024ca:	d11a      	bne.n	8002502 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80024cc:	78fb      	ldrb	r3, [r7, #3]
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024d8:	461a      	mov	r2, r3
 80024da:	2308      	movs	r3, #8
 80024dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80024de:	78fa      	ldrb	r2, [r7, #3]
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	1a9b      	subs	r3, r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	334d      	adds	r3, #77	@ 0x4d
 80024ee:	2206      	movs	r2, #6
 80024f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	78fa      	ldrb	r2, [r7, #3]
 80024f8:	4611      	mov	r1, r2
 80024fa:	4618      	mov	r0, r3
 80024fc:	f003 fbd9 	bl	8005cb2 <USB_HC_Halt>
 8002500:	e04e      	b.n	80025a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fe57 	bl	80051be <USB_ReadChInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002516:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800251a:	d11b      	bne.n	8002554 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	015a      	lsls	r2, r3, #5
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4413      	add	r3, r2
 8002524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002528:	461a      	mov	r2, r3
 800252a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800252e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	334d      	adds	r3, #77	@ 0x4d
 8002540:	2209      	movs	r2, #9
 8002542:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f003 fbb0 	bl	8005cb2 <USB_HC_Halt>
 8002552:	e025      	b.n	80025a0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f002 fe2e 	bl	80051be <USB_ReadChInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002568:	2b80      	cmp	r3, #128	@ 0x80
 800256a:	d119      	bne.n	80025a0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	015a      	lsls	r2, r3, #5
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4413      	add	r3, r2
 8002574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002578:	461a      	mov	r2, r3
 800257a:	2380      	movs	r3, #128	@ 0x80
 800257c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	334d      	adds	r3, #77	@ 0x4d
 800258e:	2207      	movs	r2, #7
 8002590:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	4611      	mov	r1, r2
 800259a:	4618      	mov	r0, r3
 800259c:	f003 fb89 	bl	8005cb2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f002 fe08 	bl	80051be <USB_ReadChInterrupts>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b8:	d112      	bne.n	80025e0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fb75 	bl	8005cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d4:	461a      	mov	r2, r3
 80025d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025da:	6093      	str	r3, [r2, #8]
 80025dc:	f000 bd75 	b.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	78fa      	ldrb	r2, [r7, #3]
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 fde8 	bl	80051be <USB_ReadChInterrupts>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f040 8128 	bne.w	800284a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4413      	add	r3, r2
 8002602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002606:	461a      	mov	r2, r3
 8002608:	2320      	movs	r3, #32
 800260a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	331b      	adds	r3, #27
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d119      	bne.n	8002656 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	331b      	adds	r3, #27
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	0151      	lsls	r1, r2, #5
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	440a      	add	r2, r1
 800264c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002650:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002654:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	799b      	ldrb	r3, [r3, #6]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d01b      	beq.n	8002696 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3330      	adds	r3, #48	@ 0x30
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	78fb      	ldrb	r3, [r7, #3]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	1ac9      	subs	r1, r1, r3
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4403      	add	r3, r0
 8002692:	3338      	adds	r3, #56	@ 0x38
 8002694:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	334d      	adds	r3, #77	@ 0x4d
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3344      	adds	r3, #68	@ 0x44
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	015a      	lsls	r2, r3, #5
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4413      	add	r3, r2
 80026c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ca:	461a      	mov	r2, r3
 80026cc:	2301      	movs	r3, #1
 80026ce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026d0:	78fa      	ldrb	r2, [r7, #3]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4613      	mov	r3, r2
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	1a9b      	subs	r3, r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	440b      	add	r3, r1
 80026de:	3326      	adds	r3, #38	@ 0x26
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026e6:	78fa      	ldrb	r2, [r7, #3]
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	4613      	mov	r3, r2
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	440b      	add	r3, r1
 80026f4:	3326      	adds	r3, #38	@ 0x26
 80026f6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d110      	bne.n	800271e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f003 fad4 	bl	8005cb2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	015a      	lsls	r2, r3, #5
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4413      	add	r3, r2
 8002712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002716:	461a      	mov	r2, r3
 8002718:	2310      	movs	r3, #16
 800271a:	6093      	str	r3, [r2, #8]
 800271c:	e03d      	b.n	800279a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3326      	adds	r3, #38	@ 0x26
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b03      	cmp	r3, #3
 8002732:	d00a      	beq.n	800274a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	3326      	adds	r3, #38	@ 0x26
 8002744:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002746:	2b01      	cmp	r3, #1
 8002748:	d127      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800274a:	78fb      	ldrb	r3, [r7, #3]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	0151      	lsls	r1, r2, #5
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	440a      	add	r2, r1
 8002760:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002764:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002768:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800276a:	78fa      	ldrb	r2, [r7, #3]
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	334c      	adds	r3, #76	@ 0x4c
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800277e:	78fa      	ldrb	r2, [r7, #3]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	4613      	mov	r3, r2
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	440b      	add	r3, r1
 800278c:	334c      	adds	r3, #76	@ 0x4c
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	78fb      	ldrb	r3, [r7, #3]
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f004 fdd7 	bl	8007348 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	799b      	ldrb	r3, [r3, #6]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d13b      	bne.n	800281a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	1a9b      	subs	r3, r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	3338      	adds	r3, #56	@ 0x38
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	78fa      	ldrb	r2, [r7, #3]
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	011b      	lsls	r3, r3, #4
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	3328      	adds	r3, #40	@ 0x28
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	440b      	add	r3, r1
 80027c8:	1e59      	subs	r1, r3, #1
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4403      	add	r3, r0
 80027d8:	3328      	adds	r3, #40	@ 0x28
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8470 	beq.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	333c      	adds	r3, #60	@ 0x3c
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2d8      	uxtb	r0, r3
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	333c      	adds	r3, #60	@ 0x3c
 8002812:	4602      	mov	r2, r0
 8002814:	701a      	strb	r2, [r3, #0]
 8002816:	f000 bc58 	b.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	333c      	adds	r3, #60	@ 0x3c
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2d8      	uxtb	r0, r3
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	440b      	add	r3, r1
 8002840:	333c      	adds	r3, #60	@ 0x3c
 8002842:	4602      	mov	r2, r0
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	f000 bc40 	b.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	4611      	mov	r1, r2
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fcb3 	bl	80051be <USB_ReadChInterrupts>
 8002858:	4603      	mov	r3, r0
 800285a:	f003 0320 	and.w	r3, r3, #32
 800285e:	2b20      	cmp	r3, #32
 8002860:	d131      	bne.n	80028c6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	2320      	movs	r3, #32
 8002872:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	331a      	adds	r3, #26
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 841f 	bne.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	331b      	adds	r3, #27
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	334d      	adds	r3, #77	@ 0x4d
 80028b0:	2203      	movs	r2, #3
 80028b2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	78fa      	ldrb	r2, [r7, #3]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f003 f9f8 	bl	8005cb2 <USB_HC_Halt>
 80028c2:	f000 bc02 	b.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f002 fc75 	bl	80051be <USB_ReadChInterrupts>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b02      	cmp	r3, #2
 80028dc:	f040 8305 	bne.w	8002eea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80028e0:	78fb      	ldrb	r3, [r7, #3]
 80028e2:	015a      	lsls	r2, r3, #5
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	4413      	add	r3, r2
 80028e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ec:	461a      	mov	r2, r3
 80028ee:	2302      	movs	r3, #2
 80028f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	011b      	lsls	r3, r3, #4
 80028fa:	1a9b      	subs	r3, r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	334d      	adds	r3, #77	@ 0x4d
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d114      	bne.n	8002932 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002908:	78fa      	ldrb	r2, [r7, #3]
 800290a:	6879      	ldr	r1, [r7, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	011b      	lsls	r3, r3, #4
 8002910:	1a9b      	subs	r3, r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	334d      	adds	r3, #77	@ 0x4d
 8002918:	2202      	movs	r2, #2
 800291a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	1a9b      	subs	r3, r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	334c      	adds	r3, #76	@ 0x4c
 800292c:	2201      	movs	r2, #1
 800292e:	701a      	strb	r2, [r3, #0]
 8002930:	e2cc      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	334d      	adds	r3, #77	@ 0x4d
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d114      	bne.n	8002972 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	334d      	adds	r3, #77	@ 0x4d
 8002958:	2202      	movs	r2, #2
 800295a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800295c:	78fa      	ldrb	r2, [r7, #3]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	011b      	lsls	r3, r3, #4
 8002964:	1a9b      	subs	r3, r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	334c      	adds	r3, #76	@ 0x4c
 800296c:	2205      	movs	r2, #5
 800296e:	701a      	strb	r2, [r3, #0]
 8002970:	e2ac      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	1a9b      	subs	r3, r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	334d      	adds	r3, #77	@ 0x4d
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b07      	cmp	r3, #7
 8002986:	d00b      	beq.n	80029a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	1a9b      	subs	r3, r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	334d      	adds	r3, #77	@ 0x4d
 8002998:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800299a:	2b09      	cmp	r3, #9
 800299c:	f040 80a6 	bne.w	8002aec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	4613      	mov	r3, r2
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	1a9b      	subs	r3, r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	440b      	add	r3, r1
 80029ae:	334d      	adds	r3, #77	@ 0x4d
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	4613      	mov	r3, r2
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	1a9b      	subs	r3, r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	3344      	adds	r3, #68	@ 0x44
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	1c59      	adds	r1, r3, #1
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4403      	add	r3, r0
 80029d4:	3344      	adds	r3, #68	@ 0x44
 80029d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	3344      	adds	r3, #68	@ 0x44
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d943      	bls.n	8002a76 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3344      	adds	r3, #68	@ 0x44
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	331a      	adds	r3, #26
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d123      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	331b      	adds	r3, #27
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	331c      	adds	r3, #28
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	015a      	lsls	r2, r3, #5
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	0151      	lsls	r1, r2, #5
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	440a      	add	r2, r1
 8002a56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334c      	adds	r3, #76	@ 0x4c
 8002a70:	2204      	movs	r2, #4
 8002a72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a74:	e229      	b.n	8002eca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	334c      	adds	r3, #76	@ 0x4c
 8002a86:	2202      	movs	r2, #2
 8002a88:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	011b      	lsls	r3, r3, #4
 8002a92:	1a9b      	subs	r3, r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3326      	adds	r3, #38	@ 0x26
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aa0:	78fa      	ldrb	r2, [r7, #3]
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	1a9b      	subs	r3, r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	3326      	adds	r3, #38	@ 0x26
 8002ab0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f040 8209 	bne.w	8002eca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ab8:	78fb      	ldrb	r3, [r7, #3]
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002ace:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ad6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002aea:	e1ee      	b.n	8002eca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	334d      	adds	r3, #77	@ 0x4d
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b05      	cmp	r3, #5
 8002b00:	f040 80c8 	bne.w	8002c94 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	334d      	adds	r3, #77	@ 0x4d
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	331b      	adds	r3, #27
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	f040 81ce 	bne.w	8002ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	6879      	ldr	r1, [r7, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3326      	adds	r3, #38	@ 0x26
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d16b      	bne.n	8002c1e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3348      	adds	r3, #72	@ 0x48
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	1c59      	adds	r1, r3, #1
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	1a9b      	subs	r3, r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4403      	add	r3, r0
 8002b66:	3348      	adds	r3, #72	@ 0x48
 8002b68:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3348      	adds	r3, #72	@ 0x48
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d943      	bls.n	8002c08 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	3348      	adds	r3, #72	@ 0x48
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	331b      	adds	r3, #27
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3344      	adds	r3, #68	@ 0x44
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d809      	bhi.n	8002bd2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	331c      	adds	r3, #28
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bd2:	78fb      	ldrb	r3, [r7, #3]
 8002bd4:	015a      	lsls	r2, r3, #5
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	0151      	lsls	r1, r2, #5
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	440a      	add	r2, r1
 8002be8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002bf2:	78fa      	ldrb	r2, [r7, #3]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	1a9b      	subs	r3, r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	334c      	adds	r3, #76	@ 0x4c
 8002c02:	2204      	movs	r2, #4
 8002c04:	701a      	strb	r2, [r3, #0]
 8002c06:	e014      	b.n	8002c32 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	1a9b      	subs	r3, r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	334c      	adds	r3, #76	@ 0x4c
 8002c18:	2202      	movs	r2, #2
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e009      	b.n	8002c32 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334c      	adds	r3, #76	@ 0x4c
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3326      	adds	r3, #38	@ 0x26
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00b      	beq.n	8002c60 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	1a9b      	subs	r3, r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3326      	adds	r3, #38	@ 0x26
 8002c58:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	f040 8136 	bne.w	8002ecc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	015a      	lsls	r2, r3, #5
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c76:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c7e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e11b      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002c94:	78fa      	ldrb	r2, [r7, #3]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	011b      	lsls	r3, r3, #4
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	334d      	adds	r3, #77	@ 0x4d
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	f040 8081 	bne.w	8002dae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334d      	adds	r3, #77	@ 0x4d
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	331b      	adds	r3, #27
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	f040 80fa 	bne.w	8002ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334c      	adds	r3, #76	@ 0x4c
 8002ce8:	2202      	movs	r2, #2
 8002cea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	0151      	lsls	r1, r2, #5
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	440a      	add	r2, r1
 8002d02:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d0a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002d2a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	0151      	lsls	r1, r2, #5
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	440a      	add	r2, r1
 8002d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d46:	f023 0320 	bic.w	r3, r3, #32
 8002d4a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	3326      	adds	r3, #38	@ 0x26
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	3326      	adds	r3, #38	@ 0x26
 8002d72:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f040 80a9 	bne.w	8002ecc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d90:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d98:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da6:	461a      	mov	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6013      	str	r3, [r2, #0]
 8002dac:	e08e      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	334d      	adds	r3, #77	@ 0x4d
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d143      	bne.n	8002e4c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334d      	adds	r3, #77	@ 0x4d
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	1a9b      	subs	r3, r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	440b      	add	r3, r1
 8002de6:	334c      	adds	r3, #76	@ 0x4c
 8002de8:	2202      	movs	r2, #2
 8002dea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	3326      	adds	r3, #38	@ 0x26
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	1a9b      	subs	r3, r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3326      	adds	r3, #38	@ 0x26
 8002e12:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d159      	bne.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e2e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e36:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e44:	461a      	mov	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e03f      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	334d      	adds	r3, #77	@ 0x4d
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d126      	bne.n	8002eb0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	334d      	adds	r3, #77	@ 0x4d
 8002e72:	2202      	movs	r2, #2
 8002e74:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	3344      	adds	r3, #68	@ 0x44
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	1c59      	adds	r1, r3, #1
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4403      	add	r3, r0
 8002e96:	3344      	adds	r3, #68	@ 0x44
 8002e98:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	334c      	adds	r3, #76	@ 0x4c
 8002eaa:	2204      	movs	r2, #4
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e00d      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	334d      	adds	r3, #77	@ 0x4d
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	f000 8100 	beq.w	80030c8 <HCD_HC_IN_IRQHandler+0xcca>
 8002ec8:	e000      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334c      	adds	r3, #76	@ 0x4c
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f004 fa30 	bl	8007348 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002ee8:	e0ef      	b.n	80030ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78fa      	ldrb	r2, [r7, #3]
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f002 f963 	bl	80051be <USB_ReadChInterrupts>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efe:	2b40      	cmp	r3, #64	@ 0x40
 8002f00:	d12f      	bne.n	8002f62 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f02:	78fb      	ldrb	r3, [r7, #3]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0e:	461a      	mov	r2, r3
 8002f10:	2340      	movs	r3, #64	@ 0x40
 8002f12:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334d      	adds	r3, #77	@ 0x4d
 8002f24:	2205      	movs	r2, #5
 8002f26:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	331a      	adds	r3, #26
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d109      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3344      	adds	r3, #68	@ 0x44
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 fea9 	bl	8005cb2 <USB_HC_Halt>
 8002f60:	e0b3      	b.n	80030ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 f927 	bl	80051be <USB_ReadChInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	f040 80a7 	bne.w	80030ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3326      	adds	r3, #38	@ 0x26
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d11b      	bne.n	8002fca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	3344      	adds	r3, #68	@ 0x44
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	6879      	ldr	r1, [r7, #4]
 8002faa:	4613      	mov	r3, r2
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	440b      	add	r3, r1
 8002fb4:	334d      	adds	r3, #77	@ 0x4d
 8002fb6:	2204      	movs	r2, #4
 8002fb8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 fe75 	bl	8005cb2 <USB_HC_Halt>
 8002fc8:	e03f      	b.n	800304a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3326      	adds	r3, #38	@ 0x26
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	3326      	adds	r3, #38	@ 0x26
 8002ff0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d129      	bne.n	800304a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	1a9b      	subs	r3, r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	3344      	adds	r3, #68	@ 0x44
 8003006:	2200      	movs	r2, #0
 8003008:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	799b      	ldrb	r3, [r3, #6]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00a      	beq.n	8003028 <HCD_HC_IN_IRQHandler+0xc2a>
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	6879      	ldr	r1, [r7, #4]
 8003016:	4613      	mov	r3, r2
 8003018:	011b      	lsls	r3, r3, #4
 800301a:	1a9b      	subs	r3, r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	331b      	adds	r3, #27
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d110      	bne.n	800304a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003028:	78fa      	ldrb	r2, [r7, #3]
 800302a:	6879      	ldr	r1, [r7, #4]
 800302c:	4613      	mov	r3, r2
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	440b      	add	r3, r1
 8003036:	334d      	adds	r3, #77	@ 0x4d
 8003038:	2204      	movs	r2, #4
 800303a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fe34 	bl	8005cb2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	331b      	adds	r3, #27
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d129      	bne.n	80030b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	331b      	adds	r3, #27
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003074:	78fb      	ldrb	r3, [r7, #3]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	0151      	lsls	r1, r2, #5
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	440a      	add	r2, r1
 800308a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	78fa      	ldrb	r2, [r7, #3]
 80030a4:	0151      	lsls	r1, r2, #5
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	440a      	add	r2, r1
 80030aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	6093      	str	r3, [r2, #8]
 80030c6:	e000      	b.n	80030ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80030c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	78fa      	ldrb	r2, [r7, #3]
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f002 f865 	bl	80051be <USB_ReadChInterrupts>
 80030f4:	4603      	mov	r3, r0
 80030f6:	f003 0304 	and.w	r3, r3, #4
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	d11b      	bne.n	8003136 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80030fe:	78fb      	ldrb	r3, [r7, #3]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4413      	add	r3, r2
 8003106:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310a:	461a      	mov	r2, r3
 800310c:	2304      	movs	r3, #4
 800310e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	334d      	adds	r3, #77	@ 0x4d
 8003120:	2207      	movs	r2, #7
 8003122:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	78fa      	ldrb	r2, [r7, #3]
 800312a:	4611      	mov	r1, r2
 800312c:	4618      	mov	r0, r3
 800312e:	f002 fdc0 	bl	8005cb2 <USB_HC_Halt>
 8003132:	f000 bc6f 	b.w	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	4611      	mov	r1, r2
 800313e:	4618      	mov	r0, r3
 8003140:	f002 f83d 	bl	80051be <USB_ReadChInterrupts>
 8003144:	4603      	mov	r3, r0
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	2b20      	cmp	r3, #32
 800314c:	f040 8082 	bne.w	8003254 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003150:	78fb      	ldrb	r3, [r7, #3]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315c:	461a      	mov	r2, r3
 800315e:	2320      	movs	r3, #32
 8003160:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3319      	adds	r3, #25
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d124      	bne.n	80031c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	3319      	adds	r3, #25
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	334c      	adds	r3, #76	@ 0x4c
 800319c:	2202      	movs	r2, #2
 800319e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334d      	adds	r3, #77	@ 0x4d
 80031b0:	2203      	movs	r2, #3
 80031b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f002 fd78 	bl	8005cb2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	331a      	adds	r3, #26
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 841d 	bne.w	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	331b      	adds	r3, #27
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f040 8411 	bne.w	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3326      	adds	r3, #38	@ 0x26
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d009      	beq.n	800321c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003208:	78fa      	ldrb	r2, [r7, #3]
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	4613      	mov	r3, r2
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	331b      	adds	r3, #27
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	334d      	adds	r3, #77	@ 0x4d
 800322c:	2203      	movs	r2, #3
 800322e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	4611      	mov	r1, r2
 8003238:	4618      	mov	r0, r3
 800323a:	f002 fd3a 	bl	8005cb2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	4613      	mov	r3, r2
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	440b      	add	r3, r1
 800324c:	3344      	adds	r3, #68	@ 0x44
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
 8003252:	e3df      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f001 ffae 	bl	80051be <USB_ReadChInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800326c:	d111      	bne.n	8003292 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327a:	461a      	mov	r2, r3
 800327c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003280:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	4611      	mov	r1, r2
 800328a:	4618      	mov	r0, r3
 800328c:	f002 fd11 	bl	8005cb2 <USB_HC_Halt>
 8003290:	e3c0      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f001 ff8f 	bl	80051be <USB_ReadChInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d168      	bne.n	800337c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3344      	adds	r3, #68	@ 0x44
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	4611      	mov	r1, r2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 ff79 	bl	80051be <USB_ReadChInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d2:	2b40      	cmp	r3, #64	@ 0x40
 80032d4:	d112      	bne.n	80032fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	3319      	adds	r3, #25
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032ea:	78fb      	ldrb	r3, [r7, #3]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	2340      	movs	r3, #64	@ 0x40
 80032fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	331b      	adds	r3, #27
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d019      	beq.n	8003346 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	331b      	adds	r3, #27
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	4413      	add	r3, r2
 800332e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	0151      	lsls	r1, r2, #5
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	440a      	add	r2, r1
 800333c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003344:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003352:	461a      	mov	r2, r3
 8003354:	2301      	movs	r3, #1
 8003356:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	011b      	lsls	r3, r3, #4
 8003360:	1a9b      	subs	r3, r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	334d      	adds	r3, #77	@ 0x4d
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f002 fc9c 	bl	8005cb2 <USB_HC_Halt>
 800337a:	e34b      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	78fa      	ldrb	r2, [r7, #3]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f001 ff1a 	bl	80051be <USB_ReadChInterrupts>
 800338a:	4603      	mov	r3, r0
 800338c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003390:	2b40      	cmp	r3, #64	@ 0x40
 8003392:	d139      	bne.n	8003408 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	334d      	adds	r3, #77	@ 0x4d
 80033a4:	2205      	movs	r2, #5
 80033a6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	331a      	adds	r3, #26
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80033be:	78fa      	ldrb	r2, [r7, #3]
 80033c0:	6879      	ldr	r1, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	1a9b      	subs	r3, r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3319      	adds	r3, #25
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80033d2:	78fa      	ldrb	r2, [r7, #3]
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	4613      	mov	r3, r2
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	1a9b      	subs	r3, r3, r2
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	440b      	add	r3, r1
 80033e0:	3344      	adds	r3, #68	@ 0x44
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fc5f 	bl	8005cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033f4:	78fb      	ldrb	r3, [r7, #3]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003400:	461a      	mov	r2, r3
 8003402:	2340      	movs	r3, #64	@ 0x40
 8003404:	6093      	str	r3, [r2, #8]
 8003406:	e305      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	4611      	mov	r1, r2
 8003410:	4618      	mov	r0, r3
 8003412:	f001 fed4 	bl	80051be <USB_ReadChInterrupts>
 8003416:	4603      	mov	r3, r0
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b08      	cmp	r3, #8
 800341e:	d11a      	bne.n	8003456 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	015a      	lsls	r2, r3, #5
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4413      	add	r3, r2
 8003428:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800342c:	461a      	mov	r2, r3
 800342e:	2308      	movs	r3, #8
 8003430:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	6879      	ldr	r1, [r7, #4]
 8003436:	4613      	mov	r3, r2
 8003438:	011b      	lsls	r3, r3, #4
 800343a:	1a9b      	subs	r3, r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	440b      	add	r3, r1
 8003440:	334d      	adds	r3, #77	@ 0x4d
 8003442:	2206      	movs	r2, #6
 8003444:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f002 fc2f 	bl	8005cb2 <USB_HC_Halt>
 8003454:	e2de      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f001 fead 	bl	80051be <USB_ReadChInterrupts>
 8003464:	4603      	mov	r3, r0
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b10      	cmp	r3, #16
 800346c:	d144      	bne.n	80034f8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	3344      	adds	r3, #68	@ 0x44
 800347e:	2200      	movs	r2, #0
 8003480:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	2204      	movs	r2, #4
 8003494:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3319      	adds	r3, #25
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d114      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3318      	adds	r3, #24
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3319      	adds	r3, #25
 80034d2:	2201      	movs	r2, #1
 80034d4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f002 fbe7 	bl	8005cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f0:	461a      	mov	r2, r3
 80034f2:	2310      	movs	r3, #16
 80034f4:	6093      	str	r3, [r2, #8]
 80034f6:	e28d      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	4611      	mov	r1, r2
 8003500:	4618      	mov	r0, r3
 8003502:	f001 fe5c 	bl	80051be <USB_ReadChInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350c:	2b80      	cmp	r3, #128	@ 0x80
 800350e:	d169      	bne.n	80035e4 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	799b      	ldrb	r3, [r3, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d111      	bne.n	800353c <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334d      	adds	r3, #77	@ 0x4d
 8003528:	2207      	movs	r2, #7
 800352a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f002 fbbc 	bl	8005cb2 <USB_HC_Halt>
 800353a:	e049      	b.n	80035d0 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3344      	adds	r3, #68	@ 0x44
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	1c59      	adds	r1, r3, #1
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4403      	add	r3, r0
 800355c:	3344      	adds	r3, #68	@ 0x44
 800355e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	3344      	adds	r3, #68	@ 0x44
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d922      	bls.n	80035bc <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3344      	adds	r3, #68	@ 0x44
 8003586:	2200      	movs	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	4613      	mov	r3, r2
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	334c      	adds	r3, #76	@ 0x4c
 800359a:	2204      	movs	r2, #4
 800359c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	334c      	adds	r3, #76	@ 0x4c
 80035ae:	781a      	ldrb	r2, [r3, #0]
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f003 fec7 	bl	8007348 <HAL_HCD_HC_NotifyURBChange_Callback>
 80035ba:	e009      	b.n	80035d0 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	334c      	adds	r3, #76	@ 0x4c
 80035cc:	2202      	movs	r2, #2
 80035ce:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035dc:	461a      	mov	r2, r3
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	6093      	str	r3, [r2, #8]
 80035e2:	e217      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f001 fde6 	bl	80051be <USB_ReadChInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035fc:	d11b      	bne.n	8003636 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80035fe:	78fa      	ldrb	r2, [r7, #3]
 8003600:	6879      	ldr	r1, [r7, #4]
 8003602:	4613      	mov	r3, r2
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	440b      	add	r3, r1
 800360c:	334d      	adds	r3, #77	@ 0x4d
 800360e:	2209      	movs	r2, #9
 8003610:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fb49 	bl	8005cb2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003620:	78fb      	ldrb	r3, [r7, #3]
 8003622:	015a      	lsls	r2, r3, #5
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4413      	add	r3, r2
 8003628:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362c:	461a      	mov	r2, r3
 800362e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003632:	6093      	str	r3, [r2, #8]
 8003634:	e1ee      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	4611      	mov	r1, r2
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fdbd 	bl	80051be <USB_ReadChInterrupts>
 8003644:	4603      	mov	r3, r0
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	f040 81df 	bne.w	8003a0e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365c:	461a      	mov	r2, r3
 800365e:	2302      	movs	r3, #2
 8003660:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	4613      	mov	r3, r2
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	1a9b      	subs	r3, r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	334d      	adds	r3, #77	@ 0x4d
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	f040 8093 	bne.w	80037a0 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	334d      	adds	r3, #77	@ 0x4d
 800368a:	2202      	movs	r2, #2
 800368c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	334c      	adds	r3, #76	@ 0x4c
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3326      	adds	r3, #38	@ 0x26
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d00b      	beq.n	80036d0 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3326      	adds	r3, #38	@ 0x26
 80036c8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	f040 8190 	bne.w	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	799b      	ldrb	r3, [r3, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d115      	bne.n	8003704 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	333d      	adds	r3, #61	@ 0x3d
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	f083 0301 	eor.w	r3, r3, #1
 80036f0:	b2d8      	uxtb	r0, r3
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	333d      	adds	r3, #61	@ 0x3d
 8003700:	4602      	mov	r2, r0
 8003702:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	799b      	ldrb	r3, [r3, #6]
 8003708:	2b01      	cmp	r3, #1
 800370a:	f040 8171 	bne.w	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
 800370e:	78fa      	ldrb	r2, [r7, #3]
 8003710:	6879      	ldr	r1, [r7, #4]
 8003712:	4613      	mov	r3, r2
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	1a9b      	subs	r3, r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3334      	adds	r3, #52	@ 0x34
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8165 	beq.w	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3334      	adds	r3, #52	@ 0x34
 8003736:	6819      	ldr	r1, [r3, #0]
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	3328      	adds	r3, #40	@ 0x28
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	440b      	add	r3, r1
 800374c:	1e59      	subs	r1, r3, #1
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4403      	add	r3, r0
 800375c:	3328      	adds	r3, #40	@ 0x28
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	fbb1 f3f3 	udiv	r3, r1, r3
 8003764:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f003 0301 	and.w	r3, r3, #1
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 813f 	beq.w	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	333d      	adds	r3, #61	@ 0x3d
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	f083 0301 	eor.w	r3, r3, #1
 800378a:	b2d8      	uxtb	r0, r3
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	333d      	adds	r3, #61	@ 0x3d
 800379a:	4602      	mov	r2, r0
 800379c:	701a      	strb	r2, [r3, #0]
 800379e:	e127      	b.n	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	334d      	adds	r3, #77	@ 0x4d
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d120      	bne.n	80037f8 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334d      	adds	r3, #77	@ 0x4d
 80037c6:	2202      	movs	r2, #2
 80037c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	331b      	adds	r3, #27
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f040 8107 	bne.w	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	6879      	ldr	r1, [r7, #4]
 80037e6:	4613      	mov	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	334c      	adds	r3, #76	@ 0x4c
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e0fb      	b.n	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80037f8:	78fa      	ldrb	r2, [r7, #3]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	334d      	adds	r3, #77	@ 0x4d
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	2b04      	cmp	r3, #4
 800380c:	d13a      	bne.n	8003884 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	6879      	ldr	r1, [r7, #4]
 8003812:	4613      	mov	r3, r2
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	1a9b      	subs	r3, r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	334d      	adds	r3, #77	@ 0x4d
 800381e:	2202      	movs	r2, #2
 8003820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	6879      	ldr	r1, [r7, #4]
 8003826:	4613      	mov	r3, r2
 8003828:	011b      	lsls	r3, r3, #4
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	440b      	add	r3, r1
 8003830:	334c      	adds	r3, #76	@ 0x4c
 8003832:	2202      	movs	r2, #2
 8003834:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	4613      	mov	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	1a9b      	subs	r3, r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	331b      	adds	r3, #27
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	f040 80d1 	bne.w	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800384e:	78fa      	ldrb	r2, [r7, #3]
 8003850:	6879      	ldr	r1, [r7, #4]
 8003852:	4613      	mov	r3, r2
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	1a9b      	subs	r3, r3, r2
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	440b      	add	r3, r1
 800385c:	331b      	adds	r3, #27
 800385e:	2200      	movs	r2, #0
 8003860:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	440a      	add	r2, r1
 8003878:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800387c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003880:	6053      	str	r3, [r2, #4]
 8003882:	e0b5      	b.n	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	334d      	adds	r3, #77	@ 0x4d
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b05      	cmp	r3, #5
 8003898:	d114      	bne.n	80038c4 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	1a9b      	subs	r3, r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	334d      	adds	r3, #77	@ 0x4d
 80038aa:	2202      	movs	r2, #2
 80038ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	011b      	lsls	r3, r3, #4
 80038b6:	1a9b      	subs	r3, r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	334c      	adds	r3, #76	@ 0x4c
 80038be:	2202      	movs	r2, #2
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e095      	b.n	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	334d      	adds	r3, #77	@ 0x4d
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d114      	bne.n	8003904 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	334d      	adds	r3, #77	@ 0x4d
 80038ea:	2202      	movs	r2, #2
 80038ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	334c      	adds	r3, #76	@ 0x4c
 80038fe:	2205      	movs	r2, #5
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e075      	b.n	80039f0 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003904:	78fa      	ldrb	r2, [r7, #3]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	011b      	lsls	r3, r3, #4
 800390c:	1a9b      	subs	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	334d      	adds	r3, #77	@ 0x4d
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b07      	cmp	r3, #7
 8003918:	d00a      	beq.n	8003930 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334d      	adds	r3, #77	@ 0x4d
 800392a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800392c:	2b09      	cmp	r3, #9
 800392e:	d170      	bne.n	8003a12 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	2202      	movs	r2, #2
 8003942:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3344      	adds	r3, #68	@ 0x44
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	1c59      	adds	r1, r3, #1
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4403      	add	r3, r0
 8003964:	3344      	adds	r3, #68	@ 0x44
 8003966:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	3344      	adds	r3, #68	@ 0x44
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d914      	bls.n	80039a8 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3344      	adds	r3, #68	@ 0x44
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003992:	78fa      	ldrb	r2, [r7, #3]
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	334c      	adds	r3, #76	@ 0x4c
 80039a2:	2204      	movs	r2, #4
 80039a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039a6:	e022      	b.n	80039ee <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	334c      	adds	r3, #76	@ 0x4c
 80039b8:	2202      	movs	r2, #2
 80039ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80039bc:	78fb      	ldrb	r3, [r7, #3]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80039d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e8:	461a      	mov	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039f0:	78fa      	ldrb	r2, [r7, #3]
 80039f2:	6879      	ldr	r1, [r7, #4]
 80039f4:	4613      	mov	r3, r2
 80039f6:	011b      	lsls	r3, r3, #4
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	334c      	adds	r3, #76	@ 0x4c
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	4619      	mov	r1, r3
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f003 fc9e 	bl	8007348 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a0c:	e002      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003a0e:	bf00      	nop
 8003a10:	e000      	b.n	8003a14 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003a12:	bf00      	nop
  }
}
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b08a      	sub	sp, #40	@ 0x28
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	f003 030f 	and.w	r3, r3, #15
 8003a3a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	0c5b      	lsrs	r3, r3, #17
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a4e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d004      	beq.n	8003a60 <HCD_RXQLVL_IRQHandler+0x46>
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	f000 80b6 	beq.w	8003bca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003a5e:	e0b7      	b.n	8003bd0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	f000 80b3 	beq.w	8003bce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	332c      	adds	r3, #44	@ 0x2c
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f000 80a7 	beq.w	8003bce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	3338      	adds	r3, #56	@ 0x38
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	18d1      	adds	r1, r2, r3
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	011b      	lsls	r3, r3, #4
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4403      	add	r3, r0
 8003aa4:	3334      	adds	r3, #52	@ 0x34
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4299      	cmp	r1, r3
 8003aaa:	f200 8083 	bhi.w	8003bb4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6818      	ldr	r0, [r3, #0]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	332c      	adds	r3, #44	@ 0x2c
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f001 fb0d 	bl	80050e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	332c      	adds	r3, #44	@ 0x2c
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	18d1      	adds	r1, r2, r3
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	69ba      	ldr	r2, [r7, #24]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	1a9b      	subs	r3, r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4403      	add	r3, r0
 8003af2:	332c      	adds	r3, #44	@ 0x2c
 8003af4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	4613      	mov	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	1a9b      	subs	r3, r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	440b      	add	r3, r1
 8003b04:	3338      	adds	r3, #56	@ 0x38
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	18d1      	adds	r1, r2, r3
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4613      	mov	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	1a9b      	subs	r3, r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4403      	add	r3, r0
 8003b1a:	3338      	adds	r3, #56	@ 0x38
 8003b1c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	015a      	lsls	r2, r3, #5
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	4413      	add	r3, r2
 8003b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b2a:	691b      	ldr	r3, [r3, #16]
 8003b2c:	0cdb      	lsrs	r3, r3, #19
 8003b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b32:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3328      	adds	r3, #40	@ 0x28
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d13f      	bne.n	8003bce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d03c      	beq.n	8003bce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b6a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b72:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b80:	461a      	mov	r2, r3
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	333c      	adds	r3, #60	@ 0x3c
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	f083 0301 	eor.w	r3, r3, #1
 8003b9c:	b2d8      	uxtb	r0, r3
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	333c      	adds	r3, #60	@ 0x3c
 8003bae:	4602      	mov	r2, r0
 8003bb0:	701a      	strb	r2, [r3, #0]
      break;
 8003bb2:	e00c      	b.n	8003bce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	334c      	adds	r3, #76	@ 0x4c
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	701a      	strb	r2, [r3, #0]
      break;
 8003bc8:	e001      	b.n	8003bce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003bce:	bf00      	nop
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	3728      	adds	r7, #40	@ 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003c04:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d10b      	bne.n	8003c28 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d102      	bne.n	8003c20 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f003 fb78 	bl	8007310 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d132      	bne.n	8003c98 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f043 0308 	orr.w	r3, r3, #8
 8003c38:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d126      	bne.n	8003c92 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	7a5b      	ldrb	r3, [r3, #9]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d113      	bne.n	8003c74 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003c56:	d106      	bne.n	8003c66 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f001 fbd2 	bl	8005408 <USB_InitFSLSPClkSel>
 8003c64:	e011      	b.n	8003c8a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f001 fbcb 	bl	8005408 <USB_InitFSLSPClkSel>
 8003c72:	e00a      	b.n	8003c8a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	79db      	ldrb	r3, [r3, #7]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d106      	bne.n	8003c8a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c82:	461a      	mov	r2, r3
 8003c84:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003c88:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f003 fb6a 	bl	8007364 <HAL_HCD_PortEnabled_Callback>
 8003c90:	e002      	b.n	8003c98 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f003 fb74 	bl	8007380 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d103      	bne.n	8003caa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	f043 0320 	orr.w	r3, r3, #32
 8003ca8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	6013      	str	r3, [r2, #0]
}
 8003cb6:	bf00      	nop
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
	...

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e267      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d075      	beq.n	8003dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cde:	4b88      	ldr	r3, [pc, #544]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d00c      	beq.n	8003d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cea:	4b85      	ldr	r3, [pc, #532]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d112      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf6:	4b82      	ldr	r3, [pc, #520]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d02:	d10b      	bne.n	8003d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	4b7e      	ldr	r3, [pc, #504]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d05b      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x108>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d157      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e242      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d24:	d106      	bne.n	8003d34 <HAL_RCC_OscConfig+0x74>
 8003d26:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a75      	ldr	r2, [pc, #468]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e01d      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b70      	ldr	r3, [pc, #448]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a6f      	ldr	r2, [pc, #444]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a6c      	ldr	r2, [pc, #432]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e00b      	b.n	8003d70 <HAL_RCC_OscConfig+0xb0>
 8003d58:	4b69      	ldr	r3, [pc, #420]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a68      	ldr	r2, [pc, #416]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	4b66      	ldr	r3, [pc, #408]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a65      	ldr	r2, [pc, #404]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d013      	beq.n	8003da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fc ffe0 	bl	8000d3c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d80:	f7fc ffdc 	bl	8000d3c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b64      	cmp	r3, #100	@ 0x64
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e207      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	4b5b      	ldr	r3, [pc, #364]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0xc0>
 8003d9e:	e014      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da0:	f7fc ffcc 	bl	8000d3c <HAL_GetTick>
 8003da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003da6:	e008      	b.n	8003dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da8:	f7fc ffc8 	bl	8000d3c <HAL_GetTick>
 8003dac:	4602      	mov	r2, r0
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	2b64      	cmp	r3, #100	@ 0x64
 8003db4:	d901      	bls.n	8003dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e1f3      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	4b51      	ldr	r3, [pc, #324]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f0      	bne.n	8003da8 <HAL_RCC_OscConfig+0xe8>
 8003dc6:	e000      	b.n	8003dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d063      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00b      	beq.n	8003dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de2:	4b47      	ldr	r3, [pc, #284]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dea:	2b08      	cmp	r3, #8
 8003dec:	d11c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dee:	4b44      	ldr	r3, [pc, #272]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d116      	bne.n	8003e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfa:	4b41      	ldr	r3, [pc, #260]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d005      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d001      	beq.n	8003e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e1c7      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e12:	4b3b      	ldr	r3, [pc, #236]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4937      	ldr	r1, [pc, #220]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e26:	e03a      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d020      	beq.n	8003e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b34      	ldr	r3, [pc, #208]	@ (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e32:	2201      	movs	r2, #1
 8003e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e36:	f7fc ff81 	bl	8000d3c <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3c:	e008      	b.n	8003e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3e:	f7fc ff7d 	bl	8000d3c <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e1a8      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	4b2b      	ldr	r3, [pc, #172]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d0f0      	beq.n	8003e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b28      	ldr	r3, [pc, #160]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4925      	ldr	r1, [pc, #148]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	600b      	str	r3, [r1, #0]
 8003e70:	e015      	b.n	8003e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e72:	4b24      	ldr	r3, [pc, #144]	@ (8003f04 <HAL_RCC_OscConfig+0x244>)
 8003e74:	2200      	movs	r2, #0
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fc ff60 	bl	8000d3c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fc ff5c 	bl	8000d3c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e187      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	4b1b      	ldr	r3, [pc, #108]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f0      	bne.n	8003e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d036      	beq.n	8003f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d016      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb2:	4b15      	ldr	r3, [pc, #84]	@ (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7fc ff40 	bl	8000d3c <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec0:	f7fc ff3c 	bl	8000d3c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e167      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f00 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x200>
 8003ede:	e01b      	b.n	8003f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee0:	4b09      	ldr	r3, [pc, #36]	@ (8003f08 <HAL_RCC_OscConfig+0x248>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee6:	f7fc ff29 	bl	8000d3c <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eec:	e00e      	b.n	8003f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fc ff25 	bl	8000d3c <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d907      	bls.n	8003f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e150      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
 8003f00:	40023800 	.word	0x40023800
 8003f04:	42470000 	.word	0x42470000
 8003f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0c:	4b88      	ldr	r3, [pc, #544]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ea      	bne.n	8003eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f000 8097 	beq.w	8004054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2a:	4b81      	ldr	r3, [pc, #516]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
 8003f3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f46:	4b7a      	ldr	r3, [pc, #488]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f56:	4b77      	ldr	r3, [pc, #476]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d118      	bne.n	8003f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f62:	4b74      	ldr	r3, [pc, #464]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a73      	ldr	r2, [pc, #460]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f6e:	f7fc fee5 	bl	8000d3c <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f74:	e008      	b.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f76:	f7fc fee1 	bl	8000d3c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d901      	bls.n	8003f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e10c      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	4b6a      	ldr	r3, [pc, #424]	@ (8004134 <HAL_RCC_OscConfig+0x474>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0f0      	beq.n	8003f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x2ea>
 8003f9c:	4b64      	ldr	r3, [pc, #400]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a63      	ldr	r2, [pc, #396]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f043 0301 	orr.w	r3, r3, #1
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa8:	e01c      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x30c>
 8003fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0x324>
 8003fcc:	4b58      	ldr	r3, [pc, #352]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd0:	4a57      	ldr	r2, [pc, #348]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	f023 0301 	bic.w	r3, r3, #1
 8003fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd8:	4b55      	ldr	r3, [pc, #340]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fdc:	4a54      	ldr	r2, [pc, #336]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8003fde:	f023 0304 	bic.w	r3, r3, #4
 8003fe2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d015      	beq.n	8004018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fc fea6 	bl	8000d3c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	e00a      	b.n	800400a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff4:	f7fc fea2 	bl	8000d3c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004002:	4293      	cmp	r3, r2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0cb      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400a:	4b49      	ldr	r3, [pc, #292]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 800400c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d0ee      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x334>
 8004016:	e014      	b.n	8004042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004018:	f7fc fe90 	bl	8000d3c <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	e00a      	b.n	8004036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004020:	f7fc fe8c 	bl	8000d3c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0b5      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004036:	4b3e      	ldr	r3, [pc, #248]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1ee      	bne.n	8004020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004048:	4b39      	ldr	r3, [pc, #228]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	4a38      	ldr	r2, [pc, #224]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 800404e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004052:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80a1 	beq.w	80041a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800405e:	4b34      	ldr	r3, [pc, #208]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b08      	cmp	r3, #8
 8004068:	d05c      	beq.n	8004124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	2b02      	cmp	r3, #2
 8004070:	d141      	bne.n	80040f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004072:	4b31      	ldr	r3, [pc, #196]	@ (8004138 <HAL_RCC_OscConfig+0x478>)
 8004074:	2200      	movs	r2, #0
 8004076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004078:	f7fc fe60 	bl	8000d3c <HAL_GetTick>
 800407c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004080:	f7fc fe5c 	bl	8000d3c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b02      	cmp	r3, #2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e087      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f0      	bne.n	8004080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	019b      	lsls	r3, r3, #6
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b4:	085b      	lsrs	r3, r3, #1
 80040b6:	3b01      	subs	r3, #1
 80040b8:	041b      	lsls	r3, r3, #16
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	061b      	lsls	r3, r3, #24
 80040c2:	491b      	ldr	r1, [pc, #108]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004138 <HAL_RCC_OscConfig+0x478>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fc fe35 	bl	8000d3c <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fc fe31 	bl	8000d3c <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e05c      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	4b11      	ldr	r3, [pc, #68]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0f0      	beq.n	80040d6 <HAL_RCC_OscConfig+0x416>
 80040f4:	e054      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <HAL_RCC_OscConfig+0x478>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fc fe1e 	bl	8000d3c <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004104:	f7fc fe1a 	bl	8000d3c <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b02      	cmp	r3, #2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e045      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	4b06      	ldr	r3, [pc, #24]	@ (8004130 <HAL_RCC_OscConfig+0x470>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0x444>
 8004122:	e03d      	b.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d107      	bne.n	800413c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e038      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
 8004130:	40023800 	.word	0x40023800
 8004134:	40007000 	.word	0x40007000
 8004138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800413c:	4b1b      	ldr	r3, [pc, #108]	@ (80041ac <HAL_RCC_OscConfig+0x4ec>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d028      	beq.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d121      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004162:	429a      	cmp	r2, r3
 8004164:	d11a      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	4293      	cmp	r3, r2
 8004176:	d111      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	085b      	lsrs	r3, r3, #1
 8004184:	3b01      	subs	r3, #1
 8004186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800

080041b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e0cc      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c4:	4b68      	ldr	r3, [pc, #416]	@ (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d90c      	bls.n	80041ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b65      	ldr	r3, [pc, #404]	@ (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b63      	ldr	r3, [pc, #396]	@ (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0307 	and.w	r3, r3, #7
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e0b8      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d020      	beq.n	800423a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004204:	4b59      	ldr	r3, [pc, #356]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	4a58      	ldr	r2, [pc, #352]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800420e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800421c:	4b53      	ldr	r3, [pc, #332]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4a52      	ldr	r2, [pc, #328]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b50      	ldr	r3, [pc, #320]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	494d      	ldr	r1, [pc, #308]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d044      	beq.n	80042d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d107      	bne.n	800425e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	4b47      	ldr	r3, [pc, #284]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d119      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e07f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d003      	beq.n	800426e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426a:	2b03      	cmp	r3, #3
 800426c:	d107      	bne.n	800427e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800426e:	4b3f      	ldr	r3, [pc, #252]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d109      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e06f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427e:	4b3b      	ldr	r3, [pc, #236]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e067      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800428e:	4b37      	ldr	r3, [pc, #220]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f023 0203 	bic.w	r2, r3, #3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	4934      	ldr	r1, [pc, #208]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a0:	f7fc fd4c 	bl	8000d3c <HAL_GetTick>
 80042a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	e00a      	b.n	80042be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a8:	f7fc fd48 	bl	8000d3c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e04f      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042be:	4b2b      	ldr	r3, [pc, #172]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 020c 	and.w	r2, r3, #12
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d1eb      	bne.n	80042a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d0:	4b25      	ldr	r3, [pc, #148]	@ (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0307 	and.w	r3, r3, #7
 80042d8:	683a      	ldr	r2, [r7, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d20c      	bcs.n	80042f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042de:	4b22      	ldr	r3, [pc, #136]	@ (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042e6:	4b20      	ldr	r3, [pc, #128]	@ (8004368 <HAL_RCC_ClockConfig+0x1b8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d001      	beq.n	80042f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e032      	b.n	800435e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004304:	4b19      	ldr	r3, [pc, #100]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	4916      	ldr	r1, [pc, #88]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d009      	beq.n	8004336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004322:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	490e      	ldr	r1, [pc, #56]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	4313      	orrs	r3, r2
 8004334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004336:	f000 f821 	bl	800437c <HAL_RCC_GetSysClockFreq>
 800433a:	4602      	mov	r2, r0
 800433c:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <HAL_RCC_ClockConfig+0x1bc>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	490a      	ldr	r1, [pc, #40]	@ (8004370 <HAL_RCC_ClockConfig+0x1c0>)
 8004348:	5ccb      	ldrb	r3, [r1, r3]
 800434a:	fa22 f303 	lsr.w	r3, r2, r3
 800434e:	4a09      	ldr	r2, [pc, #36]	@ (8004374 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004352:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <HAL_RCC_ClockConfig+0x1c8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4618      	mov	r0, r3
 8004358:	f7fc fcac 	bl	8000cb4 <HAL_InitTick>

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40023c00 	.word	0x40023c00
 800436c:	40023800 	.word	0x40023800
 8004370:	080079a4 	.word	0x080079a4
 8004374:	20000000 	.word	0x20000000
 8004378:	20000004 	.word	0x20000004

0800437c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800437c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004380:	b094      	sub	sp, #80	@ 0x50
 8004382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	647b      	str	r3, [r7, #68]	@ 0x44
 8004388:	2300      	movs	r3, #0
 800438a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800438c:	2300      	movs	r3, #0
 800438e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004390:	2300      	movs	r3, #0
 8004392:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004394:	4b79      	ldr	r3, [pc, #484]	@ (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b08      	cmp	r3, #8
 800439e:	d00d      	beq.n	80043bc <HAL_RCC_GetSysClockFreq+0x40>
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	f200 80e1 	bhi.w	8004568 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_RCC_GetSysClockFreq+0x34>
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d003      	beq.n	80043b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ae:	e0db      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b0:	4b73      	ldr	r3, [pc, #460]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x204>)
 80043b2:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80043b4:	e0db      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043b6:	4b73      	ldr	r3, [pc, #460]	@ (8004584 <HAL_RCC_GetSysClockFreq+0x208>)
 80043b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ba:	e0d8      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043bc:	4b6f      	ldr	r3, [pc, #444]	@ (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	@ (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d063      	beq.n	800449a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d2:	4b6a      	ldr	r3, [pc, #424]	@ (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	099b      	lsrs	r3, r3, #6
 80043d8:	2200      	movs	r2, #0
 80043da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80043e6:	2300      	movs	r3, #0
 80043e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043ee:	4622      	mov	r2, r4
 80043f0:	462b      	mov	r3, r5
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f04f 0100 	mov.w	r1, #0
 80043fa:	0159      	lsls	r1, r3, #5
 80043fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004400:	0150      	lsls	r0, r2, #5
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4621      	mov	r1, r4
 8004408:	1a51      	subs	r1, r2, r1
 800440a:	6139      	str	r1, [r7, #16]
 800440c:	4629      	mov	r1, r5
 800440e:	eb63 0301 	sbc.w	r3, r3, r1
 8004412:	617b      	str	r3, [r7, #20]
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004420:	4659      	mov	r1, fp
 8004422:	018b      	lsls	r3, r1, #6
 8004424:	4651      	mov	r1, sl
 8004426:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800442a:	4651      	mov	r1, sl
 800442c:	018a      	lsls	r2, r1, #6
 800442e:	4651      	mov	r1, sl
 8004430:	ebb2 0801 	subs.w	r8, r2, r1
 8004434:	4659      	mov	r1, fp
 8004436:	eb63 0901 	sbc.w	r9, r3, r1
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444e:	4690      	mov	r8, r2
 8004450:	4699      	mov	r9, r3
 8004452:	4623      	mov	r3, r4
 8004454:	eb18 0303 	adds.w	r3, r8, r3
 8004458:	60bb      	str	r3, [r7, #8]
 800445a:	462b      	mov	r3, r5
 800445c:	eb49 0303 	adc.w	r3, r9, r3
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	f04f 0200 	mov.w	r2, #0
 8004466:	f04f 0300 	mov.w	r3, #0
 800446a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800446e:	4629      	mov	r1, r5
 8004470:	024b      	lsls	r3, r1, #9
 8004472:	4621      	mov	r1, r4
 8004474:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004478:	4621      	mov	r1, r4
 800447a:	024a      	lsls	r2, r1, #9
 800447c:	4610      	mov	r0, r2
 800447e:	4619      	mov	r1, r3
 8004480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004482:	2200      	movs	r2, #0
 8004484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004488:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800448c:	f7fb fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	4613      	mov	r3, r2
 8004496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004498:	e058      	b.n	800454c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800449a:	4b38      	ldr	r3, [pc, #224]	@ (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	099b      	lsrs	r3, r3, #6
 80044a0:	2200      	movs	r2, #0
 80044a2:	4618      	mov	r0, r3
 80044a4:	4611      	mov	r1, r2
 80044a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	2300      	movs	r3, #0
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	f04f 0000 	mov.w	r0, #0
 80044bc:	f04f 0100 	mov.w	r1, #0
 80044c0:	0159      	lsls	r1, r3, #5
 80044c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044c6:	0150      	lsls	r0, r2, #5
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4641      	mov	r1, r8
 80044ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80044d2:	4649      	mov	r1, r9
 80044d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80044d8:	f04f 0200 	mov.w	r2, #0
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044ec:	ebb2 040a 	subs.w	r4, r2, sl
 80044f0:	eb63 050b 	sbc.w	r5, r3, fp
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	00eb      	lsls	r3, r5, #3
 80044fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004502:	00e2      	lsls	r2, r4, #3
 8004504:	4614      	mov	r4, r2
 8004506:	461d      	mov	r5, r3
 8004508:	4643      	mov	r3, r8
 800450a:	18e3      	adds	r3, r4, r3
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	464b      	mov	r3, r9
 8004510:	eb45 0303 	adc.w	r3, r5, r3
 8004514:	607b      	str	r3, [r7, #4]
 8004516:	f04f 0200 	mov.w	r2, #0
 800451a:	f04f 0300 	mov.w	r3, #0
 800451e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004522:	4629      	mov	r1, r5
 8004524:	028b      	lsls	r3, r1, #10
 8004526:	4621      	mov	r1, r4
 8004528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800452c:	4621      	mov	r1, r4
 800452e:	028a      	lsls	r2, r1, #10
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004536:	2200      	movs	r2, #0
 8004538:	61bb      	str	r3, [r7, #24]
 800453a:	61fa      	str	r2, [r7, #28]
 800453c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004540:	f7fb fe42 	bl	80001c8 <__aeabi_uldivmod>
 8004544:	4602      	mov	r2, r0
 8004546:	460b      	mov	r3, r1
 8004548:	4613      	mov	r3, r2
 800454a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_GetSysClockFreq+0x200>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	0c1b      	lsrs	r3, r3, #16
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	3301      	adds	r3, #1
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800455c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800455e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004560:	fbb2 f3f3 	udiv	r3, r2, r3
 8004564:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004566:	e002      	b.n	800456e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004568:	4b05      	ldr	r3, [pc, #20]	@ (8004580 <HAL_RCC_GetSysClockFreq+0x204>)
 800456a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800456c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800456e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004570:	4618      	mov	r0, r3
 8004572:	3750      	adds	r7, #80	@ 0x50
 8004574:	46bd      	mov	sp, r7
 8004576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800457a:	bf00      	nop
 800457c:	40023800 	.word	0x40023800
 8004580:	00f42400 	.word	0x00f42400
 8004584:	007a1200 	.word	0x007a1200

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b03      	ldr	r3, [pc, #12]	@ (800459c <HAL_RCC_GetHCLKFreq+0x14>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000000 	.word	0x20000000

080045a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045a4:	f7ff fff0 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045a8:	4602      	mov	r2, r0
 80045aa:	4b05      	ldr	r3, [pc, #20]	@ (80045c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	0a9b      	lsrs	r3, r3, #10
 80045b0:	f003 0307 	and.w	r3, r3, #7
 80045b4:	4903      	ldr	r1, [pc, #12]	@ (80045c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b6:	5ccb      	ldrb	r3, [r1, r3]
 80045b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045bc:	4618      	mov	r0, r3
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40023800 	.word	0x40023800
 80045c4:	080079b4 	.word	0x080079b4

080045c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045cc:	f7ff ffdc 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045d0:	4602      	mov	r2, r0
 80045d2:	4b05      	ldr	r3, [pc, #20]	@ (80045e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	0b5b      	lsrs	r3, r3, #13
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	4903      	ldr	r1, [pc, #12]	@ (80045ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80045de:	5ccb      	ldrb	r3, [r1, r3]
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40023800 	.word	0x40023800
 80045ec:	080079b4 	.word	0x080079b4

080045f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e042      	b.n	8004688 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fc fa16 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2224      	movs	r2, #36	@ 0x24
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68da      	ldr	r2, [r3, #12]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004632:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f973 	bl	8004920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004648:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004658:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68da      	ldr	r2, [r3, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004668:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3708      	adds	r7, #8
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b08a      	sub	sp, #40	@ 0x28
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	603b      	str	r3, [r7, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d175      	bne.n	800479c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_UART_Transmit+0x2c>
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e06e      	b.n	800479e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2221      	movs	r2, #33	@ 0x21
 80046ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ce:	f7fc fb35 	bl	8000d3c <HAL_GetTick>
 80046d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046e8:	d108      	bne.n	80046fc <HAL_UART_Transmit+0x6c>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	e003      	b.n	8004704 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004704:	e02e      	b.n	8004764 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2200      	movs	r2, #0
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f848 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e03a      	b.n	800479e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	461a      	mov	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	3302      	adds	r3, #2
 8004742:	61bb      	str	r3, [r7, #24]
 8004744:	e007      	b.n	8004756 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	781a      	ldrb	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	3301      	adds	r3, #1
 8004754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800475a:	b29b      	uxth	r3, r3
 800475c:	3b01      	subs	r3, #1
 800475e:	b29a      	uxth	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d1cb      	bne.n	8004706 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	2200      	movs	r2, #0
 8004776:	2140      	movs	r1, #64	@ 0x40
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f814 	bl	80047a6 <UART_WaitOnFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e006      	b.n	800479e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3720      	adds	r7, #32
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b086      	sub	sp, #24
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	603b      	str	r3, [r7, #0]
 80047b2:	4613      	mov	r3, r2
 80047b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b6:	e03b      	b.n	8004830 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d037      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047c0:	f7fc fabc 	bl	8000d3c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	6a3a      	ldr	r2, [r7, #32]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d101      	bne.n	80047da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e03a      	b.n	8004850 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d023      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b80      	cmp	r3, #128	@ 0x80
 80047ec:	d020      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d01d      	beq.n	8004830 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d116      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f000 f81d 	bl	8004858 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2208      	movs	r2, #8
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e00f      	b.n	8004850 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	4013      	ands	r3, r2
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	429a      	cmp	r2, r3
 800483e:	bf0c      	ite	eq
 8004840:	2301      	moveq	r3, #1
 8004842:	2300      	movne	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	461a      	mov	r2, r3
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	d0b4      	beq.n	80047b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3718      	adds	r7, #24
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004858:	b480      	push	{r7}
 800485a:	b095      	sub	sp, #84	@ 0x54
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	330c      	adds	r3, #12
 8004866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800486a:	e853 3f00 	ldrex	r3, [r3]
 800486e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	330c      	adds	r3, #12
 800487e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004880:	643a      	str	r2, [r7, #64]	@ 0x40
 8004882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004888:	e841 2300 	strex	r3, r2, [r1]
 800488c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800488e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1e5      	bne.n	8004860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e5      	bne.n	8004894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d119      	bne.n	8004904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	330c      	adds	r3, #12
 80048d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	f023 0310 	bic.w	r3, r3, #16
 80048e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048f0:	61ba      	str	r2, [r7, #24]
 80048f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6979      	ldr	r1, [r7, #20]
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	613b      	str	r3, [r7, #16]
   return(result);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e5      	bne.n	80048d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004912:	bf00      	nop
 8004914:	3754      	adds	r7, #84	@ 0x54
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
	...

08004920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004924:	b0c0      	sub	sp, #256	@ 0x100
 8004926:	af00      	add	r7, sp, #0
 8004928:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493c:	68d9      	ldr	r1, [r3, #12]
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	ea40 0301 	orr.w	r3, r0, r1
 8004948:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	431a      	orrs	r2, r3
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	431a      	orrs	r2, r3
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800496c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004978:	f021 010c 	bic.w	r1, r1, #12
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004986:	430b      	orrs	r3, r1
 8004988:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499a:	6999      	ldr	r1, [r3, #24]
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	ea40 0301 	orr.w	r3, r0, r1
 80049a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	4b8f      	ldr	r3, [pc, #572]	@ (8004bec <UART_SetConfig+0x2cc>)
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d005      	beq.n	80049c0 <UART_SetConfig+0xa0>
 80049b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b8d      	ldr	r3, [pc, #564]	@ (8004bf0 <UART_SetConfig+0x2d0>)
 80049bc:	429a      	cmp	r2, r3
 80049be:	d104      	bne.n	80049ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c0:	f7ff fe02 	bl	80045c8 <HAL_RCC_GetPCLK2Freq>
 80049c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80049c8:	e003      	b.n	80049d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7ff fde9 	bl	80045a0 <HAL_RCC_GetPCLK1Freq>
 80049ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049dc:	f040 810c 	bne.w	8004bf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80049ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80049ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049f2:	4622      	mov	r2, r4
 80049f4:	462b      	mov	r3, r5
 80049f6:	1891      	adds	r1, r2, r2
 80049f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049fa:	415b      	adcs	r3, r3
 80049fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004a02:	4621      	mov	r1, r4
 8004a04:	eb12 0801 	adds.w	r8, r2, r1
 8004a08:	4629      	mov	r1, r5
 8004a0a:	eb43 0901 	adc.w	r9, r3, r1
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a22:	4690      	mov	r8, r2
 8004a24:	4699      	mov	r9, r3
 8004a26:	4623      	mov	r3, r4
 8004a28:	eb18 0303 	adds.w	r3, r8, r3
 8004a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004a30:	462b      	mov	r3, r5
 8004a32:	eb49 0303 	adc.w	r3, r9, r3
 8004a36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004a46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004a4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004a4e:	460b      	mov	r3, r1
 8004a50:	18db      	adds	r3, r3, r3
 8004a52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a54:	4613      	mov	r3, r2
 8004a56:	eb42 0303 	adc.w	r3, r2, r3
 8004a5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a64:	f7fb fbb0 	bl	80001c8 <__aeabi_uldivmod>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	4b61      	ldr	r3, [pc, #388]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004a6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a72:	095b      	lsrs	r3, r3, #5
 8004a74:	011c      	lsls	r4, r3, #4
 8004a76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a88:	4642      	mov	r2, r8
 8004a8a:	464b      	mov	r3, r9
 8004a8c:	1891      	adds	r1, r2, r2
 8004a8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a90:	415b      	adcs	r3, r3
 8004a92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a98:	4641      	mov	r1, r8
 8004a9a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a9e:	4649      	mov	r1, r9
 8004aa0:	eb43 0b01 	adc.w	fp, r3, r1
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	f04f 0300 	mov.w	r3, #0
 8004aac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ab0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ab4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ab8:	4692      	mov	sl, r2
 8004aba:	469b      	mov	fp, r3
 8004abc:	4643      	mov	r3, r8
 8004abe:	eb1a 0303 	adds.w	r3, sl, r3
 8004ac2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	eb4b 0303 	adc.w	r3, fp, r3
 8004acc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004adc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ae0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	18db      	adds	r3, r3, r3
 8004ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aea:	4613      	mov	r3, r2
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004af2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004af6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004afa:	f7fb fb65 	bl	80001c8 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004b06:	fba3 2301 	umull	r2, r3, r3, r1
 8004b0a:	095b      	lsrs	r3, r3, #5
 8004b0c:	2264      	movs	r2, #100	@ 0x64
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	1acb      	subs	r3, r1, r3
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004b1a:	4b36      	ldr	r3, [pc, #216]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004b1c:	fba3 2302 	umull	r2, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004b28:	441c      	add	r4, r3
 8004b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004b38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	1891      	adds	r1, r2, r2
 8004b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b44:	415b      	adcs	r3, r3
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004b4c:	4641      	mov	r1, r8
 8004b4e:	1851      	adds	r1, r2, r1
 8004b50:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b52:	4649      	mov	r1, r9
 8004b54:	414b      	adcs	r3, r1
 8004b56:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b64:	4659      	mov	r1, fp
 8004b66:	00cb      	lsls	r3, r1, #3
 8004b68:	4651      	mov	r1, sl
 8004b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b6e:	4651      	mov	r1, sl
 8004b70:	00ca      	lsls	r2, r1, #3
 8004b72:	4610      	mov	r0, r2
 8004b74:	4619      	mov	r1, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	4642      	mov	r2, r8
 8004b7a:	189b      	adds	r3, r3, r2
 8004b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b80:	464b      	mov	r3, r9
 8004b82:	460a      	mov	r2, r1
 8004b84:	eb42 0303 	adc.w	r3, r2, r3
 8004b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	18db      	adds	r3, r3, r3
 8004ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	eb42 0303 	adc.w	r3, r2, r3
 8004bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004bb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004bb6:	f7fb fb07 	bl	80001c8 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	@ 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	00db      	lsls	r3, r3, #3
 8004bd0:	3332      	adds	r3, #50	@ 0x32
 8004bd2:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <UART_SetConfig+0x2d4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 0207 	and.w	r2, r3, #7
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4422      	add	r2, r4
 8004be6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004be8:	e106      	b.n	8004df8 <UART_SetConfig+0x4d8>
 8004bea:	bf00      	nop
 8004bec:	40011000 	.word	0x40011000
 8004bf0:	40011400 	.word	0x40011400
 8004bf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004c06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004c0a:	4642      	mov	r2, r8
 8004c0c:	464b      	mov	r3, r9
 8004c0e:	1891      	adds	r1, r2, r2
 8004c10:	6239      	str	r1, [r7, #32]
 8004c12:	415b      	adcs	r3, r3
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	1854      	adds	r4, r2, r1
 8004c1e:	4649      	mov	r1, r9
 8004c20:	eb43 0501 	adc.w	r5, r3, r1
 8004c24:	f04f 0200 	mov.w	r2, #0
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	00eb      	lsls	r3, r5, #3
 8004c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c32:	00e2      	lsls	r2, r4, #3
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	18e3      	adds	r3, r4, r3
 8004c3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004c40:	464b      	mov	r3, r9
 8004c42:	eb45 0303 	adc.w	r3, r5, r3
 8004c46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	f04f 0300 	mov.w	r3, #0
 8004c62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c66:	4629      	mov	r1, r5
 8004c68:	008b      	lsls	r3, r1, #2
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c70:	4621      	mov	r1, r4
 8004c72:	008a      	lsls	r2, r1, #2
 8004c74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c78:	f7fb faa6 	bl	80001c8 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4b60      	ldr	r3, [pc, #384]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004c82:	fba3 2302 	umull	r2, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	011c      	lsls	r4, r3, #4
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	61b9      	str	r1, [r7, #24]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	61fb      	str	r3, [r7, #28]
 8004ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cac:	4641      	mov	r1, r8
 8004cae:	1851      	adds	r1, r2, r1
 8004cb0:	6139      	str	r1, [r7, #16]
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	414b      	adcs	r3, r1
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004cc4:	4659      	mov	r1, fp
 8004cc6:	00cb      	lsls	r3, r1, #3
 8004cc8:	4651      	mov	r1, sl
 8004cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cce:	4651      	mov	r1, sl
 8004cd0:	00ca      	lsls	r2, r1, #3
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4642      	mov	r2, r8
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	eb42 0303 	adc.w	r3, r2, r3
 8004ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cf6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004d04:	4649      	mov	r1, r9
 8004d06:	008b      	lsls	r3, r1, #2
 8004d08:	4641      	mov	r1, r8
 8004d0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d0e:	4641      	mov	r1, r8
 8004d10:	008a      	lsls	r2, r1, #2
 8004d12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004d16:	f7fb fa57 	bl	80001c8 <__aeabi_uldivmod>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	4611      	mov	r1, r2
 8004d20:	4b38      	ldr	r3, [pc, #224]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004d22:	fba3 2301 	umull	r2, r3, r3, r1
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2264      	movs	r2, #100	@ 0x64
 8004d2a:	fb02 f303 	mul.w	r3, r2, r3
 8004d2e:	1acb      	subs	r3, r1, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	@ 0x32
 8004d34:	4a33      	ldr	r2, [pc, #204]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d40:	441c      	add	r4, r3
 8004d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d46:	2200      	movs	r2, #0
 8004d48:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004d4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d60:	4641      	mov	r1, r8
 8004d62:	1851      	adds	r1, r2, r1
 8004d64:	6039      	str	r1, [r7, #0]
 8004d66:	4649      	mov	r1, r9
 8004d68:	414b      	adcs	r3, r1
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d78:	4659      	mov	r1, fp
 8004d7a:	00cb      	lsls	r3, r1, #3
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d82:	4651      	mov	r1, sl
 8004d84:	00ca      	lsls	r2, r1, #3
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d92:	464b      	mov	r3, r9
 8004d94:	460a      	mov	r2, r1
 8004d96:	eb42 0303 	adc.w	r3, r2, r3
 8004d9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004da6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004da8:	f04f 0200 	mov.w	r2, #0
 8004dac:	f04f 0300 	mov.w	r3, #0
 8004db0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004db4:	4649      	mov	r1, r9
 8004db6:	008b      	lsls	r3, r1, #2
 8004db8:	4641      	mov	r1, r8
 8004dba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dbe:	4641      	mov	r1, r8
 8004dc0:	008a      	lsls	r2, r1, #2
 8004dc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004dc6:	f7fb f9ff 	bl	80001c8 <__aeabi_uldivmod>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004dd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd4:	095b      	lsrs	r3, r3, #5
 8004dd6:	2164      	movs	r1, #100	@ 0x64
 8004dd8:	fb01 f303 	mul.w	r3, r1, r3
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	3332      	adds	r3, #50	@ 0x32
 8004de2:	4a08      	ldr	r2, [pc, #32]	@ (8004e04 <UART_SetConfig+0x4e4>)
 8004de4:	fba2 2303 	umull	r2, r3, r2, r3
 8004de8:	095b      	lsrs	r3, r3, #5
 8004dea:	f003 020f 	and.w	r2, r3, #15
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4422      	add	r2, r4
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e04:	51eb851f 	.word	0x51eb851f

08004e08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e08:	b084      	sub	sp, #16
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b084      	sub	sp, #16
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
 8004e12:	f107 001c 	add.w	r0, r7, #28
 8004e16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d123      	bne.n	8004e6a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68db      	ldr	r3, [r3, #12]
 8004e42:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9dc 	bl	800521c <USB_CoreReset>
 8004e64:	4603      	mov	r3, r0
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	e01b      	b.n	8004ea2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f9d0 	bl	800521c <USB_CoreReset>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e80:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d106      	bne.n	8004e96 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e8c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e94:	e005      	b.n	8004ea2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e9a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ea2:	7fbb      	ldrb	r3, [r7, #30]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d10b      	bne.n	8004ec0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f043 0206 	orr.w	r2, r3, #6
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f043 0220 	orr.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3710      	adds	r7, #16
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ecc:	b004      	add	sp, #16
 8004ece:	4770      	bx	lr

08004ed0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f043 0201 	orr.w	r2, r3, #1
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d115      	bne.n	8004f62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f42:	200a      	movs	r0, #10
 8004f44:	f7fb ff06 	bl	8000d54 <HAL_Delay>
      ms += 10U;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	330a      	adds	r3, #10
 8004f4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f956 	bl	8005200 <USB_GetMode>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d01e      	beq.n	8004f98 <USB_SetCurrentMode+0x84>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f5e:	d9f0      	bls.n	8004f42 <USB_SetCurrentMode+0x2e>
 8004f60:	e01a      	b.n	8004f98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d115      	bne.n	8004f94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004f74:	200a      	movs	r0, #10
 8004f76:	f7fb feed 	bl	8000d54 <HAL_Delay>
      ms += 10U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	330a      	adds	r3, #10
 8004f7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f93d 	bl	8005200 <USB_GetMode>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <USB_SetCurrentMode+0x84>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004f90:	d9f0      	bls.n	8004f74 <USB_SetCurrentMode+0x60>
 8004f92:	e001      	b.n	8004f98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e005      	b.n	8004fa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8004f9c:	d101      	bne.n	8004fa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004fc6:	d901      	bls.n	8004fcc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e01b      	b.n	8005004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	daf2      	bge.n	8004fba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	f043 0220 	orr.w	r2, r3, #32
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ff0:	d901      	bls.n	8004ff6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e006      	b.n	8005004 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d0f0      	beq.n	8004fe4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005018:	2300      	movs	r3, #0
 800501a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005028:	d901      	bls.n	800502e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e018      	b.n	8005060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	daf2      	bge.n	800501c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2210      	movs	r2, #16
 800503e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3301      	adds	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800504c:	d901      	bls.n	8005052 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e006      	b.n	8005060 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f003 0310 	and.w	r3, r3, #16
 800505a:	2b10      	cmp	r3, #16
 800505c:	d0f0      	beq.n	8005040 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	@ 0x24
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	460b      	mov	r3, r1
 800507c:	71fb      	strb	r3, [r7, #7]
 800507e:	4613      	mov	r3, r2
 8005080:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800508a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800508e:	2b00      	cmp	r3, #0
 8005090:	d123      	bne.n	80050da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005092:	88bb      	ldrh	r3, [r7, #4]
 8005094:	3303      	adds	r3, #3
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800509a:	2300      	movs	r3, #0
 800509c:	61bb      	str	r3, [r7, #24]
 800509e:	e018      	b.n	80050d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	031a      	lsls	r2, r3, #12
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	4413      	add	r3, r2
 80050a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80050ac:	461a      	mov	r2, r3
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	3301      	adds	r3, #1
 80050be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3301      	adds	r3, #1
 80050c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	3301      	adds	r3, #1
 80050ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	3301      	adds	r3, #1
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d3e2      	bcc.n	80050a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3724      	adds	r7, #36	@ 0x24
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b08b      	sub	sp, #44	@ 0x2c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050fe:	88fb      	ldrh	r3, [r7, #6]
 8005100:	089b      	lsrs	r3, r3, #2
 8005102:	b29b      	uxth	r3, r3
 8005104:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800510e:	2300      	movs	r3, #0
 8005110:	623b      	str	r3, [r7, #32]
 8005112:	e014      	b.n	800513e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	3301      	adds	r3, #1
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	3301      	adds	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	3301      	adds	r3, #1
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	3301      	adds	r3, #1
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	3301      	adds	r3, #1
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	429a      	cmp	r2, r3
 8005144:	d3e6      	bcc.n	8005114 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005146:	8bfb      	ldrh	r3, [r7, #30]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01e      	beq.n	800518a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005156:	461a      	mov	r2, r3
 8005158:	f107 0310 	add.w	r3, r7, #16
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	b2da      	uxtb	r2, r3
 800516e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005170:	701a      	strb	r2, [r3, #0]
      i++;
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	3301      	adds	r3, #1
 8005176:	623b      	str	r3, [r7, #32]
      pDest++;
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	3301      	adds	r3, #1
 800517c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800517e:	8bfb      	ldrh	r3, [r7, #30]
 8005180:	3b01      	subs	r3, #1
 8005182:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005184:	8bfb      	ldrh	r3, [r7, #30]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1ea      	bne.n	8005160 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800518c:	4618      	mov	r0, r3
 800518e:	372c      	adds	r7, #44	@ 0x2c
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4013      	ands	r3, r2
 80051ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051b0:	68fb      	ldr	r3, [r7, #12]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80051be:	b480      	push	{r7}
 80051c0:	b085      	sub	sp, #20
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
 80051c6:	460b      	mov	r3, r1
 80051c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051f2:	68bb      	ldr	r3, [r7, #8]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0301 	and.w	r3, r3, #1
}
 8005210:	4618      	mov	r0, r3
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800521c:	b480      	push	{r7}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	3301      	adds	r3, #1
 800522c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005234:	d901      	bls.n	800523a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e01b      	b.n	8005272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	daf2      	bge.n	8005228 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	3301      	adds	r3, #1
 8005256:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800525e:	d901      	bls.n	8005264 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e006      	b.n	8005272 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d0f0      	beq.n	8005252 <USB_CoreReset+0x36>

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
	...

08005280 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005280:	b084      	sub	sp, #16
 8005282:	b580      	push	{r7, lr}
 8005284:	b086      	sub	sp, #24
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
 800528a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800528e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052a0:	461a      	mov	r2, r3
 80052a2:	2300      	movs	r3, #0
 80052a4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052b6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d119      	bne.n	800530a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80052d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d10a      	bne.n	80052f4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80052ec:	f043 0304 	orr.w	r3, r3, #4
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	e014      	b.n	800531e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005302:	f023 0304 	bic.w	r3, r3, #4
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	e009      	b.n	800531e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005318:	f023 0304 	bic.w	r3, r3, #4
 800531c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800531e:	2110      	movs	r1, #16
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f7ff fe43 	bl	8004fac <USB_FlushTxFifo>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff fe6d 	bl	8005010 <USB_FlushRxFifo>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005340:	2300      	movs	r3, #0
 8005342:	613b      	str	r3, [r7, #16]
 8005344:	e015      	b.n	8005372 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	015a      	lsls	r2, r3, #5
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005352:	461a      	mov	r2, r3
 8005354:	f04f 33ff 	mov.w	r3, #4294967295
 8005358:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005366:	461a      	mov	r2, r3
 8005368:	2300      	movs	r3, #0
 800536a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	3301      	adds	r3, #1
 8005370:	613b      	str	r3, [r7, #16]
 8005372:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005376:	461a      	mov	r2, r3
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4293      	cmp	r3, r2
 800537c:	d3e3      	bcc.n	8005346 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f04f 32ff 	mov.w	r2, #4294967295
 800538a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <USB_HostInit+0x170>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10b      	bne.n	80053ac <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800539a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a15      	ldr	r2, [pc, #84]	@ (80053f4 <USB_HostInit+0x174>)
 80053a0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a14      	ldr	r2, [pc, #80]	@ (80053f8 <USB_HostInit+0x178>)
 80053a6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80053aa:	e009      	b.n	80053c0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2280      	movs	r2, #128	@ 0x80
 80053b0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a11      	ldr	r2, [pc, #68]	@ (80053fc <USB_HostInit+0x17c>)
 80053b6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a11      	ldr	r2, [pc, #68]	@ (8005400 <USB_HostInit+0x180>)
 80053bc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d105      	bne.n	80053d4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	699b      	ldr	r3, [r3, #24]
 80053cc:	f043 0210 	orr.w	r2, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005404 <USB_HostInit+0x184>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr
 80053f0:	40040000 	.word	0x40040000
 80053f4:	01000200 	.word	0x01000200
 80053f8:	00e00300 	.word	0x00e00300
 80053fc:	00600080 	.word	0x00600080
 8005400:	004000e0 	.word	0x004000e0
 8005404:	a3200008 	.word	0xa3200008

08005408 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
 8005410:	460b      	mov	r3, r1
 8005412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	78fb      	ldrb	r3, [r7, #3]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	68f9      	ldr	r1, [r7, #12]
 800543c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005450:	461a      	mov	r2, r3
 8005452:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005456:	6053      	str	r3, [r2, #4]
 8005458:	e00c      	b.n	8005474 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	2b02      	cmp	r3, #2
 800545e:	d107      	bne.n	8005470 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005466:	461a      	mov	r2, r3
 8005468:	f241 7370 	movw	r3, #6000	@ 0x1770
 800546c:	6053      	str	r3, [r2, #4]
 800546e:	e001      	b.n	8005474 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e000      	b.n	8005476 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	460b      	mov	r3, r1
 800548c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80054a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <USB_DriveVbus+0x44>
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d106      	bne.n	80054c6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80054c4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054d0:	d109      	bne.n	80054e6 <USB_DriveVbus+0x64>
 80054d2:	78fb      	ldrb	r3, [r7, #3]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d106      	bne.n	80054e6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80054e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054e4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	0c5b      	lsrs	r3, r3, #17
 8005512:	f003 0303 	and.w	r3, r3, #3
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005522:	b480      	push	{r7}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	b29b      	uxth	r3, r3
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	4608      	mov	r0, r1
 800554e:	4611      	mov	r1, r2
 8005550:	461a      	mov	r2, r3
 8005552:	4603      	mov	r3, r0
 8005554:	70fb      	strb	r3, [r7, #3]
 8005556:	460b      	mov	r3, r1
 8005558:	70bb      	strb	r3, [r7, #2]
 800555a:	4613      	mov	r3, r2
 800555c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005566:	78fb      	ldrb	r3, [r7, #3]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	f04f 33ff 	mov.w	r3, #4294967295
 8005578:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800557a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800557e:	2b03      	cmp	r3, #3
 8005580:	d87c      	bhi.n	800567c <USB_HC_Init+0x138>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <USB_HC_Init+0x44>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	08005599 	.word	0x08005599
 800558c:	0800563f 	.word	0x0800563f
 8005590:	08005599 	.word	0x08005599
 8005594:	08005601 	.word	0x08005601
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a4:	461a      	mov	r2, r3
 80055a6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80055aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80055ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	da10      	bge.n	80055d6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	78fa      	ldrb	r2, [r7, #3]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80055d4:	e055      	b.n	8005682 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a6f      	ldr	r2, [pc, #444]	@ (8005798 <USB_HC_Init+0x254>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d151      	bne.n	8005682 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80055fc:	60d3      	str	r3, [r2, #12]
      break;
 80055fe:	e040      	b.n	8005682 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005600:	78fb      	ldrb	r3, [r7, #3]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	4413      	add	r3, r2
 8005608:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800560c:	461a      	mov	r2, r3
 800560e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005612:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005614:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005618:	2b00      	cmp	r3, #0
 800561a:	da34      	bge.n	8005686 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	015a      	lsls	r2, r3, #5
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4413      	add	r3, r2
 8005624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	78fa      	ldrb	r2, [r7, #3]
 800562c:	0151      	lsls	r1, r2, #5
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	440a      	add	r2, r1
 8005632:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800563a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800563c:	e023      	b.n	8005686 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800563e:	78fb      	ldrb	r3, [r7, #3]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800564a:	461a      	mov	r2, r3
 800564c:	f240 2325 	movw	r3, #549	@ 0x225
 8005650:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005652:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005656:	2b00      	cmp	r3, #0
 8005658:	da17      	bge.n	800568a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	78fa      	ldrb	r2, [r7, #3]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	440a      	add	r2, r1
 8005670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005674:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005678:	60d3      	str	r3, [r2, #12]
      }
      break;
 800567a:	e006      	b.n	800568a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	77fb      	strb	r3, [r7, #31]
      break;
 8005680:	e004      	b.n	800568c <USB_HC_Init+0x148>
      break;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <USB_HC_Init+0x148>
      break;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <USB_HC_Init+0x148>
      break;
 800568a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800568c:	78fb      	ldrb	r3, [r7, #3]
 800568e:	015a      	lsls	r2, r3, #5
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	4413      	add	r3, r2
 8005694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800569e:	78fb      	ldrb	r3, [r7, #3]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80056c4:	699a      	ldr	r2, [r3, #24]
 80056c6:	78fb      	ldrb	r3, [r7, #3]
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	2101      	movs	r1, #1
 80056ce:	fa01 f303 	lsl.w	r3, r1, r3
 80056d2:	6939      	ldr	r1, [r7, #16]
 80056d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80056d8:	4313      	orrs	r3, r2
 80056da:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	699b      	ldr	r3, [r3, #24]
 80056e0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80056e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	da03      	bge.n	80056f8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80056f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	e001      	b.n	80056fc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fef9 	bl	80054f4 <USB_GetHostSpeed>
 8005702:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005704:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005708:	2b02      	cmp	r3, #2
 800570a:	d106      	bne.n	800571a <USB_HC_Init+0x1d6>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b02      	cmp	r3, #2
 8005710:	d003      	beq.n	800571a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005712:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e001      	b.n	800571e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800571a:	2300      	movs	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800571e:	787b      	ldrb	r3, [r7, #1]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005726:	78bb      	ldrb	r3, [r7, #2]
 8005728:	02db      	lsls	r3, r3, #11
 800572a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800572e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005730:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005734:	049b      	lsls	r3, r3, #18
 8005736:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800573a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800573c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800573e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005742:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	431a      	orrs	r2, r3
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	0151      	lsls	r1, r2, #5
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	440a      	add	r2, r1
 8005754:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005758:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800575c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800575e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005762:	2b03      	cmp	r3, #3
 8005764:	d003      	beq.n	800576e <USB_HC_Init+0x22a>
 8005766:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d10f      	bne.n	800578e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	78fa      	ldrb	r2, [r7, #3]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	440a      	add	r2, r1
 8005784:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005788:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800578c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800578e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	40040000 	.word	0x40040000

0800579c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08c      	sub	sp, #48	@ 0x30
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	4613      	mov	r3, r2
 80057a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	785b      	ldrb	r3, [r3, #1]
 80057b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80057b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80057b8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4a5d      	ldr	r2, [pc, #372]	@ (8005934 <USB_HC_StartXfer+0x198>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d12f      	bne.n	8005822 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80057c2:	79fb      	ldrb	r3, [r7, #7]
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d11c      	bne.n	8005802 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	7c9b      	ldrb	r3, [r3, #18]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d003      	beq.n	80057d8 <USB_HC_StartXfer+0x3c>
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	7c9b      	ldrb	r3, [r3, #18]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d124      	bne.n	8005822 <USB_HC_StartXfer+0x86>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	799b      	ldrb	r3, [r3, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d120      	bne.n	8005822 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	0151      	lsls	r1, r2, #5
 80057f2:	6a3a      	ldr	r2, [r7, #32]
 80057f4:	440a      	add	r2, r1
 80057f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057fe:	60d3      	str	r3, [r2, #12]
 8005800:	e00f      	b.n	8005822 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	791b      	ldrb	r3, [r3, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10b      	bne.n	8005822 <USB_HC_StartXfer+0x86>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	795b      	ldrb	r3, [r3, #5]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d107      	bne.n	8005822 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	4619      	mov	r1, r3
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fb6b 	bl	8005ef4 <USB_DoPing>
        return HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	e232      	b.n	8005c88 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	799b      	ldrb	r3, [r3, #6]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d158      	bne.n	80058dc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800582a:	2301      	movs	r3, #1
 800582c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	78db      	ldrb	r3, [r3, #3]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005836:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	8a92      	ldrh	r2, [r2, #20]
 800583c:	fb03 f202 	mul.w	r2, r3, r2
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	61da      	str	r2, [r3, #28]
 8005844:	e07c      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	7c9b      	ldrb	r3, [r3, #18]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d130      	bne.n	80058b0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	2bbc      	cmp	r3, #188	@ 0xbc
 8005854:	d918      	bls.n	8005888 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	8a9b      	ldrh	r3, [r3, #20]
 800585a:	461a      	mov	r2, r3
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d003      	beq.n	8005878 <USB_HC_StartXfer+0xdc>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d103      	bne.n	8005880 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2202      	movs	r2, #2
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e05f      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2201      	movs	r2, #1
 8005884:	60da      	str	r2, [r3, #12]
 8005886:	e05b      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d007      	beq.n	80058a8 <USB_HC_StartXfer+0x10c>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b02      	cmp	r3, #2
 800589e:	d003      	beq.n	80058a8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2204      	movs	r2, #4
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	e04b      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2203      	movs	r2, #3
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	e047      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80058b0:	79fb      	ldrb	r3, [r7, #7]
 80058b2:	2b01      	cmp	r3, #1
 80058b4:	d10d      	bne.n	80058d2 <USB_HC_StartXfer+0x136>
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	8a92      	ldrh	r2, [r2, #20]
 80058be:	4293      	cmp	r3, r2
 80058c0:	d907      	bls.n	80058d2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80058c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	8a92      	ldrh	r2, [r2, #20]
 80058c8:	fb03 f202 	mul.w	r2, r3, r2
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	61da      	str	r2, [r3, #28]
 80058d0:	e036      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6a1a      	ldr	r2, [r3, #32]
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	61da      	str	r2, [r3, #28]
 80058da:	e031      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d018      	beq.n	8005916 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	8a92      	ldrh	r2, [r2, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	3b01      	subs	r3, #1
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	8a92      	ldrh	r2, [r2, #20]
 80058f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80058fa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80058fc:	8b7b      	ldrh	r3, [r7, #26]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d90b      	bls.n	800591a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005902:	8b7b      	ldrh	r3, [r7, #26]
 8005904:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005906:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	8a92      	ldrh	r2, [r2, #20]
 800590c:	fb03 f202 	mul.w	r2, r3, r2
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	61da      	str	r2, [r3, #28]
 8005914:	e001      	b.n	800591a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005916:	2301      	movs	r3, #1
 8005918:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	78db      	ldrb	r3, [r3, #3]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005922:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	8a92      	ldrh	r2, [r2, #20]
 8005928:	fb03 f202 	mul.w	r2, r3, r2
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	61da      	str	r2, [r3, #28]
 8005930:	e006      	b.n	8005940 <USB_HC_StartXfer+0x1a4>
 8005932:	bf00      	nop
 8005934:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005948:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800594a:	04d9      	lsls	r1, r3, #19
 800594c:	4ba3      	ldr	r3, [pc, #652]	@ (8005bdc <USB_HC_StartXfer+0x440>)
 800594e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005950:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	7d9b      	ldrb	r3, [r3, #22]
 8005956:	075b      	lsls	r3, r3, #29
 8005958:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	0148      	lsls	r0, r1, #5
 8005960:	6a39      	ldr	r1, [r7, #32]
 8005962:	4401      	add	r1, r0
 8005964:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005968:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800596a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d009      	beq.n	8005986 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6999      	ldr	r1, [r3, #24]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	4413      	add	r3, r2
 800597e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005982:	460a      	mov	r2, r1
 8005984:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	6a3a      	ldr	r2, [r7, #32]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80059b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80059bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	7e7b      	ldrb	r3, [r7, #25]
 80059ce:	075b      	lsls	r3, r3, #29
 80059d0:	69f9      	ldr	r1, [r7, #28]
 80059d2:	0148      	lsls	r0, r1, #5
 80059d4:	6a39      	ldr	r1, [r7, #32]
 80059d6:	4401      	add	r1, r0
 80059d8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	799b      	ldrb	r3, [r3, #6]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	f040 80c3 	bne.w	8005b70 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	7c5b      	ldrb	r3, [r3, #17]
 80059ee:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80059f4:	4313      	orrs	r3, r2
 80059f6:	69fa      	ldr	r2, [r7, #28]
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	6a3a      	ldr	r2, [r7, #32]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005a02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005a06:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	6a3a      	ldr	r2, [r7, #32]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a22:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005a26:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	79db      	ldrb	r3, [r3, #7]
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d123      	bne.n	8005a78 <USB_HC_StartXfer+0x2dc>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	78db      	ldrb	r3, [r3, #3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d11f      	bne.n	8005a78 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	6a3b      	ldr	r3, [r7, #32]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a56:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	69fa      	ldr	r2, [r7, #28]
 8005a68:	0151      	lsls	r1, r2, #5
 8005a6a:	6a3a      	ldr	r2, [r7, #32]
 8005a6c:	440a      	add	r2, r1
 8005a6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a76:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	7c9b      	ldrb	r3, [r3, #18]
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d003      	beq.n	8005a88 <USB_HC_StartXfer+0x2ec>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	7c9b      	ldrb	r3, [r3, #18]
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d117      	bne.n	8005ab8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d113      	bne.n	8005ab8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	78db      	ldrb	r3, [r3, #3]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d10f      	bne.n	8005ab8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	015a      	lsls	r2, r3, #5
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	0151      	lsls	r1, r2, #5
 8005aaa:	6a3a      	ldr	r2, [r7, #32]
 8005aac:	440a      	add	r2, r1
 8005aae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ab2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	7c9b      	ldrb	r3, [r3, #18]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d162      	bne.n	8005b86 <USB_HC_StartXfer+0x3ea>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	78db      	ldrb	r3, [r3, #3]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d15e      	bne.n	8005b86 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d858      	bhi.n	8005b84 <USB_HC_StartXfer+0x3e8>
 8005ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad8 <USB_HC_StartXfer+0x33c>)
 8005ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005b0b 	.word	0x08005b0b
 8005ae0:	08005b2d 	.word	0x08005b2d
 8005ae4:	08005b4f 	.word	0x08005b4f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	6a3b      	ldr	r3, [r7, #32]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	69fa      	ldr	r2, [r7, #28]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	6a3a      	ldr	r2, [r7, #32]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b06:	6053      	str	r3, [r2, #4]
          break;
 8005b08:	e03d      	b.n	8005b86 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	6a3b      	ldr	r3, [r7, #32]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b24:	f043 030e 	orr.w	r3, r3, #14
 8005b28:	6053      	str	r3, [r2, #4]
          break;
 8005b2a:	e02c      	b.n	8005b86 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	69fa      	ldr	r2, [r7, #28]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	6a3a      	ldr	r2, [r7, #32]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005b4a:	6053      	str	r3, [r2, #4]
          break;
 8005b4c:	e01b      	b.n	8005b86 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	6a3b      	ldr	r3, [r7, #32]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	0151      	lsls	r1, r2, #5
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	440a      	add	r2, r1
 8005b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b6c:	6053      	str	r3, [r2, #4]
          break;
 8005b6e:	e00a      	b.n	8005b86 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	6a3b      	ldr	r3, [r7, #32]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	6053      	str	r3, [r2, #4]
 8005b82:	e000      	b.n	8005b86 <USB_HC_StartXfer+0x3ea>
          break;
 8005b84:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b9c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	78db      	ldrb	r3, [r3, #3]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d004      	beq.n	8005bb0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bac:	613b      	str	r3, [r7, #16]
 8005bae:	e003      	b.n	8005bb8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005bb6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005bbe:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	015a      	lsls	r2, r3, #5
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bcc:	461a      	mov	r2, r3
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bd2:	79fb      	ldrb	r3, [r7, #7]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d003      	beq.n	8005be0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e055      	b.n	8005c88 <USB_HC_StartXfer+0x4ec>
 8005bdc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d14e      	bne.n	8005c86 <USB_HC_StartXfer+0x4ea>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6a1b      	ldr	r3, [r3, #32]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d04a      	beq.n	8005c86 <USB_HC_StartXfer+0x4ea>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	79db      	ldrb	r3, [r3, #7]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d146      	bne.n	8005c86 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	7c9b      	ldrb	r3, [r3, #18]
 8005bfc:	2b03      	cmp	r3, #3
 8005bfe:	d831      	bhi.n	8005c64 <USB_HC_StartXfer+0x4c8>
 8005c00:	a201      	add	r2, pc, #4	@ (adr r2, 8005c08 <USB_HC_StartXfer+0x46c>)
 8005c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c06:	bf00      	nop
 8005c08:	08005c19 	.word	0x08005c19
 8005c0c:	08005c3d 	.word	0x08005c3d
 8005c10:	08005c19 	.word	0x08005c19
 8005c14:	08005c3d 	.word	0x08005c3d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	3303      	adds	r3, #3
 8005c1e:	089b      	lsrs	r3, r3, #2
 8005c20:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c22:	8afa      	ldrh	r2, [r7, #22]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d91c      	bls.n	8005c68 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c3a:	e015      	b.n	8005c68 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	3303      	adds	r3, #3
 8005c42:	089b      	lsrs	r3, r3, #2
 8005c44:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c46:	8afa      	ldrh	r2, [r7, #22]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90a      	bls.n	8005c6c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c62:	e003      	b.n	8005c6c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005c64:	bf00      	nop
 8005c66:	e002      	b.n	8005c6e <USB_HC_StartXfer+0x4d2>
        break;
 8005c68:	bf00      	nop
 8005c6a:	e000      	b.n	8005c6e <USB_HC_StartXfer+0x4d2>
        break;
 8005c6c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	785a      	ldrb	r2, [r3, #1]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	9000      	str	r0, [sp, #0]
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff f9f3 	bl	800506c <USB_WritePacket>
  }

  return HAL_OK;
 8005c86:	2300      	movs	r3, #0
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3728      	adds	r7, #40	@ 0x28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	b29b      	uxth	r3, r3
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005cb2:	b480      	push	{r7}
 8005cb4:	b089      	sub	sp, #36	@ 0x24
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	0c9b      	lsrs	r3, r3, #18
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	0fdb      	lsrs	r3, r3, #31
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0fdb      	lsrs	r3, r3, #31
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f003 0320 	and.w	r3, r3, #32
 8005d14:	2b20      	cmp	r3, #32
 8005d16:	d10d      	bne.n	8005d34 <USB_HC_Halt+0x82>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <USB_HC_Halt+0x82>
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d002      	beq.n	8005d30 <USB_HC_Halt+0x7e>
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d101      	bne.n	8005d34 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005d30:	2300      	movs	r3, #0
 8005d32:	e0d8      	b.n	8005ee6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <USB_HC_Halt+0x8e>
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d173      	bne.n	8005e28 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69ba      	ldr	r2, [r7, #24]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d5e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	f003 0320 	and.w	r3, r3, #32
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d14a      	bne.n	8005e02 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d133      	bne.n	8005de0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d96:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005db6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dc4:	d82e      	bhi.n	8005e24 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ddc:	d0ec      	beq.n	8005db8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dde:	e081      	b.n	8005ee4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	4413      	add	r3, r2
 8005de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	0151      	lsls	r1, r2, #5
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	440a      	add	r2, r1
 8005df6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dfa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005dfe:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e00:	e070      	b.n	8005ee4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	69fa      	ldr	r2, [r7, #28]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e20:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e22:	e05f      	b.n	8005ee4 <USB_HC_Halt+0x232>
            break;
 8005e24:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e26:	e05d      	b.n	8005ee4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e28:	69bb      	ldr	r3, [r7, #24]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e46:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d133      	bne.n	8005ec0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	0151      	lsls	r1, r2, #5
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	440a      	add	r2, r1
 8005e6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e72:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e76:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e96:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ea4:	d81d      	bhi.n	8005ee2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ea6:	69bb      	ldr	r3, [r7, #24]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ebc:	d0ec      	beq.n	8005e98 <USB_HC_Halt+0x1e6>
 8005ebe:	e011      	b.n	8005ee4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	69fa      	ldr	r2, [r7, #28]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	e000      	b.n	8005ee4 <USB_HC_Halt+0x232>
          break;
 8005ee2:	bf00      	nop
    }
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3724      	adds	r7, #36	@ 0x24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
	...

08005ef4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	04da      	lsls	r2, r3, #19
 8005f10:	4b15      	ldr	r3, [pc, #84]	@ (8005f68 <USB_DoPing+0x74>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f24:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f3c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f44:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f52:	461a      	mov	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	1ff80000 	.word	0x1ff80000

08005f6c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f74:	2300      	movs	r3, #0
 8005f76:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fe ffb6 	bl	8004ef2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f86:	2110      	movs	r1, #16
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff f80f 	bl	8004fac <USB_FlushTxFifo>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f7ff f839 	bl	8005010 <USB_FlushRxFifo>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e01f      	b.n	8005fee <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fc4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005fc6:	693b      	ldr	r3, [r7, #16]
 8005fc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fcc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005fd4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	3301      	adds	r3, #1
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b0f      	cmp	r3, #15
 8005ff2:	d9dc      	bls.n	8005fae <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	e034      	b.n	8006064 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	4413      	add	r3, r2
 8006002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006010:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006018:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006020:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800602e:	461a      	mov	r2, r3
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	3301      	adds	r3, #1
 8006038:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006040:	d80c      	bhi.n	800605c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006058:	d0ec      	beq.n	8006034 <USB_StopHost+0xc8>
 800605a:	e000      	b.n	800605e <USB_StopHost+0xf2>
        break;
 800605c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	3301      	adds	r3, #1
 8006062:	61bb      	str	r3, [r7, #24]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2b0f      	cmp	r3, #15
 8006068:	d9c7      	bls.n	8005ffa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006070:	461a      	mov	r2, r3
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f04f 32ff 	mov.w	r2, #4294967295
 800607e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f7fe ff25 	bl	8004ed0 <USB_EnableGlobalInt>

  return ret;
 8006086:	7ffb      	ldrb	r3, [r7, #31]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3720      	adds	r7, #32
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006090:	b590      	push	{r4, r7, lr}
 8006092:	b089      	sub	sp, #36	@ 0x24
 8006094:	af04      	add	r7, sp, #16
 8006096:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006098:	2301      	movs	r3, #1
 800609a:	2202      	movs	r2, #2
 800609c:	2102      	movs	r1, #2
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fc85 	bl	80069ae <USBH_FindInterface>
 80060a4:	4603      	mov	r3, r0
 80060a6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
 80060aa:	2bff      	cmp	r3, #255	@ 0xff
 80060ac:	d002      	beq.n	80060b4 <USBH_CDC_InterfaceInit+0x24>
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d901      	bls.n	80060b8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80060b4:	2302      	movs	r3, #2
 80060b6:	e13d      	b.n	8006334 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fc5a 	bl	8006976 <USBH_SelectInterface>
 80060c2:	4603      	mov	r3, r0
 80060c4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80060c6:	7bbb      	ldrb	r3, [r7, #14]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80060cc:	2302      	movs	r3, #2
 80060ce:	e131      	b.n	8006334 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80060d6:	2050      	movs	r0, #80	@ 0x50
 80060d8:	f001 fb0a 	bl	80076f0 <malloc>
 80060dc:	4603      	mov	r3, r0
 80060de:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80060f0:	2302      	movs	r3, #2
 80060f2:	e11f      	b.n	8006334 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80060f4:	2250      	movs	r2, #80	@ 0x50
 80060f6:	2100      	movs	r1, #0
 80060f8:	68b8      	ldr	r0, [r7, #8]
 80060fa:	f001 fbb7 	bl	800786c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80060fe:	7bfb      	ldrb	r3, [r7, #15]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	211a      	movs	r1, #26
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	4413      	add	r3, r2
 800610a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	b25b      	sxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	da15      	bge.n	8006142 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	211a      	movs	r1, #26
 800611c:	fb01 f303 	mul.w	r3, r1, r3
 8006120:	4413      	add	r3, r2
 8006122:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006126:	781a      	ldrb	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800612c:	7bfb      	ldrb	r3, [r7, #15]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	211a      	movs	r1, #26
 8006132:	fb01 f303 	mul.w	r3, r1, r3
 8006136:	4413      	add	r3, r2
 8006138:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800613c:	881a      	ldrh	r2, [r3, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 ffba 	bl	80070c2 <USBH_AllocPipe>
 800614e:	4603      	mov	r3, r0
 8006150:	461a      	mov	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	7819      	ldrb	r1, [r3, #0]
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	7858      	ldrb	r0, [r3, #1]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	8952      	ldrh	r2, [r2, #10]
 800616e:	9202      	str	r2, [sp, #8]
 8006170:	2203      	movs	r2, #3
 8006172:	9201      	str	r2, [sp, #4]
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4623      	mov	r3, r4
 8006178:	4602      	mov	r2, r0
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 ff72 	bl	8007064 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2200      	movs	r2, #0
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f001 fa35 	bl	80075f8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800618e:	2300      	movs	r3, #0
 8006190:	2200      	movs	r2, #0
 8006192:	210a      	movs	r1, #10
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fc0a 	bl	80069ae <USBH_FindInterface>
 800619a:	4603      	mov	r3, r0
 800619c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800619e:	7bfb      	ldrb	r3, [r7, #15]
 80061a0:	2bff      	cmp	r3, #255	@ 0xff
 80061a2:	d002      	beq.n	80061aa <USBH_CDC_InterfaceInit+0x11a>
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d901      	bls.n	80061ae <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061aa:	2302      	movs	r3, #2
 80061ac:	e0c2      	b.n	8006334 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	211a      	movs	r1, #26
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	4413      	add	r3, r2
 80061ba:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	da16      	bge.n	80061f4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	211a      	movs	r1, #26
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80061d6:	781a      	ldrb	r2, [r3, #0]
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	211a      	movs	r1, #26
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	835a      	strh	r2, [r3, #26]
 80061f2:	e015      	b.n	8006220 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	211a      	movs	r1, #26
 80061fa:	fb01 f303 	mul.w	r3, r1, r3
 80061fe:	4413      	add	r3, r2
 8006200:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	211a      	movs	r1, #26
 8006210:	fb01 f303 	mul.w	r3, r1, r3
 8006214:	4413      	add	r3, r2
 8006216:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800621a:	881a      	ldrh	r2, [r3, #0]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006220:	7bfb      	ldrb	r3, [r7, #15]
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	211a      	movs	r1, #26
 8006226:	fb01 f303 	mul.w	r3, r1, r3
 800622a:	4413      	add	r3, r2
 800622c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b25b      	sxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	da16      	bge.n	8006266 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	211a      	movs	r1, #26
 800623e:	fb01 f303 	mul.w	r3, r1, r3
 8006242:	4413      	add	r3, r2
 8006244:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006248:	781a      	ldrb	r2, [r3, #0]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800624e:	7bfb      	ldrb	r3, [r7, #15]
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	211a      	movs	r1, #26
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	4413      	add	r3, r2
 800625a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800625e:	881a      	ldrh	r2, [r3, #0]
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	835a      	strh	r2, [r3, #26]
 8006264:	e015      	b.n	8006292 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	211a      	movs	r1, #26
 800626c:	fb01 f303 	mul.w	r3, r1, r3
 8006270:	4413      	add	r3, r2
 8006272:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006276:	781a      	ldrb	r2, [r3, #0]
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	211a      	movs	r1, #26
 8006282:	fb01 f303 	mul.w	r3, r1, r3
 8006286:	4413      	add	r3, r2
 8006288:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800628c:	881a      	ldrh	r2, [r3, #0]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	7b9b      	ldrb	r3, [r3, #14]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 ff12 	bl	80070c2 <USBH_AllocPipe>
 800629e:	4603      	mov	r3, r0
 80062a0:	461a      	mov	r2, r3
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	7bdb      	ldrb	r3, [r3, #15]
 80062aa:	4619      	mov	r1, r3
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 ff08 	bl	80070c2 <USBH_AllocPipe>
 80062b2:	4603      	mov	r3, r0
 80062b4:	461a      	mov	r2, r3
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	7b59      	ldrb	r1, [r3, #13]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	7b98      	ldrb	r0, [r3, #14]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	8b12      	ldrh	r2, [r2, #24]
 80062d2:	9202      	str	r2, [sp, #8]
 80062d4:	2202      	movs	r2, #2
 80062d6:	9201      	str	r2, [sp, #4]
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4623      	mov	r3, r4
 80062dc:	4602      	mov	r2, r0
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fec0 	bl	8007064 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	7b19      	ldrb	r1, [r3, #12]
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	7bd8      	ldrb	r0, [r3, #15]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	8b52      	ldrh	r2, [r2, #26]
 80062fc:	9202      	str	r2, [sp, #8]
 80062fe:	2202      	movs	r2, #2
 8006300:	9201      	str	r2, [sp, #4]
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	4623      	mov	r3, r4
 8006306:	4602      	mov	r2, r0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 feab 	bl	8007064 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	7b5b      	ldrb	r3, [r3, #13]
 800631a:	2200      	movs	r2, #0
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 f96a 	bl	80075f8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	7b1b      	ldrb	r3, [r3, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 f963 	bl	80075f8 <USBH_LL_SetToggle>

  return USBH_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	bd90      	pop	{r4, r7, pc}

0800633c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800634a:	69db      	ldr	r3, [r3, #28]
 800634c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00e      	beq.n	8006374 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fea0 	bl	80070a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4619      	mov	r1, r3
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 fecb 	bl	8007104 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	7b1b      	ldrb	r3, [r3, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00e      	beq.n	800639a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	7b1b      	ldrb	r3, [r3, #12]
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fe8d 	bl	80070a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	7b1b      	ldrb	r3, [r3, #12]
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 feb8 	bl	8007104 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	7b5b      	ldrb	r3, [r3, #13]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00e      	beq.n	80063c0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	7b5b      	ldrb	r3, [r3, #13]
 80063a6:	4619      	mov	r1, r3
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fe7a 	bl	80070a2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	7b5b      	ldrb	r3, [r3, #13]
 80063b2:	4619      	mov	r1, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fea5 	bl	8007104 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00b      	beq.n	80063e4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f001 f993 	bl	8007700 <free>
    phost->pActiveClass->pData = 0U;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063e0:	2200      	movs	r2, #0
 80063e2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b084      	sub	sp, #16
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	3340      	adds	r3, #64	@ 0x40
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8b1 	bl	800656e <GetLineCoding>
 800640c:	4603      	mov	r3, r0
 800640e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006410:	7afb      	ldrb	r3, [r7, #11]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800641c:	2102      	movs	r1, #2
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006422:	7afb      	ldrb	r3, [r7, #11]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006434:	2301      	movs	r3, #1
 8006436:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006442:	69db      	ldr	r3, [r3, #28]
 8006444:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800644c:	2b04      	cmp	r3, #4
 800644e:	d877      	bhi.n	8006540 <USBH_CDC_Process+0x114>
 8006450:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <USBH_CDC_Process+0x2c>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	0800646d 	.word	0x0800646d
 800645c:	08006473 	.word	0x08006473
 8006460:	080064a3 	.word	0x080064a3
 8006464:	08006517 	.word	0x08006517
 8006468:	08006525 	.word	0x08006525
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800646c:	2300      	movs	r3, #0
 800646e:	73fb      	strb	r3, [r7, #15]
      break;
 8006470:	e06d      	b.n	800654e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f897 	bl	80065ac <SetLineCoding>
 800647e:	4603      	mov	r3, r0
 8006480:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006482:	7bbb      	ldrb	r3, [r7, #14]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d104      	bne.n	8006492 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2202      	movs	r2, #2
 800648c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006490:	e058      	b.n	8006544 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006492:	7bbb      	ldrb	r3, [r7, #14]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d055      	beq.n	8006544 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2204      	movs	r2, #4
 800649c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80064a0:	e050      	b.n	8006544 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	3340      	adds	r3, #64	@ 0x40
 80064a6:	4619      	mov	r1, r3
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f860 	bl	800656e <GetLineCoding>
 80064ae:	4603      	mov	r3, r0
 80064b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064b2:	7bbb      	ldrb	r3, [r7, #14]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d126      	bne.n	8006506 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ca:	791b      	ldrb	r3, [r3, #4]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d13b      	bne.n	8006548 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064da:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80064dc:	429a      	cmp	r2, r3
 80064de:	d133      	bne.n	8006548 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ea:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d12b      	bne.n	8006548 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d124      	bne.n	8006548 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f958 	bl	80067b4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006504:	e020      	b.n	8006548 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d01d      	beq.n	8006548 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2204      	movs	r2, #4
 8006510:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006514:	e018      	b.n	8006548 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f867 	bl	80065ea <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f8da 	bl	80066d6 <CDC_ProcessReception>
      break;
 8006522:	e014      	b.n	800654e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006524:	2100      	movs	r1, #0
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb27 	bl	8006b7a <USBH_ClrFeature>
 800652c:	4603      	mov	r3, r0
 800652e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006530:	7bbb      	ldrb	r3, [r7, #14]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10a      	bne.n	800654c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800653e:	e005      	b.n	800654c <USBH_CDC_Process+0x120>

    default:
      break;
 8006540:	bf00      	nop
 8006542:	e004      	b.n	800654e <USBH_CDC_Process+0x122>
      break;
 8006544:	bf00      	nop
 8006546:	e002      	b.n	800654e <USBH_CDC_Process+0x122>
      break;
 8006548:	bf00      	nop
 800654a:	e000      	b.n	800654e <USBH_CDC_Process+0x122>
      break;
 800654c:	bf00      	nop

  }

  return status;
 800654e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	22a1      	movs	r2, #161	@ 0xa1
 800657c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2221      	movs	r2, #33	@ 0x21
 8006582:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2207      	movs	r2, #7
 8006594:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2207      	movs	r2, #7
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 fb10 	bl	8006bc2 <USBH_CtlReq>
 80065a2:	4603      	mov	r3, r0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2221      	movs	r2, #33	@ 0x21
 80065ba:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2207      	movs	r2, #7
 80065d2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	2207      	movs	r2, #7
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 faf1 	bl	8006bc2 <USBH_CtlReq>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006606:	2b01      	cmp	r3, #1
 8006608:	d002      	beq.n	8006610 <CDC_ProcessTransmission+0x26>
 800660a:	2b02      	cmp	r3, #2
 800660c:	d023      	beq.n	8006656 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800660e:	e05e      	b.n	80066ce <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	8b12      	ldrh	r2, [r2, #24]
 8006618:	4293      	cmp	r3, r2
 800661a:	d90b      	bls.n	8006634 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	69d9      	ldr	r1, [r3, #28]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	8b1a      	ldrh	r2, [r3, #24]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	7b5b      	ldrb	r3, [r3, #13]
 8006628:	2001      	movs	r0, #1
 800662a:	9000      	str	r0, [sp, #0]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fcd6 	bl	8006fde <USBH_BulkSendData>
 8006632:	e00b      	b.n	800664c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	7b5b      	ldrb	r3, [r3, #13]
 8006642:	2001      	movs	r0, #1
 8006644:	9000      	str	r0, [sp, #0]
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fcc9 	bl	8006fde <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006654:	e03b      	b.n	80066ce <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	7b5b      	ldrb	r3, [r3, #13]
 800665a:	4619      	mov	r1, r3
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 ffa1 	bl	80075a4 <USBH_LL_GetURBState>
 8006662:	4603      	mov	r3, r0
 8006664:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006666:	7afb      	ldrb	r3, [r7, #11]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d128      	bne.n	80066be <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	8b12      	ldrh	r2, [r2, #24]
 8006674:	4293      	cmp	r3, r2
 8006676:	d90e      	bls.n	8006696 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	8b12      	ldrh	r2, [r2, #24]
 8006680:	1a9a      	subs	r2, r3, r2
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	68fa      	ldr	r2, [r7, #12]
 800668c:	8b12      	ldrh	r2, [r2, #24]
 800668e:	441a      	add	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	61da      	str	r2, [r3, #28]
 8006694:	e002      	b.n	800669c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2200      	movs	r2, #0
 800669a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066ac:	e00e      	b.n	80066cc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f868 	bl	800678c <USBH_CDC_TransmitCallback>
      break;
 80066bc:	e006      	b.n	80066cc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80066be:	7afb      	ldrb	r3, [r7, #11]
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d103      	bne.n	80066cc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80066cc:	bf00      	nop
  }
}
 80066ce:	bf00      	nop
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80066e8:	2300      	movs	r3, #0
 80066ea:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d002      	beq.n	80066fc <CDC_ProcessReception+0x26>
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d00e      	beq.n	8006718 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80066fa:	e043      	b.n	8006784 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	6a19      	ldr	r1, [r3, #32]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	8b5a      	ldrh	r2, [r3, #26]
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	7b1b      	ldrb	r3, [r3, #12]
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fc8d 	bl	8007028 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2204      	movs	r2, #4
 8006712:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006716:	e035      	b.n	8006784 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	7b1b      	ldrb	r3, [r3, #12]
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 ff40 	bl	80075a4 <USBH_LL_GetURBState>
 8006724:	4603      	mov	r3, r0
 8006726:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006728:	7cfb      	ldrb	r3, [r7, #19]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d129      	bne.n	8006782 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	7b1b      	ldrb	r3, [r3, #12]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 fea3 	bl	8007480 <USBH_LL_GetLastXferSize>
 800673a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	429a      	cmp	r2, r3
 8006744:	d016      	beq.n	8006774 <CDC_ProcessReception+0x9e>
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	8b5b      	ldrh	r3, [r3, #26]
 800674a:	461a      	mov	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4293      	cmp	r3, r2
 8006750:	d910      	bls.n	8006774 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad2      	subs	r2, r2, r3
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	6a1a      	ldr	r2, [r3, #32]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	441a      	add	r2, r3
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2203      	movs	r2, #3
 800676e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006772:	e006      	b.n	8006782 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f80f 	bl	80067a0 <USBH_CDC_ReceiveCallback>
      break;
 8006782:	bf00      	nop
  }
}
 8006784:	bf00      	nop
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	4613      	mov	r3, r2
 80067d4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80067dc:	2302      	movs	r3, #2
 80067de:	e029      	b.n	8006834 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	79fa      	ldrb	r2, [r7, #7]
 80067e4:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 f81f 	bl	800683c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fdb5 	bl	800739c <USBH_LL_Init>

  return USBH_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3710      	adds	r7, #16
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}

0800683c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006848:	2300      	movs	r3, #0
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e009      	b.n	8006862 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	33e0      	adds	r3, #224	@ 0xe0
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4413      	add	r3, r2
 8006858:	2200      	movs	r2, #0
 800685a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b0f      	cmp	r3, #15
 8006866:	d9f2      	bls.n	800684e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e009      	b.n	8006882 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4413      	add	r3, r2
 8006874:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006888:	d3f1      	bcc.n	800686e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2240      	movs	r2, #64	@ 0x40
 80068ae:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	331c      	adds	r3, #28
 80068da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 ffc3 	bl	800786c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80068ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068f0:	2100      	movs	r1, #0
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 ffba 	bl	800786c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80068fe:	2212      	movs	r2, #18
 8006900:	2100      	movs	r1, #0
 8006902:	4618      	mov	r0, r3
 8006904:	f000 ffb2 	bl	800786c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800690e:	223e      	movs	r2, #62	@ 0x3e
 8006910:	2100      	movs	r1, #0
 8006912:	4618      	mov	r0, r3
 8006914:	f000 ffaa 	bl	800786c <memset>

  return USBH_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
 800692a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d016      	beq.n	8006964 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10e      	bne.n	800695e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006946:	1c59      	adds	r1, r3, #1
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	33de      	adds	r3, #222	@ 0xde
 8006952:	6839      	ldr	r1, [r7, #0]
 8006954:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006958:	2300      	movs	r3, #0
 800695a:	73fb      	strb	r3, [r7, #15]
 800695c:	e004      	b.n	8006968 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800695e:	2302      	movs	r3, #2
 8006960:	73fb      	strb	r3, [r7, #15]
 8006962:	e001      	b.n	8006968 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006964:	2302      	movs	r3, #2
 8006966:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006968:	7bfb      	ldrb	r3, [r7, #15]
}
 800696a:	4618      	mov	r0, r3
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800698c:	78fa      	ldrb	r2, [r7, #3]
 800698e:	429a      	cmp	r2, r3
 8006990:	d204      	bcs.n	800699c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	78fa      	ldrb	r2, [r7, #3]
 8006996:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800699a:	e001      	b.n	80069a0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800699c:	2302      	movs	r3, #2
 800699e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b087      	sub	sp, #28
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	4608      	mov	r0, r1
 80069b8:	4611      	mov	r1, r2
 80069ba:	461a      	mov	r2, r3
 80069bc:	4603      	mov	r3, r0
 80069be:	70fb      	strb	r3, [r7, #3]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70bb      	strb	r3, [r7, #2]
 80069c4:	4613      	mov	r3, r2
 80069c6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80069d6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80069d8:	e025      	b.n	8006a26 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80069da:	7dfb      	ldrb	r3, [r7, #23]
 80069dc:	221a      	movs	r2, #26
 80069de:	fb02 f303 	mul.w	r3, r2, r3
 80069e2:	3308      	adds	r3, #8
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	3302      	adds	r3, #2
 80069ea:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	795b      	ldrb	r3, [r3, #5]
 80069f0:	78fa      	ldrb	r2, [r7, #3]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d002      	beq.n	80069fc <USBH_FindInterface+0x4e>
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	2bff      	cmp	r3, #255	@ 0xff
 80069fa:	d111      	bne.n	8006a20 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006a00:	78ba      	ldrb	r2, [r7, #2]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d002      	beq.n	8006a0c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a06:	78bb      	ldrb	r3, [r7, #2]
 8006a08:	2bff      	cmp	r3, #255	@ 0xff
 8006a0a:	d109      	bne.n	8006a20 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006a10:	787a      	ldrb	r2, [r7, #1]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d002      	beq.n	8006a1c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006a16:	787b      	ldrb	r3, [r7, #1]
 8006a18:	2bff      	cmp	r3, #255	@ 0xff
 8006a1a:	d101      	bne.n	8006a20 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006a1c:	7dfb      	ldrb	r3, [r7, #23]
 8006a1e:	e006      	b.n	8006a2e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006a20:	7dfb      	ldrb	r3, [r7, #23]
 8006a22:	3301      	adds	r3, #1
 8006a24:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d9d6      	bls.n	80069da <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006a2c:	23ff      	movs	r3, #255	@ 0xff
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b082      	sub	sp, #8
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fce6 	bl	8007414 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006a48:	2101      	movs	r1, #1
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fdbd 	bl	80075ca <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b083      	sub	sp, #12
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006a86:	1c5a      	adds	r2, r3, #1
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f804 	bl	8006a9c <USBH_HandleSof>
}
 8006a94:	bf00      	nop
 8006a96:	3708      	adds	r7, #8
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b082      	sub	sp, #8
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b0b      	cmp	r3, #11
 8006aac:	d10a      	bne.n	8006ac4 <USBH_HandleSof+0x28>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d005      	beq.n	8006ac4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
  }
}
 8006ac4:	bf00      	nop
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006adc:	bf00      	nop
}
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8006af8:	bf00      	nop
}
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr

08006b32 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fc79 	bl	800744a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	791b      	ldrb	r3, [r3, #4]
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fad0 	bl	8007104 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	795b      	ldrb	r3, [r3, #5]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 faca 	bl	8007104 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	789b      	ldrb	r3, [r3, #2]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d10f      	bne.n	8006bae <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2202      	movs	r2, #2
 8006b92:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	b29a      	uxth	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2100      	movs	r1, #0
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f805 	bl	8006bc2 <USBH_CtlReq>
 8006bb8:	4603      	mov	r3, r0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b086      	sub	sp, #24
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	60f8      	str	r0, [r7, #12]
 8006bca:	60b9      	str	r1, [r7, #8]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	789b      	ldrb	r3, [r3, #2]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d002      	beq.n	8006be2 <USBH_CtlReq+0x20>
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d00f      	beq.n	8006c00 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006be0:	e027      	b.n	8006c32 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bfe:	e018      	b.n	8006c32 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f81b 	bl	8006c3c <USBH_HandleControl>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d002      	beq.n	8006c16 <USBH_CtlReq+0x54>
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d106      	bne.n	8006c24 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	761a      	strb	r2, [r3, #24]
      break;
 8006c22:	e005      	b.n	8006c30 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d102      	bne.n	8006c30 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	709a      	strb	r2, [r3, #2]
      break;
 8006c30:	bf00      	nop
  }
  return status;
 8006c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c44:	2301      	movs	r3, #1
 8006c46:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	7e1b      	ldrb	r3, [r3, #24]
 8006c50:	3b01      	subs	r3, #1
 8006c52:	2b0a      	cmp	r3, #10
 8006c54:	f200 8156 	bhi.w	8006f04 <USBH_HandleControl+0x2c8>
 8006c58:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <USBH_HandleControl+0x24>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c8d 	.word	0x08006c8d
 8006c64:	08006ca7 	.word	0x08006ca7
 8006c68:	08006d11 	.word	0x08006d11
 8006c6c:	08006d37 	.word	0x08006d37
 8006c70:	08006d6f 	.word	0x08006d6f
 8006c74:	08006d99 	.word	0x08006d99
 8006c78:	08006deb 	.word	0x08006deb
 8006c7c:	08006e0d 	.word	0x08006e0d
 8006c80:	08006e49 	.word	0x08006e49
 8006c84:	08006e6f 	.word	0x08006e6f
 8006c88:	08006ead 	.word	0x08006ead
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f103 0110 	add.w	r1, r3, #16
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	795b      	ldrb	r3, [r3, #5]
 8006c96:	461a      	mov	r2, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f943 	bl	8006f24 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	761a      	strb	r2, [r3, #24]
      break;
 8006ca4:	e139      	b.n	8006f1a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	795b      	ldrb	r3, [r3, #5]
 8006caa:	4619      	mov	r1, r3
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 fc79 	bl	80075a4 <USBH_LL_GetURBState>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d11e      	bne.n	8006cfa <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	7c1b      	ldrb	r3, [r3, #16]
 8006cc0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006cc4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	8adb      	ldrh	r3, [r3, #22]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006cce:	7b7b      	ldrb	r3, [r7, #13]
 8006cd0:	2b80      	cmp	r3, #128	@ 0x80
 8006cd2:	d103      	bne.n	8006cdc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006cda:	e115      	b.n	8006f08 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2205      	movs	r2, #5
 8006ce0:	761a      	strb	r2, [r3, #24]
      break;
 8006ce2:	e111      	b.n	8006f08 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006ce4:	7b7b      	ldrb	r3, [r7, #13]
 8006ce6:	2b80      	cmp	r3, #128	@ 0x80
 8006ce8:	d103      	bne.n	8006cf2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2209      	movs	r2, #9
 8006cee:	761a      	strb	r2, [r3, #24]
      break;
 8006cf0:	e10a      	b.n	8006f08 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2207      	movs	r2, #7
 8006cf6:	761a      	strb	r2, [r3, #24]
      break;
 8006cf8:	e106      	b.n	8006f08 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006cfa:	7bbb      	ldrb	r3, [r7, #14]
 8006cfc:	2b04      	cmp	r3, #4
 8006cfe:	d003      	beq.n	8006d08 <USBH_HandleControl+0xcc>
 8006d00:	7bbb      	ldrb	r3, [r7, #14]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	f040 8100 	bne.w	8006f08 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220b      	movs	r2, #11
 8006d0c:	761a      	strb	r2, [r3, #24]
      break;
 8006d0e:	e0fb      	b.n	8006f08 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6899      	ldr	r1, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	899a      	ldrh	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	791b      	ldrb	r3, [r3, #4]
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f000 f93a 	bl	8006fa2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2204      	movs	r2, #4
 8006d32:	761a      	strb	r2, [r3, #24]
      break;
 8006d34:	e0f1      	b.n	8006f1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	791b      	ldrb	r3, [r3, #4]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc31 	bl	80075a4 <USBH_LL_GetURBState>
 8006d42:	4603      	mov	r3, r0
 8006d44:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d102      	bne.n	8006d52 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2209      	movs	r2, #9
 8006d50:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b05      	cmp	r3, #5
 8006d56:	d102      	bne.n	8006d5e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d5c:	e0d6      	b.n	8006f0c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	f040 80d3 	bne.w	8006f0c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	220b      	movs	r2, #11
 8006d6a:	761a      	strb	r2, [r3, #24]
      break;
 8006d6c:	e0ce      	b.n	8006f0c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6899      	ldr	r1, [r3, #8]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	899a      	ldrh	r2, [r3, #12]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	795b      	ldrb	r3, [r3, #5]
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	9000      	str	r0, [sp, #0]
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f8ea 	bl	8006f58 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2206      	movs	r2, #6
 8006d94:	761a      	strb	r2, [r3, #24]
      break;
 8006d96:	e0c0      	b.n	8006f1a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	795b      	ldrb	r3, [r3, #5]
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fc00 	bl	80075a4 <USBH_LL_GetURBState>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006da8:	7bbb      	ldrb	r3, [r7, #14]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d103      	bne.n	8006db6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2207      	movs	r2, #7
 8006db2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006db4:	e0ac      	b.n	8006f10 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b05      	cmp	r3, #5
 8006dba:	d105      	bne.n	8006dc8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	220c      	movs	r2, #12
 8006dc0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc6:	e0a3      	b.n	8006f10 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d103      	bne.n	8006dd6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	761a      	strb	r2, [r3, #24]
      break;
 8006dd4:	e09c      	b.n	8006f10 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b04      	cmp	r3, #4
 8006dda:	f040 8099 	bne.w	8006f10 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	220b      	movs	r2, #11
 8006de2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006de4:	2302      	movs	r3, #2
 8006de6:	73fb      	strb	r3, [r7, #15]
      break;
 8006de8:	e092      	b.n	8006f10 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	791b      	ldrb	r3, [r3, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	2100      	movs	r1, #0
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8d5 	bl	8006fa2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2208      	movs	r2, #8
 8006e08:	761a      	strb	r2, [r3, #24]

      break;
 8006e0a:	e086      	b.n	8006f1a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	791b      	ldrb	r3, [r3, #4]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fbc6 	bl	80075a4 <USBH_LL_GetURBState>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006e1c:	7bbb      	ldrb	r3, [r7, #14]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d105      	bne.n	8006e2e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	220d      	movs	r2, #13
 8006e26:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e2c:	e072      	b.n	8006f14 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b04      	cmp	r3, #4
 8006e32:	d103      	bne.n	8006e3c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	220b      	movs	r2, #11
 8006e38:	761a      	strb	r2, [r3, #24]
      break;
 8006e3a:	e06b      	b.n	8006f14 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b05      	cmp	r3, #5
 8006e40:	d168      	bne.n	8006f14 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006e42:	2303      	movs	r3, #3
 8006e44:	73fb      	strb	r3, [r7, #15]
      break;
 8006e46:	e065      	b.n	8006f14 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	795b      	ldrb	r3, [r3, #5]
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	9200      	str	r2, [sp, #0]
 8006e50:	2200      	movs	r2, #0
 8006e52:	2100      	movs	r1, #0
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f87f 	bl	8006f58 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	220a      	movs	r2, #10
 8006e6a:	761a      	strb	r2, [r3, #24]
      break;
 8006e6c:	e055      	b.n	8006f1a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	795b      	ldrb	r3, [r3, #5]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb95 	bl	80075a4 <USBH_LL_GetURBState>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d105      	bne.n	8006e90 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	220d      	movs	r2, #13
 8006e8c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006e8e:	e043      	b.n	8006f18 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006e90:	7bbb      	ldrb	r3, [r7, #14]
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d103      	bne.n	8006e9e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2209      	movs	r2, #9
 8006e9a:	761a      	strb	r2, [r3, #24]
      break;
 8006e9c:	e03c      	b.n	8006f18 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d139      	bne.n	8006f18 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	220b      	movs	r2, #11
 8006ea8:	761a      	strb	r2, [r3, #24]
      break;
 8006eaa:	e035      	b.n	8006f18 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	7e5b      	ldrb	r3, [r3, #25]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	765a      	strb	r2, [r3, #25]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	7e5b      	ldrb	r3, [r3, #25]
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d806      	bhi.n	8006ece <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006ecc:	e025      	b.n	8006f1a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ed4:	2106      	movs	r1, #6
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	795b      	ldrb	r3, [r3, #5]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f90c 	bl	8007104 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	791b      	ldrb	r3, [r3, #4]
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f906 	bl	8007104 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006efe:	2302      	movs	r3, #2
 8006f00:	73fb      	strb	r3, [r7, #15]
      break;
 8006f02:	e00a      	b.n	8006f1a <USBH_HandleControl+0x2de>

    default:
      break;
 8006f04:	bf00      	nop
 8006f06:	e008      	b.n	8006f1a <USBH_HandleControl+0x2de>
      break;
 8006f08:	bf00      	nop
 8006f0a:	e006      	b.n	8006f1a <USBH_HandleControl+0x2de>
      break;
 8006f0c:	bf00      	nop
 8006f0e:	e004      	b.n	8006f1a <USBH_HandleControl+0x2de>
      break;
 8006f10:	bf00      	nop
 8006f12:	e002      	b.n	8006f1a <USBH_HandleControl+0x2de>
      break;
 8006f14:	bf00      	nop
 8006f16:	e000      	b.n	8006f1a <USBH_HandleControl+0x2de>
      break;
 8006f18:	bf00      	nop
  }

  return status;
 8006f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af04      	add	r7, sp, #16
 8006f2a:	60f8      	str	r0, [r7, #12]
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006f32:	79f9      	ldrb	r1, [r7, #7]
 8006f34:	2300      	movs	r3, #0
 8006f36:	9303      	str	r3, [sp, #12]
 8006f38:	2308      	movs	r3, #8
 8006f3a:	9302      	str	r3, [sp, #8]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	9301      	str	r3, [sp, #4]
 8006f40:	2300      	movs	r3, #0
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	68f8      	ldr	r0, [r7, #12]
 8006f4a:	f000 fafa 	bl	8007542 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af04      	add	r7, sp, #16
 8006f5e:	60f8      	str	r0, [r7, #12]
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	4611      	mov	r1, r2
 8006f64:	461a      	mov	r2, r3
 8006f66:	460b      	mov	r3, r1
 8006f68:	80fb      	strh	r3, [r7, #6]
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006f7c:	7979      	ldrb	r1, [r7, #5]
 8006f7e:	7e3b      	ldrb	r3, [r7, #24]
 8006f80:	9303      	str	r3, [sp, #12]
 8006f82:	88fb      	ldrh	r3, [r7, #6]
 8006f84:	9302      	str	r3, [sp, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	9300      	str	r3, [sp, #0]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	2200      	movs	r2, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fad5 	bl	8007542 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3710      	adds	r7, #16
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af04      	add	r7, sp, #16
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	60b9      	str	r1, [r7, #8]
 8006fac:	4611      	mov	r1, r2
 8006fae:	461a      	mov	r2, r3
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	80fb      	strh	r3, [r7, #6]
 8006fb4:	4613      	mov	r3, r2
 8006fb6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006fb8:	7979      	ldrb	r1, [r7, #5]
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9303      	str	r3, [sp, #12]
 8006fbe:	88fb      	ldrh	r3, [r7, #6]
 8006fc0:	9302      	str	r3, [sp, #8]
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2201      	movs	r2, #1
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 fab7 	bl	8007542 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006fd4:	2300      	movs	r3, #0

}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b088      	sub	sp, #32
 8006fe2:	af04      	add	r7, sp, #16
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	4611      	mov	r1, r2
 8006fea:	461a      	mov	r2, r3
 8006fec:	460b      	mov	r3, r1
 8006fee:	80fb      	strh	r3, [r7, #6]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007002:	7979      	ldrb	r1, [r7, #5]
 8007004:	7e3b      	ldrb	r3, [r7, #24]
 8007006:	9303      	str	r3, [sp, #12]
 8007008:	88fb      	ldrh	r3, [r7, #6]
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	2301      	movs	r3, #1
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	2302      	movs	r3, #2
 8007016:	2200      	movs	r2, #0
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fa92 	bl	8007542 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af04      	add	r7, sp, #16
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	460b      	mov	r3, r1
 8007038:	80fb      	strh	r3, [r7, #6]
 800703a:	4613      	mov	r3, r2
 800703c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800703e:	7979      	ldrb	r1, [r7, #5]
 8007040:	2300      	movs	r3, #0
 8007042:	9303      	str	r3, [sp, #12]
 8007044:	88fb      	ldrh	r3, [r7, #6]
 8007046:	9302      	str	r3, [sp, #8]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	9301      	str	r3, [sp, #4]
 800704c:	2301      	movs	r3, #1
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	2302      	movs	r3, #2
 8007052:	2201      	movs	r2, #1
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 fa74 	bl	8007542 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af04      	add	r7, sp, #16
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	4608      	mov	r0, r1
 800706e:	4611      	mov	r1, r2
 8007070:	461a      	mov	r2, r3
 8007072:	4603      	mov	r3, r0
 8007074:	70fb      	strb	r3, [r7, #3]
 8007076:	460b      	mov	r3, r1
 8007078:	70bb      	strb	r3, [r7, #2]
 800707a:	4613      	mov	r3, r2
 800707c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800707e:	7878      	ldrb	r0, [r7, #1]
 8007080:	78ba      	ldrb	r2, [r7, #2]
 8007082:	78f9      	ldrb	r1, [r7, #3]
 8007084:	8b3b      	ldrh	r3, [r7, #24]
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	7d3b      	ldrb	r3, [r7, #20]
 800708a:	9301      	str	r3, [sp, #4]
 800708c:	7c3b      	ldrb	r3, [r7, #16]
 800708e:	9300      	str	r3, [sp, #0]
 8007090:	4603      	mov	r3, r0
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fa07 	bl	80074a6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80070ae:	78fb      	ldrb	r3, [r7, #3]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa26 	bl	8007504 <USBH_LL_ClosePipe>

  return USBH_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3708      	adds	r7, #8
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b084      	sub	sp, #16
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	460b      	mov	r3, r1
 80070cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f836 	bl	8007140 <USBH_GetFreePipe>
 80070d4:	4603      	mov	r3, r0
 80070d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80070d8:	89fb      	ldrh	r3, [r7, #14]
 80070da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80070de:	4293      	cmp	r3, r2
 80070e0:	d00a      	beq.n	80070f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80070e2:	78fa      	ldrb	r2, [r7, #3]
 80070e4:	89fb      	ldrh	r3, [r7, #14]
 80070e6:	f003 030f 	and.w	r3, r3, #15
 80070ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80070ee:	6879      	ldr	r1, [r7, #4]
 80070f0:	33e0      	adds	r3, #224	@ 0xe0
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	440b      	add	r3, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80070f8:	89fb      	ldrh	r3, [r7, #14]
 80070fa:	b2db      	uxtb	r3, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007110:	78fb      	ldrb	r3, [r7, #3]
 8007112:	2b0f      	cmp	r3, #15
 8007114:	d80d      	bhi.n	8007132 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007116:	78fb      	ldrb	r3, [r7, #3]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	33e0      	adds	r3, #224	@ 0xe0
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	685a      	ldr	r2, [r3, #4]
 8007122:	78fb      	ldrb	r3, [r7, #3]
 8007124:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007128:	6879      	ldr	r1, [r7, #4]
 800712a:	33e0      	adds	r3, #224	@ 0xe0
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	440b      	add	r3, r1
 8007130:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800714c:	2300      	movs	r3, #0
 800714e:	73fb      	strb	r3, [r7, #15]
 8007150:	e00f      	b.n	8007172 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007152:	7bfb      	ldrb	r3, [r7, #15]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	33e0      	adds	r3, #224	@ 0xe0
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007166:	7bfb      	ldrb	r3, [r7, #15]
 8007168:	b29b      	uxth	r3, r3
 800716a:	e007      	b.n	800717c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800716c:	7bfb      	ldrb	r3, [r7, #15]
 800716e:	3301      	adds	r3, #1
 8007170:	73fb      	strb	r3, [r7, #15]
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b0f      	cmp	r3, #15
 8007176:	d9ec      	bls.n	8007152 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007178:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800717c:	4618      	mov	r0, r3
 800717e:	3714      	adds	r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800718c:	2201      	movs	r2, #1
 800718e:	490e      	ldr	r1, [pc, #56]	@ (80071c8 <MX_USB_HOST_Init+0x40>)
 8007190:	480e      	ldr	r0, [pc, #56]	@ (80071cc <MX_USB_HOST_Init+0x44>)
 8007192:	f7ff fb19 	bl	80067c8 <USBH_Init>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800719c:	f7f9 fbe2 	bl	8000964 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80071a0:	490b      	ldr	r1, [pc, #44]	@ (80071d0 <MX_USB_HOST_Init+0x48>)
 80071a2:	480a      	ldr	r0, [pc, #40]	@ (80071cc <MX_USB_HOST_Init+0x44>)
 80071a4:	f7ff fbbd 	bl	8006922 <USBH_RegisterClass>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80071ae:	f7f9 fbd9 	bl	8000964 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80071b2:	4806      	ldr	r0, [pc, #24]	@ (80071cc <MX_USB_HOST_Init+0x44>)
 80071b4:	f7ff fc41 	bl	8006a3a <USBH_Start>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80071be:	f7f9 fbd1 	bl	8000964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80071c2:	bf00      	nop
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	080071d5 	.word	0x080071d5
 80071cc:	20000130 	.word	0x20000130
 80071d0:	2000000c 	.word	0x2000000c

080071d4 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80071e0:	78fb      	ldrb	r3, [r7, #3]
 80071e2:	3b01      	subs	r3, #1
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d819      	bhi.n	800721c <USBH_UserProcess+0x48>
 80071e8:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <USBH_UserProcess+0x1c>)
 80071ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071ee:	bf00      	nop
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	0800720d 	.word	0x0800720d
 80071f8:	0800721d 	.word	0x0800721d
 80071fc:	08007215 	.word	0x08007215
 8007200:	08007205 	.word	0x08007205
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007204:	4b09      	ldr	r3, [pc, #36]	@ (800722c <USBH_UserProcess+0x58>)
 8007206:	2203      	movs	r2, #3
 8007208:	701a      	strb	r2, [r3, #0]
  break;
 800720a:	e008      	b.n	800721e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800720c:	4b07      	ldr	r3, [pc, #28]	@ (800722c <USBH_UserProcess+0x58>)
 800720e:	2202      	movs	r2, #2
 8007210:	701a      	strb	r2, [r3, #0]
  break;
 8007212:	e004      	b.n	800721e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007214:	4b05      	ldr	r3, [pc, #20]	@ (800722c <USBH_UserProcess+0x58>)
 8007216:	2201      	movs	r2, #1
 8007218:	701a      	strb	r2, [r3, #0]
  break;
 800721a:	e000      	b.n	800721e <USBH_UserProcess+0x4a>

  default:
  break;
 800721c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	20000508 	.word	0x20000508

08007230 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b08a      	sub	sp, #40	@ 0x28
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007238:	f107 0314 	add.w	r3, r7, #20
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007250:	d147      	bne.n	80072e2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007252:	2300      	movs	r3, #0
 8007254:	613b      	str	r3, [r7, #16]
 8007256:	4b25      	ldr	r3, [pc, #148]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 8007258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725a:	4a24      	ldr	r2, [pc, #144]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 800725c:	f043 0301 	orr.w	r3, r3, #1
 8007260:	6313      	str	r3, [r2, #48]	@ 0x30
 8007262:	4b22      	ldr	r3, [pc, #136]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 8007264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800726e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007278:	2300      	movs	r3, #0
 800727a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800727c:	f107 0314 	add.w	r3, r7, #20
 8007280:	4619      	mov	r1, r3
 8007282:	481b      	ldr	r0, [pc, #108]	@ (80072f0 <HAL_HCD_MspInit+0xc0>)
 8007284:	f7fa fa68 	bl	8001758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007288:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800728c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800728e:	2302      	movs	r3, #2
 8007290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007292:	2300      	movs	r3, #0
 8007294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007296:	2300      	movs	r3, #0
 8007298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800729a:	230a      	movs	r3, #10
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800729e:	f107 0314 	add.w	r3, r7, #20
 80072a2:	4619      	mov	r1, r3
 80072a4:	4812      	ldr	r0, [pc, #72]	@ (80072f0 <HAL_HCD_MspInit+0xc0>)
 80072a6:	f7fa fa57 	bl	8001758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80072aa:	4b10      	ldr	r3, [pc, #64]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 80072ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072ae:	4a0f      	ldr	r2, [pc, #60]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 80072b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b4:	6353      	str	r3, [r2, #52]	@ 0x34
 80072b6:	2300      	movs	r3, #0
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	4b0c      	ldr	r3, [pc, #48]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 80072bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072be:	4a0b      	ldr	r2, [pc, #44]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 80072c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80072c6:	4b09      	ldr	r3, [pc, #36]	@ (80072ec <HAL_HCD_MspInit+0xbc>)
 80072c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80072d2:	2200      	movs	r2, #0
 80072d4:	2100      	movs	r1, #0
 80072d6:	2043      	movs	r0, #67	@ 0x43
 80072d8:	f7fa fa07 	bl	80016ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80072dc:	2043      	movs	r0, #67	@ 0x43
 80072de:	f7fa fa20 	bl	8001722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80072e2:	bf00      	nop
 80072e4:	3728      	adds	r7, #40	@ 0x28
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40023800 	.word	0x40023800
 80072f0:	40020000 	.word	0x40020000

080072f4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007302:	4618      	mov	r0, r3
 8007304:	f7ff fbb8 	bl	8006a78 <USBH_LL_IncTimer>
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800731e:	4618      	mov	r0, r3
 8007320:	f7ff fbf0 	bl	8006b04 <USBH_LL_Connect>
}
 8007324:	bf00      	nop
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800733a:	4618      	mov	r0, r3
 800733c:	f7ff fbf9 	bl	8006b32 <USBH_LL_Disconnect>
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	460b      	mov	r3, r1
 8007352:	70fb      	strb	r3, [r7, #3]
 8007354:	4613      	mov	r3, r2
 8007356:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8007372:	4618      	mov	r0, r3
 8007374:	f7ff fbaa 	bl	8006acc <USBH_LL_PortEnabled>
}
 8007378:	bf00      	nop
 800737a:	3708      	adds	r7, #8
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800738e:	4618      	mov	r0, r3
 8007390:	f7ff fbaa 	bl	8006ae8 <USBH_LL_PortDisabled>
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d12a      	bne.n	8007404 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80073ae:	4a18      	ldr	r2, [pc, #96]	@ (8007410 <USBH_LL_Init+0x74>)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a15      	ldr	r2, [pc, #84]	@ (8007410 <USBH_LL_Init+0x74>)
 80073ba:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073be:	4b14      	ldr	r3, [pc, #80]	@ (8007410 <USBH_LL_Init+0x74>)
 80073c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80073c4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80073c6:	4b12      	ldr	r3, [pc, #72]	@ (8007410 <USBH_LL_Init+0x74>)
 80073c8:	2208      	movs	r2, #8
 80073ca:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80073cc:	4b10      	ldr	r3, [pc, #64]	@ (8007410 <USBH_LL_Init+0x74>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007410 <USBH_LL_Init+0x74>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80073d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007410 <USBH_LL_Init+0x74>)
 80073da:	2202      	movs	r2, #2
 80073dc:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073de:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <USBH_LL_Init+0x74>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80073e4:	480a      	ldr	r0, [pc, #40]	@ (8007410 <USBH_LL_Init+0x74>)
 80073e6:	f7fa fb6c 	bl	8001ac2 <HAL_HCD_Init>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80073f0:	f7f9 fab8 	bl	8000964 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80073f4:	4806      	ldr	r0, [pc, #24]	@ (8007410 <USBH_LL_Init+0x74>)
 80073f6:	f7fa ffbf 	bl	8002378 <HAL_HCD_GetCurrentFrame>
 80073fa:	4603      	mov	r3, r0
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7ff fb2b 	bl	8006a5a <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	2000050c 	.word	0x2000050c

08007414 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007420:	2300      	movs	r3, #0
 8007422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800742a:	4618      	mov	r0, r3
 800742c:	f7fa ff3a 	bl	80022a4 <HAL_HCD_Start>
 8007430:	4603      	mov	r3, r0
 8007432:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 f912 	bl	8007660 <USBH_Get_USB_Status>
 800743c:	4603      	mov	r3, r0
 800743e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007440:	7bbb      	ldrb	r3, [r7, #14]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007456:	2300      	movs	r3, #0
 8007458:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007460:	4618      	mov	r0, r3
 8007462:	f7fa ff42 	bl	80022ea <HAL_HCD_Stop>
 8007466:	4603      	mov	r3, r0
 8007468:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 f8f7 	bl	8007660 <USBH_Get_USB_Status>
 8007472:	4603      	mov	r3, r0
 8007474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007476:	7bbb      	ldrb	r3, [r7, #14]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	460b      	mov	r3, r1
 800748a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8007492:	78fa      	ldrb	r2, [r7, #3]
 8007494:	4611      	mov	r1, r2
 8007496:	4618      	mov	r0, r3
 8007498:	f7fa ff59 	bl	800234e <HAL_HCD_HC_GetXferCount>
 800749c:	4603      	mov	r3, r0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80074a6:	b590      	push	{r4, r7, lr}
 80074a8:	b089      	sub	sp, #36	@ 0x24
 80074aa:	af04      	add	r7, sp, #16
 80074ac:	6078      	str	r0, [r7, #4]
 80074ae:	4608      	mov	r0, r1
 80074b0:	4611      	mov	r1, r2
 80074b2:	461a      	mov	r2, r3
 80074b4:	4603      	mov	r3, r0
 80074b6:	70fb      	strb	r3, [r7, #3]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70bb      	strb	r3, [r7, #2]
 80074bc:	4613      	mov	r3, r2
 80074be:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80074ce:	787c      	ldrb	r4, [r7, #1]
 80074d0:	78ba      	ldrb	r2, [r7, #2]
 80074d2:	78f9      	ldrb	r1, [r7, #3]
 80074d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80074d6:	9302      	str	r3, [sp, #8]
 80074d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074dc:	9301      	str	r3, [sp, #4]
 80074de:	f897 3020 	ldrb.w	r3, [r7, #32]
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	4623      	mov	r3, r4
 80074e6:	f7fa fb53 	bl	8001b90 <HAL_HCD_HC_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f8b5 	bl	8007660 <USBH_Get_USB_Status>
 80074f6:	4603      	mov	r3, r0
 80074f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3714      	adds	r7, #20
 8007500:	46bd      	mov	sp, r7
 8007502:	bd90      	pop	{r4, r7, pc}

08007504 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800751e:	78fa      	ldrb	r2, [r7, #3]
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f7fa fbec 	bl	8001d00 <HAL_HCD_HC_Halt>
 8007528:	4603      	mov	r3, r0
 800752a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800752c:	7bfb      	ldrb	r3, [r7, #15]
 800752e:	4618      	mov	r0, r3
 8007530:	f000 f896 	bl	8007660 <USBH_Get_USB_Status>
 8007534:	4603      	mov	r3, r0
 8007536:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007538:	7bbb      	ldrb	r3, [r7, #14]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}

08007542 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007542:	b590      	push	{r4, r7, lr}
 8007544:	b089      	sub	sp, #36	@ 0x24
 8007546:	af04      	add	r7, sp, #16
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	4608      	mov	r0, r1
 800754c:	4611      	mov	r1, r2
 800754e:	461a      	mov	r2, r3
 8007550:	4603      	mov	r3, r0
 8007552:	70fb      	strb	r3, [r7, #3]
 8007554:	460b      	mov	r3, r1
 8007556:	70bb      	strb	r3, [r7, #2]
 8007558:	4613      	mov	r3, r2
 800755a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800755c:	2300      	movs	r3, #0
 800755e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007560:	2300      	movs	r3, #0
 8007562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800756a:	787c      	ldrb	r4, [r7, #1]
 800756c:	78ba      	ldrb	r2, [r7, #2]
 800756e:	78f9      	ldrb	r1, [r7, #3]
 8007570:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007574:	9303      	str	r3, [sp, #12]
 8007576:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007578:	9302      	str	r3, [sp, #8]
 800757a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757c:	9301      	str	r3, [sp, #4]
 800757e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	4623      	mov	r3, r4
 8007586:	f7fa fbdf 	bl	8001d48 <HAL_HCD_HC_SubmitRequest>
 800758a:	4603      	mov	r3, r0
 800758c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	4618      	mov	r0, r3
 8007592:	f000 f865 	bl	8007660 <USBH_Get_USB_Status>
 8007596:	4603      	mov	r3, r0
 8007598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800759a:	7bbb      	ldrb	r3, [r7, #14]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3714      	adds	r7, #20
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd90      	pop	{r4, r7, pc}

080075a4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fa feb2 	bl	8002324 <HAL_HCD_HC_GetURBState>
 80075c0:	4603      	mov	r3, r0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3708      	adds	r7, #8
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}

080075ca <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	b082      	sub	sp, #8
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	460b      	mov	r3, r1
 80075d4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d103      	bne.n	80075e8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f868 	bl	80076b8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80075e8:	20c8      	movs	r0, #200	@ 0xc8
 80075ea:	f7f9 fbb3 	bl	8000d54 <HAL_Delay>
  return USBH_OK;
 80075ee:	2300      	movs	r3, #0
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
 8007604:	4613      	mov	r3, r2
 8007606:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800760e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8007610:	78fa      	ldrb	r2, [r7, #3]
 8007612:	68f9      	ldr	r1, [r7, #12]
 8007614:	4613      	mov	r3, r2
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	1a9b      	subs	r3, r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	3317      	adds	r3, #23
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d00a      	beq.n	800763c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8007626:	78fa      	ldrb	r2, [r7, #3]
 8007628:	68f9      	ldr	r1, [r7, #12]
 800762a:	4613      	mov	r3, r2
 800762c:	011b      	lsls	r3, r3, #4
 800762e:	1a9b      	subs	r3, r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	333c      	adds	r3, #60	@ 0x3c
 8007636:	78ba      	ldrb	r2, [r7, #2]
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e009      	b.n	8007650 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800763c:	78fa      	ldrb	r2, [r7, #3]
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	4613      	mov	r3, r2
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	1a9b      	subs	r3, r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	440b      	add	r3, r1
 800764a:	333d      	adds	r3, #61	@ 0x3d
 800764c:	78ba      	ldrb	r2, [r7, #2]
 800764e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007660:	b480      	push	{r7}
 8007662:	b085      	sub	sp, #20
 8007664:	af00      	add	r7, sp, #0
 8007666:	4603      	mov	r3, r0
 8007668:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800766e:	79fb      	ldrb	r3, [r7, #7]
 8007670:	2b03      	cmp	r3, #3
 8007672:	d817      	bhi.n	80076a4 <USBH_Get_USB_Status+0x44>
 8007674:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <USBH_Get_USB_Status+0x1c>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	0800768d 	.word	0x0800768d
 8007680:	08007693 	.word	0x08007693
 8007684:	08007699 	.word	0x08007699
 8007688:	0800769f 	.word	0x0800769f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800768c:	2300      	movs	r3, #0
 800768e:	73fb      	strb	r3, [r7, #15]
    break;
 8007690:	e00b      	b.n	80076aa <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8007692:	2302      	movs	r3, #2
 8007694:	73fb      	strb	r3, [r7, #15]
    break;
 8007696:	e008      	b.n	80076aa <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007698:	2301      	movs	r3, #1
 800769a:	73fb      	strb	r3, [r7, #15]
    break;
 800769c:	e005      	b.n	80076aa <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800769e:	2302      	movs	r3, #2
 80076a0:	73fb      	strb	r3, [r7, #15]
    break;
 80076a2:	e002      	b.n	80076aa <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80076a4:	2302      	movs	r3, #2
 80076a6:	73fb      	strb	r3, [r7, #15]
    break;
 80076a8:	bf00      	nop
  }
  return usb_status;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d102      	bne.n	80076d2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
 80076d0:	e001      	b.n	80076d6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80076d2:	2301      	movs	r3, #1
 80076d4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80076d6:	7bfb      	ldrb	r3, [r7, #15]
 80076d8:	461a      	mov	r2, r3
 80076da:	2101      	movs	r1, #1
 80076dc:	4803      	ldr	r0, [pc, #12]	@ (80076ec <MX_DriverVbusFS+0x34>)
 80076de:	f7fa f9d7 	bl	8001a90 <HAL_GPIO_WritePin>
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	40020800 	.word	0x40020800

080076f0 <malloc>:
 80076f0:	4b02      	ldr	r3, [pc, #8]	@ (80076fc <malloc+0xc>)
 80076f2:	4601      	mov	r1, r0
 80076f4:	6818      	ldr	r0, [r3, #0]
 80076f6:	f000 b82d 	b.w	8007754 <_malloc_r>
 80076fa:	bf00      	nop
 80076fc:	2000002c 	.word	0x2000002c

08007700 <free>:
 8007700:	4b02      	ldr	r3, [pc, #8]	@ (800770c <free+0xc>)
 8007702:	4601      	mov	r1, r0
 8007704:	6818      	ldr	r0, [r3, #0]
 8007706:	f000 b8f5 	b.w	80078f4 <_free_r>
 800770a:	bf00      	nop
 800770c:	2000002c 	.word	0x2000002c

08007710 <sbrk_aligned>:
 8007710:	b570      	push	{r4, r5, r6, lr}
 8007712:	4e0f      	ldr	r6, [pc, #60]	@ (8007750 <sbrk_aligned+0x40>)
 8007714:	460c      	mov	r4, r1
 8007716:	6831      	ldr	r1, [r6, #0]
 8007718:	4605      	mov	r5, r0
 800771a:	b911      	cbnz	r1, 8007722 <sbrk_aligned+0x12>
 800771c:	f000 f8ae 	bl	800787c <_sbrk_r>
 8007720:	6030      	str	r0, [r6, #0]
 8007722:	4621      	mov	r1, r4
 8007724:	4628      	mov	r0, r5
 8007726:	f000 f8a9 	bl	800787c <_sbrk_r>
 800772a:	1c43      	adds	r3, r0, #1
 800772c:	d103      	bne.n	8007736 <sbrk_aligned+0x26>
 800772e:	f04f 34ff 	mov.w	r4, #4294967295
 8007732:	4620      	mov	r0, r4
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	1cc4      	adds	r4, r0, #3
 8007738:	f024 0403 	bic.w	r4, r4, #3
 800773c:	42a0      	cmp	r0, r4
 800773e:	d0f8      	beq.n	8007732 <sbrk_aligned+0x22>
 8007740:	1a21      	subs	r1, r4, r0
 8007742:	4628      	mov	r0, r5
 8007744:	f000 f89a 	bl	800787c <_sbrk_r>
 8007748:	3001      	adds	r0, #1
 800774a:	d1f2      	bne.n	8007732 <sbrk_aligned+0x22>
 800774c:	e7ef      	b.n	800772e <sbrk_aligned+0x1e>
 800774e:	bf00      	nop
 8007750:	200008ec 	.word	0x200008ec

08007754 <_malloc_r>:
 8007754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007758:	1ccd      	adds	r5, r1, #3
 800775a:	f025 0503 	bic.w	r5, r5, #3
 800775e:	3508      	adds	r5, #8
 8007760:	2d0c      	cmp	r5, #12
 8007762:	bf38      	it	cc
 8007764:	250c      	movcc	r5, #12
 8007766:	2d00      	cmp	r5, #0
 8007768:	4606      	mov	r6, r0
 800776a:	db01      	blt.n	8007770 <_malloc_r+0x1c>
 800776c:	42a9      	cmp	r1, r5
 800776e:	d904      	bls.n	800777a <_malloc_r+0x26>
 8007770:	230c      	movs	r3, #12
 8007772:	6033      	str	r3, [r6, #0]
 8007774:	2000      	movs	r0, #0
 8007776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007850 <_malloc_r+0xfc>
 800777e:	f000 f869 	bl	8007854 <__malloc_lock>
 8007782:	f8d8 3000 	ldr.w	r3, [r8]
 8007786:	461c      	mov	r4, r3
 8007788:	bb44      	cbnz	r4, 80077dc <_malloc_r+0x88>
 800778a:	4629      	mov	r1, r5
 800778c:	4630      	mov	r0, r6
 800778e:	f7ff ffbf 	bl	8007710 <sbrk_aligned>
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	4604      	mov	r4, r0
 8007796:	d158      	bne.n	800784a <_malloc_r+0xf6>
 8007798:	f8d8 4000 	ldr.w	r4, [r8]
 800779c:	4627      	mov	r7, r4
 800779e:	2f00      	cmp	r7, #0
 80077a0:	d143      	bne.n	800782a <_malloc_r+0xd6>
 80077a2:	2c00      	cmp	r4, #0
 80077a4:	d04b      	beq.n	800783e <_malloc_r+0xea>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	4639      	mov	r1, r7
 80077aa:	4630      	mov	r0, r6
 80077ac:	eb04 0903 	add.w	r9, r4, r3
 80077b0:	f000 f864 	bl	800787c <_sbrk_r>
 80077b4:	4581      	cmp	r9, r0
 80077b6:	d142      	bne.n	800783e <_malloc_r+0xea>
 80077b8:	6821      	ldr	r1, [r4, #0]
 80077ba:	1a6d      	subs	r5, r5, r1
 80077bc:	4629      	mov	r1, r5
 80077be:	4630      	mov	r0, r6
 80077c0:	f7ff ffa6 	bl	8007710 <sbrk_aligned>
 80077c4:	3001      	adds	r0, #1
 80077c6:	d03a      	beq.n	800783e <_malloc_r+0xea>
 80077c8:	6823      	ldr	r3, [r4, #0]
 80077ca:	442b      	add	r3, r5
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	f8d8 3000 	ldr.w	r3, [r8]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	bb62      	cbnz	r2, 8007830 <_malloc_r+0xdc>
 80077d6:	f8c8 7000 	str.w	r7, [r8]
 80077da:	e00f      	b.n	80077fc <_malloc_r+0xa8>
 80077dc:	6822      	ldr	r2, [r4, #0]
 80077de:	1b52      	subs	r2, r2, r5
 80077e0:	d420      	bmi.n	8007824 <_malloc_r+0xd0>
 80077e2:	2a0b      	cmp	r2, #11
 80077e4:	d917      	bls.n	8007816 <_malloc_r+0xc2>
 80077e6:	1961      	adds	r1, r4, r5
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	6025      	str	r5, [r4, #0]
 80077ec:	bf18      	it	ne
 80077ee:	6059      	strne	r1, [r3, #4]
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	bf08      	it	eq
 80077f4:	f8c8 1000 	streq.w	r1, [r8]
 80077f8:	5162      	str	r2, [r4, r5]
 80077fa:	604b      	str	r3, [r1, #4]
 80077fc:	4630      	mov	r0, r6
 80077fe:	f000 f82f 	bl	8007860 <__malloc_unlock>
 8007802:	f104 000b 	add.w	r0, r4, #11
 8007806:	1d23      	adds	r3, r4, #4
 8007808:	f020 0007 	bic.w	r0, r0, #7
 800780c:	1ac2      	subs	r2, r0, r3
 800780e:	bf1c      	itt	ne
 8007810:	1a1b      	subne	r3, r3, r0
 8007812:	50a3      	strne	r3, [r4, r2]
 8007814:	e7af      	b.n	8007776 <_malloc_r+0x22>
 8007816:	6862      	ldr	r2, [r4, #4]
 8007818:	42a3      	cmp	r3, r4
 800781a:	bf0c      	ite	eq
 800781c:	f8c8 2000 	streq.w	r2, [r8]
 8007820:	605a      	strne	r2, [r3, #4]
 8007822:	e7eb      	b.n	80077fc <_malloc_r+0xa8>
 8007824:	4623      	mov	r3, r4
 8007826:	6864      	ldr	r4, [r4, #4]
 8007828:	e7ae      	b.n	8007788 <_malloc_r+0x34>
 800782a:	463c      	mov	r4, r7
 800782c:	687f      	ldr	r7, [r7, #4]
 800782e:	e7b6      	b.n	800779e <_malloc_r+0x4a>
 8007830:	461a      	mov	r2, r3
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	42a3      	cmp	r3, r4
 8007836:	d1fb      	bne.n	8007830 <_malloc_r+0xdc>
 8007838:	2300      	movs	r3, #0
 800783a:	6053      	str	r3, [r2, #4]
 800783c:	e7de      	b.n	80077fc <_malloc_r+0xa8>
 800783e:	230c      	movs	r3, #12
 8007840:	6033      	str	r3, [r6, #0]
 8007842:	4630      	mov	r0, r6
 8007844:	f000 f80c 	bl	8007860 <__malloc_unlock>
 8007848:	e794      	b.n	8007774 <_malloc_r+0x20>
 800784a:	6005      	str	r5, [r0, #0]
 800784c:	e7d6      	b.n	80077fc <_malloc_r+0xa8>
 800784e:	bf00      	nop
 8007850:	200008f0 	.word	0x200008f0

08007854 <__malloc_lock>:
 8007854:	4801      	ldr	r0, [pc, #4]	@ (800785c <__malloc_lock+0x8>)
 8007856:	f000 b84b 	b.w	80078f0 <__retarget_lock_acquire_recursive>
 800785a:	bf00      	nop
 800785c:	20000a30 	.word	0x20000a30

08007860 <__malloc_unlock>:
 8007860:	4801      	ldr	r0, [pc, #4]	@ (8007868 <__malloc_unlock+0x8>)
 8007862:	f000 b846 	b.w	80078f2 <__retarget_lock_release_recursive>
 8007866:	bf00      	nop
 8007868:	20000a30 	.word	0x20000a30

0800786c <memset>:
 800786c:	4402      	add	r2, r0
 800786e:	4603      	mov	r3, r0
 8007870:	4293      	cmp	r3, r2
 8007872:	d100      	bne.n	8007876 <memset+0xa>
 8007874:	4770      	bx	lr
 8007876:	f803 1b01 	strb.w	r1, [r3], #1
 800787a:	e7f9      	b.n	8007870 <memset+0x4>

0800787c <_sbrk_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d06      	ldr	r5, [pc, #24]	@ (8007898 <_sbrk_r+0x1c>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	f7f9 f980 	bl	8000b8c <_sbrk>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_sbrk_r+0x1a>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_sbrk_r+0x1a>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000a2c 	.word	0x20000a2c

0800789c <__errno>:
 800789c:	4b01      	ldr	r3, [pc, #4]	@ (80078a4 <__errno+0x8>)
 800789e:	6818      	ldr	r0, [r3, #0]
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	2000002c 	.word	0x2000002c

080078a8 <__libc_init_array>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	4d0d      	ldr	r5, [pc, #52]	@ (80078e0 <__libc_init_array+0x38>)
 80078ac:	4c0d      	ldr	r4, [pc, #52]	@ (80078e4 <__libc_init_array+0x3c>)
 80078ae:	1b64      	subs	r4, r4, r5
 80078b0:	10a4      	asrs	r4, r4, #2
 80078b2:	2600      	movs	r6, #0
 80078b4:	42a6      	cmp	r6, r4
 80078b6:	d109      	bne.n	80078cc <__libc_init_array+0x24>
 80078b8:	4d0b      	ldr	r5, [pc, #44]	@ (80078e8 <__libc_init_array+0x40>)
 80078ba:	4c0c      	ldr	r4, [pc, #48]	@ (80078ec <__libc_init_array+0x44>)
 80078bc:	f000 f864 	bl	8007988 <_init>
 80078c0:	1b64      	subs	r4, r4, r5
 80078c2:	10a4      	asrs	r4, r4, #2
 80078c4:	2600      	movs	r6, #0
 80078c6:	42a6      	cmp	r6, r4
 80078c8:	d105      	bne.n	80078d6 <__libc_init_array+0x2e>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d0:	4798      	blx	r3
 80078d2:	3601      	adds	r6, #1
 80078d4:	e7ee      	b.n	80078b4 <__libc_init_array+0xc>
 80078d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078da:	4798      	blx	r3
 80078dc:	3601      	adds	r6, #1
 80078de:	e7f2      	b.n	80078c6 <__libc_init_array+0x1e>
 80078e0:	080079c4 	.word	0x080079c4
 80078e4:	080079c4 	.word	0x080079c4
 80078e8:	080079c4 	.word	0x080079c4
 80078ec:	080079c8 	.word	0x080079c8

080078f0 <__retarget_lock_acquire_recursive>:
 80078f0:	4770      	bx	lr

080078f2 <__retarget_lock_release_recursive>:
 80078f2:	4770      	bx	lr

080078f4 <_free_r>:
 80078f4:	b538      	push	{r3, r4, r5, lr}
 80078f6:	4605      	mov	r5, r0
 80078f8:	2900      	cmp	r1, #0
 80078fa:	d041      	beq.n	8007980 <_free_r+0x8c>
 80078fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007900:	1f0c      	subs	r4, r1, #4
 8007902:	2b00      	cmp	r3, #0
 8007904:	bfb8      	it	lt
 8007906:	18e4      	addlt	r4, r4, r3
 8007908:	f7ff ffa4 	bl	8007854 <__malloc_lock>
 800790c:	4a1d      	ldr	r2, [pc, #116]	@ (8007984 <_free_r+0x90>)
 800790e:	6813      	ldr	r3, [r2, #0]
 8007910:	b933      	cbnz	r3, 8007920 <_free_r+0x2c>
 8007912:	6063      	str	r3, [r4, #4]
 8007914:	6014      	str	r4, [r2, #0]
 8007916:	4628      	mov	r0, r5
 8007918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791c:	f7ff bfa0 	b.w	8007860 <__malloc_unlock>
 8007920:	42a3      	cmp	r3, r4
 8007922:	d908      	bls.n	8007936 <_free_r+0x42>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	1821      	adds	r1, r4, r0
 8007928:	428b      	cmp	r3, r1
 800792a:	bf01      	itttt	eq
 800792c:	6819      	ldreq	r1, [r3, #0]
 800792e:	685b      	ldreq	r3, [r3, #4]
 8007930:	1809      	addeq	r1, r1, r0
 8007932:	6021      	streq	r1, [r4, #0]
 8007934:	e7ed      	b.n	8007912 <_free_r+0x1e>
 8007936:	461a      	mov	r2, r3
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	b10b      	cbz	r3, 8007940 <_free_r+0x4c>
 800793c:	42a3      	cmp	r3, r4
 800793e:	d9fa      	bls.n	8007936 <_free_r+0x42>
 8007940:	6811      	ldr	r1, [r2, #0]
 8007942:	1850      	adds	r0, r2, r1
 8007944:	42a0      	cmp	r0, r4
 8007946:	d10b      	bne.n	8007960 <_free_r+0x6c>
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	4401      	add	r1, r0
 800794c:	1850      	adds	r0, r2, r1
 800794e:	4283      	cmp	r3, r0
 8007950:	6011      	str	r1, [r2, #0]
 8007952:	d1e0      	bne.n	8007916 <_free_r+0x22>
 8007954:	6818      	ldr	r0, [r3, #0]
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	6053      	str	r3, [r2, #4]
 800795a:	4408      	add	r0, r1
 800795c:	6010      	str	r0, [r2, #0]
 800795e:	e7da      	b.n	8007916 <_free_r+0x22>
 8007960:	d902      	bls.n	8007968 <_free_r+0x74>
 8007962:	230c      	movs	r3, #12
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	e7d6      	b.n	8007916 <_free_r+0x22>
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	1821      	adds	r1, r4, r0
 800796c:	428b      	cmp	r3, r1
 800796e:	bf04      	itt	eq
 8007970:	6819      	ldreq	r1, [r3, #0]
 8007972:	685b      	ldreq	r3, [r3, #4]
 8007974:	6063      	str	r3, [r4, #4]
 8007976:	bf04      	itt	eq
 8007978:	1809      	addeq	r1, r1, r0
 800797a:	6021      	streq	r1, [r4, #0]
 800797c:	6054      	str	r4, [r2, #4]
 800797e:	e7ca      	b.n	8007916 <_free_r+0x22>
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	bf00      	nop
 8007984:	200008f0 	.word	0x200008f0

08007988 <_init>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	bf00      	nop
 800798c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800798e:	bc08      	pop	{r3}
 8007990:	469e      	mov	lr, r3
 8007992:	4770      	bx	lr

08007994 <_fini>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	bf00      	nop
 8007998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800799a:	bc08      	pop	{r3}
 800799c:	469e      	mov	lr, r3
 800799e:	4770      	bx	lr
