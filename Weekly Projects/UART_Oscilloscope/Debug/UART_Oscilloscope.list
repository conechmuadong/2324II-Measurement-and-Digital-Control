
UART_Oscilloscope.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800bfc0  0800bfc0  0000cfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c358  0800c358  0000e1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c358  0800c358  0000d358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c360  0800c360  0000e1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c360  0800c360  0000d360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c364  0800c364  0000d364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800c368  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1f4  2**0
                  CONTENTS
 10 .bss          000009bc  200001f4  200001f4  0000e1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bb0  20000bb0  0000e1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013059  00000000  00000000  0000e224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a8  00000000  00000000  0002127d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00024628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad6  00000000  00000000  00025488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e16  00000000  00000000  00025f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001388d  00000000  00000000  0004ad74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6013  00000000  00000000  0005e601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134614  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bec  00000000  00000000  00134658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000bb  00000000  00000000  00139244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfa4 	.word	0x0800bfa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800bfa4 	.word	0x0800bfa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	@ 0x50
 8000e9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9e:	f000 fc3f 	bl	8001720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea2:	f000 f863 	bl	8000f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea6:	f000 f949 	bl	800113c <MX_GPIO_Init>
  MX_USB_HOST_Init();
 8000eaa:	f007 ff0f 	bl	8008ccc <MX_USB_HOST_Init>
  MX_UART5_Init();
 8000eae:	f000 f91b 	bl	80010e8 <MX_UART5_Init>
  MX_ADC1_Init();
 8000eb2:	f000 f8c5 	bl	8001040 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  char buffer[64];
  HAL_ADC_Start(&hadc1);
 8000eb6:	4828      	ldr	r0, [pc, #160]	@ (8000f58 <main+0xc0>)
 8000eb8:	f000 fd0c 	bl	80018d4 <HAL_ADC_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  double value = 0;
 8000ebc:	f04f 0200 	mov.w	r2, #0
 8000ec0:	f04f 0300 	mov.w	r3, #0
 8000ec4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
	  if (HAL_ADC_PollForConversion(&hadc1, 3)==HAL_OK){
 8000ec8:	2103      	movs	r1, #3
 8000eca:	4823      	ldr	r0, [pc, #140]	@ (8000f58 <main+0xc0>)
 8000ecc:	f000 fdd4 	bl	8001a78 <HAL_ADC_PollForConversion>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d12a      	bne.n	8000f2c <main+0x94>
		  value = HAL_ADC_GetValue(&hadc1)*1.0/256*4.7;
 8000ed6:	4820      	ldr	r0, [pc, #128]	@ (8000f58 <main+0xc0>)
 8000ed8:	f000 fe59 	bl	8001b8e <HAL_ADC_GetValue>
 8000edc:	4603      	mov	r3, r0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb10 	bl	8000504 <__aeabi_ui2d>
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <main+0xc4>)
 8000eea:	f7ff fcaf 	bl	800084c <__aeabi_ddiv>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	a316      	add	r3, pc, #88	@ (adr r3, 8000f50 <main+0xb8>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	f7ff fb7c 	bl	80005f8 <__aeabi_dmul>
 8000f00:	4602      	mov	r2, r0
 8000f02:	460b      	mov	r3, r1
 8000f04:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
		  HAL_ADC_Start(&hadc1);
 8000f08:	4813      	ldr	r0, [pc, #76]	@ (8000f58 <main+0xc0>)
 8000f0a:	f000 fce3 	bl	80018d4 <HAL_ADC_Start>
		  snprintf(buffer, sizeof(buffer), "%.2lf@", value);
 8000f0e:	4638      	mov	r0, r7
 8000f10:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8000f14:	e9cd 2300 	strd	r2, r3, [sp]
 8000f18:	4a11      	ldr	r2, [pc, #68]	@ (8000f60 <main+0xc8>)
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	f008 ffb8 	bl	8009e90 <sniprintf>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000f26:	480f      	ldr	r0, [pc, #60]	@ (8000f64 <main+0xcc>)
 8000f28:	f001 fb0a 	bl	8002540 <HAL_GPIO_WritePin>
	  }
//	  if (HAL_UART_Receive(&huart5, &c, 1, 500)==HAL_OK){
	  HAL_UART_Transmit(&huart5, (uint8_t*)buffer, strlen(buffer), 500);
 8000f2c:	463b      	mov	r3, r7
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff f99e 	bl	8000270 <strlen>
 8000f34:	4603      	mov	r3, r0
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4639      	mov	r1, r7
 8000f3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f3e:	480a      	ldr	r0, [pc, #40]	@ (8000f68 <main+0xd0>)
 8000f40:	f004 f91a 	bl	8005178 <HAL_UART_Transmit>
//		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
//	  x+=3;
//	  }
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000f44:	f007 fee8 	bl	8008d18 <MX_USB_HOST_Process>
  {
 8000f48:	e7b8      	b.n	8000ebc <main+0x24>
 8000f4a:	bf00      	nop
 8000f4c:	f3af 8000 	nop.w
 8000f50:	cccccccd 	.word	0xcccccccd
 8000f54:	4012cccc 	.word	0x4012cccc
 8000f58:	20000210 	.word	0x20000210
 8000f5c:	40700000 	.word	0x40700000
 8000f60:	0800bfc0 	.word	0x0800bfc0
 8000f64:	40020c00 	.word	0x40020c00
 8000f68:	20000258 	.word	0x20000258

08000f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b094      	sub	sp, #80	@ 0x50
 8000f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f72:	f107 0320 	add.w	r3, r7, #32
 8000f76:	2230      	movs	r2, #48	@ 0x30
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 ffff 	bl	8009f7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	4b28      	ldr	r3, [pc, #160]	@ (8001038 <SystemClock_Config+0xcc>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	4a27      	ldr	r2, [pc, #156]	@ (8001038 <SystemClock_Config+0xcc>)
 8000f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa0:	4b25      	ldr	r3, [pc, #148]	@ (8001038 <SystemClock_Config+0xcc>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	4b22      	ldr	r3, [pc, #136]	@ (800103c <SystemClock_Config+0xd0>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a21      	ldr	r2, [pc, #132]	@ (800103c <SystemClock_Config+0xd0>)
 8000fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800103c <SystemClock_Config+0xd0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fe0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fe4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fea:	2307      	movs	r3, #7
 8000fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f003 fbd8 	bl	80047a8 <HAL_RCC_OscConfig>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ffe:	f000 f979 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001006:	2302      	movs	r3, #2
 8001008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001012:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001014:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001018:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2105      	movs	r1, #5
 8001020:	4618      	mov	r0, r3
 8001022:	f003 fe39 	bl	8004c98 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800102c:	f000 f962 	bl	80012f4 <Error_Handler>
  }
}
 8001030:	bf00      	nop
 8001032:	3750      	adds	r7, #80	@ 0x50
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40023800 	.word	0x40023800
 800103c:	40007000 	.word	0x40007000

08001040 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001052:	4b22      	ldr	r3, [pc, #136]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001054:	4a22      	ldr	r2, [pc, #136]	@ (80010e0 <MX_ADC1_Init+0xa0>)
 8001056:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001058:	4b20      	ldr	r3, [pc, #128]	@ (80010dc <MX_ADC1_Init+0x9c>)
 800105a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800105e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001062:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001068:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <MX_ADC1_Init+0x9c>)
 800106a:	2200      	movs	r2, #0
 800106c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001070:	2201      	movs	r2, #1
 8001072:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001076:	2200      	movs	r2, #0
 8001078:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800107c:	4b17      	ldr	r3, [pc, #92]	@ (80010dc <MX_ADC1_Init+0x9c>)
 800107e:	2200      	movs	r2, #0
 8001080:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001082:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001084:	4a17      	ldr	r2, [pc, #92]	@ (80010e4 <MX_ADC1_Init+0xa4>)
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <MX_ADC1_Init+0x9c>)
 800108a:	2200      	movs	r2, #0
 800108c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800108e:	4b13      	ldr	r3, [pc, #76]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001090:	2201      	movs	r2, #1
 8001092:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <MX_ADC1_Init+0x9c>)
 8001096:	2200      	movs	r2, #0
 8001098:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800109c:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <MX_ADC1_Init+0x9c>)
 800109e:	2201      	movs	r2, #1
 80010a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010a2:	480e      	ldr	r0, [pc, #56]	@ (80010dc <MX_ADC1_Init+0x9c>)
 80010a4:	f000 fbd2 	bl	800184c <HAL_ADC_Init>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80010ae:	f000 f921 	bl	80012f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010b2:	2308      	movs	r3, #8
 80010b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010b6:	2301      	movs	r3, #1
 80010b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80010ba:	2301      	movs	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC1_Init+0x9c>)
 80010c4:	f000 fd70 	bl	8001ba8 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010ce:	f000 f911 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000210 	.word	0x20000210
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <MX_UART5_Init+0x4c>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <MX_UART5_Init+0x50>)
 80010f0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <MX_UART5_Init+0x4c>)
 80010f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <MX_UART5_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <MX_UART5_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <MX_UART5_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800110c:	4b09      	ldr	r3, [pc, #36]	@ (8001134 <MX_UART5_Init+0x4c>)
 800110e:	220c      	movs	r2, #12
 8001110:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001112:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <MX_UART5_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <MX_UART5_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800111e:	4805      	ldr	r0, [pc, #20]	@ (8001134 <MX_UART5_Init+0x4c>)
 8001120:	f003 ffda 	bl	80050d8 <HAL_UART_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800112a:	f000 f8e3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000258 	.word	0x20000258
 8001138:	40005000 	.word	0x40005000

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	@ 0x30
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b61      	ldr	r3, [pc, #388]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a60      	ldr	r2, [pc, #384]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b5e      	ldr	r3, [pc, #376]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0310 	and.w	r3, r3, #16
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b5a      	ldr	r3, [pc, #360]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a59      	ldr	r2, [pc, #356]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b57      	ldr	r3, [pc, #348]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0304 	and.w	r3, r3, #4
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b53      	ldr	r3, [pc, #332]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a52      	ldr	r2, [pc, #328]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b50      	ldr	r3, [pc, #320]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b4c      	ldr	r3, [pc, #304]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b6:	4b49      	ldr	r3, [pc, #292]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b45      	ldr	r3, [pc, #276]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	4a44      	ldr	r2, [pc, #272]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011cc:	f043 0302 	orr.w	r3, r3, #2
 80011d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d2:	4b42      	ldr	r3, [pc, #264]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	4a3d      	ldr	r2, [pc, #244]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ee:	4b3b      	ldr	r3, [pc, #236]	@ (80012dc <MX_GPIO_Init+0x1a0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2108      	movs	r1, #8
 80011fe:	4838      	ldr	r0, [pc, #224]	@ (80012e0 <MX_GPIO_Init+0x1a4>)
 8001200:	f001 f99e 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2101      	movs	r1, #1
 8001208:	4836      	ldr	r0, [pc, #216]	@ (80012e4 <MX_GPIO_Init+0x1a8>)
 800120a:	f001 f999 	bl	8002540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800120e:	2200      	movs	r2, #0
 8001210:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001214:	4834      	ldr	r0, [pc, #208]	@ (80012e8 <MX_GPIO_Init+0x1ac>)
 8001216:	f001 f993 	bl	8002540 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800121a:	2308      	movs	r3, #8
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	482b      	ldr	r0, [pc, #172]	@ (80012e0 <MX_GPIO_Init+0x1a4>)
 8001232:	f000 ffe9 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001236:	2301      	movs	r3, #1
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	4825      	ldr	r0, [pc, #148]	@ (80012e4 <MX_GPIO_Init+0x1a8>)
 800124e:	f000 ffdb 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001252:	2301      	movs	r3, #1
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001256:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4821      	ldr	r0, [pc, #132]	@ (80012ec <MX_GPIO_Init+0x1b0>)
 8001268:	f000 ffce 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800126c:	2304      	movs	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001278:	f107 031c 	add.w	r3, r7, #28
 800127c:	4619      	mov	r1, r3
 800127e:	481c      	ldr	r0, [pc, #112]	@ (80012f0 <MX_GPIO_Init+0x1b4>)
 8001280:	f000 ffc2 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001284:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001288:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4812      	ldr	r0, [pc, #72]	@ (80012e8 <MX_GPIO_Init+0x1ac>)
 800129e:	f000 ffb3 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80012a2:	2320      	movs	r3, #32
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 031c 	add.w	r3, r7, #28
 80012b2:	4619      	mov	r1, r3
 80012b4:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <MX_GPIO_Init+0x1ac>)
 80012b6:	f000 ffa7 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012ba:	2302      	movs	r3, #2
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 031c 	add.w	r3, r7, #28
 80012cc:	4619      	mov	r1, r3
 80012ce:	4804      	ldr	r0, [pc, #16]	@ (80012e0 <MX_GPIO_Init+0x1a4>)
 80012d0:	f000 ff9a 	bl	8002208 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012d4:	bf00      	nop
 80012d6:	3730      	adds	r7, #48	@ 0x30
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40020800 	.word	0x40020800
 80012e8:	40020c00 	.word	0x40020c00
 80012ec:	40020000 	.word	0x40020000
 80012f0:	40020400 	.word	0x40020400

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b10      	ldr	r3, [pc, #64]	@ (800134c <HAL_MspInit+0x4c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130e:	4a0f      	ldr	r2, [pc, #60]	@ (800134c <HAL_MspInit+0x4c>)
 8001310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001314:	6453      	str	r3, [r2, #68]	@ 0x44
 8001316:	4b0d      	ldr	r3, [pc, #52]	@ (800134c <HAL_MspInit+0x4c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
 8001326:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HAL_MspInit+0x4c>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a08      	ldr	r2, [pc, #32]	@ (800134c <HAL_MspInit+0x4c>)
 800132c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b06      	ldr	r3, [pc, #24]	@ (800134c <HAL_MspInit+0x4c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800133e:	2007      	movs	r0, #7
 8001340:	f000 ff20 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a17      	ldr	r2, [pc, #92]	@ (80013cc <HAL_ADC_MspInit+0x7c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d127      	bne.n	80013c2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b16      	ldr	r3, [pc, #88]	@ (80013d0 <HAL_ADC_MspInit+0x80>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a15      	ldr	r2, [pc, #84]	@ (80013d0 <HAL_ADC_MspInit+0x80>)
 800137c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b13      	ldr	r3, [pc, #76]	@ (80013d0 <HAL_ADC_MspInit+0x80>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <HAL_ADC_MspInit+0x80>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a0e      	ldr	r2, [pc, #56]	@ (80013d0 <HAL_ADC_MspInit+0x80>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <HAL_ADC_MspInit+0x80>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013aa:	2301      	movs	r3, #1
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	@ (80013d4 <HAL_ADC_MspInit+0x84>)
 80013be:	f000 ff23 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013c2:	bf00      	nop
 80013c4:	3728      	adds	r7, #40	@ 0x28
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40012000 	.word	0x40012000
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08a      	sub	sp, #40	@ 0x28
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a28      	ldr	r2, [pc, #160]	@ (8001498 <HAL_UART_MspInit+0xc0>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d14a      	bne.n	8001490 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	4b27      	ldr	r3, [pc, #156]	@ (800149c <HAL_UART_MspInit+0xc4>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	4a26      	ldr	r2, [pc, #152]	@ (800149c <HAL_UART_MspInit+0xc4>)
 8001404:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001408:	6413      	str	r3, [r2, #64]	@ 0x40
 800140a:	4b24      	ldr	r3, [pc, #144]	@ (800149c <HAL_UART_MspInit+0xc4>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_UART_MspInit+0xc4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a1f      	ldr	r2, [pc, #124]	@ (800149c <HAL_UART_MspInit+0xc4>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b1d      	ldr	r3, [pc, #116]	@ (800149c <HAL_UART_MspInit+0xc4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_UART_MspInit+0xc4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a18      	ldr	r2, [pc, #96]	@ (800149c <HAL_UART_MspInit+0xc4>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b16      	ldr	r3, [pc, #88]	@ (800149c <HAL_UART_MspInit+0xc4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800144e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001452:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001460:	2308      	movs	r3, #8
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	480d      	ldr	r0, [pc, #52]	@ (80014a0 <HAL_UART_MspInit+0xc8>)
 800146c:	f000 fecc 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001470:	2304      	movs	r3, #4
 8001472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001480:	2308      	movs	r3, #8
 8001482:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001484:	f107 0314 	add.w	r3, r7, #20
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <HAL_UART_MspInit+0xcc>)
 800148c:	f000 febc 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001490:	bf00      	nop
 8001492:	3728      	adds	r7, #40	@ 0x28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40005000 	.word	0x40005000
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020800 	.word	0x40020800
 80014a4:	40020c00 	.word	0x40020c00

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014fe:	f000 f961 	bl	80017c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <OTG_FS_IRQHandler+0x10>)
 800150e:	f001 fb11 	bl	8002b34 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000684 	.word	0x20000684

0800151c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_kill>:

int _kill(int pid, int sig)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001536:	f008 fd85 	bl	800a044 <__errno>
 800153a:	4603      	mov	r3, r0
 800153c:	2216      	movs	r2, #22
 800153e:	601a      	str	r2, [r3, #0]
  return -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_exit>:

void _exit (int status)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffe7 	bl	800152c <_kill>
  while (1) {}    /* Make sure we hang here */
 800155e:	bf00      	nop
 8001560:	e7fd      	b.n	800155e <_exit+0x12>

08001562 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	60f8      	str	r0, [r7, #12]
 800156a:	60b9      	str	r1, [r7, #8]
 800156c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
 8001572:	e00a      	b.n	800158a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001574:	f3af 8000 	nop.w
 8001578:	4601      	mov	r1, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	b2ca      	uxtb	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	697a      	ldr	r2, [r7, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	429a      	cmp	r2, r3
 8001590:	dbf0      	blt.n	8001574 <_read+0x12>
  }

  return len;
 8001592:	687b      	ldr	r3, [r7, #4]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]
 80015ac:	e009      	b.n	80015c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	1c5a      	adds	r2, r3, #1
 80015b2:	60ba      	str	r2, [r7, #8]
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	3301      	adds	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	dbf1      	blt.n	80015ae <_write+0x12>
  }
  return len;
 80015ca:	687b      	ldr	r3, [r7, #4]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_close>:

int _close(int file)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fc:	605a      	str	r2, [r3, #4]
  return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_isatty>:

int _isatty(int file)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001614:	2301      	movs	r3, #1
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001622:	b480      	push	{r7}
 8001624:	b085      	sub	sp, #20
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	@ (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	@ (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	@ (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	@ (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	@ (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f008 fcea 	bl	800a044 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	@ (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	@ (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20020000 	.word	0x20020000
 800169c:	00000400 	.word	0x00000400
 80016a0:	200002a0 	.word	0x200002a0
 80016a4:	20000bb0 	.word	0x20000bb0

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b06      	ldr	r3, [pc, #24]	@ (80016c8 <SystemInit+0x20>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016b2:	4a05      	ldr	r2, [pc, #20]	@ (80016c8 <SystemInit+0x20>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001704 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016d0:	f7ff ffea 	bl	80016a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016d4:	480c      	ldr	r0, [pc, #48]	@ (8001708 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016d6:	490d      	ldr	r1, [pc, #52]	@ (800170c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016dc:	e002      	b.n	80016e4 <LoopCopyDataInit>

080016de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016e2:	3304      	adds	r3, #4

080016e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e8:	d3f9      	bcc.n	80016de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001714 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001718 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016f0:	e001      	b.n	80016f6 <LoopFillZerobss>

080016f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016f4:	3204      	adds	r2, #4

080016f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f8:	d3fb      	bcc.n	80016f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016fa:	f008 fca9 	bl	800a050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016fe:	f7ff fbcb 	bl	8000e98 <main>
  bx  lr    
 8001702:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001704:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800170c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001710:	0800c368 	.word	0x0800c368
  ldr r2, =_sbss
 8001714:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001718:	20000bb0 	.word	0x20000bb0

0800171c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800171c:	e7fe      	b.n	800171c <ADC_IRQHandler>
	...

08001720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <HAL_Init+0x40>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0d      	ldr	r2, [pc, #52]	@ (8001760 <HAL_Init+0x40>)
 800172a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800172e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_Init+0x40>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <HAL_Init+0x40>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800173a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <HAL_Init+0x40>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a07      	ldr	r2, [pc, #28]	@ (8001760 <HAL_Init+0x40>)
 8001742:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001748:	2003      	movs	r0, #3
 800174a:	f000 fd1b 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f808 	bl	8001764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001754:	f7ff fdd4 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40023c00 	.word	0x40023c00

08001764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <HAL_InitTick+0x54>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_InitTick+0x58>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4619      	mov	r1, r3
 8001776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177a:	fbb3 f3f1 	udiv	r3, r3, r1
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fd33 	bl	80021ee <HAL_SYSTICK_Config>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e00e      	b.n	80017b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b0f      	cmp	r3, #15
 8001796:	d80a      	bhi.n	80017ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001798:	2200      	movs	r2, #0
 800179a:	6879      	ldr	r1, [r7, #4]
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f000 fcfb 	bl	800219a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017a4:	4a06      	ldr	r2, [pc, #24]	@ (80017c0 <HAL_InitTick+0x5c>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e000      	b.n	80017b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000008 	.word	0x20000008
 80017c0:	20000004 	.word	0x20000004

080017c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c8:	4b06      	ldr	r3, [pc, #24]	@ (80017e4 <HAL_IncTick+0x20>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4413      	add	r3, r2
 80017d4:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <HAL_IncTick+0x24>)
 80017d6:	6013      	str	r3, [r2, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008
 80017e8:	200002a4 	.word	0x200002a4

080017ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return uwTick;
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <HAL_GetTick+0x14>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200002a4 	.word	0x200002a4

08001804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff ffee 	bl	80017ec <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800181c:	d005      	beq.n	800182a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_Delay+0x44>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4413      	add	r3, r2
 8001828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800182a:	bf00      	nop
 800182c:	f7ff ffde 	bl	80017ec <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	68fa      	ldr	r2, [r7, #12]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8f7      	bhi.n	800182c <HAL_Delay+0x28>
  {
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008

0800184c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001854:	2300      	movs	r3, #0
 8001856:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e033      	b.n	80018ca <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fd70 	bl	8001350 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001882:	f003 0310 	and.w	r3, r3, #16
 8001886:	2b00      	cmp	r3, #0
 8001888:	d118      	bne.n	80018bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001892:	f023 0302 	bic.w	r3, r3, #2
 8001896:	f043 0202 	orr.w	r2, r3, #2
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 faa4 	bl	8001dec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
 80018ba:	e001      	b.n	80018c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d101      	bne.n	80018ee <HAL_ADC_Start+0x1a>
 80018ea:	2302      	movs	r3, #2
 80018ec:	e0b2      	b.n	8001a54 <HAL_ADC_Start+0x180>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b01      	cmp	r3, #1
 8001902:	d018      	beq.n	8001936 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689a      	ldr	r2, [r3, #8]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f042 0201 	orr.w	r2, r2, #1
 8001912:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001914:	4b52      	ldr	r3, [pc, #328]	@ (8001a60 <HAL_ADC_Start+0x18c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a52      	ldr	r2, [pc, #328]	@ (8001a64 <HAL_ADC_Start+0x190>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9a      	lsrs	r2, r3, #18
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001928:	e002      	b.n	8001930 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3b01      	subs	r3, #1
 800192e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b01      	cmp	r3, #1
 8001942:	d17a      	bne.n	8001a3a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001948:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001962:	2b00      	cmp	r3, #0
 8001964:	d007      	beq.n	8001976 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800196e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800197e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001982:	d106      	bne.n	8001992 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	f023 0206 	bic.w	r2, r3, #6
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001990:	e002      	b.n	8001998 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019a0:	4b31      	ldr	r3, [pc, #196]	@ (8001a68 <HAL_ADC_Start+0x194>)
 80019a2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80019ac:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d12a      	bne.n	8001a10 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a2b      	ldr	r2, [pc, #172]	@ (8001a6c <HAL_ADC_Start+0x198>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d015      	beq.n	80019f0 <HAL_ADC_Start+0x11c>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a29      	ldr	r2, [pc, #164]	@ (8001a70 <HAL_ADC_Start+0x19c>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d105      	bne.n	80019da <HAL_ADC_Start+0x106>
 80019ce:	4b26      	ldr	r3, [pc, #152]	@ (8001a68 <HAL_ADC_Start+0x194>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00a      	beq.n	80019f0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a25      	ldr	r2, [pc, #148]	@ (8001a74 <HAL_ADC_Start+0x1a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d136      	bne.n	8001a52 <HAL_ADC_Start+0x17e>
 80019e4:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_ADC_Start+0x194>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 0310 	and.w	r3, r3, #16
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d130      	bne.n	8001a52 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d129      	bne.n	8001a52 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	e020      	b.n	8001a52 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a15      	ldr	r2, [pc, #84]	@ (8001a6c <HAL_ADC_Start+0x198>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d11b      	bne.n	8001a52 <HAL_ADC_Start+0x17e>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d114      	bne.n	8001a52 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	e00b      	b.n	8001a52 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	f043 0210 	orr.w	r2, r3, #16
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	f043 0201 	orr.w	r2, r3, #1
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	20000000 	.word	0x20000000
 8001a64:	431bde83 	.word	0x431bde83
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	40012000 	.word	0x40012000
 8001a70:	40012100 	.word	0x40012100
 8001a74:	40012200 	.word	0x40012200

08001a78 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a94:	d113      	bne.n	8001abe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001aa4:	d10b      	bne.n	8001abe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f043 0220 	orr.w	r2, r3, #32
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e063      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001abe:	f7ff fe95 	bl	80017ec <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ac4:	e021      	b.n	8001b0a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d01d      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_ADC_PollForConversion+0x6c>
 8001ad4:	f7ff fe8a 	bl	80017ec <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d212      	bcs.n	8001b0a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d00b      	beq.n	8001b0a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e03d      	b.n	8001b86 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d1d6      	bne.n	8001ac6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f06f 0212 	mvn.w	r2, #18
 8001b20:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b26:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d123      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d11f      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b4a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d006      	beq.n	8001b60 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f043 0201 	orr.w	r2, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_ConfigChannel+0x1c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e105      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x228>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2b09      	cmp	r3, #9
 8001bd2:	d925      	bls.n	8001c20 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68d9      	ldr	r1, [r3, #12]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	4613      	mov	r3, r2
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4413      	add	r3, r2
 8001be8:	3b1e      	subs	r3, #30
 8001bea:	2207      	movs	r2, #7
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	43da      	mvns	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	400a      	ands	r2, r1
 8001bf8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68d9      	ldr	r1, [r3, #12]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4403      	add	r3, r0
 8001c12:	3b1e      	subs	r3, #30
 8001c14:	409a      	lsls	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	e022      	b.n	8001c66 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6919      	ldr	r1, [r3, #16]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	2207      	movs	r2, #7
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43da      	mvns	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	400a      	ands	r2, r1
 8001c42:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6919      	ldr	r1, [r3, #16]
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	4618      	mov	r0, r3
 8001c56:	4603      	mov	r3, r0
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	4403      	add	r3, r0
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d824      	bhi.n	8001cb8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3b05      	subs	r3, #5
 8001c80:	221f      	movs	r2, #31
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43da      	mvns	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3b05      	subs	r3, #5
 8001caa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cb6:	e04c      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b0c      	cmp	r3, #12
 8001cbe:	d824      	bhi.n	8001d0a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b23      	subs	r3, #35	@ 0x23
 8001cd2:	221f      	movs	r2, #31
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	400a      	ands	r2, r1
 8001ce0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	3b23      	subs	r3, #35	@ 0x23
 8001cfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	430a      	orrs	r2, r1
 8001d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d08:	e023      	b.n	8001d52 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	3b41      	subs	r3, #65	@ 0x41
 8001d1c:	221f      	movs	r2, #31
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	400a      	ands	r2, r1
 8001d2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	4618      	mov	r0, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	4413      	add	r3, r2
 8001d44:	3b41      	subs	r3, #65	@ 0x41
 8001d46:	fa00 f203 	lsl.w	r2, r0, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d52:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <HAL_ADC_ConfigChannel+0x234>)
 8001d54:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a21      	ldr	r2, [pc, #132]	@ (8001de0 <HAL_ADC_ConfigChannel+0x238>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d109      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1cc>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b12      	cmp	r3, #18
 8001d66:	d105      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	@ (8001de0 <HAL_ADC_ConfigChannel+0x238>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d123      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d003      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x1e6>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2b11      	cmp	r3, #17
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b10      	cmp	r3, #16
 8001da0:	d111      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001da2:	4b10      	ldr	r3, [pc, #64]	@ (8001de4 <HAL_ADC_ConfigChannel+0x23c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a10      	ldr	r2, [pc, #64]	@ (8001de8 <HAL_ADC_ConfigChannel+0x240>)
 8001da8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dac:	0c9a      	lsrs	r2, r3, #18
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001db8:	e002      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f9      	bne.n	8001dba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	40012300 	.word	0x40012300
 8001de0:	40012000 	.word	0x40012000
 8001de4:	20000000 	.word	0x20000000
 8001de8:	431bde83 	.word	0x431bde83

08001dec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df4:	4b79      	ldr	r3, [pc, #484]	@ (8001fdc <ADC_Init+0x1f0>)
 8001df6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	430a      	orrs	r2, r1
 8001e56:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6899      	ldr	r1, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7e:	4a58      	ldr	r2, [pc, #352]	@ (8001fe0 <ADC_Init+0x1f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d022      	beq.n	8001eca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6899      	ldr	r1, [r3, #8]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	e00f      	b.n	8001eea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ee8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e1b      	ldrb	r3, [r3, #24]
 8001f04:	005a      	lsls	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d01b      	beq.n	8001f50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f26:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6859      	ldr	r1, [r3, #4]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	3b01      	subs	r3, #1
 8001f44:	035a      	lsls	r2, r3, #13
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	e007      	b.n	8001f60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f5e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	051a      	lsls	r2, r3, #20
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6899      	ldr	r1, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001fa2:	025a      	lsls	r2, r3, #9
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6899      	ldr	r1, [r3, #8]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	029a      	lsls	r2, r3, #10
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	40012300 	.word	0x40012300
 8001fe0:	0f000001 	.word	0x0f000001

08001fe4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002000:	4013      	ands	r3, r2
 8002002:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800200c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002014:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002016:	4a04      	ldr	r2, [pc, #16]	@ (8002028 <__NVIC_SetPriorityGrouping+0x44>)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	60d3      	str	r3, [r2, #12]
}
 800201c:	bf00      	nop
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002030:	4b04      	ldr	r3, [pc, #16]	@ (8002044 <__NVIC_GetPriorityGrouping+0x18>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	0a1b      	lsrs	r3, r3, #8
 8002036:	f003 0307 	and.w	r3, r3, #7
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	2b00      	cmp	r3, #0
 8002058:	db0b      	blt.n	8002072 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205a:	79fb      	ldrb	r3, [r7, #7]
 800205c:	f003 021f 	and.w	r2, r3, #31
 8002060:	4907      	ldr	r1, [pc, #28]	@ (8002080 <__NVIC_EnableIRQ+0x38>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	2001      	movs	r0, #1
 800206a:	fa00 f202 	lsl.w	r2, r0, r2
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100

08002084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	6039      	str	r1, [r7, #0]
 800208e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	2b00      	cmp	r3, #0
 8002096:	db0a      	blt.n	80020ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	b2da      	uxtb	r2, r3
 800209c:	490c      	ldr	r1, [pc, #48]	@ (80020d0 <__NVIC_SetPriority+0x4c>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	0112      	lsls	r2, r2, #4
 80020a4:	b2d2      	uxtb	r2, r2
 80020a6:	440b      	add	r3, r1
 80020a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ac:	e00a      	b.n	80020c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	4908      	ldr	r1, [pc, #32]	@ (80020d4 <__NVIC_SetPriority+0x50>)
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	3b04      	subs	r3, #4
 80020bc:	0112      	lsls	r2, r2, #4
 80020be:	b2d2      	uxtb	r2, r2
 80020c0:	440b      	add	r3, r1
 80020c2:	761a      	strb	r2, [r3, #24]
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000e100 	.word	0xe000e100
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f1c3 0307 	rsb	r3, r3, #7
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	bf28      	it	cs
 80020f6:	2304      	movcs	r3, #4
 80020f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3304      	adds	r3, #4
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d902      	bls.n	8002108 <NVIC_EncodePriority+0x30>
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3b03      	subs	r3, #3
 8002106:	e000      	b.n	800210a <NVIC_EncodePriority+0x32>
 8002108:	2300      	movs	r3, #0
 800210a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800210c:	f04f 32ff 	mov.w	r2, #4294967295
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	401a      	ands	r2, r3
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002120:	f04f 31ff 	mov.w	r1, #4294967295
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	fa01 f303 	lsl.w	r3, r1, r3
 800212a:	43d9      	mvns	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	4313      	orrs	r3, r2
         );
}
 8002132:	4618      	mov	r0, r3
 8002134:	3724      	adds	r7, #36	@ 0x24
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff8e 	bl	8002084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff29 	bl	8001fe4 <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff3e 	bl	800202c <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff8e 	bl	80020d8 <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5d 	bl	8002084 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff31 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e16b      	b.n	80024fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 815a 	bne.w	80024f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80b4 	beq.w	80024f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a5f      	ldr	r2, [pc, #380]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b5d      	ldr	r3, [pc, #372]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a5b      	ldr	r2, [pc, #364]	@ (8002518 <HAL_GPIO_Init+0x310>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a52      	ldr	r2, [pc, #328]	@ (800251c <HAL_GPIO_Init+0x314>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02b      	beq.n	800242e <HAL_GPIO_Init+0x226>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a51      	ldr	r2, [pc, #324]	@ (8002520 <HAL_GPIO_Init+0x318>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d025      	beq.n	800242a <HAL_GPIO_Init+0x222>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a50      	ldr	r2, [pc, #320]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d01f      	beq.n	8002426 <HAL_GPIO_Init+0x21e>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002528 <HAL_GPIO_Init+0x320>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d019      	beq.n	8002422 <HAL_GPIO_Init+0x21a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4e      	ldr	r2, [pc, #312]	@ (800252c <HAL_GPIO_Init+0x324>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d013      	beq.n	800241e <HAL_GPIO_Init+0x216>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002530 <HAL_GPIO_Init+0x328>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d00d      	beq.n	800241a <HAL_GPIO_Init+0x212>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a4c      	ldr	r2, [pc, #304]	@ (8002534 <HAL_GPIO_Init+0x32c>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d007      	beq.n	8002416 <HAL_GPIO_Init+0x20e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a4b      	ldr	r2, [pc, #300]	@ (8002538 <HAL_GPIO_Init+0x330>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d101      	bne.n	8002412 <HAL_GPIO_Init+0x20a>
 800240e:	2307      	movs	r3, #7
 8002410:	e00e      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002412:	2308      	movs	r3, #8
 8002414:	e00c      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002416:	2306      	movs	r3, #6
 8002418:	e00a      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241a:	2305      	movs	r3, #5
 800241c:	e008      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800241e:	2304      	movs	r3, #4
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002422:	2303      	movs	r3, #3
 8002424:	e004      	b.n	8002430 <HAL_GPIO_Init+0x228>
 8002426:	2302      	movs	r3, #2
 8002428:	e002      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x228>
 800242e:	2300      	movs	r3, #0
 8002430:	69fa      	ldr	r2, [r7, #28]
 8002432:	f002 0203 	and.w	r2, r2, #3
 8002436:	0092      	lsls	r2, r2, #2
 8002438:	4093      	lsls	r3, r2
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002440:	4935      	ldr	r1, [pc, #212]	@ (8002518 <HAL_GPIO_Init+0x310>)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	089b      	lsrs	r3, r3, #2
 8002446:	3302      	adds	r3, #2
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800244e:	4b3b      	ldr	r3, [pc, #236]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	43db      	mvns	r3, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4013      	ands	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002472:	4a32      	ldr	r2, [pc, #200]	@ (800253c <HAL_GPIO_Init+0x334>)
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002478:	4b30      	ldr	r3, [pc, #192]	@ (800253c <HAL_GPIO_Init+0x334>)
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d003      	beq.n	800249c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800249c:	4a27      	ldr	r2, [pc, #156]	@ (800253c <HAL_GPIO_Init+0x334>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024a2:	4b26      	ldr	r3, [pc, #152]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024c6:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024cc:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024f0:	4a12      	ldr	r2, [pc, #72]	@ (800253c <HAL_GPIO_Init+0x334>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	3301      	adds	r3, #1
 80024fa:	61fb      	str	r3, [r7, #28]
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	2b0f      	cmp	r3, #15
 8002500:	f67f ae90 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3724      	adds	r7, #36	@ 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	40013800 	.word	0x40013800
 800251c:	40020000 	.word	0x40020000
 8002520:	40020400 	.word	0x40020400
 8002524:	40020800 	.word	0x40020800
 8002528:	40020c00 	.word	0x40020c00
 800252c:	40021000 	.word	0x40021000
 8002530:	40021400 	.word	0x40021400
 8002534:	40021800 	.word	0x40021800
 8002538:	40021c00 	.word	0x40021c00
 800253c:	40013c00 	.word	0x40013c00

08002540 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	807b      	strh	r3, [r7, #2]
 800254c:	4613      	mov	r3, r2
 800254e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	787b      	ldrb	r3, [r7, #1]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800255c:	e003      	b.n	8002566 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800255e:	887b      	ldrh	r3, [r7, #2]
 8002560:	041a      	lsls	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	619a      	str	r2, [r3, #24]
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b086      	sub	sp, #24
 8002576:	af02      	add	r7, sp, #8
 8002578:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e059      	b.n	8002638 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f006 fbf2 	bl	8008d88 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2203      	movs	r2, #3
 80025a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025b2:	d102      	bne.n	80025ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fa0b 	bl	80059da <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7c1a      	ldrb	r2, [r3, #16]
 80025cc:	f88d 2000 	strb.w	r2, [sp]
 80025d0:	3304      	adds	r3, #4
 80025d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025d4:	f003 f98c 	bl	80058f0 <USB_CoreInit>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e026      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 fa03 	bl	80059fc <USB_SetCurrentMode>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d005      	beq.n	8002608 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e017      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	7c1a      	ldrb	r2, [r3, #16]
 8002610:	f88d 2000 	strb.w	r2, [sp]
 8002614:	3304      	adds	r3, #4
 8002616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002618:	f003 fba6 	bl	8005d68 <USB_HostInit>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e004      	b.n	8002638 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002640:	b590      	push	{r4, r7, lr}
 8002642:	b08b      	sub	sp, #44	@ 0x2c
 8002644:	af04      	add	r7, sp, #16
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4608      	mov	r0, r1
 800264a:	4611      	mov	r1, r2
 800264c:	461a      	mov	r2, r3
 800264e:	4603      	mov	r3, r0
 8002650:	70fb      	strb	r3, [r7, #3]
 8002652:	460b      	mov	r3, r1
 8002654:	70bb      	strb	r3, [r7, #2]
 8002656:	4613      	mov	r3, r2
 8002658:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800265a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800265c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_HCD_HC_Init+0x2c>
 8002668:	2302      	movs	r3, #2
 800266a:	e09d      	b.n	80027a8 <HAL_HCD_HC_Init+0x168>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	3319      	adds	r3, #25
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002688:	78fa      	ldrb	r2, [r7, #3]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	011b      	lsls	r3, r3, #4
 8002690:	1a9b      	subs	r3, r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3314      	adds	r3, #20
 8002698:	787a      	ldrb	r2, [r7, #1]
 800269a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	4613      	mov	r3, r2
 80026a2:	011b      	lsls	r3, r3, #4
 80026a4:	1a9b      	subs	r3, r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	3315      	adds	r3, #21
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	011b      	lsls	r3, r3, #4
 80026b8:	1a9b      	subs	r3, r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	3326      	adds	r3, #38	@ 0x26
 80026c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	78bb      	ldrb	r3, [r7, #2]
 80026ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026ce:	b2d8      	uxtb	r0, r3
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3316      	adds	r3, #22
 80026de:	4602      	mov	r2, r0
 80026e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026e2:	78fb      	ldrb	r3, [r7, #3]
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 fbc8 	bl	8002e7c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	da0a      	bge.n	800270a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	3317      	adds	r3, #23
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
 8002708:	e009      	b.n	800271e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3317      	adds	r3, #23
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f003 fc84 	bl	8006030 <USB_GetHostSpeed>
 8002728:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800272a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10b      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002732:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002736:	2b01      	cmp	r3, #1
 8002738:	d107      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2bbc      	cmp	r3, #188	@ 0xbc
 8002744:	d901      	bls.n	800274a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002746:	23bc      	movs	r3, #188	@ 0xbc
 8002748:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	3318      	adds	r3, #24
 800275a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800275e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	b298      	uxth	r0, r3
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	3328      	adds	r3, #40	@ 0x28
 8002774:	4602      	mov	r2, r0
 8002776:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	b29b      	uxth	r3, r3
 8002780:	787c      	ldrb	r4, [r7, #1]
 8002782:	78ba      	ldrb	r2, [r7, #2]
 8002784:	78f9      	ldrb	r1, [r7, #3]
 8002786:	9302      	str	r3, [sp, #8]
 8002788:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	4623      	mov	r3, r4
 8002796:	f003 fc73 	bl	8006080 <USB_HC_Init>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}

080027b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_HCD_HC_Halt+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e00f      	b.n	80027ee <HAL_HCD_HC_Halt+0x3e>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 f805 	bl	80067ee <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
	...

080027f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	4608      	mov	r0, r1
 8002802:	4611      	mov	r1, r2
 8002804:	461a      	mov	r2, r3
 8002806:	4603      	mov	r3, r0
 8002808:	70fb      	strb	r3, [r7, #3]
 800280a:	460b      	mov	r3, r1
 800280c:	70bb      	strb	r3, [r7, #2]
 800280e:	4613      	mov	r3, r2
 8002810:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	3317      	adds	r3, #23
 8002822:	78ba      	ldrb	r2, [r7, #2]
 8002824:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3326      	adds	r3, #38	@ 0x26
 8002836:	787a      	ldrb	r2, [r7, #1]
 8002838:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d114      	bne.n	800286a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	332a      	adds	r3, #42	@ 0x2a
 8002850:	2203      	movs	r2, #3
 8002852:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	3319      	adds	r3, #25
 8002864:	7f3a      	ldrb	r2, [r7, #28]
 8002866:	701a      	strb	r2, [r3, #0]
 8002868:	e009      	b.n	800287e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800286a:	78fa      	ldrb	r2, [r7, #3]
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	4613      	mov	r3, r2
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	1a9b      	subs	r3, r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	332a      	adds	r3, #42	@ 0x2a
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287e:	787b      	ldrb	r3, [r7, #1]
 8002880:	2b03      	cmp	r3, #3
 8002882:	f200 8102 	bhi.w	8002a8a <HAL_HCD_HC_SubmitRequest+0x292>
 8002886:	a201      	add	r2, pc, #4	@ (adr r2, 800288c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800288c:	0800289d 	.word	0x0800289d
 8002890:	08002a75 	.word	0x08002a75
 8002894:	08002961 	.word	0x08002961
 8002898:	080029eb 	.word	0x080029eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800289c:	7c3b      	ldrb	r3, [r7, #16]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	f040 80f5 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80028a4:	78bb      	ldrb	r3, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d12d      	bne.n	8002906 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80028aa:	8b3b      	ldrh	r3, [r7, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d109      	bne.n	80028c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	333d      	adds	r3, #61	@ 0x3d
 80028c0:	2201      	movs	r2, #1
 80028c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	333d      	adds	r3, #61	@ 0x3d
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10a      	bne.n	80028f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	332a      	adds	r3, #42	@ 0x2a
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028ee:	e0ce      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	332a      	adds	r3, #42	@ 0x2a
 8002900:	2202      	movs	r2, #2
 8002902:	701a      	strb	r2, [r3, #0]
      break;
 8002904:	e0c3      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	1a9b      	subs	r3, r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	331a      	adds	r3, #26
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b01      	cmp	r3, #1
 800291a:	f040 80b8 	bne.w	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	333c      	adds	r3, #60	@ 0x3c
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10a      	bne.n	800294a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	332a      	adds	r3, #42	@ 0x2a
 8002944:	2200      	movs	r2, #0
 8002946:	701a      	strb	r2, [r3, #0]
      break;
 8002948:	e0a1      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800294a:	78fa      	ldrb	r2, [r7, #3]
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	4613      	mov	r3, r2
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	1a9b      	subs	r3, r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	440b      	add	r3, r1
 8002958:	332a      	adds	r3, #42	@ 0x2a
 800295a:	2202      	movs	r2, #2
 800295c:	701a      	strb	r2, [r3, #0]
      break;
 800295e:	e096      	b.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002960:	78bb      	ldrb	r3, [r7, #2]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d120      	bne.n	80029a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002966:	78fa      	ldrb	r2, [r7, #3]
 8002968:	6879      	ldr	r1, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	440b      	add	r3, r1
 8002974:	333d      	adds	r3, #61	@ 0x3d
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10a      	bne.n	8002992 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	332a      	adds	r3, #42	@ 0x2a
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002990:	e07e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	332a      	adds	r3, #42	@ 0x2a
 80029a2:	2202      	movs	r2, #2
 80029a4:	701a      	strb	r2, [r3, #0]
      break;
 80029a6:	e073      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	333c      	adds	r3, #60	@ 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	332a      	adds	r3, #42	@ 0x2a
 80029ce:	2200      	movs	r2, #0
 80029d0:	701a      	strb	r2, [r3, #0]
      break;
 80029d2:	e05d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	332a      	adds	r3, #42	@ 0x2a
 80029e4:	2202      	movs	r2, #2
 80029e6:	701a      	strb	r2, [r3, #0]
      break;
 80029e8:	e052      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029ea:	78bb      	ldrb	r3, [r7, #2]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d120      	bne.n	8002a32 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	333d      	adds	r3, #61	@ 0x3d
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	332a      	adds	r3, #42	@ 0x2a
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a1a:	e039      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	332a      	adds	r3, #42	@ 0x2a
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	701a      	strb	r2, [r3, #0]
      break;
 8002a30:	e02e      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	011b      	lsls	r3, r3, #4
 8002a3a:	1a9b      	subs	r3, r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	440b      	add	r3, r1
 8002a40:	333c      	adds	r3, #60	@ 0x3c
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d10a      	bne.n	8002a5e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	332a      	adds	r3, #42	@ 0x2a
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
      break;
 8002a5c:	e018      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	332a      	adds	r3, #42	@ 0x2a
 8002a6e:	2202      	movs	r2, #2
 8002a70:	701a      	strb	r2, [r3, #0]
      break;
 8002a72:	e00d      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	332a      	adds	r3, #42	@ 0x2a
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
      break;
 8002a88:	e002      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a8a:	bf00      	nop
 8002a8c:	e000      	b.n	8002a90 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a8e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	6879      	ldr	r1, [r7, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	011b      	lsls	r3, r3, #4
 8002a98:	1a9b      	subs	r3, r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	332c      	adds	r3, #44	@ 0x2c
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	8b39      	ldrh	r1, [r7, #24]
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4403      	add	r3, r0
 8002ab4:	3334      	adds	r3, #52	@ 0x34
 8002ab6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002ab8:	78fa      	ldrb	r2, [r7, #3]
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	4613      	mov	r3, r2
 8002abe:	011b      	lsls	r3, r3, #4
 8002ac0:	1a9b      	subs	r3, r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	334c      	adds	r3, #76	@ 0x4c
 8002ac8:	2200      	movs	r2, #0
 8002aca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	3338      	adds	r3, #56	@ 0x38
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	3315      	adds	r3, #21
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	334d      	adds	r3, #77	@ 0x4d
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	78fa      	ldrb	r2, [r7, #3]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	3310      	adds	r3, #16
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1d19      	adds	r1, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	799b      	ldrb	r3, [r3, #6]
 8002b22:	461a      	mov	r2, r3
 8002b24:	f003 fbd8 	bl	80062d8 <USB_HC_StartXfer>
 8002b28:	4603      	mov	r3, r0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3708      	adds	r7, #8
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop

08002b34 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f003 f8cc 	bl	8005ce8 <USB_GetMode>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	f040 80fb 	bne.w	8002d4e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f003 f88f 	bl	8005c80 <USB_ReadInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f000 80f1 	beq.w	8002d4c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f003 f886 	bl	8005c80 <USB_ReadInterrupts>
 8002b74:	4603      	mov	r3, r0
 8002b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b7a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b7e:	d104      	bne.n	8002b8a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b88:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f003 f876 	bl	8005c80 <USB_ReadInterrupts>
 8002b94:	4603      	mov	r3, r0
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b9e:	d104      	bne.n	8002baa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ba8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f003 f866 	bl	8005c80 <USB_ReadInterrupts>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bbe:	d104      	bne.n	8002bca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bc8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 f856 	bl	8005c80 <USB_ReadInterrupts>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d103      	bne.n	8002be6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2202      	movs	r2, #2
 8002be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f003 f848 	bl	8005c80 <USB_ReadInterrupts>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfa:	d120      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002c04:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d113      	bne.n	8002c3e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c16:	2110      	movs	r1, #16
 8002c18:	6938      	ldr	r0, [r7, #16]
 8002c1a:	f002 ff3b 	bl	8005a94 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c1e:	6938      	ldr	r0, [r7, #16]
 8002c20:	f002 ff6a 	bl	8005af8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	7a5b      	ldrb	r3, [r3, #9]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d105      	bne.n	8002c38 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2101      	movs	r1, #1
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 f95c 	bl	8005ef0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f006 f923 	bl	8008e84 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 f81c 	bl	8005c80 <USB_ReadInterrupts>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c52:	d102      	bne.n	8002c5a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f001 fd33 	bl	80046c0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 f80e 	bl	8005c80 <USB_ReadInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0308 	and.w	r3, r3, #8
 8002c6a:	2b08      	cmp	r3, #8
 8002c6c:	d106      	bne.n	8002c7c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f006 f8ec 	bl	8008e4c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2208      	movs	r2, #8
 8002c7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f002 fffd 	bl	8005c80 <USB_ReadInterrupts>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c90:	d139      	bne.n	8002d06 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 fd98 	bl	80067cc <USB_HC_ReadInterrupt>
 8002c9c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
 8002ca2:	e025      	b.n	8002cf0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d018      	beq.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cce:	d106      	bne.n	8002cde <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f905 	bl	8002ee6 <HCD_HC_IN_IRQHandler>
 8002cdc:	e005      	b.n	8002cea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 ff67 	bl	8003bb8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	3301      	adds	r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	795b      	ldrb	r3, [r3, #5]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d3d3      	bcc.n	8002ca4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 ffb8 	bl	8005c80 <USB_ReadInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f003 0310 	and.w	r3, r3, #16
 8002d16:	2b10      	cmp	r3, #16
 8002d18:	d101      	bne.n	8002d1e <HAL_HCD_IRQHandler+0x1ea>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_HCD_IRQHandler+0x1ec>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d014      	beq.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f001 fbe4 	bl	8004502 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0210 	orr.w	r2, r2, #16
 8002d48:	619a      	str	r2, [r3, #24]
 8002d4a:	e000      	b.n	8002d4e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d4c:	bf00      	nop
    }
  }
}
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_HCD_Start+0x16>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e013      	b.n	8002d92 <HAL_HCD_Start+0x3e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f003 f920 	bl	8005fbe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f002 fe18 	bl	80059b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_HCD_Stop+0x16>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e00d      	b.n	8002dcc <HAL_HCD_Stop+0x32>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fe73 	bl	8006aa8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f003 f8c2 	bl	8005f6a <USB_ResetPort>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	334c      	adds	r3, #76	@ 0x4c
 8002e0c:	781b      	ldrb	r3, [r3, #0]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e1a:	b480      	push	{r7}
 8002e1c:	b083      	sub	sp, #12
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
 8002e22:	460b      	mov	r3, r1
 8002e24:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3338      	adds	r3, #56	@ 0x38
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b082      	sub	sp, #8
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f003 f904 	bl	800605e <USB_GetCurrentFrame>
 8002e56:	4603      	mov	r3, r0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 f8df 	bl	8006030 <USB_GetHostSpeed>
 8002e72:	4603      	mov	r3, r0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	331a      	adds	r3, #26
 8002e98:	2200      	movs	r2, #0
 8002e9a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	331b      	adds	r3, #27
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002eb0:	78fa      	ldrb	r2, [r7, #3]
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	1a9b      	subs	r3, r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3325      	adds	r3, #37	@ 0x25
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002ec4:	78fa      	ldrb	r2, [r7, #3]
 8002ec6:	6879      	ldr	r1, [r7, #4]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	011b      	lsls	r3, r3, #4
 8002ecc:	1a9b      	subs	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3324      	adds	r3, #36	@ 0x24
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f002 fece 	bl	8005ca6 <USB_ReadChInterrupts>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	d11a      	bne.n	8002f4a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	015a      	lsls	r2, r3, #5
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f20:	461a      	mov	r2, r3
 8002f22:	2304      	movs	r3, #4
 8002f24:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334d      	adds	r3, #77	@ 0x4d
 8002f36:	2207      	movs	r2, #7
 8002f38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fc53 	bl	80067ee <USB_HC_Halt>
 8002f48:	e09e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 fea7 	bl	8005ca6 <USB_ReadChInterrupts>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f62:	d11b      	bne.n	8002f9c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f70:	461a      	mov	r2, r3
 8002f72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f76:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	334d      	adds	r3, #77	@ 0x4d
 8002f88:	2208      	movs	r2, #8
 8002f8a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fc2a 	bl	80067ee <USB_HC_Halt>
 8002f9a:	e075      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fe7e 	bl	8005ca6 <USB_ReadChInterrupts>
 8002faa:	4603      	mov	r3, r0
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d11a      	bne.n	8002fea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334d      	adds	r3, #77	@ 0x4d
 8002fd6:	2206      	movs	r2, #6
 8002fd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fc03 	bl	80067ee <USB_HC_Halt>
 8002fe8:	e04e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	78fa      	ldrb	r2, [r7, #3]
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 fe57 	bl	8005ca6 <USB_ReadChInterrupts>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003002:	d11b      	bne.n	800303c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003004:	78fb      	ldrb	r3, [r7, #3]
 8003006:	015a      	lsls	r2, r3, #5
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4413      	add	r3, r2
 800300c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003010:	461a      	mov	r2, r3
 8003012:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003016:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	334d      	adds	r3, #77	@ 0x4d
 8003028:	2209      	movs	r2, #9
 800302a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fbda 	bl	80067ee <USB_HC_Halt>
 800303a:	e025      	b.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	4611      	mov	r1, r2
 8003044:	4618      	mov	r0, r3
 8003046:	f002 fe2e 	bl	8005ca6 <USB_ReadChInterrupts>
 800304a:	4603      	mov	r3, r0
 800304c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003050:	2b80      	cmp	r3, #128	@ 0x80
 8003052:	d119      	bne.n	8003088 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4413      	add	r3, r2
 800305c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003060:	461a      	mov	r2, r3
 8003062:	2380      	movs	r3, #128	@ 0x80
 8003064:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4613      	mov	r3, r2
 800306c:	011b      	lsls	r3, r3, #4
 800306e:	1a9b      	subs	r3, r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	440b      	add	r3, r1
 8003074:	334d      	adds	r3, #77	@ 0x4d
 8003076:	2207      	movs	r2, #7
 8003078:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f003 fbb3 	bl	80067ee <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	78fa      	ldrb	r2, [r7, #3]
 800308e:	4611      	mov	r1, r2
 8003090:	4618      	mov	r0, r3
 8003092:	f002 fe08 	bl	8005ca6 <USB_ReadChInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a0:	d112      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	4611      	mov	r1, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f003 fb9f 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030bc:	461a      	mov	r2, r3
 80030be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030c2:	6093      	str	r3, [r2, #8]
 80030c4:	f000 bd75 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	4611      	mov	r1, r2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 fde8 	bl	8005ca6 <USB_ReadChInterrupts>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f040 8128 	bne.w	8003332 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	015a      	lsls	r2, r3, #5
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4413      	add	r3, r2
 80030ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ee:	461a      	mov	r2, r3
 80030f0:	2320      	movs	r3, #32
 80030f2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	331b      	adds	r3, #27
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d119      	bne.n	800313e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	331b      	adds	r3, #27
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800311e:	78fb      	ldrb	r3, [r7, #3]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	4413      	add	r3, r2
 8003126:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	0151      	lsls	r1, r2, #5
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	440a      	add	r2, r1
 8003134:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003138:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	799b      	ldrb	r3, [r3, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d01b      	beq.n	800317e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3330      	adds	r3, #48	@ 0x30
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4413      	add	r3, r2
 8003160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	1ac9      	subs	r1, r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4403      	add	r3, r0
 800317a:	3338      	adds	r3, #56	@ 0x38
 800317c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334d      	adds	r3, #77	@ 0x4d
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3344      	adds	r3, #68	@ 0x44
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80031a6:	78fb      	ldrb	r3, [r7, #3]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b2:	461a      	mov	r2, r3
 80031b4:	2301      	movs	r3, #1
 80031b6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	3326      	adds	r3, #38	@ 0x26
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	3326      	adds	r3, #38	@ 0x26
 80031de:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d110      	bne.n	8003206 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f003 fafe 	bl	80067ee <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031fe:	461a      	mov	r2, r3
 8003200:	2310      	movs	r3, #16
 8003202:	6093      	str	r3, [r2, #8]
 8003204:	e03d      	b.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3326      	adds	r3, #38	@ 0x26
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d00a      	beq.n	8003232 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	3326      	adds	r3, #38	@ 0x26
 800322c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800322e:	2b01      	cmp	r3, #1
 8003230:	d127      	bne.n	8003282 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003232:	78fb      	ldrb	r3, [r7, #3]
 8003234:	015a      	lsls	r2, r3, #5
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4413      	add	r3, r2
 800323a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	0151      	lsls	r1, r2, #5
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	440a      	add	r2, r1
 8003248:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800324c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003250:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003252:	78fa      	ldrb	r2, [r7, #3]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	1a9b      	subs	r3, r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	334c      	adds	r3, #76	@ 0x4c
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	334c      	adds	r3, #76	@ 0x4c
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f005 fe0f 	bl	8008ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	799b      	ldrb	r3, [r3, #6]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d13b      	bne.n	8003302 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	4613      	mov	r3, r2
 8003290:	011b      	lsls	r3, r3, #4
 8003292:	1a9b      	subs	r3, r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	440b      	add	r3, r1
 8003298:	3338      	adds	r3, #56	@ 0x38
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	78fa      	ldrb	r2, [r7, #3]
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	4613      	mov	r3, r2
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	1a9b      	subs	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4403      	add	r3, r0
 80032aa:	3328      	adds	r3, #40	@ 0x28
 80032ac:	881b      	ldrh	r3, [r3, #0]
 80032ae:	440b      	add	r3, r1
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	78fa      	ldrb	r2, [r7, #3]
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4403      	add	r3, r0
 80032c0:	3328      	adds	r3, #40	@ 0x28
 80032c2:	881b      	ldrh	r3, [r3, #0]
 80032c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8470 	beq.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	1a9b      	subs	r3, r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	333c      	adds	r3, #60	@ 0x3c
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	f083 0301 	eor.w	r3, r3, #1
 80032ea:	b2d8      	uxtb	r0, r3
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	333c      	adds	r3, #60	@ 0x3c
 80032fa:	4602      	mov	r2, r0
 80032fc:	701a      	strb	r2, [r3, #0]
 80032fe:	f000 bc58 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	333c      	adds	r3, #60	@ 0x3c
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	333c      	adds	r3, #60	@ 0x3c
 800332a:	4602      	mov	r2, r0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	f000 bc40 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	4611      	mov	r1, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f002 fcb3 	bl	8005ca6 <USB_ReadChInterrupts>
 8003340:	4603      	mov	r3, r0
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b20      	cmp	r3, #32
 8003348:	d131      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	2320      	movs	r3, #32
 800335a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	331a      	adds	r3, #26
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b01      	cmp	r3, #1
 8003370:	f040 841f 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	331b      	adds	r3, #27
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	2203      	movs	r2, #3
 800339a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fa22 	bl	80067ee <USB_HC_Halt>
 80033aa:	f000 bc02 	b.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	4611      	mov	r1, r2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f002 fc75 	bl	8005ca6 <USB_ReadChInterrupts>
 80033bc:	4603      	mov	r3, r0
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	f040 8305 	bne.w	80039d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	461a      	mov	r2, r3
 80033d6:	2302      	movs	r3, #2
 80033d8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	334d      	adds	r3, #77	@ 0x4d
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d114      	bne.n	800341a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	334d      	adds	r3, #77	@ 0x4d
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	1a9b      	subs	r3, r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	334c      	adds	r3, #76	@ 0x4c
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
 8003418:	e2cc      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	011b      	lsls	r3, r3, #4
 8003422:	1a9b      	subs	r3, r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	334d      	adds	r3, #77	@ 0x4d
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b06      	cmp	r3, #6
 800342e:	d114      	bne.n	800345a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003430:	78fa      	ldrb	r2, [r7, #3]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	011b      	lsls	r3, r3, #4
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	334d      	adds	r3, #77	@ 0x4d
 8003440:	2202      	movs	r2, #2
 8003442:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	334c      	adds	r3, #76	@ 0x4c
 8003454:	2205      	movs	r2, #5
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e2ac      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	334d      	adds	r3, #77	@ 0x4d
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b07      	cmp	r3, #7
 800346e:	d00b      	beq.n	8003488 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334d      	adds	r3, #77	@ 0x4d
 8003480:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003482:	2b09      	cmp	r3, #9
 8003484:	f040 80a6 	bne.w	80035d4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003488:	78fa      	ldrb	r2, [r7, #3]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	1a9b      	subs	r3, r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	334d      	adds	r3, #77	@ 0x4d
 8003498:	2202      	movs	r2, #2
 800349a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800349c:	78fa      	ldrb	r2, [r7, #3]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	1a9b      	subs	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3344      	adds	r3, #68	@ 0x44
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	1c59      	adds	r1, r3, #1
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	011b      	lsls	r3, r3, #4
 80034b6:	1a9b      	subs	r3, r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4403      	add	r3, r0
 80034bc:	3344      	adds	r3, #68	@ 0x44
 80034be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	3344      	adds	r3, #68	@ 0x44
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d943      	bls.n	800355e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034d6:	78fa      	ldrb	r2, [r7, #3]
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	011b      	lsls	r3, r3, #4
 80034de:	1a9b      	subs	r3, r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	3344      	adds	r3, #68	@ 0x44
 80034e6:	2200      	movs	r2, #0
 80034e8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331a      	adds	r3, #26
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d123      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331b      	adds	r3, #27
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	331c      	adds	r3, #28
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4413      	add	r3, r2
 8003530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	78fa      	ldrb	r2, [r7, #3]
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	440a      	add	r2, r1
 800353e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003542:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003546:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	334c      	adds	r3, #76	@ 0x4c
 8003558:	2204      	movs	r2, #4
 800355a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800355c:	e229      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	1a9b      	subs	r3, r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	334c      	adds	r3, #76	@ 0x4c
 800356e:	2202      	movs	r2, #2
 8003570:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3326      	adds	r3, #38	@ 0x26
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00b      	beq.n	80035a0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003588:	78fa      	ldrb	r2, [r7, #3]
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	1a9b      	subs	r3, r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	440b      	add	r3, r1
 8003596:	3326      	adds	r3, #38	@ 0x26
 8003598:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800359a:	2b02      	cmp	r3, #2
 800359c:	f040 8209 	bne.w	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	461a      	mov	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035d2:	e1ee      	b.n	80039b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035d4:	78fa      	ldrb	r2, [r7, #3]
 80035d6:	6879      	ldr	r1, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	1a9b      	subs	r3, r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	334d      	adds	r3, #77	@ 0x4d
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b05      	cmp	r3, #5
 80035e8:	f040 80c8 	bne.w	800377c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	334d      	adds	r3, #77	@ 0x4d
 80035fc:	2202      	movs	r2, #2
 80035fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	331b      	adds	r3, #27
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	f040 81ce 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	3326      	adds	r3, #38	@ 0x26
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d16b      	bne.n	8003706 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	3348      	adds	r3, #72	@ 0x48
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4403      	add	r3, r0
 800364e:	3348      	adds	r3, #72	@ 0x48
 8003650:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3348      	adds	r3, #72	@ 0x48
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b02      	cmp	r3, #2
 8003666:	d943      	bls.n	80036f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3348      	adds	r3, #72	@ 0x48
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800367c:	78fa      	ldrb	r2, [r7, #3]
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	4613      	mov	r3, r2
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	1a9b      	subs	r3, r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	440b      	add	r3, r1
 800368a:	331b      	adds	r3, #27
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	3344      	adds	r3, #68	@ 0x44
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d809      	bhi.n	80036ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	331c      	adds	r3, #28
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	0151      	lsls	r1, r2, #5
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	440a      	add	r2, r1
 80036d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	334c      	adds	r3, #76	@ 0x4c
 80036ea:	2204      	movs	r2, #4
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	e014      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	334c      	adds	r3, #76	@ 0x4c
 8003700:	2202      	movs	r2, #2
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e009      	b.n	800371a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334c      	adds	r3, #76	@ 0x4c
 8003716:	2202      	movs	r2, #2
 8003718:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	440b      	add	r3, r1
 8003728:	3326      	adds	r3, #38	@ 0x26
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3326      	adds	r3, #38	@ 0x26
 8003740:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003742:	2b02      	cmp	r3, #2
 8003744:	f040 8136 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4413      	add	r3, r2
 8003750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800375e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003766:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4413      	add	r3, r2
 8003770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003774:	461a      	mov	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e11b      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	6879      	ldr	r1, [r7, #4]
 8003780:	4613      	mov	r3, r2
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	1a9b      	subs	r3, r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	334d      	adds	r3, #77	@ 0x4d
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b03      	cmp	r3, #3
 8003790:	f040 8081 	bne.w	8003896 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003794:	78fa      	ldrb	r2, [r7, #3]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	334d      	adds	r3, #77	@ 0x4d
 80037a4:	2202      	movs	r2, #2
 80037a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	331b      	adds	r3, #27
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	f040 80fa 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	@ 0x4c
 80037d0:	2202      	movs	r2, #2
 80037d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800380e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003812:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800382e:	f023 0320 	bic.w	r3, r3, #32
 8003832:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003834:	78fa      	ldrb	r2, [r7, #3]
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	4613      	mov	r3, r2
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	1a9b      	subs	r3, r3, r2
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	440b      	add	r3, r1
 8003842:	3326      	adds	r3, #38	@ 0x26
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	4613      	mov	r3, r2
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	1a9b      	subs	r3, r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	440b      	add	r3, r1
 8003858:	3326      	adds	r3, #38	@ 0x26
 800385a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800385c:	2b02      	cmp	r3, #2
 800385e:	f040 80a9 	bne.w	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	4413      	add	r3, r2
 800386a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003878:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003880:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4413      	add	r3, r2
 800388a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800388e:	461a      	mov	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e08e      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	334d      	adds	r3, #77	@ 0x4d
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d143      	bne.n	8003934 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	334d      	adds	r3, #77	@ 0x4d
 80038bc:	2202      	movs	r2, #2
 80038be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	6879      	ldr	r1, [r7, #4]
 80038c4:	4613      	mov	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	1a9b      	subs	r3, r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	334c      	adds	r3, #76	@ 0x4c
 80038d0:	2202      	movs	r2, #2
 80038d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038d4:	78fa      	ldrb	r2, [r7, #3]
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4613      	mov	r3, r2
 80038da:	011b      	lsls	r3, r3, #4
 80038dc:	1a9b      	subs	r3, r3, r2
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	3326      	adds	r3, #38	@ 0x26
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	3326      	adds	r3, #38	@ 0x26
 80038fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d159      	bne.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	015a      	lsls	r2, r3, #5
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	4413      	add	r3, r2
 8003908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003916:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800391e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6013      	str	r3, [r2, #0]
 8003932:	e03f      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003934:	78fa      	ldrb	r2, [r7, #3]
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	4613      	mov	r3, r2
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	1a9b      	subs	r3, r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334d      	adds	r3, #77	@ 0x4d
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b08      	cmp	r3, #8
 8003948:	d126      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	3344      	adds	r3, #68	@ 0x44
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	1c59      	adds	r1, r3, #1
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4403      	add	r3, r0
 800397e:	3344      	adds	r3, #68	@ 0x44
 8003980:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	@ 0x4c
 8003992:	2204      	movs	r2, #4
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e00d      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	334d      	adds	r3, #77	@ 0x4d
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	f000 8100 	beq.w	8003bb0 <HCD_HC_IN_IRQHandler+0xcca>
 80039b0:	e000      	b.n	80039b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039b4:	78fa      	ldrb	r2, [r7, #3]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	334c      	adds	r3, #76	@ 0x4c
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	78fb      	ldrb	r3, [r7, #3]
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f005 fa68 	bl	8008ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039d0:	e0ef      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 f963 	bl	8005ca6 <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039e6:	2b40      	cmp	r3, #64	@ 0x40
 80039e8:	d12f      	bne.n	8003a4a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039f6:	461a      	mov	r2, r3
 80039f8:	2340      	movs	r3, #64	@ 0x40
 80039fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331a      	adds	r3, #26
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3344      	adds	r3, #68	@ 0x44
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fed3 	bl	80067ee <USB_HC_Halt>
 8003a48:	e0b3      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f002 f927 	bl	8005ca6 <USB_ReadChInterrupts>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	f003 0310 	and.w	r3, r3, #16
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	f040 80a7 	bne.w	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6879      	ldr	r1, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	440b      	add	r3, r1
 8003a72:	3326      	adds	r3, #38	@ 0x26
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b03      	cmp	r3, #3
 8003a78:	d11b      	bne.n	8003ab2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	3344      	adds	r3, #68	@ 0x44
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a8e:	78fa      	ldrb	r2, [r7, #3]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	334d      	adds	r3, #77	@ 0x4d
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fe9f 	bl	80067ee <USB_HC_Halt>
 8003ab0:	e03f      	b.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	3326      	adds	r3, #38	@ 0x26
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00a      	beq.n	8003ade <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	3326      	adds	r3, #38	@ 0x26
 8003ad8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d129      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	799b      	ldrb	r3, [r3, #6]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HCD_HC_IN_IRQHandler+0xc2a>
 8003afa:	78fa      	ldrb	r2, [r7, #3]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	1a9b      	subs	r3, r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	331b      	adds	r3, #27
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d110      	bne.n	8003b32 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	334d      	adds	r3, #77	@ 0x4d
 8003b20:	2204      	movs	r2, #4
 8003b22:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f002 fe5e 	bl	80067ee <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	331b      	adds	r3, #27
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d129      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	331b      	adds	r3, #27
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b96:	f043 0320 	orr.w	r3, r3, #32
 8003b9a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	015a      	lsls	r2, r3, #5
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba8:	461a      	mov	r2, r3
 8003baa:	2310      	movs	r3, #16
 8003bac:	6093      	str	r3, [r2, #8]
 8003bae:	e000      	b.n	8003bb2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003bb0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 f865 	bl	8005ca6 <USB_ReadChInterrupts>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d11b      	bne.n	8003c1e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2304      	movs	r3, #4
 8003bf6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2207      	movs	r2, #7
 8003c0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 fdea 	bl	80067ee <USB_HC_Halt>
 8003c1a:	f000 bc6f 	b.w	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 f83d 	bl	8005ca6 <USB_ReadChInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0320 	and.w	r3, r3, #32
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	f040 8082 	bne.w	8003d3c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	2320      	movs	r3, #32
 8003c48:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c4a:	78fa      	ldrb	r2, [r7, #3]
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	011b      	lsls	r3, r3, #4
 8003c52:	1a9b      	subs	r3, r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	3319      	adds	r3, #25
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d124      	bne.n	8003caa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	3319      	adds	r3, #25
 8003c70:	2200      	movs	r2, #0
 8003c72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c74:	78fa      	ldrb	r2, [r7, #3]
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	011b      	lsls	r3, r3, #4
 8003c7c:	1a9b      	subs	r3, r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	334c      	adds	r3, #76	@ 0x4c
 8003c84:	2202      	movs	r2, #2
 8003c86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c88:	78fa      	ldrb	r2, [r7, #3]
 8003c8a:	6879      	ldr	r1, [r7, #4]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	440b      	add	r3, r1
 8003c96:	334d      	adds	r3, #77	@ 0x4d
 8003c98:	2203      	movs	r2, #3
 8003c9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fda2 	bl	80067ee <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	331a      	adds	r3, #26
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 841d 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x944>
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	331b      	adds	r3, #27
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f040 8411 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cda:	78fa      	ldrb	r2, [r7, #3]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	011b      	lsls	r3, r3, #4
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	3326      	adds	r3, #38	@ 0x26
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d009      	beq.n	8003d04 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	6879      	ldr	r1, [r7, #4]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	011b      	lsls	r3, r3, #4
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	440b      	add	r3, r1
 8003cfe:	331b      	adds	r3, #27
 8003d00:	2201      	movs	r2, #1
 8003d02:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	334d      	adds	r3, #77	@ 0x4d
 8003d14:	2203      	movs	r2, #3
 8003d16:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	4611      	mov	r1, r2
 8003d20:	4618      	mov	r0, r3
 8003d22:	f002 fd64 	bl	80067ee <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d26:	78fa      	ldrb	r2, [r7, #3]
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	011b      	lsls	r3, r3, #4
 8003d2e:	1a9b      	subs	r3, r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	440b      	add	r3, r1
 8003d34:	3344      	adds	r3, #68	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e3df      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 ffae 	bl	8005ca6 <USB_ReadChInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d54:	d111      	bne.n	8003d7a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d62:	461a      	mov	r2, r3
 8003d64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d68:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 fd3b 	bl	80067ee <USB_HC_Halt>
 8003d78:	e3c0      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	4611      	mov	r1, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f001 ff8f 	bl	8005ca6 <USB_ReadChInterrupts>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d168      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3344      	adds	r3, #68	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f001 ff79 	bl	8005ca6 <USB_ReadChInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d112      	bne.n	8003de4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dbe:	78fa      	ldrb	r2, [r7, #3]
 8003dc0:	6879      	ldr	r1, [r7, #4]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	440b      	add	r3, r1
 8003dcc:	3319      	adds	r3, #25
 8003dce:	2201      	movs	r2, #1
 8003dd0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	015a      	lsls	r2, r3, #5
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dde:	461a      	mov	r2, r3
 8003de0:	2340      	movs	r3, #64	@ 0x40
 8003de2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003de4:	78fa      	ldrb	r2, [r7, #3]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	331b      	adds	r3, #27
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d019      	beq.n	8003e2e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dfa:	78fa      	ldrb	r2, [r7, #3]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	331b      	adds	r3, #27
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	78fa      	ldrb	r2, [r7, #3]
 8003e1e:	0151      	lsls	r1, r2, #5
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	440a      	add	r2, r1
 8003e24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e2c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e2e:	78fb      	ldrb	r3, [r7, #3]
 8003e30:	015a      	lsls	r2, r3, #5
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	4413      	add	r3, r2
 8003e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334d      	adds	r3, #77	@ 0x4d
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 fcc6 	bl	80067ee <USB_HC_Halt>
 8003e62:	e34b      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f001 ff1a 	bl	8005ca6 <USB_ReadChInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e78:	2b40      	cmp	r3, #64	@ 0x40
 8003e7a:	d139      	bne.n	8003ef0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e7c:	78fa      	ldrb	r2, [r7, #3]
 8003e7e:	6879      	ldr	r1, [r7, #4]
 8003e80:	4613      	mov	r3, r2
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	1a9b      	subs	r3, r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	440b      	add	r3, r1
 8003e8a:	334d      	adds	r3, #77	@ 0x4d
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e90:	78fa      	ldrb	r2, [r7, #3]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	1a9b      	subs	r3, r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	331a      	adds	r3, #26
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003ea6:	78fa      	ldrb	r2, [r7, #3]
 8003ea8:	6879      	ldr	r1, [r7, #4]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	1a9b      	subs	r3, r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	440b      	add	r3, r1
 8003eb4:	3319      	adds	r3, #25
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3344      	adds	r3, #68	@ 0x44
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	4611      	mov	r1, r2
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f002 fc89 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee8:	461a      	mov	r2, r3
 8003eea:	2340      	movs	r3, #64	@ 0x40
 8003eec:	6093      	str	r3, [r2, #8]
 8003eee:	e305      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	4611      	mov	r1, r2
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 fed4 	bl	8005ca6 <USB_ReadChInterrupts>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f003 0308 	and.w	r3, r3, #8
 8003f04:	2b08      	cmp	r3, #8
 8003f06:	d11a      	bne.n	8003f3e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f14:	461a      	mov	r2, r3
 8003f16:	2308      	movs	r3, #8
 8003f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f1a:	78fa      	ldrb	r2, [r7, #3]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334d      	adds	r3, #77	@ 0x4d
 8003f2a:	2206      	movs	r2, #6
 8003f2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fc59 	bl	80067ee <USB_HC_Halt>
 8003f3c:	e2de      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4611      	mov	r1, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fead 	bl	8005ca6 <USB_ReadChInterrupts>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d144      	bne.n	8003fe0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	3344      	adds	r3, #68	@ 0x44
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f6a:	78fa      	ldrb	r2, [r7, #3]
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	334d      	adds	r3, #77	@ 0x4d
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	011b      	lsls	r3, r3, #4
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	440b      	add	r3, r1
 8003f8c:	3319      	adds	r3, #25
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d114      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f94:	78fa      	ldrb	r2, [r7, #3]
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d109      	bne.n	8003fbe <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	3319      	adds	r3, #25
 8003fba:	2201      	movs	r2, #1
 8003fbc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f002 fc11 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fd8:	461a      	mov	r2, r3
 8003fda:	2310      	movs	r3, #16
 8003fdc:	6093      	str	r3, [r2, #8]
 8003fde:	e28d      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f001 fe5c 	bl	8005ca6 <USB_ReadChInterrupts>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b80      	cmp	r3, #128	@ 0x80
 8003ff6:	d169      	bne.n	80040cc <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	799b      	ldrb	r3, [r3, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d111      	bne.n	8004024 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334d      	adds	r3, #77	@ 0x4d
 8004010:	2207      	movs	r2, #7
 8004012:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f002 fbe6 	bl	80067ee <USB_HC_Halt>
 8004022:	e049      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004024:	78fa      	ldrb	r2, [r7, #3]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	011b      	lsls	r3, r3, #4
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	3344      	adds	r3, #68	@ 0x44
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1c59      	adds	r1, r3, #1
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	011b      	lsls	r3, r3, #4
 800403e:	1a9b      	subs	r3, r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4403      	add	r3, r0
 8004044:	3344      	adds	r3, #68	@ 0x44
 8004046:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004048:	78fa      	ldrb	r2, [r7, #3]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3344      	adds	r3, #68	@ 0x44
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d922      	bls.n	80040a4 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	3344      	adds	r3, #68	@ 0x44
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004072:	78fa      	ldrb	r2, [r7, #3]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	1a9b      	subs	r3, r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	334c      	adds	r3, #76	@ 0x4c
 8004082:	2204      	movs	r2, #4
 8004084:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	334c      	adds	r3, #76	@ 0x4c
 8004096:	781a      	ldrb	r2, [r3, #0]
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f004 feff 	bl	8008ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80040a2:	e009      	b.n	80040b8 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	334c      	adds	r3, #76	@ 0x4c
 80040b4:	2202      	movs	r2, #2
 80040b6:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040b8:	78fb      	ldrb	r3, [r7, #3]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040c4:	461a      	mov	r2, r3
 80040c6:	2380      	movs	r3, #128	@ 0x80
 80040c8:	6093      	str	r3, [r2, #8]
 80040ca:	e217      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	4611      	mov	r1, r2
 80040d4:	4618      	mov	r0, r3
 80040d6:	f001 fde6 	bl	8005ca6 <USB_ReadChInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040e4:	d11b      	bne.n	800411e <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	334d      	adds	r3, #77	@ 0x4d
 80040f6:	2209      	movs	r2, #9
 80040f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	78fa      	ldrb	r2, [r7, #3]
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f002 fb73 	bl	80067ee <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004114:	461a      	mov	r2, r3
 8004116:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800411a:	6093      	str	r3, [r2, #8]
 800411c:	e1ee      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f001 fdbd 	bl	8005ca6 <USB_ReadChInterrupts>
 800412c:	4603      	mov	r3, r0
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b02      	cmp	r3, #2
 8004134:	f040 81df 	bne.w	80044f6 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004144:	461a      	mov	r2, r3
 8004146:	2302      	movs	r3, #2
 8004148:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800414a:	78fa      	ldrb	r2, [r7, #3]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	1a9b      	subs	r3, r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	334d      	adds	r3, #77	@ 0x4d
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 8093 	bne.w	8004288 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004162:	78fa      	ldrb	r2, [r7, #3]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	011b      	lsls	r3, r3, #4
 800416a:	1a9b      	subs	r3, r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	334d      	adds	r3, #77	@ 0x4d
 8004172:	2202      	movs	r2, #2
 8004174:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004176:	78fa      	ldrb	r2, [r7, #3]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	334c      	adds	r3, #76	@ 0x4c
 8004186:	2201      	movs	r2, #1
 8004188:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800418a:	78fa      	ldrb	r2, [r7, #3]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	1a9b      	subs	r3, r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3326      	adds	r3, #38	@ 0x26
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b02      	cmp	r3, #2
 800419e:	d00b      	beq.n	80041b8 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	011b      	lsls	r3, r3, #4
 80041a8:	1a9b      	subs	r3, r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	3326      	adds	r3, #38	@ 0x26
 80041b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	f040 8190 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	799b      	ldrb	r3, [r3, #6]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d115      	bne.n	80041ec <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	333d      	adds	r3, #61	@ 0x3d
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2d8      	uxtb	r0, r3
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	333d      	adds	r3, #61	@ 0x3d
 80041e8:	4602      	mov	r2, r0
 80041ea:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	799b      	ldrb	r3, [r3, #6]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	f040 8171 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	6879      	ldr	r1, [r7, #4]
 80041fa:	4613      	mov	r3, r2
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	1a9b      	subs	r3, r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	440b      	add	r3, r1
 8004204:	3334      	adds	r3, #52	@ 0x34
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 8165 	beq.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800420e:	78fa      	ldrb	r2, [r7, #3]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	3334      	adds	r3, #52	@ 0x34
 800421e:	6819      	ldr	r1, [r3, #0]
 8004220:	78fa      	ldrb	r2, [r7, #3]
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	4613      	mov	r3, r2
 8004226:	011b      	lsls	r3, r3, #4
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4403      	add	r3, r0
 800422e:	3328      	adds	r3, #40	@ 0x28
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	440b      	add	r3, r1
 8004234:	1e59      	subs	r1, r3, #1
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4403      	add	r3, r0
 8004244:	3328      	adds	r3, #40	@ 0x28
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	fbb1 f3f3 	udiv	r3, r1, r3
 800424c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 813f 	beq.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	333d      	adds	r3, #61	@ 0x3d
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	f083 0301 	eor.w	r3, r3, #1
 8004272:	b2d8      	uxtb	r0, r3
 8004274:	6879      	ldr	r1, [r7, #4]
 8004276:	4613      	mov	r3, r2
 8004278:	011b      	lsls	r3, r3, #4
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	333d      	adds	r3, #61	@ 0x3d
 8004282:	4602      	mov	r2, r0
 8004284:	701a      	strb	r2, [r3, #0]
 8004286:	e127      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	4613      	mov	r3, r2
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	440b      	add	r3, r1
 8004296:	334d      	adds	r3, #77	@ 0x4d
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b03      	cmp	r3, #3
 800429c:	d120      	bne.n	80042e0 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800429e:	78fa      	ldrb	r2, [r7, #3]
 80042a0:	6879      	ldr	r1, [r7, #4]
 80042a2:	4613      	mov	r3, r2
 80042a4:	011b      	lsls	r3, r3, #4
 80042a6:	1a9b      	subs	r3, r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	334d      	adds	r3, #77	@ 0x4d
 80042ae:	2202      	movs	r2, #2
 80042b0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	331b      	adds	r3, #27
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	f040 8107 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ca:	78fa      	ldrb	r2, [r7, #3]
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	011b      	lsls	r3, r3, #4
 80042d2:	1a9b      	subs	r3, r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	334c      	adds	r3, #76	@ 0x4c
 80042da:	2202      	movs	r2, #2
 80042dc:	701a      	strb	r2, [r3, #0]
 80042de:	e0fb      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80042e0:	78fa      	ldrb	r2, [r7, #3]
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	4613      	mov	r3, r2
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	1a9b      	subs	r3, r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	440b      	add	r3, r1
 80042ee:	334d      	adds	r3, #77	@ 0x4d
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d13a      	bne.n	800436c <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	4613      	mov	r3, r2
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	1a9b      	subs	r3, r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	334d      	adds	r3, #77	@ 0x4d
 8004306:	2202      	movs	r2, #2
 8004308:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4613      	mov	r3, r2
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	1a9b      	subs	r3, r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	440b      	add	r3, r1
 8004318:	334c      	adds	r3, #76	@ 0x4c
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	331b      	adds	r3, #27
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	2b01      	cmp	r3, #1
 8004332:	f040 80d1 	bne.w	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	331b      	adds	r3, #27
 8004346:	2200      	movs	r2, #0
 8004348:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4413      	add	r3, r2
 8004352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	78fa      	ldrb	r2, [r7, #3]
 800435a:	0151      	lsls	r1, r2, #5
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	440a      	add	r2, r1
 8004360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004368:	6053      	str	r3, [r2, #4]
 800436a:	e0b5      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	334d      	adds	r3, #77	@ 0x4d
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b05      	cmp	r3, #5
 8004380:	d114      	bne.n	80043ac <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	011b      	lsls	r3, r3, #4
 800438a:	1a9b      	subs	r3, r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	334d      	adds	r3, #77	@ 0x4d
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	1a9b      	subs	r3, r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	334c      	adds	r3, #76	@ 0x4c
 80043a6:	2202      	movs	r2, #2
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e095      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	334d      	adds	r3, #77	@ 0x4d
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b06      	cmp	r3, #6
 80043c0:	d114      	bne.n	80043ec <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043c2:	78fa      	ldrb	r2, [r7, #3]
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	011b      	lsls	r3, r3, #4
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	440b      	add	r3, r1
 80043d0:	334d      	adds	r3, #77	@ 0x4d
 80043d2:	2202      	movs	r2, #2
 80043d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	334c      	adds	r3, #76	@ 0x4c
 80043e6:	2205      	movs	r2, #5
 80043e8:	701a      	strb	r2, [r3, #0]
 80043ea:	e075      	b.n	80044d8 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	011b      	lsls	r3, r3, #4
 80043f4:	1a9b      	subs	r3, r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	334d      	adds	r3, #77	@ 0x4d
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b07      	cmp	r3, #7
 8004400:	d00a      	beq.n	8004418 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	334d      	adds	r3, #77	@ 0x4d
 8004412:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004414:	2b09      	cmp	r3, #9
 8004416:	d170      	bne.n	80044fa <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004418:	78fa      	ldrb	r2, [r7, #3]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	1a9b      	subs	r3, r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	334d      	adds	r3, #77	@ 0x4d
 8004428:	2202      	movs	r2, #2
 800442a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800442c:	78fa      	ldrb	r2, [r7, #3]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	1a9b      	subs	r3, r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3344      	adds	r3, #68	@ 0x44
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1c59      	adds	r1, r3, #1
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	1a9b      	subs	r3, r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	4403      	add	r3, r0
 800444c:	3344      	adds	r3, #68	@ 0x44
 800444e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3344      	adds	r3, #68	@ 0x44
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b02      	cmp	r3, #2
 8004464:	d914      	bls.n	8004490 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004466:	78fa      	ldrb	r2, [r7, #3]
 8004468:	6879      	ldr	r1, [r7, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	1a9b      	subs	r3, r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	440b      	add	r3, r1
 8004474:	3344      	adds	r3, #68	@ 0x44
 8004476:	2200      	movs	r2, #0
 8004478:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800447a:	78fa      	ldrb	r2, [r7, #3]
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	1a9b      	subs	r3, r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	334c      	adds	r3, #76	@ 0x4c
 800448a:	2204      	movs	r2, #4
 800448c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800448e:	e022      	b.n	80044d6 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004490:	78fa      	ldrb	r2, [r7, #3]
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	011b      	lsls	r3, r3, #4
 8004498:	1a9b      	subs	r3, r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	334c      	adds	r3, #76	@ 0x4c
 80044a0:	2202      	movs	r2, #2
 80044a2:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044a4:	78fb      	ldrb	r3, [r7, #3]
 80044a6:	015a      	lsls	r2, r3, #5
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4413      	add	r3, r2
 80044ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044ba:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044c2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d0:	461a      	mov	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044d8:	78fa      	ldrb	r2, [r7, #3]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	1a9b      	subs	r3, r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	334c      	adds	r3, #76	@ 0x4c
 80044e8:	781a      	ldrb	r2, [r3, #0]
 80044ea:	78fb      	ldrb	r3, [r7, #3]
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f004 fcd6 	bl	8008ea0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80044f4:	e002      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80044f6:	bf00      	nop
 80044f8:	e000      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x944>
      return;
 80044fa:	bf00      	nop
  }
}
 80044fc:	3718      	adds	r7, #24
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b08a      	sub	sp, #40	@ 0x28
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004512:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	0c5b      	lsrs	r3, r3, #17
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004536:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d004      	beq.n	8004548 <HCD_RXQLVL_IRQHandler+0x46>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b05      	cmp	r3, #5
 8004542:	f000 80b6 	beq.w	80046b2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004546:	e0b7      	b.n	80046b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80b3 	beq.w	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004550:	6879      	ldr	r1, [r7, #4]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4613      	mov	r3, r2
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	1a9b      	subs	r3, r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	440b      	add	r3, r1
 800455e:	332c      	adds	r3, #44	@ 0x2c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80a7 	beq.w	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004568:	6879      	ldr	r1, [r7, #4]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	4613      	mov	r3, r2
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	440b      	add	r3, r1
 8004576:	3338      	adds	r3, #56	@ 0x38
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	18d1      	adds	r1, r2, r3
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	4613      	mov	r3, r2
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	1a9b      	subs	r3, r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4403      	add	r3, r0
 800458c:	3334      	adds	r3, #52	@ 0x34
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4299      	cmp	r1, r3
 8004592:	f200 8083 	bhi.w	800469c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	69ba      	ldr	r2, [r7, #24]
 800459e:	4613      	mov	r3, r2
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	1a9b      	subs	r3, r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	332c      	adds	r3, #44	@ 0x2c
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	b292      	uxth	r2, r2
 80045b0:	4619      	mov	r1, r3
 80045b2:	f001 fb0d 	bl	8005bd0 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045b6:	6879      	ldr	r1, [r7, #4]
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	4613      	mov	r3, r2
 80045bc:	011b      	lsls	r3, r3, #4
 80045be:	1a9b      	subs	r3, r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	440b      	add	r3, r1
 80045c4:	332c      	adds	r3, #44	@ 0x2c
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	18d1      	adds	r1, r2, r3
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4613      	mov	r3, r2
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	1a9b      	subs	r3, r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4403      	add	r3, r0
 80045da:	332c      	adds	r3, #44	@ 0x2c
 80045dc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80045de:	6879      	ldr	r1, [r7, #4]
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	3338      	adds	r3, #56	@ 0x38
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	18d1      	adds	r1, r2, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4403      	add	r3, r0
 8004602:	3338      	adds	r3, #56	@ 0x38
 8004604:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	6a3b      	ldr	r3, [r7, #32]
 800460c:	4413      	add	r3, r2
 800460e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	0cdb      	lsrs	r3, r3, #19
 8004616:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4613      	mov	r3, r2
 8004622:	011b      	lsls	r3, r3, #4
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	3328      	adds	r3, #40	@ 0x28
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4293      	cmp	r3, r2
 8004634:	d13f      	bne.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d03c      	beq.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	4413      	add	r3, r2
 8004644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004652:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800465a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	4413      	add	r3, r2
 8004664:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	333c      	adds	r3, #60	@ 0x3c
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f083 0301 	eor.w	r3, r3, #1
 8004684:	b2d8      	uxtb	r0, r3
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4613      	mov	r3, r2
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	440b      	add	r3, r1
 8004694:	333c      	adds	r3, #60	@ 0x3c
 8004696:	4602      	mov	r2, r0
 8004698:	701a      	strb	r2, [r3, #0]
      break;
 800469a:	e00c      	b.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4613      	mov	r3, r2
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	334c      	adds	r3, #76	@ 0x4c
 80046ac:	2204      	movs	r2, #4
 80046ae:	701a      	strb	r2, [r3, #0]
      break;
 80046b0:	e001      	b.n	80046b6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046b6:	bf00      	nop
  }
}
 80046b8:	bf00      	nop
 80046ba:	3728      	adds	r7, #40	@ 0x28
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}

080046c0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80046ec:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d10b      	bne.n	8004710 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f004 fbb0 	bl	8008e68 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f043 0302 	orr.w	r3, r3, #2
 800470e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b08      	cmp	r3, #8
 8004718:	d132      	bne.n	8004780 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b04      	cmp	r3, #4
 800472a:	d126      	bne.n	800477a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	7a5b      	ldrb	r3, [r3, #9]
 8004730:	2b02      	cmp	r3, #2
 8004732:	d113      	bne.n	800475c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800473a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800473e:	d106      	bne.n	800474e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2102      	movs	r1, #2
 8004746:	4618      	mov	r0, r3
 8004748:	f001 fbd2 	bl	8005ef0 <USB_InitFSLSPClkSel>
 800474c:	e011      	b.n	8004772 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2101      	movs	r1, #1
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fbcb 	bl	8005ef0 <USB_InitFSLSPClkSel>
 800475a:	e00a      	b.n	8004772 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	79db      	ldrb	r3, [r3, #7]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d106      	bne.n	8004772 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800476a:	461a      	mov	r2, r3
 800476c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004770:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f004 fba2 	bl	8008ebc <HAL_HCD_PortEnabled_Callback>
 8004778:	e002      	b.n	8004780 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f004 fbac 	bl	8008ed8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b20      	cmp	r3, #32
 8004788:	d103      	bne.n	8004792 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	f043 0320 	orr.w	r3, r3, #32
 8004790:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004798:	461a      	mov	r2, r3
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	6013      	str	r3, [r2, #0]
}
 800479e:	bf00      	nop
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e267      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d075      	beq.n	80048b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c6:	4b88      	ldr	r3, [pc, #544]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d00c      	beq.n	80047ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b85      	ldr	r3, [pc, #532]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d112      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b82      	ldr	r3, [pc, #520]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047ea:	d10b      	bne.n	8004804 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ec:	4b7e      	ldr	r3, [pc, #504]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d05b      	beq.n	80048b0 <HAL_RCC_OscConfig+0x108>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d157      	bne.n	80048b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e242      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800480c:	d106      	bne.n	800481c <HAL_RCC_OscConfig+0x74>
 800480e:	4b76      	ldr	r3, [pc, #472]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a75      	ldr	r2, [pc, #468]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e01d      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004824:	d10c      	bne.n	8004840 <HAL_RCC_OscConfig+0x98>
 8004826:	4b70      	ldr	r3, [pc, #448]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6f      	ldr	r2, [pc, #444]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	4b6d      	ldr	r3, [pc, #436]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6c      	ldr	r2, [pc, #432]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	e00b      	b.n	8004858 <HAL_RCC_OscConfig+0xb0>
 8004840:	4b69      	ldr	r3, [pc, #420]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a68      	ldr	r2, [pc, #416]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	4b66      	ldr	r3, [pc, #408]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a65      	ldr	r2, [pc, #404]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004856:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d013      	beq.n	8004888 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004860:	f7fc ffc4 	bl	80017ec <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004868:	f7fc ffc0 	bl	80017ec <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b64      	cmp	r3, #100	@ 0x64
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e207      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487a:	4b5b      	ldr	r3, [pc, #364]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0xc0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fc ffb0 	bl	80017ec <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004890:	f7fc ffac 	bl	80017ec <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b64      	cmp	r3, #100	@ 0x64
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e1f3      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a2:	4b51      	ldr	r3, [pc, #324]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0xe8>
 80048ae:	e000      	b.n	80048b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d063      	beq.n	8004986 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048be:	4b4a      	ldr	r3, [pc, #296]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b47      	ldr	r3, [pc, #284]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d11c      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b44      	ldr	r3, [pc, #272]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d116      	bne.n	8004910 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e2:	4b41      	ldr	r3, [pc, #260]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e1c7      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fa:	4b3b      	ldr	r3, [pc, #236]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	00db      	lsls	r3, r3, #3
 8004908:	4937      	ldr	r1, [pc, #220]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800490e:	e03a      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d020      	beq.n	800495a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004918:	4b34      	ldr	r3, [pc, #208]	@ (80049ec <HAL_RCC_OscConfig+0x244>)
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fc ff65 	bl	80017ec <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004924:	e008      	b.n	8004938 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004926:	f7fc ff61 	bl	80017ec <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	2b02      	cmp	r3, #2
 8004932:	d901      	bls.n	8004938 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e1a8      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004938:	4b2b      	ldr	r3, [pc, #172]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d0f0      	beq.n	8004926 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004944:	4b28      	ldr	r3, [pc, #160]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	00db      	lsls	r3, r3, #3
 8004952:	4925      	ldr	r1, [pc, #148]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 8004954:	4313      	orrs	r3, r2
 8004956:	600b      	str	r3, [r1, #0]
 8004958:	e015      	b.n	8004986 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCC_OscConfig+0x244>)
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004960:	f7fc ff44 	bl	80017ec <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004968:	f7fc ff40 	bl	80017ec <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e187      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497a:	4b1b      	ldr	r3, [pc, #108]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1f0      	bne.n	8004968 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0308 	and.w	r3, r3, #8
 800498e:	2b00      	cmp	r3, #0
 8004990:	d036      	beq.n	8004a00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d016      	beq.n	80049c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499a:	4b15      	ldr	r3, [pc, #84]	@ (80049f0 <HAL_RCC_OscConfig+0x248>)
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fc ff24 	bl	80017ec <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fc ff20 	bl	80017ec <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e167      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ba:	4b0b      	ldr	r3, [pc, #44]	@ (80049e8 <HAL_RCC_OscConfig+0x240>)
 80049bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x200>
 80049c6:	e01b      	b.n	8004a00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <HAL_RCC_OscConfig+0x248>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ce:	f7fc ff0d 	bl	80017ec <HAL_GetTick>
 80049d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049d4:	e00e      	b.n	80049f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049d6:	f7fc ff09 	bl	80017ec <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b02      	cmp	r3, #2
 80049e2:	d907      	bls.n	80049f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e150      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 80049e8:	40023800 	.word	0x40023800
 80049ec:	42470000 	.word	0x42470000
 80049f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049f4:	4b88      	ldr	r3, [pc, #544]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 80049f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1ea      	bne.n	80049d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 8097 	beq.w	8004b3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a12:	4b81      	ldr	r3, [pc, #516]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	4b7d      	ldr	r3, [pc, #500]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	4a7c      	ldr	r2, [pc, #496]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a2e:	4b7a      	ldr	r3, [pc, #488]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	60bb      	str	r3, [r7, #8]
 8004a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3e:	4b77      	ldr	r3, [pc, #476]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d118      	bne.n	8004a7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a4a:	4b74      	ldr	r3, [pc, #464]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a73      	ldr	r2, [pc, #460]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a56:	f7fc fec9 	bl	80017ec <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a5e:	f7fc fec5 	bl	80017ec <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e10c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a70:	4b6a      	ldr	r3, [pc, #424]	@ (8004c1c <HAL_RCC_OscConfig+0x474>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d106      	bne.n	8004a92 <HAL_RCC_OscConfig+0x2ea>
 8004a84:	4b64      	ldr	r3, [pc, #400]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a88:	4a63      	ldr	r2, [pc, #396]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a8a:	f043 0301 	orr.w	r3, r3, #1
 8004a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a90:	e01c      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x30c>
 8004a9a:	4b5f      	ldr	r3, [pc, #380]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9e:	4a5e      	ldr	r2, [pc, #376]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0304 	orr.w	r3, r3, #4
 8004aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa6:	4b5c      	ldr	r3, [pc, #368]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	4a5b      	ldr	r2, [pc, #364]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab2:	e00b      	b.n	8004acc <HAL_RCC_OscConfig+0x324>
 8004ab4:	4b58      	ldr	r3, [pc, #352]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab8:	4a57      	ldr	r2, [pc, #348]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0301 	bic.w	r3, r3, #1
 8004abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ac0:	4b55      	ldr	r3, [pc, #340]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac4:	4a54      	ldr	r2, [pc, #336]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0304 	bic.w	r3, r3, #4
 8004aca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad4:	f7fc fe8a 	bl	80017ec <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	e00a      	b.n	8004af2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004adc:	f7fc fe86 	bl	80017ec <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e0cb      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af2:	4b49      	ldr	r3, [pc, #292]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0ee      	beq.n	8004adc <HAL_RCC_OscConfig+0x334>
 8004afe:	e014      	b.n	8004b2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b00:	f7fc fe74 	bl	80017ec <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	e00a      	b.n	8004b1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b08:	f7fc fe70 	bl	80017ec <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e0b5      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ee      	bne.n	8004b08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b2a:	7dfb      	ldrb	r3, [r7, #23]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b39      	ldr	r3, [pc, #228]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	4a38      	ldr	r2, [pc, #224]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f000 80a1 	beq.w	8004c88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b46:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d05c      	beq.n	8004c0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d141      	bne.n	8004bde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b5a:	4b31      	ldr	r3, [pc, #196]	@ (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b60:	f7fc fe44 	bl	80017ec <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fc fe40 	bl	80017ec <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e087      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b7a:	4b27      	ldr	r3, [pc, #156]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b9c:	085b      	lsrs	r3, r3, #1
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	041b      	lsls	r3, r3, #16
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba8:	061b      	lsls	r3, r3, #24
 8004baa:	491b      	ldr	r1, [pc, #108]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb6:	f7fc fe19 	bl	80017ec <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bbe:	f7fc fe15 	bl	80017ec <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e05c      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bd0:	4b11      	ldr	r3, [pc, #68]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x416>
 8004bdc:	e054      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_RCC_OscConfig+0x478>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fc fe02 	bl	80017ec <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fc fdfe 	bl	80017ec <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e045      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b06      	ldr	r3, [pc, #24]	@ (8004c18 <HAL_RCC_OscConfig+0x470>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x444>
 8004c0a:	e03d      	b.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d107      	bne.n	8004c24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e038      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
 8004c18:	40023800 	.word	0x40023800
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c24:	4b1b      	ldr	r3, [pc, #108]	@ (8004c94 <HAL_RCC_OscConfig+0x4ec>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d028      	beq.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d121      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d11a      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c54:	4013      	ands	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d111      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c6a:	085b      	lsrs	r3, r3, #1
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d107      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d001      	beq.n	8004c88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e000      	b.n	8004c8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800

08004c98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e0cc      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cac:	4b68      	ldr	r3, [pc, #416]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d90c      	bls.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cba:	4b65      	ldr	r3, [pc, #404]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc2:	4b63      	ldr	r3, [pc, #396]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	683a      	ldr	r2, [r7, #0]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e0b8      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d020      	beq.n	8004d22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cec:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a58      	ldr	r2, [pc, #352]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d005      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d04:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	4a52      	ldr	r2, [pc, #328]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d10:	4b50      	ldr	r3, [pc, #320]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	494d      	ldr	r1, [pc, #308]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d044      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d107      	bne.n	8004d46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d36:	4b47      	ldr	r3, [pc, #284]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d119      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e07f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	2b03      	cmp	r3, #3
 8004d54:	d107      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	4b3f      	ldr	r3, [pc, #252]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d109      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d66:	4b3b      	ldr	r3, [pc, #236]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e067      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d76:	4b37      	ldr	r3, [pc, #220]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f023 0203 	bic.w	r2, r3, #3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	4934      	ldr	r1, [pc, #208]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d88:	f7fc fd30 	bl	80017ec <HAL_GetTick>
 8004d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d90:	f7fc fd2c 	bl	80017ec <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e04f      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004da6:	4b2b      	ldr	r3, [pc, #172]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 020c 	and.w	r2, r3, #12
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d1eb      	bne.n	8004d90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004db8:	4b25      	ldr	r3, [pc, #148]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d20c      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b22      	ldr	r3, [pc, #136]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	b2d2      	uxtb	r2, r2
 8004dcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dce:	4b20      	ldr	r3, [pc, #128]	@ (8004e50 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0307 	and.w	r3, r3, #7
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d001      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e032      	b.n	8004e46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d008      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dec:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	4916      	ldr	r1, [pc, #88]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	490e      	ldr	r1, [pc, #56]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e1e:	f000 f821 	bl	8004e64 <HAL_RCC_GetSysClockFreq>
 8004e22:	4602      	mov	r2, r0
 8004e24:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f003 030f 	and.w	r3, r3, #15
 8004e2e:	490a      	ldr	r1, [pc, #40]	@ (8004e58 <HAL_RCC_ClockConfig+0x1c0>)
 8004e30:	5ccb      	ldrb	r3, [r1, r3]
 8004e32:	fa22 f303 	lsr.w	r3, r2, r3
 8004e36:	4a09      	ldr	r2, [pc, #36]	@ (8004e5c <HAL_RCC_ClockConfig+0x1c4>)
 8004e38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e3a:	4b09      	ldr	r3, [pc, #36]	@ (8004e60 <HAL_RCC_ClockConfig+0x1c8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fc fc90 	bl	8001764 <HAL_InitTick>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	40023c00 	.word	0x40023c00
 8004e54:	40023800 	.word	0x40023800
 8004e58:	0800bfcc 	.word	0x0800bfcc
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000004 	.word	0x20000004

08004e64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e68:	b094      	sub	sp, #80	@ 0x50
 8004e6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e70:	2300      	movs	r3, #0
 8004e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e74:	2300      	movs	r3, #0
 8004e76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e7c:	4b79      	ldr	r3, [pc, #484]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d00d      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x40>
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	f200 80e1 	bhi.w	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x34>
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	d003      	beq.n	8004e9e <HAL_RCC_GetSysClockFreq+0x3a>
 8004e96:	e0db      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e98:	4b73      	ldr	r3, [pc, #460]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004e9c:	e0db      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e9e:	4b73      	ldr	r3, [pc, #460]	@ (800506c <HAL_RCC_GetSysClockFreq+0x208>)
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ea2:	e0d8      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ea4:	4b6f      	ldr	r3, [pc, #444]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eac:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eae:	4b6d      	ldr	r3, [pc, #436]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d063      	beq.n	8004f82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eba:	4b6a      	ldr	r3, [pc, #424]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	099b      	lsrs	r3, r3, #6
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ec4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ece:	2300      	movs	r3, #0
 8004ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ed2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	462b      	mov	r3, r5
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	0159      	lsls	r1, r3, #5
 8004ee4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee8:	0150      	lsls	r0, r2, #5
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	4621      	mov	r1, r4
 8004ef0:	1a51      	subs	r1, r2, r1
 8004ef2:	6139      	str	r1, [r7, #16]
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	eb63 0301 	sbc.w	r3, r3, r1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	018b      	lsls	r3, r1, #6
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f12:	4651      	mov	r1, sl
 8004f14:	018a      	lsls	r2, r1, #6
 8004f16:	4651      	mov	r1, sl
 8004f18:	ebb2 0801 	subs.w	r8, r2, r1
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	eb63 0901 	sbc.w	r9, r3, r1
 8004f22:	f04f 0200 	mov.w	r2, #0
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f36:	4690      	mov	r8, r2
 8004f38:	4699      	mov	r9, r3
 8004f3a:	4623      	mov	r3, r4
 8004f3c:	eb18 0303 	adds.w	r3, r8, r3
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	462b      	mov	r3, r5
 8004f44:	eb49 0303 	adc.w	r3, r9, r3
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f56:	4629      	mov	r1, r5
 8004f58:	024b      	lsls	r3, r1, #9
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f60:	4621      	mov	r1, r4
 8004f62:	024a      	lsls	r2, r1, #9
 8004f64:	4610      	mov	r0, r2
 8004f66:	4619      	mov	r1, r3
 8004f68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004f74:	f7fb fe18 	bl	8000ba8 <__aeabi_uldivmod>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f80:	e058      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f82:	4b38      	ldr	r3, [pc, #224]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	099b      	lsrs	r3, r3, #6
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	2300      	movs	r3, #0
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	f04f 0000 	mov.w	r0, #0
 8004fa4:	f04f 0100 	mov.w	r1, #0
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fae:	0150      	lsls	r0, r2, #5
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	4641      	mov	r1, r8
 8004fb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fba:	4649      	mov	r1, r9
 8004fbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fd4:	ebb2 040a 	subs.w	r4, r2, sl
 8004fd8:	eb63 050b 	sbc.w	r5, r3, fp
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	00eb      	lsls	r3, r5, #3
 8004fe6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	4614      	mov	r4, r2
 8004fee:	461d      	mov	r5, r3
 8004ff0:	4643      	mov	r3, r8
 8004ff2:	18e3      	adds	r3, r4, r3
 8004ff4:	603b      	str	r3, [r7, #0]
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	eb45 0303 	adc.w	r3, r5, r3
 8004ffc:	607b      	str	r3, [r7, #4]
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	e9d7 4500 	ldrd	r4, r5, [r7]
 800500a:	4629      	mov	r1, r5
 800500c:	028b      	lsls	r3, r1, #10
 800500e:	4621      	mov	r1, r4
 8005010:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005014:	4621      	mov	r1, r4
 8005016:	028a      	lsls	r2, r1, #10
 8005018:	4610      	mov	r0, r2
 800501a:	4619      	mov	r1, r3
 800501c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501e:	2200      	movs	r2, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	61fa      	str	r2, [r7, #28]
 8005024:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005028:	f7fb fdbe 	bl	8000ba8 <__aeabi_uldivmod>
 800502c:	4602      	mov	r2, r0
 800502e:	460b      	mov	r3, r1
 8005030:	4613      	mov	r3, r2
 8005032:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005034:	4b0b      	ldr	r3, [pc, #44]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x200>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	0c1b      	lsrs	r3, r3, #16
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	3301      	adds	r3, #1
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005048:	fbb2 f3f3 	udiv	r3, r2, r3
 800504c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800504e:	e002      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x204>)
 8005052:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005054:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005058:	4618      	mov	r0, r3
 800505a:	3750      	adds	r7, #80	@ 0x50
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005062:	bf00      	nop
 8005064:	40023800 	.word	0x40023800
 8005068:	00f42400 	.word	0x00f42400
 800506c:	007a1200 	.word	0x007a1200

08005070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005074:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <HAL_RCC_GetHCLKFreq+0x14>)
 8005076:	681b      	ldr	r3, [r3, #0]
}
 8005078:	4618      	mov	r0, r3
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000000 	.word	0x20000000

08005088 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800508c:	f7ff fff0 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b05      	ldr	r3, [pc, #20]	@ (80050a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a9b      	lsrs	r3, r3, #10
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4903      	ldr	r1, [pc, #12]	@ (80050ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	40023800 	.word	0x40023800
 80050ac:	0800bfdc 	.word	0x0800bfdc

080050b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050b4:	f7ff ffdc 	bl	8005070 <HAL_RCC_GetHCLKFreq>
 80050b8:	4602      	mov	r2, r0
 80050ba:	4b05      	ldr	r3, [pc, #20]	@ (80050d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0b5b      	lsrs	r3, r3, #13
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	4903      	ldr	r1, [pc, #12]	@ (80050d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050c6:	5ccb      	ldrb	r3, [r1, r3]
 80050c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	40023800 	.word	0x40023800
 80050d4:	0800bfdc 	.word	0x0800bfdc

080050d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e042      	b.n	8005170 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d106      	bne.n	8005104 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7fc f96a 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2224      	movs	r2, #36	@ 0x24
 8005108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68da      	ldr	r2, [r3, #12]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800511a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f973 	bl	8005408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005130:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	695a      	ldr	r2, [r3, #20]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005140:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005150:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08a      	sub	sp, #40	@ 0x28
 800517c:	af02      	add	r7, sp, #8
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	603b      	str	r3, [r7, #0]
 8005184:	4613      	mov	r3, r2
 8005186:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b20      	cmp	r3, #32
 8005196:	d175      	bne.n	8005284 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_UART_Transmit+0x2c>
 800519e:	88fb      	ldrh	r3, [r7, #6]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e06e      	b.n	8005286 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2221      	movs	r2, #33	@ 0x21
 80051b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051b6:	f7fc fb19 	bl	80017ec <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	88fa      	ldrh	r2, [r7, #6]
 80051c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d0:	d108      	bne.n	80051e4 <HAL_UART_Transmit+0x6c>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d104      	bne.n	80051e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	e003      	b.n	80051ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051ec:	e02e      	b.n	800524c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2200      	movs	r2, #0
 80051f6:	2180      	movs	r1, #128	@ 0x80
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f848 	bl	800528e <UART_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d005      	beq.n	8005210 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e03a      	b.n	8005286 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10b      	bne.n	800522e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	461a      	mov	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005224:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	3302      	adds	r3, #2
 800522a:	61bb      	str	r3, [r7, #24]
 800522c:	e007      	b.n	800523e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	781a      	ldrb	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	3301      	adds	r3, #1
 800523c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b01      	subs	r3, #1
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1cb      	bne.n	80051ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2200      	movs	r2, #0
 800525e:	2140      	movs	r1, #64	@ 0x40
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f814 	bl	800528e <UART_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e006      	b.n	8005286 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e000      	b.n	8005286 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	603b      	str	r3, [r7, #0]
 800529a:	4613      	mov	r3, r2
 800529c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800529e:	e03b      	b.n	8005318 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a6:	d037      	beq.n	8005318 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052a8:	f7fc faa0 	bl	80017ec <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	6a3a      	ldr	r2, [r7, #32]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d302      	bcc.n	80052be <UART_WaitOnFlagUntilTimeout+0x30>
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e03a      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68db      	ldr	r3, [r3, #12]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d023      	beq.n	8005318 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	2b80      	cmp	r3, #128	@ 0x80
 80052d4:	d020      	beq.n	8005318 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2b40      	cmp	r3, #64	@ 0x40
 80052da:	d01d      	beq.n	8005318 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b08      	cmp	r3, #8
 80052e8:	d116      	bne.n	8005318 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	617b      	str	r3, [r7, #20]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	617b      	str	r3, [r7, #20]
 80052fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f000 f81d 	bl	8005340 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2208      	movs	r2, #8
 800530a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e00f      	b.n	8005338 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	429a      	cmp	r2, r3
 8005326:	bf0c      	ite	eq
 8005328:	2301      	moveq	r3, #1
 800532a:	2300      	movne	r3, #0
 800532c:	b2db      	uxtb	r3, r3
 800532e:	461a      	mov	r2, r3
 8005330:	79fb      	ldrb	r3, [r7, #7]
 8005332:	429a      	cmp	r2, r3
 8005334:	d0b4      	beq.n	80052a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3718      	adds	r7, #24
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b095      	sub	sp, #84	@ 0x54
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	330c      	adds	r3, #12
 800534e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800535a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800535e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	330c      	adds	r3, #12
 8005366:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005368:	643a      	str	r2, [r7, #64]	@ 0x40
 800536a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800536e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3314      	adds	r3, #20
 8005382:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	61fb      	str	r3, [r7, #28]
   return(result);
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	f023 0301 	bic.w	r3, r3, #1
 8005392:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3314      	adds	r3, #20
 800539a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800539c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800539e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e5      	bne.n	800537c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d119      	bne.n	80053ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	330c      	adds	r3, #12
 80053be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	e853 3f00 	ldrex	r3, [r3]
 80053c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f023 0310 	bic.w	r3, r3, #16
 80053ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053d8:	61ba      	str	r2, [r7, #24]
 80053da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	6979      	ldr	r1, [r7, #20]
 80053de:	69ba      	ldr	r2, [r7, #24]
 80053e0:	e841 2300 	strex	r3, r2, [r1]
 80053e4:	613b      	str	r3, [r7, #16]
   return(result);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1e5      	bne.n	80053b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053fa:	bf00      	nop
 80053fc:	3754      	adds	r7, #84	@ 0x54
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
	...

08005408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800540c:	b0c0      	sub	sp, #256	@ 0x100
 800540e:	af00      	add	r7, sp, #0
 8005410:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005424:	68d9      	ldr	r1, [r3, #12]
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	ea40 0301 	orr.w	r3, r0, r1
 8005430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	431a      	orrs	r2, r3
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4313      	orrs	r3, r2
 8005450:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005460:	f021 010c 	bic.w	r1, r1, #12
 8005464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800546e:	430b      	orrs	r3, r1
 8005470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	6999      	ldr	r1, [r3, #24]
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	ea40 0301 	orr.w	r3, r0, r1
 800548e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b8f      	ldr	r3, [pc, #572]	@ (80056d4 <UART_SetConfig+0x2cc>)
 8005498:	429a      	cmp	r2, r3
 800549a:	d005      	beq.n	80054a8 <UART_SetConfig+0xa0>
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	4b8d      	ldr	r3, [pc, #564]	@ (80056d8 <UART_SetConfig+0x2d0>)
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d104      	bne.n	80054b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a8:	f7ff fe02 	bl	80050b0 <HAL_RCC_GetPCLK2Freq>
 80054ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054b0:	e003      	b.n	80054ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054b2:	f7ff fde9 	bl	8005088 <HAL_RCC_GetPCLK1Freq>
 80054b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c4:	f040 810c 	bne.w	80056e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054cc:	2200      	movs	r2, #0
 80054ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054da:	4622      	mov	r2, r4
 80054dc:	462b      	mov	r3, r5
 80054de:	1891      	adds	r1, r2, r2
 80054e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054e2:	415b      	adcs	r3, r3
 80054e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054ea:	4621      	mov	r1, r4
 80054ec:	eb12 0801 	adds.w	r8, r2, r1
 80054f0:	4629      	mov	r1, r5
 80054f2:	eb43 0901 	adc.w	r9, r3, r1
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800550a:	4690      	mov	r8, r2
 800550c:	4699      	mov	r9, r3
 800550e:	4623      	mov	r3, r4
 8005510:	eb18 0303 	adds.w	r3, r8, r3
 8005514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005518:	462b      	mov	r3, r5
 800551a:	eb49 0303 	adc.w	r3, r9, r3
 800551e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800552e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005536:	460b      	mov	r3, r1
 8005538:	18db      	adds	r3, r3, r3
 800553a:	653b      	str	r3, [r7, #80]	@ 0x50
 800553c:	4613      	mov	r3, r2
 800553e:	eb42 0303 	adc.w	r3, r2, r3
 8005542:	657b      	str	r3, [r7, #84]	@ 0x54
 8005544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800554c:	f7fb fb2c 	bl	8000ba8 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b61      	ldr	r3, [pc, #388]	@ (80056dc <UART_SetConfig+0x2d4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005568:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800556c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005578:	415b      	adcs	r3, r3
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005580:	4641      	mov	r1, r8
 8005582:	eb12 0a01 	adds.w	sl, r2, r1
 8005586:	4649      	mov	r1, r9
 8005588:	eb43 0b01 	adc.w	fp, r3, r1
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800559c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a0:	4692      	mov	sl, r2
 80055a2:	469b      	mov	fp, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	eb1a 0303 	adds.w	r3, sl, r3
 80055aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ae:	464b      	mov	r3, r9
 80055b0:	eb4b 0303 	adc.w	r3, fp, r3
 80055b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055cc:	460b      	mov	r3, r1
 80055ce:	18db      	adds	r3, r3, r3
 80055d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055d2:	4613      	mov	r3, r2
 80055d4:	eb42 0303 	adc.w	r3, r2, r3
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055e2:	f7fb fae1 	bl	8000ba8 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4611      	mov	r1, r2
 80055ec:	4b3b      	ldr	r3, [pc, #236]	@ (80056dc <UART_SetConfig+0x2d4>)
 80055ee:	fba3 2301 	umull	r2, r3, r3, r1
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	2264      	movs	r2, #100	@ 0x64
 80055f6:	fb02 f303 	mul.w	r3, r2, r3
 80055fa:	1acb      	subs	r3, r1, r3
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005602:	4b36      	ldr	r3, [pc, #216]	@ (80056dc <UART_SetConfig+0x2d4>)
 8005604:	fba3 2302 	umull	r2, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	005b      	lsls	r3, r3, #1
 800560c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005610:	441c      	add	r4, r3
 8005612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005616:	2200      	movs	r2, #0
 8005618:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800561c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800562c:	415b      	adcs	r3, r3
 800562e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6339      	str	r1, [r7, #48]	@ 0x30
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005668:	464b      	mov	r3, r9
 800566a:	460a      	mov	r2, r1
 800566c:	eb42 0303 	adc.w	r3, r2, r3
 8005670:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005680:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005688:	460b      	mov	r3, r1
 800568a:	18db      	adds	r3, r3, r3
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568e:	4613      	mov	r3, r2
 8005690:	eb42 0303 	adc.w	r3, r2, r3
 8005694:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800569a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800569e:	f7fb fa83 	bl	8000ba8 <__aeabi_uldivmod>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <UART_SetConfig+0x2d4>)
 80056a8:	fba3 1302 	umull	r1, r3, r3, r2
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	2164      	movs	r1, #100	@ 0x64
 80056b0:	fb01 f303 	mul.w	r3, r1, r3
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	3332      	adds	r3, #50	@ 0x32
 80056ba:	4a08      	ldr	r2, [pc, #32]	@ (80056dc <UART_SetConfig+0x2d4>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	095b      	lsrs	r3, r3, #5
 80056c2:	f003 0207 	and.w	r2, r3, #7
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4422      	add	r2, r4
 80056ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056d0:	e106      	b.n	80058e0 <UART_SetConfig+0x4d8>
 80056d2:	bf00      	nop
 80056d4:	40011000 	.word	0x40011000
 80056d8:	40011400 	.word	0x40011400
 80056dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056f2:	4642      	mov	r2, r8
 80056f4:	464b      	mov	r3, r9
 80056f6:	1891      	adds	r1, r2, r2
 80056f8:	6239      	str	r1, [r7, #32]
 80056fa:	415b      	adcs	r3, r3
 80056fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005702:	4641      	mov	r1, r8
 8005704:	1854      	adds	r4, r2, r1
 8005706:	4649      	mov	r1, r9
 8005708:	eb43 0501 	adc.w	r5, r3, r1
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	00eb      	lsls	r3, r5, #3
 8005716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800571a:	00e2      	lsls	r2, r4, #3
 800571c:	4614      	mov	r4, r2
 800571e:	461d      	mov	r5, r3
 8005720:	4643      	mov	r3, r8
 8005722:	18e3      	adds	r3, r4, r3
 8005724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005728:	464b      	mov	r3, r9
 800572a:	eb45 0303 	adc.w	r3, r5, r3
 800572e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800573e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800574e:	4629      	mov	r1, r5
 8005750:	008b      	lsls	r3, r1, #2
 8005752:	4621      	mov	r1, r4
 8005754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005758:	4621      	mov	r1, r4
 800575a:	008a      	lsls	r2, r1, #2
 800575c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005760:	f7fb fa22 	bl	8000ba8 <__aeabi_uldivmod>
 8005764:	4602      	mov	r2, r0
 8005766:	460b      	mov	r3, r1
 8005768:	4b60      	ldr	r3, [pc, #384]	@ (80058ec <UART_SetConfig+0x4e4>)
 800576a:	fba3 2302 	umull	r2, r3, r3, r2
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	011c      	lsls	r4, r3, #4
 8005772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005776:	2200      	movs	r2, #0
 8005778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800577c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005784:	4642      	mov	r2, r8
 8005786:	464b      	mov	r3, r9
 8005788:	1891      	adds	r1, r2, r2
 800578a:	61b9      	str	r1, [r7, #24]
 800578c:	415b      	adcs	r3, r3
 800578e:	61fb      	str	r3, [r7, #28]
 8005790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005794:	4641      	mov	r1, r8
 8005796:	1851      	adds	r1, r2, r1
 8005798:	6139      	str	r1, [r7, #16]
 800579a:	4649      	mov	r1, r9
 800579c:	414b      	adcs	r3, r1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	f04f 0200 	mov.w	r2, #0
 80057a4:	f04f 0300 	mov.w	r3, #0
 80057a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057ac:	4659      	mov	r1, fp
 80057ae:	00cb      	lsls	r3, r1, #3
 80057b0:	4651      	mov	r1, sl
 80057b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b6:	4651      	mov	r1, sl
 80057b8:	00ca      	lsls	r2, r1, #3
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	4642      	mov	r2, r8
 80057c2:	189b      	adds	r3, r3, r2
 80057c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057c8:	464b      	mov	r3, r9
 80057ca:	460a      	mov	r2, r1
 80057cc:	eb42 0303 	adc.w	r3, r2, r3
 80057d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057ec:	4649      	mov	r1, r9
 80057ee:	008b      	lsls	r3, r1, #2
 80057f0:	4641      	mov	r1, r8
 80057f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f6:	4641      	mov	r1, r8
 80057f8:	008a      	lsls	r2, r1, #2
 80057fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057fe:	f7fb f9d3 	bl	8000ba8 <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4611      	mov	r1, r2
 8005808:	4b38      	ldr	r3, [pc, #224]	@ (80058ec <UART_SetConfig+0x4e4>)
 800580a:	fba3 2301 	umull	r2, r3, r3, r1
 800580e:	095b      	lsrs	r3, r3, #5
 8005810:	2264      	movs	r2, #100	@ 0x64
 8005812:	fb02 f303 	mul.w	r3, r2, r3
 8005816:	1acb      	subs	r3, r1, r3
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	3332      	adds	r3, #50	@ 0x32
 800581c:	4a33      	ldr	r2, [pc, #204]	@ (80058ec <UART_SetConfig+0x4e4>)
 800581e:	fba2 2303 	umull	r2, r3, r2, r3
 8005822:	095b      	lsrs	r3, r3, #5
 8005824:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005828:	441c      	add	r4, r3
 800582a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582e:	2200      	movs	r2, #0
 8005830:	673b      	str	r3, [r7, #112]	@ 0x70
 8005832:	677a      	str	r2, [r7, #116]	@ 0x74
 8005834:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005838:	4642      	mov	r2, r8
 800583a:	464b      	mov	r3, r9
 800583c:	1891      	adds	r1, r2, r2
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	415b      	adcs	r3, r3
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005848:	4641      	mov	r1, r8
 800584a:	1851      	adds	r1, r2, r1
 800584c:	6039      	str	r1, [r7, #0]
 800584e:	4649      	mov	r1, r9
 8005850:	414b      	adcs	r3, r1
 8005852:	607b      	str	r3, [r7, #4]
 8005854:	f04f 0200 	mov.w	r2, #0
 8005858:	f04f 0300 	mov.w	r3, #0
 800585c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005860:	4659      	mov	r1, fp
 8005862:	00cb      	lsls	r3, r1, #3
 8005864:	4651      	mov	r1, sl
 8005866:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800586a:	4651      	mov	r1, sl
 800586c:	00ca      	lsls	r2, r1, #3
 800586e:	4610      	mov	r0, r2
 8005870:	4619      	mov	r1, r3
 8005872:	4603      	mov	r3, r0
 8005874:	4642      	mov	r2, r8
 8005876:	189b      	adds	r3, r3, r2
 8005878:	66bb      	str	r3, [r7, #104]	@ 0x68
 800587a:	464b      	mov	r3, r9
 800587c:	460a      	mov	r2, r1
 800587e:	eb42 0303 	adc.w	r3, r2, r3
 8005882:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	663b      	str	r3, [r7, #96]	@ 0x60
 800588e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800589c:	4649      	mov	r1, r9
 800589e:	008b      	lsls	r3, r1, #2
 80058a0:	4641      	mov	r1, r8
 80058a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a6:	4641      	mov	r1, r8
 80058a8:	008a      	lsls	r2, r1, #2
 80058aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ae:	f7fb f97b 	bl	8000ba8 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4b0d      	ldr	r3, [pc, #52]	@ (80058ec <UART_SetConfig+0x4e4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	@ 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	3332      	adds	r3, #50	@ 0x32
 80058ca:	4a08      	ldr	r2, [pc, #32]	@ (80058ec <UART_SetConfig+0x4e4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 020f 	and.w	r2, r3, #15
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4422      	add	r2, r4
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058e6:	46bd      	mov	sp, r7
 80058e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ec:	51eb851f 	.word	0x51eb851f

080058f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058f0:	b084      	sub	sp, #16
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	f107 001c 	add.w	r0, r7, #28
 80058fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005902:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005906:	2b01      	cmp	r3, #1
 8005908:	d123      	bne.n	8005952 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800590e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800591e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005932:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005936:	2b01      	cmp	r3, #1
 8005938:	d105      	bne.n	8005946 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f9dc 	bl	8005d04 <USB_CoreReset>
 800594c:	4603      	mov	r3, r0
 800594e:	73fb      	strb	r3, [r7, #15]
 8005950:	e01b      	b.n	800598a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9d0 	bl	8005d04 <USB_CoreReset>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005968:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800596c:	2b00      	cmp	r3, #0
 800596e:	d106      	bne.n	800597e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	639a      	str	r2, [r3, #56]	@ 0x38
 800597c:	e005      	b.n	800598a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800598a:	7fbb      	ldrb	r3, [r7, #30]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d10b      	bne.n	80059a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f043 0206 	orr.w	r2, r3, #6
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr

080059b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f043 0201 	orr.w	r2, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 0201 	bic.w	r2, r3, #1
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d115      	bne.n	8005a4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a2a:	200a      	movs	r0, #10
 8005a2c:	f7fb feea 	bl	8001804 <HAL_Delay>
      ms += 10U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	330a      	adds	r3, #10
 8005a34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f956 	bl	8005ce8 <USB_GetMode>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d01e      	beq.n	8005a80 <USB_SetCurrentMode+0x84>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a46:	d9f0      	bls.n	8005a2a <USB_SetCurrentMode+0x2e>
 8005a48:	e01a      	b.n	8005a80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a4a:	78fb      	ldrb	r3, [r7, #3]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d115      	bne.n	8005a7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a5c:	200a      	movs	r0, #10
 8005a5e:	f7fb fed1 	bl	8001804 <HAL_Delay>
      ms += 10U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	330a      	adds	r3, #10
 8005a66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f93d 	bl	8005ce8 <USB_GetMode>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d005      	beq.n	8005a80 <USB_SetCurrentMode+0x84>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a78:	d9f0      	bls.n	8005a5c <USB_SetCurrentMode+0x60>
 8005a7a:	e001      	b.n	8005a80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e005      	b.n	8005a8c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a84:	d101      	bne.n	8005a8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005aae:	d901      	bls.n	8005ab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e01b      	b.n	8005aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	daf2      	bge.n	8005aa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	019b      	lsls	r3, r3, #6
 8005ac4:	f043 0220 	orr.w	r2, r3, #32
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	3301      	adds	r3, #1
 8005ad0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ad8:	d901      	bls.n	8005ade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e006      	b.n	8005aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d0f0      	beq.n	8005acc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b00:	2300      	movs	r3, #0
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	3301      	adds	r3, #1
 8005b08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b10:	d901      	bls.n	8005b16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e018      	b.n	8005b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	daf2      	bge.n	8005b04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2210      	movs	r2, #16
 8005b26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b34:	d901      	bls.n	8005b3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e006      	b.n	8005b48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b10      	cmp	r3, #16
 8005b44:	d0f0      	beq.n	8005b28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b46:	2300      	movs	r3, #0
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	@ 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	460b      	mov	r3, r1
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d123      	bne.n	8005bc2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b7a:	88bb      	ldrh	r3, [r7, #4]
 8005b7c:	3303      	adds	r3, #3
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e018      	b.n	8005bba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	031a      	lsls	r2, r3, #12
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b94:	461a      	mov	r2, r3
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61bb      	str	r3, [r7, #24]
 8005bba:	69ba      	ldr	r2, [r7, #24]
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d3e2      	bcc.n	8005b88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3724      	adds	r7, #36	@ 0x24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b08b      	sub	sp, #44	@ 0x2c
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	4613      	mov	r3, r2
 8005bdc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	089b      	lsrs	r3, r3, #2
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005bee:	88fb      	ldrh	r3, [r7, #6]
 8005bf0:	f003 0303 	and.w	r3, r3, #3
 8005bf4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	623b      	str	r3, [r7, #32]
 8005bfa:	e014      	b.n	8005c26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c10:	3301      	adds	r3, #1
 8005c12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	3301      	adds	r3, #1
 8005c18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	3301      	adds	r3, #1
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	6a3a      	ldr	r2, [r7, #32]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d3e6      	bcc.n	8005bfc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c2e:	8bfb      	ldrh	r3, [r7, #30]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d01e      	beq.n	8005c72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c34:	2300      	movs	r3, #0
 8005c36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f107 0310 	add.w	r3, r7, #16
 8005c44:	6812      	ldr	r2, [r2, #0]
 8005c46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	fa22 f303 	lsr.w	r3, r2, r3
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	701a      	strb	r2, [r3, #0]
      i++;
 8005c5a:	6a3b      	ldr	r3, [r7, #32]
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	3301      	adds	r3, #1
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c66:	8bfb      	ldrh	r3, [r7, #30]
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c6c:	8bfb      	ldrh	r3, [r7, #30]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1ea      	bne.n	8005c48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	372c      	adds	r7, #44	@ 0x2c
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4013      	ands	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c98:	68fb      	ldr	r3, [r7, #12]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b085      	sub	sp, #20
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	4013      	ands	r3, r2
 8005cd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cda:	68bb      	ldr	r3, [r7, #8]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3714      	adds	r7, #20
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d1c:	d901      	bls.n	8005d22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e01b      	b.n	8005d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	daf2      	bge.n	8005d10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f043 0201 	orr.w	r2, r3, #1
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d46:	d901      	bls.n	8005d4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e006      	b.n	8005d5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 0301 	and.w	r3, r3, #1
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d0f0      	beq.n	8005d3a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d68:	b084      	sub	sp, #16
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d92:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d119      	bne.n	8005df2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10a      	bne.n	8005ddc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dd4:	f043 0304 	orr.w	r3, r3, #4
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e014      	b.n	8005e06 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dea:	f023 0304 	bic.w	r3, r3, #4
 8005dee:	6013      	str	r3, [r2, #0]
 8005df0:	e009      	b.n	8005e06 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e00:	f023 0304 	bic.w	r3, r3, #4
 8005e04:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e06:	2110      	movs	r1, #16
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fe43 	bl	8005a94 <USB_FlushTxFifo>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d001      	beq.n	8005e18 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7ff fe6d 	bl	8005af8 <USB_FlushRxFifo>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d001      	beq.n	8005e28 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	e015      	b.n	8005e5a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e40:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4e:	461a      	mov	r2, r3
 8005e50:	2300      	movs	r3, #0
 8005e52:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	3301      	adds	r3, #1
 8005e58:	613b      	str	r3, [r7, #16]
 8005e5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e5e:	461a      	mov	r2, r3
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d3e3      	bcc.n	8005e2e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e72:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a18      	ldr	r2, [pc, #96]	@ (8005ed8 <USB_HostInit+0x170>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d10b      	bne.n	8005e94 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e82:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a15      	ldr	r2, [pc, #84]	@ (8005edc <USB_HostInit+0x174>)
 8005e88:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a14      	ldr	r2, [pc, #80]	@ (8005ee0 <USB_HostInit+0x178>)
 8005e8e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005e92:	e009      	b.n	8005ea8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2280      	movs	r2, #128	@ 0x80
 8005e98:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a11      	ldr	r2, [pc, #68]	@ (8005ee4 <USB_HostInit+0x17c>)
 8005e9e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a11      	ldr	r2, [pc, #68]	@ (8005ee8 <USB_HostInit+0x180>)
 8005ea4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ea8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d105      	bne.n	8005ebc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f043 0210 	orr.w	r2, r3, #16
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	699a      	ldr	r2, [r3, #24]
 8005ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8005eec <USB_HostInit+0x184>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3718      	adds	r7, #24
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ed4:	b004      	add	sp, #16
 8005ed6:	4770      	bx	lr
 8005ed8:	40040000 	.word	0x40040000
 8005edc:	01000200 	.word	0x01000200
 8005ee0:	00e00300 	.word	0x00e00300
 8005ee4:	00600080 	.word	0x00600080
 8005ee8:	004000e0 	.word	0x004000e0
 8005eec:	a3200008 	.word	0xa3200008

08005ef0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f0e:	f023 0303 	bic.w	r3, r3, #3
 8005f12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	78fb      	ldrb	r3, [r7, #3]
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d107      	bne.n	8005f42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f38:	461a      	mov	r2, r3
 8005f3a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f3e:	6053      	str	r3, [r2, #4]
 8005f40:	e00c      	b.n	8005f5c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d107      	bne.n	8005f58 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f54:	6053      	str	r3, [r2, #4]
 8005f56:	e001      	b.n	8005f5c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e000      	b.n	8005f5e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr

08005f6a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005f8a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f98:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005f9a:	2064      	movs	r0, #100	@ 0x64
 8005f9c:	f7fb fc32 	bl	8001804 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fac:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005fae:	200a      	movs	r0, #10
 8005fb0:	f7fb fc28 	bl	8001804 <HAL_Delay>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fe2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d109      	bne.n	8006002 <USB_DriveVbus+0x44>
 8005fee:	78fb      	ldrb	r3, [r7, #3]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d106      	bne.n	8006002 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ffc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006000:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800600c:	d109      	bne.n	8006022 <USB_DriveVbus+0x64>
 800600e:	78fb      	ldrb	r3, [r7, #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800601c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006020:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3714      	adds	r7, #20
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr

08006030 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	0c5b      	lsrs	r3, r3, #17
 800604e:	f003 0303 	and.w	r3, r3, #3
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	b29b      	uxth	r3, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	4608      	mov	r0, r1
 800608a:	4611      	mov	r1, r2
 800608c:	461a      	mov	r2, r3
 800608e:	4603      	mov	r3, r0
 8006090:	70fb      	strb	r3, [r7, #3]
 8006092:	460b      	mov	r3, r1
 8006094:	70bb      	strb	r3, [r7, #2]
 8006096:	4613      	mov	r3, r2
 8006098:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800609a:	2300      	movs	r3, #0
 800609c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060ae:	461a      	mov	r2, r3
 80060b0:	f04f 33ff 	mov.w	r3, #4294967295
 80060b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060ba:	2b03      	cmp	r3, #3
 80060bc:	d87c      	bhi.n	80061b8 <USB_HC_Init+0x138>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <USB_HC_Init+0x44>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	080060d5 	.word	0x080060d5
 80060c8:	0800617b 	.word	0x0800617b
 80060cc:	080060d5 	.word	0x080060d5
 80060d0:	0800613d 	.word	0x0800613d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060d4:	78fb      	ldrb	r3, [r7, #3]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e0:	461a      	mov	r2, r3
 80060e2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80060e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	da10      	bge.n	8006112 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	78fa      	ldrb	r2, [r7, #3]
 8006100:	0151      	lsls	r1, r2, #5
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	440a      	add	r2, r1
 8006106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800610a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800610e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006110:	e055      	b.n	80061be <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a6f      	ldr	r2, [pc, #444]	@ (80062d4 <USB_HC_Init+0x254>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d151      	bne.n	80061be <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	0151      	lsls	r1, r2, #5
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	440a      	add	r2, r1
 8006130:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006134:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006138:	60d3      	str	r3, [r2, #12]
      break;
 800613a:	e040      	b.n	80061be <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800613c:	78fb      	ldrb	r3, [r7, #3]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006148:	461a      	mov	r2, r3
 800614a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800614e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006150:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006154:	2b00      	cmp	r3, #0
 8006156:	da34      	bge.n	80061c2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006158:	78fb      	ldrb	r3, [r7, #3]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	4413      	add	r3, r2
 8006160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	78fa      	ldrb	r2, [r7, #3]
 8006168:	0151      	lsls	r1, r2, #5
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	440a      	add	r2, r1
 800616e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006176:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006178:	e023      	b.n	80061c2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	4413      	add	r3, r2
 8006182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006186:	461a      	mov	r2, r3
 8006188:	f240 2325 	movw	r3, #549	@ 0x225
 800618c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800618e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006192:	2b00      	cmp	r3, #0
 8006194:	da17      	bge.n	80061c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	4413      	add	r3, r2
 800619e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	0151      	lsls	r1, r2, #5
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	440a      	add	r2, r1
 80061ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061b0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80061b4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061b6:	e006      	b.n	80061c6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	77fb      	strb	r3, [r7, #31]
      break;
 80061bc:	e004      	b.n	80061c8 <USB_HC_Init+0x148>
      break;
 80061be:	bf00      	nop
 80061c0:	e002      	b.n	80061c8 <USB_HC_Init+0x148>
      break;
 80061c2:	bf00      	nop
 80061c4:	e000      	b.n	80061c8 <USB_HC_Init+0x148>
      break;
 80061c6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d4:	461a      	mov	r2, r3
 80061d6:	2300      	movs	r3, #0
 80061d8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	693a      	ldr	r2, [r7, #16]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061f4:	f043 0302 	orr.w	r3, r3, #2
 80061f8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006200:	699a      	ldr	r2, [r3, #24]
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	6939      	ldr	r1, [r7, #16]
 8006210:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006228:	2b00      	cmp	r3, #0
 800622a:	da03      	bge.n	8006234 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800622c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006230:	61bb      	str	r3, [r7, #24]
 8006232:	e001      	b.n	8006238 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006234:	2300      	movs	r3, #0
 8006236:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7ff fef9 	bl	8006030 <USB_GetHostSpeed>
 800623e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006240:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006244:	2b02      	cmp	r3, #2
 8006246:	d106      	bne.n	8006256 <USB_HC_Init+0x1d6>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d003      	beq.n	8006256 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800624e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	e001      	b.n	800625a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800625a:	787b      	ldrb	r3, [r7, #1]
 800625c:	059b      	lsls	r3, r3, #22
 800625e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006262:	78bb      	ldrb	r3, [r7, #2]
 8006264:	02db      	lsls	r3, r3, #11
 8006266:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800626a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800626c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006270:	049b      	lsls	r3, r3, #18
 8006272:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006276:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006278:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800627a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800627e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	431a      	orrs	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006288:	78fa      	ldrb	r2, [r7, #3]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	440a      	add	r2, r1
 8006290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006294:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006298:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800629a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800629e:	2b03      	cmp	r3, #3
 80062a0:	d003      	beq.n	80062aa <USB_HC_Init+0x22a>
 80062a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d10f      	bne.n	80062ca <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062aa:	78fb      	ldrb	r3, [r7, #3]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	78fa      	ldrb	r2, [r7, #3]
 80062ba:	0151      	lsls	r1, r2, #5
 80062bc:	693a      	ldr	r2, [r7, #16]
 80062be:	440a      	add	r2, r1
 80062c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062c8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3720      	adds	r7, #32
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40040000 	.word	0x40040000

080062d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b08c      	sub	sp, #48	@ 0x30
 80062dc:	af02      	add	r7, sp, #8
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	785b      	ldrb	r3, [r3, #1]
 80062ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80062f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80062f4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	4a5d      	ldr	r2, [pc, #372]	@ (8006470 <USB_HC_StartXfer+0x198>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d12f      	bne.n	800635e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d11c      	bne.n	800633e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	7c9b      	ldrb	r3, [r3, #18]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d003      	beq.n	8006314 <USB_HC_StartXfer+0x3c>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	7c9b      	ldrb	r3, [r3, #18]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d124      	bne.n	800635e <USB_HC_StartXfer+0x86>
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	799b      	ldrb	r3, [r3, #6]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d120      	bne.n	800635e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	4413      	add	r3, r2
 8006324:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	6a3a      	ldr	r2, [r7, #32]
 8006330:	440a      	add	r2, r1
 8006332:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800633a:	60d3      	str	r3, [r2, #12]
 800633c:	e00f      	b.n	800635e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <USB_HC_StartXfer+0x86>
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	795b      	ldrb	r3, [r3, #5]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d107      	bne.n	800635e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	4619      	mov	r1, r3
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 fb6b 	bl	8006a30 <USB_DoPing>
        return HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	e232      	b.n	80067c4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	799b      	ldrb	r3, [r3, #6]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d158      	bne.n	8006418 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006366:	2301      	movs	r3, #1
 8006368:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	78db      	ldrb	r3, [r3, #3]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006372:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	8a92      	ldrh	r2, [r2, #20]
 8006378:	fb03 f202 	mul.w	r2, r3, r2
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	61da      	str	r2, [r3, #28]
 8006380:	e07c      	b.n	800647c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	7c9b      	ldrb	r3, [r3, #18]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d130      	bne.n	80063ec <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006390:	d918      	bls.n	80063c4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	8a9b      	ldrh	r3, [r3, #20]
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	69da      	ldr	r2, [r3, #28]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d003      	beq.n	80063b4 <USB_HC_StartXfer+0xdc>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d103      	bne.n	80063bc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2202      	movs	r2, #2
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e05f      	b.n	800647c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2201      	movs	r2, #1
 80063c0:	60da      	str	r2, [r3, #12]
 80063c2:	e05b      	b.n	800647c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	6a1a      	ldr	r2, [r3, #32]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d007      	beq.n	80063e4 <USB_HC_StartXfer+0x10c>
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d003      	beq.n	80063e4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2204      	movs	r2, #4
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e04b      	b.n	800647c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2203      	movs	r2, #3
 80063e8:	60da      	str	r2, [r3, #12]
 80063ea:	e047      	b.n	800647c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80063ec:	79fb      	ldrb	r3, [r7, #7]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d10d      	bne.n	800640e <USB_HC_StartXfer+0x136>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	8a92      	ldrh	r2, [r2, #20]
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d907      	bls.n	800640e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80063fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	8a92      	ldrh	r2, [r2, #20]
 8006404:	fb03 f202 	mul.w	r2, r3, r2
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	61da      	str	r2, [r3, #28]
 800640c:	e036      	b.n	800647c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	6a1a      	ldr	r2, [r3, #32]
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	61da      	str	r2, [r3, #28]
 8006416:	e031      	b.n	800647c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d018      	beq.n	8006452 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	8a92      	ldrh	r2, [r2, #20]
 8006428:	4413      	add	r3, r2
 800642a:	3b01      	subs	r3, #1
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	8a92      	ldrh	r2, [r2, #20]
 8006430:	fbb3 f3f2 	udiv	r3, r3, r2
 8006434:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006436:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006438:	8b7b      	ldrh	r3, [r7, #26]
 800643a:	429a      	cmp	r2, r3
 800643c:	d90b      	bls.n	8006456 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800643e:	8b7b      	ldrh	r3, [r7, #26]
 8006440:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006442:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	8a92      	ldrh	r2, [r2, #20]
 8006448:	fb03 f202 	mul.w	r2, r3, r2
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	61da      	str	r2, [r3, #28]
 8006450:	e001      	b.n	8006456 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006452:	2301      	movs	r3, #1
 8006454:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	78db      	ldrb	r3, [r3, #3]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00a      	beq.n	8006474 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800645e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	8a92      	ldrh	r2, [r2, #20]
 8006464:	fb03 f202 	mul.w	r2, r3, r2
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	61da      	str	r2, [r3, #28]
 800646c:	e006      	b.n	800647c <USB_HC_StartXfer+0x1a4>
 800646e:	bf00      	nop
 8006470:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006484:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006486:	04d9      	lsls	r1, r3, #19
 8006488:	4ba3      	ldr	r3, [pc, #652]	@ (8006718 <USB_HC_StartXfer+0x440>)
 800648a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800648c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	7d9b      	ldrb	r3, [r3, #22]
 8006492:	075b      	lsls	r3, r3, #29
 8006494:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006498:	69f9      	ldr	r1, [r7, #28]
 800649a:	0148      	lsls	r0, r1, #5
 800649c:	6a39      	ldr	r1, [r7, #32]
 800649e:	4401      	add	r1, r0
 80064a0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064a4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6999      	ldr	r1, [r3, #24]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	015a      	lsls	r2, r3, #5
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	4413      	add	r3, r2
 80064ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064be:	460a      	mov	r2, r1
 80064c0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	bf0c      	ite	eq
 80064d2:	2301      	moveq	r3, #1
 80064d4:	2300      	movne	r3, #0
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	6a3a      	ldr	r2, [r7, #32]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064f4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80064f8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	7e7b      	ldrb	r3, [r7, #25]
 800650a:	075b      	lsls	r3, r3, #29
 800650c:	69f9      	ldr	r1, [r7, #28]
 800650e:	0148      	lsls	r0, r1, #5
 8006510:	6a39      	ldr	r1, [r7, #32]
 8006512:	4401      	add	r1, r0
 8006514:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	799b      	ldrb	r3, [r3, #6]
 8006520:	2b01      	cmp	r3, #1
 8006522:	f040 80c3 	bne.w	80066ac <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	7c5b      	ldrb	r3, [r3, #17]
 800652a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006530:	4313      	orrs	r3, r2
 8006532:	69fa      	ldr	r2, [r7, #28]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	6a3a      	ldr	r2, [r7, #32]
 8006538:	440a      	add	r2, r1
 800653a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800653e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006542:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006544:	69fb      	ldr	r3, [r7, #28]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	4413      	add	r3, r2
 800654c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	6a3a      	ldr	r2, [r7, #32]
 8006558:	440a      	add	r2, r1
 800655a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800655e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006562:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	79db      	ldrb	r3, [r3, #7]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d123      	bne.n	80065b4 <USB_HC_StartXfer+0x2dc>
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	78db      	ldrb	r3, [r3, #3]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d11f      	bne.n	80065b4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	4413      	add	r3, r2
 800657c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	0151      	lsls	r1, r2, #5
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	440a      	add	r2, r1
 800658a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800658e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006592:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	4413      	add	r3, r2
 800659c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	6a3a      	ldr	r2, [r7, #32]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065b2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	7c9b      	ldrb	r3, [r3, #18]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d003      	beq.n	80065c4 <USB_HC_StartXfer+0x2ec>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	7c9b      	ldrb	r3, [r3, #18]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d117      	bne.n	80065f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d113      	bne.n	80065f4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	78db      	ldrb	r3, [r3, #3]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d10f      	bne.n	80065f4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	6a3a      	ldr	r2, [r7, #32]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065f2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	7c9b      	ldrb	r3, [r3, #18]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d162      	bne.n	80066c2 <USB_HC_StartXfer+0x3ea>
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	78db      	ldrb	r3, [r3, #3]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d15e      	bne.n	80066c2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	3b01      	subs	r3, #1
 800660a:	2b03      	cmp	r3, #3
 800660c:	d858      	bhi.n	80066c0 <USB_HC_StartXfer+0x3e8>
 800660e:	a201      	add	r2, pc, #4	@ (adr r2, 8006614 <USB_HC_StartXfer+0x33c>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006625 	.word	0x08006625
 8006618:	08006647 	.word	0x08006647
 800661c:	08006669 	.word	0x08006669
 8006620:	0800668b 	.word	0x0800668b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800663e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006642:	6053      	str	r3, [r2, #4]
          break;
 8006644:	e03d      	b.n	80066c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	6a3b      	ldr	r3, [r7, #32]
 800664c:	4413      	add	r3, r2
 800664e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	69fa      	ldr	r2, [r7, #28]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	6a3a      	ldr	r2, [r7, #32]
 800665a:	440a      	add	r2, r1
 800665c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006660:	f043 030e 	orr.w	r3, r3, #14
 8006664:	6053      	str	r3, [r2, #4]
          break;
 8006666:	e02c      	b.n	80066c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	4413      	add	r3, r2
 8006670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	6a3a      	ldr	r2, [r7, #32]
 800667c:	440a      	add	r2, r1
 800667e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006686:	6053      	str	r3, [r2, #4]
          break;
 8006688:	e01b      	b.n	80066c2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	6a3b      	ldr	r3, [r7, #32]
 8006690:	4413      	add	r3, r2
 8006692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	0151      	lsls	r1, r2, #5
 800669c:	6a3a      	ldr	r2, [r7, #32]
 800669e:	440a      	add	r2, r1
 80066a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066a8:	6053      	str	r3, [r2, #4]
          break;
 80066aa:	e00a      	b.n	80066c2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6053      	str	r3, [r2, #4]
 80066be:	e000      	b.n	80066c2 <USB_HC_StartXfer+0x3ea>
          break;
 80066c0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	015a      	lsls	r2, r3, #5
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	4413      	add	r3, r2
 80066ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066d8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	78db      	ldrb	r3, [r3, #3]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066e8:	613b      	str	r3, [r7, #16]
 80066ea:	e003      	b.n	80066f4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066f2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066fa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006708:	461a      	mov	r2, r3
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d003      	beq.n	800671c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006714:	2300      	movs	r3, #0
 8006716:	e055      	b.n	80067c4 <USB_HC_StartXfer+0x4ec>
 8006718:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	78db      	ldrb	r3, [r3, #3]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d14e      	bne.n	80067c2 <USB_HC_StartXfer+0x4ea>
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d04a      	beq.n	80067c2 <USB_HC_StartXfer+0x4ea>
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	79db      	ldrb	r3, [r3, #7]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d146      	bne.n	80067c2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	7c9b      	ldrb	r3, [r3, #18]
 8006738:	2b03      	cmp	r3, #3
 800673a:	d831      	bhi.n	80067a0 <USB_HC_StartXfer+0x4c8>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <USB_HC_StartXfer+0x46c>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006755 	.word	0x08006755
 8006748:	08006779 	.word	0x08006779
 800674c:	08006755 	.word	0x08006755
 8006750:	08006779 	.word	0x08006779
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	3303      	adds	r3, #3
 800675a:	089b      	lsrs	r3, r3, #2
 800675c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800675e:	8afa      	ldrh	r2, [r7, #22]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006764:	b29b      	uxth	r3, r3
 8006766:	429a      	cmp	r2, r3
 8006768:	d91c      	bls.n	80067a4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	f043 0220 	orr.w	r2, r3, #32
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	619a      	str	r2, [r3, #24]
        }
        break;
 8006776:	e015      	b.n	80067a4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	3303      	adds	r3, #3
 800677e:	089b      	lsrs	r3, r3, #2
 8006780:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006782:	8afa      	ldrh	r2, [r7, #22]
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	b29b      	uxth	r3, r3
 800678e:	429a      	cmp	r2, r3
 8006790:	d90a      	bls.n	80067a8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	699b      	ldr	r3, [r3, #24]
 8006796:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	619a      	str	r2, [r3, #24]
        }
        break;
 800679e:	e003      	b.n	80067a8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80067a0:	bf00      	nop
 80067a2:	e002      	b.n	80067aa <USB_HC_StartXfer+0x4d2>
        break;
 80067a4:	bf00      	nop
 80067a6:	e000      	b.n	80067aa <USB_HC_StartXfer+0x4d2>
        break;
 80067a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	6999      	ldr	r1, [r3, #24]
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	785a      	ldrb	r2, [r3, #1]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	2000      	movs	r0, #0
 80067ba:	9000      	str	r0, [sp, #0]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7ff f9c9 	bl	8005b54 <USB_WritePacket>
  }

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3728      	adds	r7, #40	@ 0x28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	b29b      	uxth	r3, r3
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b089      	sub	sp, #36	@ 0x24
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
 80067f6:	460b      	mov	r3, r1
 80067f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80067fe:	78fb      	ldrb	r3, [r7, #3]
 8006800:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006806:	69bb      	ldr	r3, [r7, #24]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	4413      	add	r3, r2
 800680e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	0c9b      	lsrs	r3, r3, #18
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	0fdb      	lsrs	r3, r3, #31
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	0fdb      	lsrs	r3, r3, #31
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b20      	cmp	r3, #32
 8006852:	d10d      	bne.n	8006870 <USB_HC_Halt+0x82>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10a      	bne.n	8006870 <USB_HC_Halt+0x82>
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d005      	beq.n	800686c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d002      	beq.n	800686c <USB_HC_Halt+0x7e>
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b03      	cmp	r3, #3
 800686a:	d101      	bne.n	8006870 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	e0d8      	b.n	8006a22 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <USB_HC_Halt+0x8e>
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b02      	cmp	r3, #2
 800687a:	d173      	bne.n	8006964 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69ba      	ldr	r2, [r7, #24]
 800688c:	0151      	lsls	r1, r2, #5
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	440a      	add	r2, r1
 8006892:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006896:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800689a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 0320 	and.w	r3, r3, #32
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d14a      	bne.n	800693e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d133      	bne.n	800691c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	4413      	add	r3, r2
 80068bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	0151      	lsls	r1, r2, #5
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	440a      	add	r2, r1
 80068ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69ba      	ldr	r2, [r7, #24]
 80068e4:	0151      	lsls	r1, r2, #5
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	440a      	add	r2, r1
 80068ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80068f2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	3301      	adds	r3, #1
 80068f8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006900:	d82e      	bhi.n	8006960 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006914:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006918:	d0ec      	beq.n	80068f4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800691a:	e081      	b.n	8006a20 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800693a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800693c:	e070      	b.n	8006a20 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	440a      	add	r2, r1
 8006954:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006958:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800695c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800695e:	e05f      	b.n	8006a20 <USB_HC_Halt+0x232>
            break;
 8006960:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006962:	e05d      	b.n	8006a20 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800697e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006982:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006990:	2b00      	cmp	r3, #0
 8006992:	d133      	bne.n	80069fc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069d2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	3301      	adds	r3, #1
 80069d8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069e0:	d81d      	bhi.n	8006a1e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069f8:	d0ec      	beq.n	80069d4 <USB_HC_Halt+0x1e6>
 80069fa:	e011      	b.n	8006a20 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	0151      	lsls	r1, r2, #5
 8006a0e:	69fa      	ldr	r2, [r7, #28]
 8006a10:	440a      	add	r2, r1
 8006a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a1a:	6013      	str	r3, [r2, #0]
 8006a1c:	e000      	b.n	8006a20 <USB_HC_Halt+0x232>
          break;
 8006a1e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3724      	adds	r7, #36	@ 0x24
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr
	...

08006a30 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b087      	sub	sp, #28
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	460b      	mov	r3, r1
 8006a3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a44:	2301      	movs	r3, #1
 8006a46:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	04da      	lsls	r2, r3, #19
 8006a4c:	4b15      	ldr	r3, [pc, #84]	@ (8006aa4 <USB_DoPing+0x74>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	0151      	lsls	r1, r2, #5
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	440a      	add	r2, r1
 8006a58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a60:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a78:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a80:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a8e:	461a      	mov	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	371c      	adds	r7, #28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	1ff80000 	.word	0x1ff80000

08006aa8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f7fe ff8c 	bl	80059da <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ac2:	2110      	movs	r1, #16
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f7fe ffe5 	bl	8005a94 <USB_FlushTxFifo>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7ff f80f 	bl	8005af8 <USB_FlushRxFifo>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d001      	beq.n	8006ae4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	e01f      	b.n	8006b2a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b00:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b08:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b10:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1e:	461a      	mov	r2, r3
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61bb      	str	r3, [r7, #24]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b0f      	cmp	r3, #15
 8006b2e:	d9dc      	bls.n	8006aea <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b30:	2300      	movs	r3, #0
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	e034      	b.n	8006ba0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b4c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b5c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b7c:	d80c      	bhi.n	8006b98 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b94:	d0ec      	beq.n	8006b70 <USB_StopHost+0xc8>
 8006b96:	e000      	b.n	8006b9a <USB_StopHost+0xf2>
        break;
 8006b98:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61bb      	str	r3, [r7, #24]
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d9c7      	bls.n	8006b36 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bac:	461a      	mov	r2, r3
 8006bae:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bba:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fe fefb 	bl	80059b8 <USB_EnableGlobalInt>

  return ret;
 8006bc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b089      	sub	sp, #36	@ 0x24
 8006bd0:	af04      	add	r7, sp, #16
 8006bd2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	2102      	movs	r1, #2
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fc85 	bl	80074ea <USBH_FindInterface>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	2bff      	cmp	r3, #255	@ 0xff
 8006be8:	d002      	beq.n	8006bf0 <USBH_CDC_InterfaceInit+0x24>
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d901      	bls.n	8006bf4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	e13d      	b.n	8006e70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fc5a 	bl	80074b2 <USBH_SelectInterface>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d001      	beq.n	8006c0c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e131      	b.n	8006e70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c12:	2050      	movs	r0, #80	@ 0x50
 8006c14:	f002 fb64 	bl	80092e0 <malloc>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e11f      	b.n	8006e70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c30:	2250      	movs	r2, #80	@ 0x50
 8006c32:	2100      	movs	r1, #0
 8006c34:	68b8      	ldr	r0, [r7, #8]
 8006c36:	f003 f9a2 	bl	8009f7e <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c3a:	7bfb      	ldrb	r3, [r7, #15]
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	211a      	movs	r1, #26
 8006c40:	fb01 f303 	mul.w	r3, r1, r3
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	b25b      	sxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	da15      	bge.n	8006c7e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	211a      	movs	r1, #26
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c62:	781a      	ldrb	r2, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	211a      	movs	r1, #26
 8006c6e:	fb01 f303 	mul.w	r3, r1, r3
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c78:	881a      	ldrh	r2, [r3, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	785b      	ldrb	r3, [r3, #1]
 8006c82:	4619      	mov	r1, r3
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 ffbe 	bl	8008c06 <USBH_AllocPipe>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	7819      	ldrb	r1, [r3, #0]
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	7858      	ldrb	r0, [r3, #1]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	8952      	ldrh	r2, [r2, #10]
 8006caa:	9202      	str	r2, [sp, #8]
 8006cac:	2203      	movs	r2, #3
 8006cae:	9201      	str	r2, [sp, #4]
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4623      	mov	r3, r4
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f001 ff76 	bl	8008ba8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f002 fa85 	bl	80091d4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	210a      	movs	r1, #10
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fc0a 	bl	80074ea <USBH_FindInterface>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cda:	7bfb      	ldrb	r3, [r7, #15]
 8006cdc:	2bff      	cmp	r3, #255	@ 0xff
 8006cde:	d002      	beq.n	8006ce6 <USBH_CDC_InterfaceInit+0x11a>
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d901      	bls.n	8006cea <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e0c2      	b.n	8006e70 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	211a      	movs	r1, #26
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da16      	bge.n	8006d30 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	211a      	movs	r1, #26
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	211a      	movs	r1, #26
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	835a      	strh	r2, [r3, #26]
 8006d2e:	e015      	b.n	8006d5c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	211a      	movs	r1, #26
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d46:	7bfb      	ldrb	r3, [r7, #15]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	211a      	movs	r1, #26
 8006d4c:	fb01 f303 	mul.w	r3, r1, r3
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d56:	881a      	ldrh	r2, [r3, #0]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	687a      	ldr	r2, [r7, #4]
 8006d60:	211a      	movs	r1, #26
 8006d62:	fb01 f303 	mul.w	r3, r1, r3
 8006d66:	4413      	add	r3, r2
 8006d68:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	da16      	bge.n	8006da2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	211a      	movs	r1, #26
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	211a      	movs	r1, #26
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006d9a:	881a      	ldrh	r2, [r3, #0]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	835a      	strh	r2, [r3, #26]
 8006da0:	e015      	b.n	8006dce <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	211a      	movs	r1, #26
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	211a      	movs	r1, #26
 8006dbe:	fb01 f303 	mul.w	r3, r1, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006dc8:	881a      	ldrh	r2, [r3, #0]
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	7b9b      	ldrb	r3, [r3, #14]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 ff16 	bl	8008c06 <USBH_AllocPipe>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	7bdb      	ldrb	r3, [r3, #15]
 8006de6:	4619      	mov	r1, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 ff0c 	bl	8008c06 <USBH_AllocPipe>
 8006dee:	4603      	mov	r3, r0
 8006df0:	461a      	mov	r2, r3
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	7b59      	ldrb	r1, [r3, #13]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	7b98      	ldrb	r0, [r3, #14]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	8b12      	ldrh	r2, [r2, #24]
 8006e0e:	9202      	str	r2, [sp, #8]
 8006e10:	2202      	movs	r2, #2
 8006e12:	9201      	str	r2, [sp, #4]
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	4623      	mov	r3, r4
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fec4 	bl	8008ba8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	7b19      	ldrb	r1, [r3, #12]
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	7bd8      	ldrb	r0, [r3, #15]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	8b52      	ldrh	r2, [r2, #26]
 8006e38:	9202      	str	r2, [sp, #8]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	9201      	str	r2, [sp, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	4623      	mov	r3, r4
 8006e42:	4602      	mov	r2, r0
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 feaf 	bl	8008ba8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	7b5b      	ldrb	r3, [r3, #13]
 8006e56:	2200      	movs	r2, #0
 8006e58:	4619      	mov	r1, r3
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f002 f9ba 	bl	80091d4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	7b1b      	ldrb	r3, [r3, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	4619      	mov	r1, r3
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f002 f9b3 	bl	80091d4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3714      	adds	r7, #20
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd90      	pop	{r4, r7, pc}

08006e78 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 fea4 	bl	8008be6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fecf 	bl	8008c48 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	7b1b      	ldrb	r3, [r3, #12]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00e      	beq.n	8006ed6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	7b1b      	ldrb	r3, [r3, #12]
 8006ebc:	4619      	mov	r1, r3
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fe91 	bl	8008be6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	7b1b      	ldrb	r3, [r3, #12]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 febc 	bl	8008c48 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	7b5b      	ldrb	r3, [r3, #13]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00e      	beq.n	8006efc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	7b5b      	ldrb	r3, [r3, #13]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fe7e 	bl	8008be6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	7b5b      	ldrb	r3, [r3, #13]
 8006eee:	4619      	mov	r1, r3
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fea9 	bl	8008c48 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f002 f9ed 	bl	80092f0 <free>
    phost->pActiveClass->pData = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	3340      	adds	r3, #64	@ 0x40
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f8b1 	bl	80070aa <GetLineCoding>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f4c:	7afb      	ldrb	r3, [r7, #11]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d105      	bne.n	8006f5e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f58:	2102      	movs	r1, #2
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f5e:	7afb      	ldrb	r3, [r7, #11]
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f7e:	69db      	ldr	r3, [r3, #28]
 8006f80:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006f88:	2b04      	cmp	r3, #4
 8006f8a:	d877      	bhi.n	800707c <USBH_CDC_Process+0x114>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <USBH_CDC_Process+0x2c>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fa9 	.word	0x08006fa9
 8006f98:	08006faf 	.word	0x08006faf
 8006f9c:	08006fdf 	.word	0x08006fdf
 8006fa0:	08007053 	.word	0x08007053
 8006fa4:	08007061 	.word	0x08007061
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73fb      	strb	r3, [r7, #15]
      break;
 8006fac:	e06d      	b.n	800708a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fb2:	4619      	mov	r1, r3
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f897 	bl	80070e8 <SetLineCoding>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fbe:	7bbb      	ldrb	r3, [r7, #14]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d104      	bne.n	8006fce <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fcc:	e058      	b.n	8007080 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d055      	beq.n	8007080 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006fdc:	e050      	b.n	8007080 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	3340      	adds	r3, #64	@ 0x40
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f860 	bl	80070aa <GetLineCoding>
 8006fea:	4603      	mov	r3, r0
 8006fec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d126      	bne.n	8007042 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007006:	791b      	ldrb	r3, [r3, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d13b      	bne.n	8007084 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007016:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007018:	429a      	cmp	r2, r3
 800701a:	d133      	bne.n	8007084 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007026:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007028:	429a      	cmp	r2, r3
 800702a:	d12b      	bne.n	8007084 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007034:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007036:	429a      	cmp	r2, r3
 8007038:	d124      	bne.n	8007084 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f958 	bl	80072f0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007040:	e020      	b.n	8007084 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007042:	7bbb      	ldrb	r3, [r7, #14]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d01d      	beq.n	8007084 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2204      	movs	r2, #4
 800704c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007050:	e018      	b.n	8007084 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f867 	bl	8007126 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f8da 	bl	8007212 <CDC_ProcessReception>
      break;
 800705e:	e014      	b.n	800708a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f001 f81a 	bl	800809c <USBH_ClrFeature>
 8007068:	4603      	mov	r3, r0
 800706a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800707a:	e005      	b.n	8007088 <USBH_CDC_Process+0x120>

    default:
      break;
 800707c:	bf00      	nop
 800707e:	e004      	b.n	800708a <USBH_CDC_Process+0x122>
      break;
 8007080:	bf00      	nop
 8007082:	e002      	b.n	800708a <USBH_CDC_Process+0x122>
      break;
 8007084:	bf00      	nop
 8007086:	e000      	b.n	800708a <USBH_CDC_Process+0x122>
      break;
 8007088:	bf00      	nop

  }

  return status;
 800708a:	7bfb      	ldrb	r3, [r7, #15]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	370c      	adds	r7, #12
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr

080070aa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b082      	sub	sp, #8
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	6078      	str	r0, [r7, #4]
 80070b2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	22a1      	movs	r2, #161	@ 0xa1
 80070b8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2221      	movs	r2, #33	@ 0x21
 80070be:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2207      	movs	r2, #7
 80070d0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2207      	movs	r2, #7
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f001 fb14 	bl	8008706 <USBH_CtlReq>
 80070de:	4603      	mov	r3, r0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2221      	movs	r2, #33	@ 0x21
 80070f6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2220      	movs	r2, #32
 80070fc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2207      	movs	r2, #7
 800710e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2207      	movs	r2, #7
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 faf5 	bl	8008706 <USBH_CtlReq>
 800711c:	4603      	mov	r3, r0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b086      	sub	sp, #24
 800712a:	af02      	add	r7, sp, #8
 800712c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007134:	69db      	ldr	r3, [r3, #28]
 8007136:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007138:	2300      	movs	r3, #0
 800713a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007142:	2b01      	cmp	r3, #1
 8007144:	d002      	beq.n	800714c <CDC_ProcessTransmission+0x26>
 8007146:	2b02      	cmp	r3, #2
 8007148:	d023      	beq.n	8007192 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800714a:	e05e      	b.n	800720a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007150:	68fa      	ldr	r2, [r7, #12]
 8007152:	8b12      	ldrh	r2, [r2, #24]
 8007154:	4293      	cmp	r3, r2
 8007156:	d90b      	bls.n	8007170 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	69d9      	ldr	r1, [r3, #28]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8b1a      	ldrh	r2, [r3, #24]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	7b5b      	ldrb	r3, [r3, #13]
 8007164:	2001      	movs	r0, #1
 8007166:	9000      	str	r0, [sp, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f001 fcda 	bl	8008b22 <USBH_BulkSendData>
 800716e:	e00b      	b.n	8007188 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007178:	b29a      	uxth	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	7b5b      	ldrb	r3, [r3, #13]
 800717e:	2001      	movs	r0, #1
 8007180:	9000      	str	r0, [sp, #0]
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f001 fccd 	bl	8008b22 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2202      	movs	r2, #2
 800718c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007190:	e03b      	b.n	800720a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7b5b      	ldrb	r3, [r3, #13]
 8007196:	4619      	mov	r1, r3
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fff1 	bl	8009180 <USBH_LL_GetURBState>
 800719e:	4603      	mov	r3, r0
 80071a0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071a2:	7afb      	ldrb	r3, [r7, #11]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d128      	bne.n	80071fa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071ac:	68fa      	ldr	r2, [r7, #12]
 80071ae:	8b12      	ldrh	r2, [r2, #24]
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d90e      	bls.n	80071d2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	8b12      	ldrh	r2, [r2, #24]
 80071bc:	1a9a      	subs	r2, r3, r2
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	69db      	ldr	r3, [r3, #28]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	8b12      	ldrh	r2, [r2, #24]
 80071ca:	441a      	add	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	61da      	str	r2, [r3, #28]
 80071d0:	e002      	b.n	80071d8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2200      	movs	r2, #0
 80071d6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d004      	beq.n	80071ea <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071e8:	e00e      	b.n	8007208 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f868 	bl	80072c8 <USBH_CDC_TransmitCallback>
      break;
 80071f8:	e006      	b.n	8007208 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d103      	bne.n	8007208 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007208:	bf00      	nop
  }
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b086      	sub	sp, #24
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007220:	69db      	ldr	r3, [r3, #28]
 8007222:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007224:	2300      	movs	r3, #0
 8007226:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800722e:	2b03      	cmp	r3, #3
 8007230:	d002      	beq.n	8007238 <CDC_ProcessReception+0x26>
 8007232:	2b04      	cmp	r3, #4
 8007234:	d00e      	beq.n	8007254 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007236:	e043      	b.n	80072c0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	6a19      	ldr	r1, [r3, #32]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	8b5a      	ldrh	r2, [r3, #26]
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	7b1b      	ldrb	r3, [r3, #12]
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fc91 	bl	8008b6c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	2204      	movs	r2, #4
 800724e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007252:	e035      	b.n	80072c0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	7b1b      	ldrb	r3, [r3, #12]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 ff90 	bl	8009180 <USBH_LL_GetURBState>
 8007260:	4603      	mov	r3, r0
 8007262:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007264:	7cfb      	ldrb	r3, [r7, #19]
 8007266:	2b01      	cmp	r3, #1
 8007268:	d129      	bne.n	80072be <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	7b1b      	ldrb	r3, [r3, #12]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fef3 	bl	800905c <USBH_LL_GetLastXferSize>
 8007276:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	429a      	cmp	r2, r3
 8007280:	d016      	beq.n	80072b0 <CDC_ProcessReception+0x9e>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	8b5b      	ldrh	r3, [r3, #26]
 8007286:	461a      	mov	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4293      	cmp	r3, r2
 800728c:	d910      	bls.n	80072b0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a1a      	ldr	r2, [r3, #32]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	441a      	add	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2203      	movs	r2, #3
 80072aa:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80072ae:	e006      	b.n	80072be <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f80f 	bl	80072dc <USBH_CDC_ReceiveCallback>
      break;
 80072be:	bf00      	nop
  }
}
 80072c0:	bf00      	nop
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072c8:	b480      	push	{r7}
 80072ca:	b083      	sub	sp, #12
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072f8:	bf00      	nop
 80072fa:	370c      	adds	r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	60f8      	str	r0, [r7, #12]
 800730c:	60b9      	str	r1, [r7, #8]
 800730e:	4613      	mov	r3, r2
 8007310:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007318:	2302      	movs	r3, #2
 800731a:	e029      	b.n	8007370 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	79fa      	ldrb	r2, [r7, #7]
 8007320:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f81f 	bl	8007378 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d003      	beq.n	8007368 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f001 fdc3 	bl	8008ef4 <USBH_LL_Init>

  return USBH_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007384:	2300      	movs	r3, #0
 8007386:	60fb      	str	r3, [r7, #12]
 8007388:	e009      	b.n	800739e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	33e0      	adds	r3, #224	@ 0xe0
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	2b0f      	cmp	r3, #15
 80073a2:	d9f2      	bls.n	800738a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	e009      	b.n	80073be <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	4413      	add	r3, r2
 80073b0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073c4:	d3f1      	bcc.n	80073aa <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2201      	movs	r2, #1
 80073d6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2240      	movs	r2, #64	@ 0x40
 80073ea:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	331c      	adds	r3, #28
 8007416:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800741a:	2100      	movs	r1, #0
 800741c:	4618      	mov	r0, r3
 800741e:	f002 fdae 	bl	8009f7e <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800742c:	2100      	movs	r1, #0
 800742e:	4618      	mov	r0, r3
 8007430:	f002 fda5 	bl	8009f7e <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800743a:	2212      	movs	r2, #18
 800743c:	2100      	movs	r1, #0
 800743e:	4618      	mov	r0, r3
 8007440:	f002 fd9d 	bl	8009f7e <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800744a:	223e      	movs	r2, #62	@ 0x3e
 800744c:	2100      	movs	r1, #0
 800744e:	4618      	mov	r0, r3
 8007450:	f002 fd95 	bl	8009f7e <memset>

  return USBH_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800745e:	b480      	push	{r7}
 8007460:	b085      	sub	sp, #20
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
 8007466:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d016      	beq.n	80074a0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10e      	bne.n	800749a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007482:	1c59      	adds	r1, r3, #1
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	33de      	adds	r3, #222	@ 0xde
 800748e:	6839      	ldr	r1, [r7, #0]
 8007490:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e004      	b.n	80074a4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800749a:	2302      	movs	r3, #2
 800749c:	73fb      	strb	r3, [r7, #15]
 800749e:	e001      	b.n	80074a4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074a0:	2302      	movs	r3, #2
 80074a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074be:	2300      	movs	r3, #0
 80074c0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d204      	bcs.n	80074d8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	78fa      	ldrb	r2, [r7, #3]
 80074d2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80074d6:	e001      	b.n	80074dc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074d8:	2302      	movs	r3, #2
 80074da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80074ea:	b480      	push	{r7}
 80074ec:	b087      	sub	sp, #28
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	461a      	mov	r2, r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	70fb      	strb	r3, [r7, #3]
 80074fc:	460b      	mov	r3, r1
 80074fe:	70bb      	strb	r3, [r7, #2]
 8007500:	4613      	mov	r3, r2
 8007502:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007512:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007514:	e025      	b.n	8007562 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007516:	7dfb      	ldrb	r3, [r7, #23]
 8007518:	221a      	movs	r2, #26
 800751a:	fb02 f303 	mul.w	r3, r2, r3
 800751e:	3308      	adds	r3, #8
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4413      	add	r3, r2
 8007524:	3302      	adds	r3, #2
 8007526:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	795b      	ldrb	r3, [r3, #5]
 800752c:	78fa      	ldrb	r2, [r7, #3]
 800752e:	429a      	cmp	r2, r3
 8007530:	d002      	beq.n	8007538 <USBH_FindInterface+0x4e>
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	2bff      	cmp	r3, #255	@ 0xff
 8007536:	d111      	bne.n	800755c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800753c:	78ba      	ldrb	r2, [r7, #2]
 800753e:	429a      	cmp	r2, r3
 8007540:	d002      	beq.n	8007548 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007542:	78bb      	ldrb	r3, [r7, #2]
 8007544:	2bff      	cmp	r3, #255	@ 0xff
 8007546:	d109      	bne.n	800755c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800754c:	787a      	ldrb	r2, [r7, #1]
 800754e:	429a      	cmp	r2, r3
 8007550:	d002      	beq.n	8007558 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007552:	787b      	ldrb	r3, [r7, #1]
 8007554:	2bff      	cmp	r3, #255	@ 0xff
 8007556:	d101      	bne.n	800755c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	e006      	b.n	800756a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800755c:	7dfb      	ldrb	r3, [r7, #23]
 800755e:	3301      	adds	r3, #1
 8007560:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007562:	7dfb      	ldrb	r3, [r7, #23]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d9d6      	bls.n	8007516 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007568:	23ff      	movs	r3, #255	@ 0xff
}
 800756a:	4618      	mov	r0, r3
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007576:	b580      	push	{r7, lr}
 8007578:	b082      	sub	sp, #8
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f001 fcf4 	bl	8008f6c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007584:	2101      	movs	r1, #1
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 fe0d 	bl	80091a6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800758c:	2300      	movs	r3, #0
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
	...

08007598 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b088      	sub	sp, #32
 800759c:	af04      	add	r7, sp, #16
 800759e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075a0:	2302      	movs	r3, #2
 80075a2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d102      	bne.n	80075ba <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2203      	movs	r2, #3
 80075b8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b0b      	cmp	r3, #11
 80075c2:	f200 81bb 	bhi.w	800793c <USBH_Process+0x3a4>
 80075c6:	a201      	add	r2, pc, #4	@ (adr r2, 80075cc <USBH_Process+0x34>)
 80075c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075cc:	080075fd 	.word	0x080075fd
 80075d0:	0800762f 	.word	0x0800762f
 80075d4:	08007697 	.word	0x08007697
 80075d8:	080078d7 	.word	0x080078d7
 80075dc:	0800793d 	.word	0x0800793d
 80075e0:	08007737 	.word	0x08007737
 80075e4:	0800787d 	.word	0x0800787d
 80075e8:	0800776d 	.word	0x0800776d
 80075ec:	0800778d 	.word	0x0800778d
 80075f0:	080077ab 	.word	0x080077ab
 80075f4:	080077ef 	.word	0x080077ef
 80075f8:	080078bf 	.word	0x080078bf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 819b 	beq.w	8007940 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007610:	20c8      	movs	r0, #200	@ 0xc8
 8007612:	f001 fe12 	bl	800923a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 fd05 	bl	8009026 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800762c:	e188      	b.n	8007940 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007634:	2b01      	cmp	r3, #1
 8007636:	d107      	bne.n	8007648 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007646:	e18a      	b.n	800795e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800764e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007652:	d914      	bls.n	800767e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800765a:	3301      	adds	r3, #1
 800765c:	b2da      	uxtb	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800766a:	2b03      	cmp	r3, #3
 800766c:	d903      	bls.n	8007676 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	220d      	movs	r2, #13
 8007672:	701a      	strb	r2, [r3, #0]
      break;
 8007674:	e173      	b.n	800795e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
      break;
 800767c:	e16f      	b.n	800795e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007684:	f103 020a 	add.w	r2, r3, #10
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800768e:	200a      	movs	r0, #10
 8007690:	f001 fdd3 	bl	800923a <USBH_Delay>
      break;
 8007694:	e163      	b.n	800795e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800769c:	2b00      	cmp	r3, #0
 800769e:	d005      	beq.n	80076ac <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076a6:	2104      	movs	r1, #4
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076ac:	2064      	movs	r0, #100	@ 0x64
 80076ae:	f001 fdc4 	bl	800923a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f001 fc90 	bl	8008fd8 <USBH_LL_GetSpeed>
 80076b8:	4603      	mov	r3, r0
 80076ba:	461a      	mov	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2205      	movs	r2, #5
 80076c6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076c8:	2100      	movs	r1, #0
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fa9b 	bl	8008c06 <USBH_AllocPipe>
 80076d0:	4603      	mov	r3, r0
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076d8:	2180      	movs	r1, #128	@ 0x80
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f001 fa93 	bl	8008c06 <USBH_AllocPipe>
 80076e0:	4603      	mov	r3, r0
 80076e2:	461a      	mov	r2, r3
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	7919      	ldrb	r1, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80076fc:	9202      	str	r2, [sp, #8]
 80076fe:	2200      	movs	r2, #0
 8007700:	9201      	str	r2, [sp, #4]
 8007702:	9300      	str	r3, [sp, #0]
 8007704:	4603      	mov	r3, r0
 8007706:	2280      	movs	r2, #128	@ 0x80
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f001 fa4d 	bl	8008ba8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	7959      	ldrb	r1, [r3, #5]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007722:	9202      	str	r2, [sp, #8]
 8007724:	2200      	movs	r2, #0
 8007726:	9201      	str	r2, [sp, #4]
 8007728:	9300      	str	r3, [sp, #0]
 800772a:	4603      	mov	r3, r0
 800772c:	2200      	movs	r2, #0
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fa3a 	bl	8008ba8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007734:	e113      	b.n	800795e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f916 	bl	8007968 <USBH_HandleEnum>
 800773c:	4603      	mov	r3, r0
 800773e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b00      	cmp	r3, #0
 8007746:	f040 80fd 	bne.w	8007944 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007758:	2b01      	cmp	r3, #1
 800775a:	d103      	bne.n	8007764 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2208      	movs	r2, #8
 8007760:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007762:	e0ef      	b.n	8007944 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2207      	movs	r2, #7
 8007768:	701a      	strb	r2, [r3, #0]
      break;
 800776a:	e0eb      	b.n	8007944 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80e8 	beq.w	8007948 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800777e:	2101      	movs	r1, #1
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2208      	movs	r2, #8
 8007788:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800778a:	e0dd      	b.n	8007948 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007792:	4619      	mov	r1, r3
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fc3a 	bl	800800e <USBH_SetCfg>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 80d5 	bne.w	800794c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2209      	movs	r2, #9
 80077a6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077a8:	e0d0      	b.n	800794c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80077b0:	f003 0320 	and.w	r3, r3, #32
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d016      	beq.n	80077e6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077b8:	2101      	movs	r1, #1
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fc4a 	bl	8008054 <USBH_SetFeature>
 80077c0:	4603      	mov	r3, r0
 80077c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077c4:	7bbb      	ldrb	r3, [r7, #14]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d103      	bne.n	80077d4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	220a      	movs	r2, #10
 80077d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077d2:	e0bd      	b.n	8007950 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80077d4:	7bbb      	ldrb	r3, [r7, #14]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	f040 80b9 	bne.w	8007950 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	220a      	movs	r2, #10
 80077e2:	701a      	strb	r2, [r3, #0]
      break;
 80077e4:	e0b4      	b.n	8007950 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	220a      	movs	r2, #10
 80077ea:	701a      	strb	r2, [r3, #0]
      break;
 80077ec:	e0b0      	b.n	8007950 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80ad 	beq.w	8007954 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
 8007806:	e016      	b.n	8007836 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007808:	7bfa      	ldrb	r2, [r7, #15]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32de      	adds	r2, #222	@ 0xde
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	791a      	ldrb	r2, [r3, #4]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800781a:	429a      	cmp	r2, r3
 800781c:	d108      	bne.n	8007830 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800781e:	7bfa      	ldrb	r2, [r7, #15]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	32de      	adds	r2, #222	@ 0xde
 8007824:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800782e:	e005      	b.n	800783c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	3301      	adds	r3, #1
 8007834:	73fb      	strb	r3, [r7, #15]
 8007836:	7bfb      	ldrb	r3, [r7, #15]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d0e5      	beq.n	8007808 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007842:	2b00      	cmp	r3, #0
 8007844:	d016      	beq.n	8007874 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	4798      	blx	r3
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d109      	bne.n	800786c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2206      	movs	r2, #6
 800785c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007864:	2103      	movs	r1, #3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800786a:	e073      	b.n	8007954 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	220d      	movs	r2, #13
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e06f      	b.n	8007954 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	220d      	movs	r2, #13
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	e06b      	b.n	8007954 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d017      	beq.n	80078b6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
 8007892:	4603      	mov	r3, r0
 8007894:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007896:	7bbb      	ldrb	r3, [r7, #14]
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d103      	bne.n	80078a6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	220b      	movs	r2, #11
 80078a2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078a4:	e058      	b.n	8007958 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80078a6:	7bbb      	ldrb	r3, [r7, #14]
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d154      	bne.n	8007958 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	220d      	movs	r2, #13
 80078b2:	701a      	strb	r2, [r3, #0]
      break;
 80078b4:	e050      	b.n	8007958 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220d      	movs	r2, #13
 80078ba:	701a      	strb	r2, [r3, #0]
      break;
 80078bc:	e04c      	b.n	8007958 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d049      	beq.n	800795c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078ce:	695b      	ldr	r3, [r3, #20]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	4798      	blx	r3
      }
      break;
 80078d4:	e042      	b.n	800795c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7ff fd4a 	bl	8007378 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d009      	beq.n	8007902 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007912:	2105      	movs	r1, #5
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b01      	cmp	r3, #1
 8007922:	d107      	bne.n	8007934 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f7ff fe22 	bl	8007576 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007932:	e014      	b.n	800795e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f001 fb19 	bl	8008f6c <USBH_LL_Start>
      break;
 800793a:	e010      	b.n	800795e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800793c:	bf00      	nop
 800793e:	e00e      	b.n	800795e <USBH_Process+0x3c6>
      break;
 8007940:	bf00      	nop
 8007942:	e00c      	b.n	800795e <USBH_Process+0x3c6>
      break;
 8007944:	bf00      	nop
 8007946:	e00a      	b.n	800795e <USBH_Process+0x3c6>
    break;
 8007948:	bf00      	nop
 800794a:	e008      	b.n	800795e <USBH_Process+0x3c6>
      break;
 800794c:	bf00      	nop
 800794e:	e006      	b.n	800795e <USBH_Process+0x3c6>
      break;
 8007950:	bf00      	nop
 8007952:	e004      	b.n	800795e <USBH_Process+0x3c6>
      break;
 8007954:	bf00      	nop
 8007956:	e002      	b.n	800795e <USBH_Process+0x3c6>
      break;
 8007958:	bf00      	nop
 800795a:	e000      	b.n	800795e <USBH_Process+0x3c6>
      break;
 800795c:	bf00      	nop
  }
  return USBH_OK;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b088      	sub	sp, #32
 800796c:	af04      	add	r7, sp, #16
 800796e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007970:	2301      	movs	r3, #1
 8007972:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007974:	2301      	movs	r3, #1
 8007976:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	785b      	ldrb	r3, [r3, #1]
 800797c:	2b07      	cmp	r3, #7
 800797e:	f200 81bd 	bhi.w	8007cfc <USBH_HandleEnum+0x394>
 8007982:	a201      	add	r2, pc, #4	@ (adr r2, 8007988 <USBH_HandleEnum+0x20>)
 8007984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007988:	080079a9 	.word	0x080079a9
 800798c:	08007a63 	.word	0x08007a63
 8007990:	08007acd 	.word	0x08007acd
 8007994:	08007b57 	.word	0x08007b57
 8007998:	08007bc1 	.word	0x08007bc1
 800799c:	08007c31 	.word	0x08007c31
 80079a0:	08007c77 	.word	0x08007c77
 80079a4:	08007cbd 	.word	0x08007cbd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079a8:	2108      	movs	r1, #8
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa4c 	bl	8007e48 <USBH_Get_DevDesc>
 80079b0:	4603      	mov	r3, r0
 80079b2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079b4:	7bbb      	ldrb	r3, [r7, #14]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d12e      	bne.n	8007a18 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	7919      	ldrb	r1, [r3, #4]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079de:	9202      	str	r2, [sp, #8]
 80079e0:	2200      	movs	r2, #0
 80079e2:	9201      	str	r2, [sp, #4]
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	4603      	mov	r3, r0
 80079e8:	2280      	movs	r2, #128	@ 0x80
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 f8dc 	bl	8008ba8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	7959      	ldrb	r1, [r3, #5]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a04:	9202      	str	r2, [sp, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	9201      	str	r2, [sp, #4]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2200      	movs	r2, #0
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f001 f8c9 	bl	8008ba8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a16:	e173      	b.n	8007d00 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b03      	cmp	r3, #3
 8007a1c:	f040 8170 	bne.w	8007d00 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a26:	3301      	adds	r3, #1
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d903      	bls.n	8007a42 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	220d      	movs	r2, #13
 8007a3e:	701a      	strb	r2, [r3, #0]
      break;
 8007a40:	e15e      	b.n	8007d00 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	795b      	ldrb	r3, [r3, #5]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f8fd 	bl	8008c48 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	791b      	ldrb	r3, [r3, #4]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f001 f8f7 	bl	8008c48 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	701a      	strb	r2, [r3, #0]
      break;
 8007a60:	e14e      	b.n	8007d00 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a62:	2112      	movs	r1, #18
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f9ef 	bl	8007e48 <USBH_Get_DevDesc>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d103      	bne.n	8007a7c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2202      	movs	r2, #2
 8007a78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a7a:	e143      	b.n	8007d04 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	f040 8140 	bne.w	8007d04 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b2da      	uxtb	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d903      	bls.n	8007aa6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	220d      	movs	r2, #13
 8007aa2:	701a      	strb	r2, [r3, #0]
      break;
 8007aa4:	e12e      	b.n	8007d04 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	795b      	ldrb	r3, [r3, #5]
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f001 f8cb 	bl	8008c48 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	791b      	ldrb	r3, [r3, #4]
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f001 f8c5 	bl	8008c48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	701a      	strb	r2, [r3, #0]
      break;
 8007aca:	e11b      	b.n	8007d04 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007acc:	2101      	movs	r1, #1
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fa79 	bl	8007fc6 <USBH_SetAddress>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d130      	bne.n	8007b40 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007ade:	2002      	movs	r0, #2
 8007ae0:	f001 fbab 	bl	800923a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2203      	movs	r2, #3
 8007af0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	7919      	ldrb	r1, [r3, #4]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b02:	687a      	ldr	r2, [r7, #4]
 8007b04:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b06:	9202      	str	r2, [sp, #8]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	9201      	str	r2, [sp, #4]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2280      	movs	r2, #128	@ 0x80
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 f848 	bl	8008ba8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	7959      	ldrb	r1, [r3, #5]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b2c:	9202      	str	r2, [sp, #8]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	9201      	str	r2, [sp, #4]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	4603      	mov	r3, r0
 8007b36:	2200      	movs	r2, #0
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f835 	bl	8008ba8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b3e:	e0e3      	b.n	8007d08 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	f040 80e0 	bne.w	8007d08 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	220d      	movs	r2, #13
 8007b4c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	705a      	strb	r2, [r3, #1]
      break;
 8007b54:	e0d8      	b.n	8007d08 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b56:	2109      	movs	r1, #9
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 f9a1 	bl	8007ea0 <USBH_Get_CfgDesc>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b62:	7bbb      	ldrb	r3, [r7, #14]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d103      	bne.n	8007b70 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2204      	movs	r2, #4
 8007b6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b6e:	e0cd      	b.n	8007d0c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b70:	7bbb      	ldrb	r3, [r7, #14]
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	f040 80ca 	bne.w	8007d0c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b7e:	3301      	adds	r3, #1
 8007b80:	b2da      	uxtb	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d903      	bls.n	8007b9a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	220d      	movs	r2, #13
 8007b96:	701a      	strb	r2, [r3, #0]
      break;
 8007b98:	e0b8      	b.n	8007d0c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	795b      	ldrb	r3, [r3, #5]
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f001 f851 	bl	8008c48 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	791b      	ldrb	r3, [r3, #4]
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f001 f84b 	bl	8008c48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
      break;
 8007bbe:	e0a5      	b.n	8007d0c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f969 	bl	8007ea0 <USBH_Get_CfgDesc>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bd2:	7bbb      	ldrb	r3, [r7, #14]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2205      	movs	r2, #5
 8007bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bde:	e097      	b.n	8007d10 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007be0:	7bbb      	ldrb	r3, [r7, #14]
 8007be2:	2b03      	cmp	r3, #3
 8007be4:	f040 8094 	bne.w	8007d10 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bee:	3301      	adds	r3, #1
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d903      	bls.n	8007c0a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	220d      	movs	r2, #13
 8007c06:	701a      	strb	r2, [r3, #0]
      break;
 8007c08:	e082      	b.n	8007d10 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	795b      	ldrb	r3, [r3, #5]
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f819 	bl	8008c48 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	791b      	ldrb	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f001 f813 	bl	8008c48 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	701a      	strb	r2, [r3, #0]
      break;
 8007c2e:	e06f      	b.n	8007d10 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d019      	beq.n	8007c6e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c46:	23ff      	movs	r3, #255	@ 0xff
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f953 	bl	8007ef4 <USBH_Get_StringDesc>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d103      	bne.n	8007c60 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2206      	movs	r2, #6
 8007c5c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c5e:	e059      	b.n	8007d14 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	2b03      	cmp	r3, #3
 8007c64:	d156      	bne.n	8007d14 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2206      	movs	r2, #6
 8007c6a:	705a      	strb	r2, [r3, #1]
      break;
 8007c6c:	e052      	b.n	8007d14 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2206      	movs	r2, #6
 8007c72:	705a      	strb	r2, [r3, #1]
      break;
 8007c74:	e04e      	b.n	8007d14 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d019      	beq.n	8007cb4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c8c:	23ff      	movs	r3, #255	@ 0xff
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f930 	bl	8007ef4 <USBH_Get_StringDesc>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d103      	bne.n	8007ca6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2207      	movs	r2, #7
 8007ca2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ca4:	e038      	b.n	8007d18 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ca6:	7bbb      	ldrb	r3, [r7, #14]
 8007ca8:	2b03      	cmp	r3, #3
 8007caa:	d135      	bne.n	8007d18 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2207      	movs	r2, #7
 8007cb0:	705a      	strb	r2, [r3, #1]
      break;
 8007cb2:	e031      	b.n	8007d18 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2207      	movs	r2, #7
 8007cb8:	705a      	strb	r2, [r3, #1]
      break;
 8007cba:	e02d      	b.n	8007d18 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d017      	beq.n	8007cf6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cd2:	23ff      	movs	r3, #255	@ 0xff
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 f90d 	bl	8007ef4 <USBH_Get_StringDesc>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cde:	7bbb      	ldrb	r3, [r7, #14]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007ce8:	e018      	b.n	8007d1c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cea:	7bbb      	ldrb	r3, [r7, #14]
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d115      	bne.n	8007d1c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cf4:	e012      	b.n	8007d1c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cfa:	e00f      	b.n	8007d1c <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007cfc:	bf00      	nop
 8007cfe:	e00e      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d00:	bf00      	nop
 8007d02:	e00c      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d04:	bf00      	nop
 8007d06:	e00a      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d08:	bf00      	nop
 8007d0a:	e008      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d0c:	bf00      	nop
 8007d0e:	e006      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d10:	bf00      	nop
 8007d12:	e004      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d14:	bf00      	nop
 8007d16:	e002      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e000      	b.n	8007d1e <USBH_HandleEnum+0x3b6>
      break;
 8007d1c:	bf00      	nop
  }
  return Status;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	683a      	ldr	r2, [r7, #0]
 8007d36:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d54:	1c5a      	adds	r2, r3, #1
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f804 	bl	8007d6a <USBH_HandleSof>
}
 8007d62:	bf00      	nop
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	2b0b      	cmp	r3, #11
 8007d7a:	d10a      	bne.n	8007d92 <USBH_HandleSof+0x28>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d005      	beq.n	8007d92 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	4798      	blx	r3
  }
}
 8007d92:	bf00      	nop
 8007d94:	3708      	adds	r7, #8
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007daa:	bf00      	nop
}
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b083      	sub	sp, #12
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dc6:	bf00      	nop
}
 8007dc8:	370c      	adds	r7, #12
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr

08007dd2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2201      	movs	r2, #1
 8007dde:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b082      	sub	sp, #8
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f001 f8be 	bl	8008fa2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	791b      	ldrb	r3, [r3, #4]
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 ff0b 	bl	8008c48 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	795b      	ldrb	r3, [r3, #5]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 ff05 	bl	8008c48 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af02      	add	r7, sp, #8
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e54:	887b      	ldrh	r3, [r7, #2]
 8007e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e5a:	d901      	bls.n	8007e60 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e01b      	b.n	8007e98 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e66:	887b      	ldrh	r3, [r7, #2]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e70:	2100      	movs	r1, #0
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f872 	bl	8007f5c <USBH_GetDescriptor>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d109      	bne.n	8007e96 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e88:	887a      	ldrh	r2, [r7, #2]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f929 	bl	80080e4 <USBH_ParseDevDesc>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	331c      	adds	r3, #28
 8007eb0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007eb2:	887b      	ldrh	r3, [r7, #2]
 8007eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eb8:	d901      	bls.n	8007ebe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e016      	b.n	8007eec <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ebe:	887b      	ldrh	r3, [r7, #2]
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ec8:	2100      	movs	r1, #0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f846 	bl	8007f5c <USBH_GetDescriptor>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007ed4:	7bfb      	ldrb	r3, [r7, #15]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d107      	bne.n	8007eea <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	461a      	mov	r2, r3
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f9af 	bl	8008244 <USBH_ParseCfgDesc>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3710      	adds	r7, #16
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b088      	sub	sp, #32
 8007ef8:	af02      	add	r7, sp, #8
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	461a      	mov	r2, r3
 8007f00:	460b      	mov	r3, r1
 8007f02:	72fb      	strb	r3, [r7, #11]
 8007f04:	4613      	mov	r3, r2
 8007f06:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007f08:	893b      	ldrh	r3, [r7, #8]
 8007f0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0e:	d802      	bhi.n	8007f16 <USBH_Get_StringDesc+0x22>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e01c      	b.n	8007f54 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007f22:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f2a:	893b      	ldrh	r3, [r7, #8]
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	2100      	movs	r1, #0
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f000 f812 	bl	8007f5c <USBH_GetDescriptor>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d107      	bne.n	8007f52 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f48:	893a      	ldrh	r2, [r7, #8]
 8007f4a:	6879      	ldr	r1, [r7, #4]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 fb8d 	bl	800866c <USBH_ParseStringDesc>
  }

  return status;
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	60f8      	str	r0, [r7, #12]
 8007f64:	607b      	str	r3, [r7, #4]
 8007f66:	460b      	mov	r3, r1
 8007f68:	72fb      	strb	r3, [r7, #11]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	789b      	ldrb	r3, [r3, #2]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d11c      	bne.n	8007fb0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2206      	movs	r2, #6
 8007f86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	893a      	ldrh	r2, [r7, #8]
 8007f8c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f98:	d104      	bne.n	8007fa4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	f240 4209 	movw	r2, #1033	@ 0x409
 8007fa0:	829a      	strh	r2, [r3, #20]
 8007fa2:	e002      	b.n	8007faa <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	8b3a      	ldrh	r2, [r7, #24]
 8007fae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fb0:	8b3b      	ldrh	r3, [r7, #24]
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	6879      	ldr	r1, [r7, #4]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f000 fba5 	bl	8008706 <USBH_CtlReq>
 8007fbc:	4603      	mov	r3, r0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b082      	sub	sp, #8
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	789b      	ldrb	r3, [r3, #2]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d10f      	bne.n	8007ffa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2205      	movs	r2, #5
 8007fe4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fb81 	bl	8008706 <USBH_CtlReq>
 8008004:	4603      	mov	r3, r0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	789b      	ldrb	r3, [r3, #2]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d10e      	bne.n	8008040 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2209      	movs	r2, #9
 800802c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	887a      	ldrh	r2, [r7, #2]
 8008032:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008040:	2200      	movs	r2, #0
 8008042:	2100      	movs	r1, #0
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f000 fb5e 	bl	8008706 <USBH_CtlReq>
 800804a:	4603      	mov	r3, r0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3708      	adds	r7, #8
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	789b      	ldrb	r3, [r3, #2]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d10f      	bne.n	8008088 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2203      	movs	r2, #3
 8008072:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	b29a      	uxth	r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008088:	2200      	movs	r2, #0
 800808a:	2100      	movs	r1, #0
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f000 fb3a 	bl	8008706 <USBH_CtlReq>
 8008092:	4603      	mov	r3, r0
}
 8008094:	4618      	mov	r0, r3
 8008096:	3708      	adds	r7, #8
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}

0800809c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b082      	sub	sp, #8
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	789b      	ldrb	r3, [r3, #2]
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d10f      	bne.n	80080d0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080c2:	78fb      	ldrb	r3, [r7, #3]
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2200      	movs	r2, #0
 80080ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080d0:	2200      	movs	r2, #0
 80080d2:	2100      	movs	r1, #0
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fb16 	bl	8008706 <USBH_CtlReq>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	4613      	mov	r3, r2
 80080f0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80080f8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80080fa:	2300      	movs	r3, #0
 80080fc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d101      	bne.n	8008108 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008104:	2302      	movs	r3, #2
 8008106:	e094      	b.n	8008232 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	781a      	ldrb	r2, [r3, #0]
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	785a      	ldrb	r2, [r3, #1]
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	3302      	adds	r3, #2
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	461a      	mov	r2, r3
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	3303      	adds	r3, #3
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	021b      	lsls	r3, r3, #8
 8008128:	b29b      	uxth	r3, r3
 800812a:	4313      	orrs	r3, r2
 800812c:	b29a      	uxth	r2, r3
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	791a      	ldrb	r2, [r3, #4]
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	795a      	ldrb	r2, [r3, #5]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	799a      	ldrb	r2, [r3, #6]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	79da      	ldrb	r2, [r3, #7]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008158:	2b00      	cmp	r3, #0
 800815a:	d004      	beq.n	8008166 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008162:	2b01      	cmp	r3, #1
 8008164:	d11b      	bne.n	800819e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	79db      	ldrb	r3, [r3, #7]
 800816a:	2b20      	cmp	r3, #32
 800816c:	dc0f      	bgt.n	800818e <USBH_ParseDevDesc+0xaa>
 800816e:	2b08      	cmp	r3, #8
 8008170:	db0f      	blt.n	8008192 <USBH_ParseDevDesc+0xae>
 8008172:	3b08      	subs	r3, #8
 8008174:	4a32      	ldr	r2, [pc, #200]	@ (8008240 <USBH_ParseDevDesc+0x15c>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	2b00      	cmp	r3, #0
 8008180:	bf14      	ite	ne
 8008182:	2301      	movne	r3, #1
 8008184:	2300      	moveq	r3, #0
 8008186:	b2db      	uxtb	r3, r3
 8008188:	2b00      	cmp	r3, #0
 800818a:	d106      	bne.n	800819a <USBH_ParseDevDesc+0xb6>
 800818c:	e001      	b.n	8008192 <USBH_ParseDevDesc+0xae>
 800818e:	2b40      	cmp	r3, #64	@ 0x40
 8008190:	d003      	beq.n	800819a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2208      	movs	r2, #8
 8008196:	71da      	strb	r2, [r3, #7]
        break;
 8008198:	e000      	b.n	800819c <USBH_ParseDevDesc+0xb8>
        break;
 800819a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800819c:	e00e      	b.n	80081bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d107      	bne.n	80081b8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	79db      	ldrb	r3, [r3, #7]
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d005      	beq.n	80081bc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2208      	movs	r2, #8
 80081b4:	71da      	strb	r2, [r3, #7]
 80081b6:	e001      	b.n	80081bc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80081b8:	2303      	movs	r3, #3
 80081ba:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80081bc:	88fb      	ldrh	r3, [r7, #6]
 80081be:	2b08      	cmp	r3, #8
 80081c0:	d936      	bls.n	8008230 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3308      	adds	r3, #8
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	461a      	mov	r2, r3
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	3309      	adds	r3, #9
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	4313      	orrs	r3, r2
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	330a      	adds	r3, #10
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	330b      	adds	r3, #11
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	021b      	lsls	r3, r3, #8
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	330c      	adds	r3, #12
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	461a      	mov	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	330d      	adds	r3, #13
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	b29b      	uxth	r3, r3
 8008208:	4313      	orrs	r3, r2
 800820a:	b29a      	uxth	r2, r3
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	7b9a      	ldrb	r2, [r3, #14]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	7bda      	ldrb	r2, [r3, #15]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	7c1a      	ldrb	r2, [r3, #16]
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	7c5a      	ldrb	r2, [r3, #17]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008230:	7dfb      	ldrb	r3, [r7, #23]
}
 8008232:	4618      	mov	r0, r3
 8008234:	371c      	adds	r7, #28
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	01000101 	.word	0x01000101

08008244 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b08c      	sub	sp, #48	@ 0x30
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	4613      	mov	r3, r2
 8008250:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008258:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008272:	2302      	movs	r3, #2
 8008274:	e0da      	b.n	800842c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	781a      	ldrb	r2, [r3, #0]
 800827e:	6a3b      	ldr	r3, [r7, #32]
 8008280:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	785a      	ldrb	r2, [r3, #1]
 8008286:	6a3b      	ldr	r3, [r7, #32]
 8008288:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	3302      	adds	r3, #2
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	3303      	adds	r3, #3
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	b29b      	uxth	r3, r3
 800829c:	4313      	orrs	r3, r2
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082a4:	bf28      	it	cs
 80082a6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	791a      	ldrb	r2, [r3, #4]
 80082b4:	6a3b      	ldr	r3, [r7, #32]
 80082b6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	795a      	ldrb	r2, [r3, #5]
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	799a      	ldrb	r2, [r3, #6]
 80082c4:	6a3b      	ldr	r3, [r7, #32]
 80082c6:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	79da      	ldrb	r2, [r3, #7]
 80082cc:	6a3b      	ldr	r3, [r7, #32]
 80082ce:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	7a1a      	ldrb	r2, [r3, #8]
 80082d4:	6a3b      	ldr	r3, [r7, #32]
 80082d6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80082d8:	6a3b      	ldr	r3, [r7, #32]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b09      	cmp	r3, #9
 80082de:	d002      	beq.n	80082e6 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80082e0:	6a3b      	ldr	r3, [r7, #32]
 80082e2:	2209      	movs	r2, #9
 80082e4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082e6:	88fb      	ldrh	r3, [r7, #6]
 80082e8:	2b09      	cmp	r3, #9
 80082ea:	f240 809d 	bls.w	8008428 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80082ee:	2309      	movs	r3, #9
 80082f0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082f6:	e081      	b.n	80083fc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082f8:	f107 0316 	add.w	r3, r7, #22
 80082fc:	4619      	mov	r1, r3
 80082fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008300:	f000 f9e7 	bl	80086d2 <USBH_GetNextDesc>
 8008304:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	2b04      	cmp	r3, #4
 800830c:	d176      	bne.n	80083fc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800830e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b09      	cmp	r3, #9
 8008314:	d002      	beq.n	800831c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	2209      	movs	r2, #9
 800831a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800831c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008320:	221a      	movs	r2, #26
 8008322:	fb02 f303 	mul.w	r3, r2, r3
 8008326:	3308      	adds	r3, #8
 8008328:	6a3a      	ldr	r2, [r7, #32]
 800832a:	4413      	add	r3, r2
 800832c:	3302      	adds	r3, #2
 800832e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008330:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008332:	69f8      	ldr	r0, [r7, #28]
 8008334:	f000 f87e 	bl	8008434 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008338:	2300      	movs	r3, #0
 800833a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008342:	e043      	b.n	80083cc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008344:	f107 0316 	add.w	r3, r7, #22
 8008348:	4619      	mov	r1, r3
 800834a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800834c:	f000 f9c1 	bl	80086d2 <USBH_GetNextDesc>
 8008350:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	2b05      	cmp	r3, #5
 8008358:	d138      	bne.n	80083cc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	795b      	ldrb	r3, [r3, #5]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d113      	bne.n	800838a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008366:	2b02      	cmp	r3, #2
 8008368:	d003      	beq.n	8008372 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800836a:	69fb      	ldr	r3, [r7, #28]
 800836c:	799b      	ldrb	r3, [r3, #6]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d10b      	bne.n	800838a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	79db      	ldrb	r3, [r3, #7]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d10b      	bne.n	8008392 <USBH_ParseCfgDesc+0x14e>
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b09      	cmp	r3, #9
 8008380:	d007      	beq.n	8008392 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	2209      	movs	r2, #9
 8008386:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008388:	e003      	b.n	8008392 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	2207      	movs	r2, #7
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e000      	b.n	8008394 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008392:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008398:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800839c:	3201      	adds	r2, #1
 800839e:	00d2      	lsls	r2, r2, #3
 80083a0:	211a      	movs	r1, #26
 80083a2:	fb01 f303 	mul.w	r3, r1, r3
 80083a6:	4413      	add	r3, r2
 80083a8:	3308      	adds	r3, #8
 80083aa:	6a3a      	ldr	r2, [r7, #32]
 80083ac:	4413      	add	r3, r2
 80083ae:	3304      	adds	r3, #4
 80083b0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083b4:	69b9      	ldr	r1, [r7, #24]
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 f870 	bl	800849c <USBH_ParseEPDesc>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80083c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083c6:	3301      	adds	r3, #1
 80083c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	791b      	ldrb	r3, [r3, #4]
 80083d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d204      	bcs.n	80083e2 <USBH_ParseCfgDesc+0x19e>
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	885a      	ldrh	r2, [r3, #2]
 80083dc:	8afb      	ldrh	r3, [r7, #22]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d8b0      	bhi.n	8008344 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d201      	bcs.n	80083f2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80083ee:	2303      	movs	r3, #3
 80083f0:	e01c      	b.n	800842c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80083f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f6:	3301      	adds	r3, #1
 80083f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008400:	2b01      	cmp	r3, #1
 8008402:	d805      	bhi.n	8008410 <USBH_ParseCfgDesc+0x1cc>
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	885a      	ldrh	r2, [r3, #2]
 8008408:	8afb      	ldrh	r3, [r7, #22]
 800840a:	429a      	cmp	r2, r3
 800840c:	f63f af74 	bhi.w	80082f8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	791b      	ldrb	r3, [r3, #4]
 8008414:	2b02      	cmp	r3, #2
 8008416:	bf28      	it	cs
 8008418:	2302      	movcs	r3, #2
 800841a:	b2db      	uxtb	r3, r3
 800841c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008420:	429a      	cmp	r2, r3
 8008422:	d201      	bcs.n	8008428 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008424:	2303      	movs	r3, #3
 8008426:	e001      	b.n	800842c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008428:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800842c:	4618      	mov	r0, r3
 800842e:	3730      	adds	r7, #48	@ 0x30
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	781a      	ldrb	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	785a      	ldrb	r2, [r3, #1]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	789a      	ldrb	r2, [r3, #2]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	78da      	ldrb	r2, [r3, #3]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	3304      	adds	r3, #4
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b02      	cmp	r3, #2
 8008466:	bf28      	it	cs
 8008468:	2302      	movcs	r3, #2
 800846a:	b2da      	uxtb	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	795a      	ldrb	r2, [r3, #5]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	799a      	ldrb	r2, [r3, #6]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	79da      	ldrb	r2, [r3, #7]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	7a1a      	ldrb	r2, [r3, #8]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	721a      	strb	r2, [r3, #8]
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800849c:	b480      	push	{r7}
 800849e:	b087      	sub	sp, #28
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	781a      	ldrb	r2, [r3, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	785a      	ldrb	r2, [r3, #1]
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	789a      	ldrb	r2, [r3, #2]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	78da      	ldrb	r2, [r3, #3]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	3304      	adds	r3, #4
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	461a      	mov	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	3305      	adds	r3, #5
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	021b      	lsls	r3, r3, #8
 80084dc:	b29b      	uxth	r3, r3
 80084de:	4313      	orrs	r3, r2
 80084e0:	b29a      	uxth	r2, r3
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	799a      	ldrb	r2, [r3, #6]
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d009      	beq.n	800850a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80084fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084fe:	d804      	bhi.n	800850a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008508:	d901      	bls.n	800850e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800850a:	2303      	movs	r3, #3
 800850c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008514:	2b00      	cmp	r3, #0
 8008516:	d136      	bne.n	8008586 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	78db      	ldrb	r3, [r3, #3]
 800851c:	f003 0303 	and.w	r3, r3, #3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d108      	bne.n	8008536 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	889b      	ldrh	r3, [r3, #4]
 8008528:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800852c:	f240 8097 	bls.w	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008530:	2303      	movs	r3, #3
 8008532:	75fb      	strb	r3, [r7, #23]
 8008534:	e093      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	78db      	ldrb	r3, [r3, #3]
 800853a:	f003 0303 	and.w	r3, r3, #3
 800853e:	2b00      	cmp	r3, #0
 8008540:	d107      	bne.n	8008552 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	889b      	ldrh	r3, [r3, #4]
 8008546:	2b40      	cmp	r3, #64	@ 0x40
 8008548:	f240 8089 	bls.w	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800854c:	2303      	movs	r3, #3
 800854e:	75fb      	strb	r3, [r7, #23]
 8008550:	e085      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	78db      	ldrb	r3, [r3, #3]
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	2b01      	cmp	r3, #1
 800855c:	d005      	beq.n	800856a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	78db      	ldrb	r3, [r3, #3]
 8008562:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008566:	2b03      	cmp	r3, #3
 8008568:	d10a      	bne.n	8008580 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	799b      	ldrb	r3, [r3, #6]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <USBH_ParseEPDesc+0xde>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	799b      	ldrb	r3, [r3, #6]
 8008576:	2b10      	cmp	r3, #16
 8008578:	d970      	bls.n	800865c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800857a:	2303      	movs	r3, #3
 800857c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800857e:	e06d      	b.n	800865c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008580:	2303      	movs	r3, #3
 8008582:	75fb      	strb	r3, [r7, #23]
 8008584:	e06b      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800858c:	2b01      	cmp	r3, #1
 800858e:	d13c      	bne.n	800860a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	78db      	ldrb	r3, [r3, #3]
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d005      	beq.n	80085a8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	78db      	ldrb	r3, [r3, #3]
 80085a0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	889b      	ldrh	r3, [r3, #4]
 80085ac:	2b40      	cmp	r3, #64	@ 0x40
 80085ae:	d956      	bls.n	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085b0:	2303      	movs	r3, #3
 80085b2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085b4:	e053      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	78db      	ldrb	r3, [r3, #3]
 80085ba:	f003 0303 	and.w	r3, r3, #3
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d10e      	bne.n	80085e0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	799b      	ldrb	r3, [r3, #6]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d007      	beq.n	80085da <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085ce:	2b10      	cmp	r3, #16
 80085d0:	d803      	bhi.n	80085da <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085d6:	2b40      	cmp	r3, #64	@ 0x40
 80085d8:	d941      	bls.n	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085da:	2303      	movs	r3, #3
 80085dc:	75fb      	strb	r3, [r7, #23]
 80085de:	e03e      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	78db      	ldrb	r3, [r3, #3]
 80085e4:	f003 0303 	and.w	r3, r3, #3
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d10b      	bne.n	8008604 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	799b      	ldrb	r3, [r3, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <USBH_ParseEPDesc+0x162>
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	889b      	ldrh	r3, [r3, #4]
 80085f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085fc:	d32f      	bcc.n	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085fe:	2303      	movs	r3, #3
 8008600:	75fb      	strb	r3, [r7, #23]
 8008602:	e02c      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008604:	2303      	movs	r3, #3
 8008606:	75fb      	strb	r3, [r7, #23]
 8008608:	e029      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008610:	2b02      	cmp	r3, #2
 8008612:	d120      	bne.n	8008656 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	78db      	ldrb	r3, [r3, #3]
 8008618:	f003 0303 	and.w	r3, r3, #3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d106      	bne.n	800862e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	889b      	ldrh	r3, [r3, #4]
 8008624:	2b08      	cmp	r3, #8
 8008626:	d01a      	beq.n	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
 800862c:	e017      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	78db      	ldrb	r3, [r3, #3]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	2b03      	cmp	r3, #3
 8008638:	d10a      	bne.n	8008650 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	799b      	ldrb	r3, [r3, #6]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <USBH_ParseEPDesc+0x1ae>
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	889b      	ldrh	r3, [r3, #4]
 8008646:	2b08      	cmp	r3, #8
 8008648:	d909      	bls.n	800865e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800864a:	2303      	movs	r3, #3
 800864c:	75fb      	strb	r3, [r7, #23]
 800864e:	e006      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008650:	2303      	movs	r3, #3
 8008652:	75fb      	strb	r3, [r7, #23]
 8008654:	e003      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008656:	2303      	movs	r3, #3
 8008658:	75fb      	strb	r3, [r7, #23]
 800865a:	e000      	b.n	800865e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800865c:	bf00      	nop
  }

  return status;
 800865e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008660:	4618      	mov	r0, r3
 8008662:	371c      	adds	r7, #28
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800866c:	b480      	push	{r7}
 800866e:	b087      	sub	sp, #28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d120      	bne.n	80086c6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	1e9a      	subs	r2, r3, #2
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	4293      	cmp	r3, r2
 800868e:	bf28      	it	cs
 8008690:	4613      	movcs	r3, r2
 8008692:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	3302      	adds	r3, #2
 8008698:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800869a:	2300      	movs	r3, #0
 800869c:	82fb      	strh	r3, [r7, #22]
 800869e:	e00b      	b.n	80086b8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086a0:	8afb      	ldrh	r3, [r7, #22]
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4413      	add	r3, r2
 80086a6:	781a      	ldrb	r2, [r3, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	3301      	adds	r3, #1
 80086b0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086b2:	8afb      	ldrh	r3, [r7, #22]
 80086b4:	3302      	adds	r3, #2
 80086b6:	82fb      	strh	r3, [r7, #22]
 80086b8:	8afa      	ldrh	r2, [r7, #22]
 80086ba:	8abb      	ldrh	r3, [r7, #20]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d3ef      	bcc.n	80086a0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2200      	movs	r2, #0
 80086c4:	701a      	strb	r2, [r3, #0]
  }
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr

080086d2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086d2:	b480      	push	{r7}
 80086d4:	b085      	sub	sp, #20
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
 80086da:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	7812      	ldrb	r2, [r2, #0]
 80086e4:	4413      	add	r3, r2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4413      	add	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086f8:	68fb      	ldr	r3, [r7, #12]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b086      	sub	sp, #24
 800870a:	af00      	add	r7, sp, #0
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	4613      	mov	r3, r2
 8008712:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008714:	2301      	movs	r3, #1
 8008716:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d002      	beq.n	8008726 <USBH_CtlReq+0x20>
 8008720:	2b02      	cmp	r3, #2
 8008722:	d00f      	beq.n	8008744 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008724:	e027      	b.n	8008776 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2201      	movs	r2, #1
 8008736:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2202      	movs	r2, #2
 800873c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800873e:	2301      	movs	r3, #1
 8008740:	75fb      	strb	r3, [r7, #23]
      break;
 8008742:	e018      	b.n	8008776 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 f81b 	bl	8008780 <USBH_HandleControl>
 800874a:	4603      	mov	r3, r0
 800874c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800874e:	7dfb      	ldrb	r3, [r7, #23]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <USBH_CtlReq+0x54>
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b03      	cmp	r3, #3
 8008758:	d106      	bne.n	8008768 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2201      	movs	r2, #1
 800875e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	761a      	strb	r2, [r3, #24]
      break;
 8008766:	e005      	b.n	8008774 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	2b02      	cmp	r3, #2
 800876c:	d102      	bne.n	8008774 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	709a      	strb	r2, [r3, #2]
      break;
 8008774:	bf00      	nop
  }
  return status;
 8008776:	7dfb      	ldrb	r3, [r7, #23]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af02      	add	r7, sp, #8
 8008786:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008788:	2301      	movs	r3, #1
 800878a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800878c:	2300      	movs	r3, #0
 800878e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7e1b      	ldrb	r3, [r3, #24]
 8008794:	3b01      	subs	r3, #1
 8008796:	2b0a      	cmp	r3, #10
 8008798:	f200 8156 	bhi.w	8008a48 <USBH_HandleControl+0x2c8>
 800879c:	a201      	add	r2, pc, #4	@ (adr r2, 80087a4 <USBH_HandleControl+0x24>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087d1 	.word	0x080087d1
 80087a8:	080087eb 	.word	0x080087eb
 80087ac:	08008855 	.word	0x08008855
 80087b0:	0800887b 	.word	0x0800887b
 80087b4:	080088b3 	.word	0x080088b3
 80087b8:	080088dd 	.word	0x080088dd
 80087bc:	0800892f 	.word	0x0800892f
 80087c0:	08008951 	.word	0x08008951
 80087c4:	0800898d 	.word	0x0800898d
 80087c8:	080089b3 	.word	0x080089b3
 80087cc:	080089f1 	.word	0x080089f1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f103 0110 	add.w	r1, r3, #16
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	795b      	ldrb	r3, [r3, #5]
 80087da:	461a      	mov	r2, r3
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 f943 	bl	8008a68 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2202      	movs	r2, #2
 80087e6:	761a      	strb	r2, [r3, #24]
      break;
 80087e8:	e139      	b.n	8008a5e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	795b      	ldrb	r3, [r3, #5]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 fcc5 	bl	8009180 <USBH_LL_GetURBState>
 80087f6:	4603      	mov	r3, r0
 80087f8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d11e      	bne.n	800883e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	7c1b      	ldrb	r3, [r3, #16]
 8008804:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008808:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	8adb      	ldrh	r3, [r3, #22]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008812:	7b7b      	ldrb	r3, [r7, #13]
 8008814:	2b80      	cmp	r3, #128	@ 0x80
 8008816:	d103      	bne.n	8008820 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2203      	movs	r2, #3
 800881c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800881e:	e115      	b.n	8008a4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2205      	movs	r2, #5
 8008824:	761a      	strb	r2, [r3, #24]
      break;
 8008826:	e111      	b.n	8008a4c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008828:	7b7b      	ldrb	r3, [r7, #13]
 800882a:	2b80      	cmp	r3, #128	@ 0x80
 800882c:	d103      	bne.n	8008836 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2209      	movs	r2, #9
 8008832:	761a      	strb	r2, [r3, #24]
      break;
 8008834:	e10a      	b.n	8008a4c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2207      	movs	r2, #7
 800883a:	761a      	strb	r2, [r3, #24]
      break;
 800883c:	e106      	b.n	8008a4c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b04      	cmp	r3, #4
 8008842:	d003      	beq.n	800884c <USBH_HandleControl+0xcc>
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b02      	cmp	r3, #2
 8008848:	f040 8100 	bne.w	8008a4c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	220b      	movs	r2, #11
 8008850:	761a      	strb	r2, [r3, #24]
      break;
 8008852:	e0fb      	b.n	8008a4c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800885a:	b29a      	uxth	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6899      	ldr	r1, [r3, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	899a      	ldrh	r2, [r3, #12]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	791b      	ldrb	r3, [r3, #4]
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f93a 	bl	8008ae6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2204      	movs	r2, #4
 8008876:	761a      	strb	r2, [r3, #24]
      break;
 8008878:	e0f1      	b.n	8008a5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	791b      	ldrb	r3, [r3, #4]
 800887e:	4619      	mov	r1, r3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fc7d 	bl	8009180 <USBH_LL_GetURBState>
 8008886:	4603      	mov	r3, r0
 8008888:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800888a:	7bbb      	ldrb	r3, [r7, #14]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d102      	bne.n	8008896 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2209      	movs	r2, #9
 8008894:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008896:	7bbb      	ldrb	r3, [r7, #14]
 8008898:	2b05      	cmp	r3, #5
 800889a:	d102      	bne.n	80088a2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800889c:	2303      	movs	r3, #3
 800889e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088a0:	e0d6      	b.n	8008a50 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b04      	cmp	r3, #4
 80088a6:	f040 80d3 	bne.w	8008a50 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	220b      	movs	r2, #11
 80088ae:	761a      	strb	r2, [r3, #24]
      break;
 80088b0:	e0ce      	b.n	8008a50 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6899      	ldr	r1, [r3, #8]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	899a      	ldrh	r2, [r3, #12]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	795b      	ldrb	r3, [r3, #5]
 80088be:	2001      	movs	r0, #1
 80088c0:	9000      	str	r0, [sp, #0]
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f8ea 	bl	8008a9c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2206      	movs	r2, #6
 80088d8:	761a      	strb	r2, [r3, #24]
      break;
 80088da:	e0c0      	b.n	8008a5e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	795b      	ldrb	r3, [r3, #5]
 80088e0:	4619      	mov	r1, r3
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 fc4c 	bl	8009180 <USBH_LL_GetURBState>
 80088e8:	4603      	mov	r3, r0
 80088ea:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80088ec:	7bbb      	ldrb	r3, [r7, #14]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d103      	bne.n	80088fa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2207      	movs	r2, #7
 80088f6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088f8:	e0ac      	b.n	8008a54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80088fa:	7bbb      	ldrb	r3, [r7, #14]
 80088fc:	2b05      	cmp	r3, #5
 80088fe:	d105      	bne.n	800890c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	220c      	movs	r2, #12
 8008904:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008906:	2303      	movs	r3, #3
 8008908:	73fb      	strb	r3, [r7, #15]
      break;
 800890a:	e0a3      	b.n	8008a54 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800890c:	7bbb      	ldrb	r3, [r7, #14]
 800890e:	2b02      	cmp	r3, #2
 8008910:	d103      	bne.n	800891a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2205      	movs	r2, #5
 8008916:	761a      	strb	r2, [r3, #24]
      break;
 8008918:	e09c      	b.n	8008a54 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b04      	cmp	r3, #4
 800891e:	f040 8099 	bne.w	8008a54 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	220b      	movs	r2, #11
 8008926:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008928:	2302      	movs	r3, #2
 800892a:	73fb      	strb	r3, [r7, #15]
      break;
 800892c:	e092      	b.n	8008a54 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	791b      	ldrb	r3, [r3, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f8d5 	bl	8008ae6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008942:	b29a      	uxth	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2208      	movs	r2, #8
 800894c:	761a      	strb	r2, [r3, #24]

      break;
 800894e:	e086      	b.n	8008a5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	791b      	ldrb	r3, [r3, #4]
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f000 fc12 	bl	8009180 <USBH_LL_GetURBState>
 800895c:	4603      	mov	r3, r0
 800895e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d105      	bne.n	8008972 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	220d      	movs	r2, #13
 800896a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008970:	e072      	b.n	8008a58 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b04      	cmp	r3, #4
 8008976:	d103      	bne.n	8008980 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	220b      	movs	r2, #11
 800897c:	761a      	strb	r2, [r3, #24]
      break;
 800897e:	e06b      	b.n	8008a58 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	2b05      	cmp	r3, #5
 8008984:	d168      	bne.n	8008a58 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008986:	2303      	movs	r3, #3
 8008988:	73fb      	strb	r3, [r7, #15]
      break;
 800898a:	e065      	b.n	8008a58 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	795b      	ldrb	r3, [r3, #5]
 8008990:	2201      	movs	r2, #1
 8008992:	9200      	str	r2, [sp, #0]
 8008994:	2200      	movs	r2, #0
 8008996:	2100      	movs	r1, #0
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 f87f 	bl	8008a9c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089a4:	b29a      	uxth	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	220a      	movs	r2, #10
 80089ae:	761a      	strb	r2, [r3, #24]
      break;
 80089b0:	e055      	b.n	8008a5e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	795b      	ldrb	r3, [r3, #5]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f000 fbe1 	bl	8009180 <USBH_LL_GetURBState>
 80089be:	4603      	mov	r3, r0
 80089c0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089c2:	7bbb      	ldrb	r3, [r7, #14]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d105      	bne.n	80089d4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	220d      	movs	r2, #13
 80089d0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089d2:	e043      	b.n	8008a5c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d103      	bne.n	80089e2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2209      	movs	r2, #9
 80089de:	761a      	strb	r2, [r3, #24]
      break;
 80089e0:	e03c      	b.n	8008a5c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089e2:	7bbb      	ldrb	r3, [r7, #14]
 80089e4:	2b04      	cmp	r3, #4
 80089e6:	d139      	bne.n	8008a5c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	220b      	movs	r2, #11
 80089ec:	761a      	strb	r2, [r3, #24]
      break;
 80089ee:	e035      	b.n	8008a5c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7e5b      	ldrb	r3, [r3, #25]
 80089f4:	3301      	adds	r3, #1
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	765a      	strb	r2, [r3, #25]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	7e5b      	ldrb	r3, [r3, #25]
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d806      	bhi.n	8008a12 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2201      	movs	r2, #1
 8008a0e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a10:	e025      	b.n	8008a5e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a18:	2106      	movs	r1, #6
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	795b      	ldrb	r3, [r3, #5]
 8008a28:	4619      	mov	r1, r3
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f90c 	bl	8008c48 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	791b      	ldrb	r3, [r3, #4]
 8008a34:	4619      	mov	r1, r3
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f906 	bl	8008c48 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a42:	2302      	movs	r3, #2
 8008a44:	73fb      	strb	r3, [r7, #15]
      break;
 8008a46:	e00a      	b.n	8008a5e <USBH_HandleControl+0x2de>

    default:
      break;
 8008a48:	bf00      	nop
 8008a4a:	e008      	b.n	8008a5e <USBH_HandleControl+0x2de>
      break;
 8008a4c:	bf00      	nop
 8008a4e:	e006      	b.n	8008a5e <USBH_HandleControl+0x2de>
      break;
 8008a50:	bf00      	nop
 8008a52:	e004      	b.n	8008a5e <USBH_HandleControl+0x2de>
      break;
 8008a54:	bf00      	nop
 8008a56:	e002      	b.n	8008a5e <USBH_HandleControl+0x2de>
      break;
 8008a58:	bf00      	nop
 8008a5a:	e000      	b.n	8008a5e <USBH_HandleControl+0x2de>
      break;
 8008a5c:	bf00      	nop
  }

  return status;
 8008a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3710      	adds	r7, #16
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af04      	add	r7, sp, #16
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	4613      	mov	r3, r2
 8008a74:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a76:	79f9      	ldrb	r1, [r7, #7]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9303      	str	r3, [sp, #12]
 8008a7c:	2308      	movs	r3, #8
 8008a7e:	9302      	str	r3, [sp, #8]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	9301      	str	r3, [sp, #4]
 8008a84:	2300      	movs	r3, #0
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	68f8      	ldr	r0, [r7, #12]
 8008a8e:	f000 fb46 	bl	800911e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b088      	sub	sp, #32
 8008aa0:	af04      	add	r7, sp, #16
 8008aa2:	60f8      	str	r0, [r7, #12]
 8008aa4:	60b9      	str	r1, [r7, #8]
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	460b      	mov	r3, r1
 8008aac:	80fb      	strh	r3, [r7, #6]
 8008aae:	4613      	mov	r3, r2
 8008ab0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d001      	beq.n	8008ac0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008abc:	2300      	movs	r3, #0
 8008abe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ac0:	7979      	ldrb	r1, [r7, #5]
 8008ac2:	7e3b      	ldrb	r3, [r7, #24]
 8008ac4:	9303      	str	r3, [sp, #12]
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	9302      	str	r3, [sp, #8]
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	2301      	movs	r3, #1
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fb21 	bl	800911e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af04      	add	r7, sp, #16
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	4611      	mov	r1, r2
 8008af2:	461a      	mov	r2, r3
 8008af4:	460b      	mov	r3, r1
 8008af6:	80fb      	strh	r3, [r7, #6]
 8008af8:	4613      	mov	r3, r2
 8008afa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008afc:	7979      	ldrb	r1, [r7, #5]
 8008afe:	2300      	movs	r3, #0
 8008b00:	9303      	str	r3, [sp, #12]
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	9302      	str	r3, [sp, #8]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	9301      	str	r3, [sp, #4]
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	9300      	str	r3, [sp, #0]
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2201      	movs	r2, #1
 8008b12:	68f8      	ldr	r0, [r7, #12]
 8008b14:	f000 fb03 	bl	800911e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b18:	2300      	movs	r3, #0

}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b088      	sub	sp, #32
 8008b26:	af04      	add	r7, sp, #16
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	461a      	mov	r2, r3
 8008b30:	460b      	mov	r3, r1
 8008b32:	80fb      	strh	r3, [r7, #6]
 8008b34:	4613      	mov	r3, r2
 8008b36:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b42:	2300      	movs	r3, #0
 8008b44:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b46:	7979      	ldrb	r1, [r7, #5]
 8008b48:	7e3b      	ldrb	r3, [r7, #24]
 8008b4a:	9303      	str	r3, [sp, #12]
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	9302      	str	r3, [sp, #8]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	9301      	str	r3, [sp, #4]
 8008b54:	2301      	movs	r3, #1
 8008b56:	9300      	str	r3, [sp, #0]
 8008b58:	2302      	movs	r3, #2
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fade 	bl	800911e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af04      	add	r7, sp, #16
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4611      	mov	r1, r2
 8008b78:	461a      	mov	r2, r3
 8008b7a:	460b      	mov	r3, r1
 8008b7c:	80fb      	strh	r3, [r7, #6]
 8008b7e:	4613      	mov	r3, r2
 8008b80:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b82:	7979      	ldrb	r1, [r7, #5]
 8008b84:	2300      	movs	r3, #0
 8008b86:	9303      	str	r3, [sp, #12]
 8008b88:	88fb      	ldrh	r3, [r7, #6]
 8008b8a:	9302      	str	r3, [sp, #8]
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	2301      	movs	r3, #1
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2302      	movs	r3, #2
 8008b96:	2201      	movs	r2, #1
 8008b98:	68f8      	ldr	r0, [r7, #12]
 8008b9a:	f000 fac0 	bl	800911e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b9e:	2300      	movs	r3, #0
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af04      	add	r7, sp, #16
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	70fb      	strb	r3, [r7, #3]
 8008bba:	460b      	mov	r3, r1
 8008bbc:	70bb      	strb	r3, [r7, #2]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bc2:	7878      	ldrb	r0, [r7, #1]
 8008bc4:	78ba      	ldrb	r2, [r7, #2]
 8008bc6:	78f9      	ldrb	r1, [r7, #3]
 8008bc8:	8b3b      	ldrh	r3, [r7, #24]
 8008bca:	9302      	str	r3, [sp, #8]
 8008bcc:	7d3b      	ldrb	r3, [r7, #20]
 8008bce:	9301      	str	r3, [sp, #4]
 8008bd0:	7c3b      	ldrb	r3, [r7, #16]
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa53 	bl	8009082 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3708      	adds	r7, #8
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b082      	sub	sp, #8
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	460b      	mov	r3, r1
 8008bf0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008bf2:	78fb      	ldrb	r3, [r7, #3]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fa72 	bl	80090e0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3708      	adds	r7, #8
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 f836 	bl	8008c84 <USBH_GetFreePipe>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c1c:	89fb      	ldrh	r3, [r7, #14]
 8008c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d00a      	beq.n	8008c3c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c26:	78fa      	ldrb	r2, [r7, #3]
 8008c28:	89fb      	ldrh	r3, [r7, #14]
 8008c2a:	f003 030f 	and.w	r3, r3, #15
 8008c2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	33e0      	adds	r3, #224	@ 0xe0
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	440b      	add	r3, r1
 8008c3a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c3c:	89fb      	ldrh	r3, [r7, #14]
 8008c3e:	b2db      	uxtb	r3, r3
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3710      	adds	r7, #16
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c54:	78fb      	ldrb	r3, [r7, #3]
 8008c56:	2b0f      	cmp	r3, #15
 8008c58:	d80d      	bhi.n	8008c76 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	33e0      	adds	r3, #224	@ 0xe0
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	33e0      	adds	r3, #224	@ 0xe0
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	440b      	add	r3, r1
 8008c74:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	370c      	adds	r7, #12
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008c90:	2300      	movs	r3, #0
 8008c92:	73fb      	strb	r3, [r7, #15]
 8008c94:	e00f      	b.n	8008cb6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008c96:	7bfb      	ldrb	r3, [r7, #15]
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	33e0      	adds	r3, #224	@ 0xe0
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d102      	bne.n	8008cb0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	e007      	b.n	8008cc0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	73fb      	strb	r3, [r7, #15]
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	2b0f      	cmp	r3, #15
 8008cba:	d9ec      	bls.n	8008c96 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	490e      	ldr	r1, [pc, #56]	@ (8008d0c <MX_USB_HOST_Init+0x40>)
 8008cd4:	480e      	ldr	r0, [pc, #56]	@ (8008d10 <MX_USB_HOST_Init+0x44>)
 8008cd6:	f7fe fb15 	bl	8007304 <USBH_Init>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008ce0:	f7f8 fb08 	bl	80012f4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008ce4:	490b      	ldr	r1, [pc, #44]	@ (8008d14 <MX_USB_HOST_Init+0x48>)
 8008ce6:	480a      	ldr	r0, [pc, #40]	@ (8008d10 <MX_USB_HOST_Init+0x44>)
 8008ce8:	f7fe fbb9 	bl	800745e <USBH_RegisterClass>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d001      	beq.n	8008cf6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008cf2:	f7f8 faff 	bl	80012f4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008cf6:	4806      	ldr	r0, [pc, #24]	@ (8008d10 <MX_USB_HOST_Init+0x44>)
 8008cf8:	f7fe fc3d 	bl	8007576 <USBH_Start>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d02:	f7f8 faf7 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	08008d2d 	.word	0x08008d2d
 8008d10:	200002a8 	.word	0x200002a8
 8008d14:	2000000c 	.word	0x2000000c

08008d18 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d1c:	4802      	ldr	r0, [pc, #8]	@ (8008d28 <MX_USB_HOST_Process+0x10>)
 8008d1e:	f7fe fc3b 	bl	8007598 <USBH_Process>
}
 8008d22:	bf00      	nop
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	200002a8 	.word	0x200002a8

08008d2c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d38:	78fb      	ldrb	r3, [r7, #3]
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d819      	bhi.n	8008d74 <USBH_UserProcess+0x48>
 8008d40:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <USBH_UserProcess+0x1c>)
 8008d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d46:	bf00      	nop
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	08008d65 	.word	0x08008d65
 8008d50:	08008d75 	.word	0x08008d75
 8008d54:	08008d6d 	.word	0x08008d6d
 8008d58:	08008d5d 	.word	0x08008d5d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d5c:	4b09      	ldr	r3, [pc, #36]	@ (8008d84 <USBH_UserProcess+0x58>)
 8008d5e:	2203      	movs	r2, #3
 8008d60:	701a      	strb	r2, [r3, #0]
  break;
 8008d62:	e008      	b.n	8008d76 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d64:	4b07      	ldr	r3, [pc, #28]	@ (8008d84 <USBH_UserProcess+0x58>)
 8008d66:	2202      	movs	r2, #2
 8008d68:	701a      	strb	r2, [r3, #0]
  break;
 8008d6a:	e004      	b.n	8008d76 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d6c:	4b05      	ldr	r3, [pc, #20]	@ (8008d84 <USBH_UserProcess+0x58>)
 8008d6e:	2201      	movs	r2, #1
 8008d70:	701a      	strb	r2, [r3, #0]
  break;
 8008d72:	e000      	b.n	8008d76 <USBH_UserProcess+0x4a>

  default:
  break;
 8008d74:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d76:	bf00      	nop
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000680 	.word	0x20000680

08008d88 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b08a      	sub	sp, #40	@ 0x28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d90:	f107 0314 	add.w	r3, r7, #20
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	605a      	str	r2, [r3, #4]
 8008d9a:	609a      	str	r2, [r3, #8]
 8008d9c:	60da      	str	r2, [r3, #12]
 8008d9e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008da8:	d147      	bne.n	8008e3a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008daa:	2300      	movs	r3, #0
 8008dac:	613b      	str	r3, [r7, #16]
 8008dae:	4b25      	ldr	r3, [pc, #148]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db2:	4a24      	ldr	r2, [pc, #144]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008db4:	f043 0301 	orr.w	r3, r3, #1
 8008db8:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dba:	4b22      	ldr	r3, [pc, #136]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dbe:	f003 0301 	and.w	r3, r3, #1
 8008dc2:	613b      	str	r3, [r7, #16]
 8008dc4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008dd4:	f107 0314 	add.w	r3, r7, #20
 8008dd8:	4619      	mov	r1, r3
 8008dda:	481b      	ldr	r0, [pc, #108]	@ (8008e48 <HAL_HCD_MspInit+0xc0>)
 8008ddc:	f7f9 fa14 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008de0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008de6:	2302      	movs	r3, #2
 8008de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dea:	2300      	movs	r3, #0
 8008dec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dee:	2300      	movs	r3, #0
 8008df0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008df2:	230a      	movs	r3, #10
 8008df4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008df6:	f107 0314 	add.w	r3, r7, #20
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4812      	ldr	r0, [pc, #72]	@ (8008e48 <HAL_HCD_MspInit+0xc0>)
 8008dfe:	f7f9 fa03 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e02:	4b10      	ldr	r3, [pc, #64]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e06:	4a0f      	ldr	r2, [pc, #60]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e0c:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60fb      	str	r3, [r7, #12]
 8008e12:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e16:	4a0b      	ldr	r2, [pc, #44]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008e18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e1e:	4b09      	ldr	r3, [pc, #36]	@ (8008e44 <HAL_HCD_MspInit+0xbc>)
 8008e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e26:	60fb      	str	r3, [r7, #12]
 8008e28:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	2043      	movs	r0, #67	@ 0x43
 8008e30:	f7f9 f9b3 	bl	800219a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e34:	2043      	movs	r0, #67	@ 0x43
 8008e36:	f7f9 f9cc 	bl	80021d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	3728      	adds	r7, #40	@ 0x28
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	40023800 	.word	0x40023800
 8008e48:	40020000 	.word	0x40020000

08008e4c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fe ff73 	bl	8007d46 <USBH_LL_IncTimer>
}
 8008e60:	bf00      	nop
 8008e62:	3708      	adds	r7, #8
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}

08008e68 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b082      	sub	sp, #8
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e76:	4618      	mov	r0, r3
 8008e78:	f7fe ffab 	bl	8007dd2 <USBH_LL_Connect>
}
 8008e7c:	bf00      	nop
 8008e7e:	3708      	adds	r7, #8
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe ffb4 	bl	8007e00 <USBH_LL_Disconnect>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	70fb      	strb	r3, [r7, #3]
 8008eac:	4613      	mov	r3, r2
 8008eae:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe ff65 	bl	8007d9a <USBH_LL_PortEnabled>
}
 8008ed0:	bf00      	nop
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe ff65 	bl	8007db6 <USBH_LL_PortDisabled>
}
 8008eec:	bf00      	nop
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d12a      	bne.n	8008f5c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f06:	4a18      	ldr	r2, [pc, #96]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a15      	ldr	r2, [pc, #84]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f12:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f16:	4b14      	ldr	r3, [pc, #80]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f18:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f1c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f1e:	4b12      	ldr	r3, [pc, #72]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f20:	2208      	movs	r2, #8
 8008f22:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f24:	4b10      	ldr	r3, [pc, #64]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f30:	4b0d      	ldr	r3, [pc, #52]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f32:	2202      	movs	r2, #2
 8008f34:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f36:	4b0c      	ldr	r3, [pc, #48]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f38:	2200      	movs	r2, #0
 8008f3a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f3c:	480a      	ldr	r0, [pc, #40]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f3e:	f7f9 fb18 	bl	8002572 <HAL_HCD_Init>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d001      	beq.n	8008f4c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f48:	f7f8 f9d4 	bl	80012f4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f4c:	4806      	ldr	r0, [pc, #24]	@ (8008f68 <USBH_LL_Init+0x74>)
 8008f4e:	f7f9 ff79 	bl	8002e44 <HAL_HCD_GetCurrentFrame>
 8008f52:	4603      	mov	r3, r0
 8008f54:	4619      	mov	r1, r3
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fe fee6 	bl	8007d28 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f5c:	2300      	movs	r3, #0
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	20000684 	.word	0x20000684

08008f6c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f9 fee6 	bl	8002d54 <HAL_HCD_Start>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f000 f95e 	bl	8009250 <USBH_Get_USB_Status>
 8008f94:	4603      	mov	r3, r0
 8008f96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b084      	sub	sp, #16
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008faa:	2300      	movs	r3, #0
 8008fac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7f9 feee 	bl	8002d9a <HAL_HCD_Stop>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fc2:	7bfb      	ldrb	r3, [r7, #15]
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 f943 	bl	8009250 <USBH_Get_USB_Status>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7f9 ff38 	bl	8002e60 <HAL_HCD_GetCurrentSpeed>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d00c      	beq.n	8009010 <USBH_LL_GetSpeed+0x38>
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d80d      	bhi.n	8009016 <USBH_LL_GetSpeed+0x3e>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <USBH_LL_GetSpeed+0x2c>
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	d003      	beq.n	800900a <USBH_LL_GetSpeed+0x32>
 8009002:	e008      	b.n	8009016 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009004:	2300      	movs	r3, #0
 8009006:	73fb      	strb	r3, [r7, #15]
    break;
 8009008:	e008      	b.n	800901c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800900a:	2301      	movs	r3, #1
 800900c:	73fb      	strb	r3, [r7, #15]
    break;
 800900e:	e005      	b.n	800901c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009010:	2302      	movs	r3, #2
 8009012:	73fb      	strb	r3, [r7, #15]
    break;
 8009014:	e002      	b.n	800901c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009016:	2301      	movs	r3, #1
 8009018:	73fb      	strb	r3, [r7, #15]
    break;
 800901a:	bf00      	nop
  }
  return  speed;
 800901c:	7bfb      	ldrb	r3, [r7, #15]
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b084      	sub	sp, #16
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800902e:	2300      	movs	r3, #0
 8009030:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800903c:	4618      	mov	r0, r3
 800903e:	f7f9 fec9 	bl	8002dd4 <HAL_HCD_ResetPort>
 8009042:	4603      	mov	r3, r0
 8009044:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009046:	7bfb      	ldrb	r3, [r7, #15]
 8009048:	4618      	mov	r0, r3
 800904a:	f000 f901 	bl	8009250 <USBH_Get_USB_Status>
 800904e:	4603      	mov	r3, r0
 8009050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009052:	7bbb      	ldrb	r3, [r7, #14]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3710      	adds	r7, #16
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	460b      	mov	r3, r1
 8009066:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800906e:	78fa      	ldrb	r2, [r7, #3]
 8009070:	4611      	mov	r1, r2
 8009072:	4618      	mov	r0, r3
 8009074:	f7f9 fed1 	bl	8002e1a <HAL_HCD_HC_GetXferCount>
 8009078:	4603      	mov	r3, r0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}

08009082 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009082:	b590      	push	{r4, r7, lr}
 8009084:	b089      	sub	sp, #36	@ 0x24
 8009086:	af04      	add	r7, sp, #16
 8009088:	6078      	str	r0, [r7, #4]
 800908a:	4608      	mov	r0, r1
 800908c:	4611      	mov	r1, r2
 800908e:	461a      	mov	r2, r3
 8009090:	4603      	mov	r3, r0
 8009092:	70fb      	strb	r3, [r7, #3]
 8009094:	460b      	mov	r3, r1
 8009096:	70bb      	strb	r3, [r7, #2]
 8009098:	4613      	mov	r3, r2
 800909a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80090aa:	787c      	ldrb	r4, [r7, #1]
 80090ac:	78ba      	ldrb	r2, [r7, #2]
 80090ae:	78f9      	ldrb	r1, [r7, #3]
 80090b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090b2:	9302      	str	r3, [sp, #8]
 80090b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4623      	mov	r3, r4
 80090c2:	f7f9 fabd 	bl	8002640 <HAL_HCD_HC_Init>
 80090c6:	4603      	mov	r3, r0
 80090c8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 f8bf 	bl	8009250 <USBH_Get_USB_Status>
 80090d2:	4603      	mov	r3, r0
 80090d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd90      	pop	{r4, r7, pc}

080090e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090f0:	2300      	movs	r3, #0
 80090f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090fa:	78fa      	ldrb	r2, [r7, #3]
 80090fc:	4611      	mov	r1, r2
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f9 fb56 	bl	80027b0 <HAL_HCD_HC_Halt>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009108:	7bfb      	ldrb	r3, [r7, #15]
 800910a:	4618      	mov	r0, r3
 800910c:	f000 f8a0 	bl	8009250 <USBH_Get_USB_Status>
 8009110:	4603      	mov	r3, r0
 8009112:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009114:	7bbb      	ldrb	r3, [r7, #14]
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800911e:	b590      	push	{r4, r7, lr}
 8009120:	b089      	sub	sp, #36	@ 0x24
 8009122:	af04      	add	r7, sp, #16
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	4608      	mov	r0, r1
 8009128:	4611      	mov	r1, r2
 800912a:	461a      	mov	r2, r3
 800912c:	4603      	mov	r3, r0
 800912e:	70fb      	strb	r3, [r7, #3]
 8009130:	460b      	mov	r3, r1
 8009132:	70bb      	strb	r3, [r7, #2]
 8009134:	4613      	mov	r3, r2
 8009136:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009146:	787c      	ldrb	r4, [r7, #1]
 8009148:	78ba      	ldrb	r2, [r7, #2]
 800914a:	78f9      	ldrb	r1, [r7, #3]
 800914c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009150:	9303      	str	r3, [sp, #12]
 8009152:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009154:	9302      	str	r3, [sp, #8]
 8009156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4623      	mov	r3, r4
 8009162:	f7f9 fb49 	bl	80027f8 <HAL_HCD_HC_SubmitRequest>
 8009166:	4603      	mov	r3, r0
 8009168:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800916a:	7bfb      	ldrb	r3, [r7, #15]
 800916c:	4618      	mov	r0, r3
 800916e:	f000 f86f 	bl	8009250 <USBH_Get_USB_Status>
 8009172:	4603      	mov	r3, r0
 8009174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009176:	7bbb      	ldrb	r3, [r7, #14]
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	bd90      	pop	{r4, r7, pc}

08009180 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	460b      	mov	r3, r1
 800918a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7f9 fe2a 	bl	8002df0 <HAL_HCD_HC_GetURBState>
 800919c:	4603      	mov	r3, r0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d103      	bne.n	80091c4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091bc:	78fb      	ldrb	r3, [r7, #3]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 f872 	bl	80092a8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091c4:	20c8      	movs	r0, #200	@ 0xc8
 80091c6:	f7f8 fb1d 	bl	8001804 <HAL_Delay>
  return USBH_OK;
 80091ca:	2300      	movs	r3, #0
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3708      	adds	r7, #8
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	460b      	mov	r3, r1
 80091de:	70fb      	strb	r3, [r7, #3]
 80091e0:	4613      	mov	r3, r2
 80091e2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091ea:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	68f9      	ldr	r1, [r7, #12]
 80091f0:	4613      	mov	r3, r2
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	3317      	adds	r3, #23
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d00a      	beq.n	8009218 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009202:	78fa      	ldrb	r2, [r7, #3]
 8009204:	68f9      	ldr	r1, [r7, #12]
 8009206:	4613      	mov	r3, r2
 8009208:	011b      	lsls	r3, r3, #4
 800920a:	1a9b      	subs	r3, r3, r2
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	440b      	add	r3, r1
 8009210:	333c      	adds	r3, #60	@ 0x3c
 8009212:	78ba      	ldrb	r2, [r7, #2]
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	e009      	b.n	800922c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	68f9      	ldr	r1, [r7, #12]
 800921c:	4613      	mov	r3, r2
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	333d      	adds	r3, #61	@ 0x3d
 8009228:	78ba      	ldrb	r2, [r7, #2]
 800922a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800923a:	b580      	push	{r7, lr}
 800923c:	b082      	sub	sp, #8
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7f8 fade 	bl	8001804 <HAL_Delay>
}
 8009248:	bf00      	nop
 800924a:	3708      	adds	r7, #8
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009250:	b480      	push	{r7}
 8009252:	b085      	sub	sp, #20
 8009254:	af00      	add	r7, sp, #0
 8009256:	4603      	mov	r3, r0
 8009258:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800925a:	2300      	movs	r3, #0
 800925c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	2b03      	cmp	r3, #3
 8009262:	d817      	bhi.n	8009294 <USBH_Get_USB_Status+0x44>
 8009264:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <USBH_Get_USB_Status+0x1c>)
 8009266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926a:	bf00      	nop
 800926c:	0800927d 	.word	0x0800927d
 8009270:	08009283 	.word	0x08009283
 8009274:	08009289 	.word	0x08009289
 8009278:	0800928f 	.word	0x0800928f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
    break;
 8009280:	e00b      	b.n	800929a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009282:	2302      	movs	r3, #2
 8009284:	73fb      	strb	r3, [r7, #15]
    break;
 8009286:	e008      	b.n	800929a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009288:	2301      	movs	r3, #1
 800928a:	73fb      	strb	r3, [r7, #15]
    break;
 800928c:	e005      	b.n	800929a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800928e:	2302      	movs	r3, #2
 8009290:	73fb      	strb	r3, [r7, #15]
    break;
 8009292:	e002      	b.n	800929a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009294:	2302      	movs	r3, #2
 8009296:	73fb      	strb	r3, [r7, #15]
    break;
 8009298:	bf00      	nop
  }
  return usb_status;
 800929a:	7bfb      	ldrb	r3, [r7, #15]
}
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	4603      	mov	r3, r0
 80092b0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092b2:	79fb      	ldrb	r3, [r7, #7]
 80092b4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d102      	bne.n	80092c2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80092bc:	2300      	movs	r3, #0
 80092be:	73fb      	strb	r3, [r7, #15]
 80092c0:	e001      	b.n	80092c6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80092c2:	2301      	movs	r3, #1
 80092c4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092c6:	7bfb      	ldrb	r3, [r7, #15]
 80092c8:	461a      	mov	r2, r3
 80092ca:	2101      	movs	r1, #1
 80092cc:	4803      	ldr	r0, [pc, #12]	@ (80092dc <MX_DriverVbusFS+0x34>)
 80092ce:	f7f9 f937 	bl	8002540 <HAL_GPIO_WritePin>
}
 80092d2:	bf00      	nop
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop
 80092dc:	40020800 	.word	0x40020800

080092e0 <malloc>:
 80092e0:	4b02      	ldr	r3, [pc, #8]	@ (80092ec <malloc+0xc>)
 80092e2:	4601      	mov	r1, r0
 80092e4:	6818      	ldr	r0, [r3, #0]
 80092e6:	f000 b82d 	b.w	8009344 <_malloc_r>
 80092ea:	bf00      	nop
 80092ec:	20000038 	.word	0x20000038

080092f0 <free>:
 80092f0:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <free+0xc>)
 80092f2:	4601      	mov	r1, r0
 80092f4:	6818      	ldr	r0, [r3, #0]
 80092f6:	f001 bd1f 	b.w	800ad38 <_free_r>
 80092fa:	bf00      	nop
 80092fc:	20000038 	.word	0x20000038

08009300 <sbrk_aligned>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	4e0f      	ldr	r6, [pc, #60]	@ (8009340 <sbrk_aligned+0x40>)
 8009304:	460c      	mov	r4, r1
 8009306:	6831      	ldr	r1, [r6, #0]
 8009308:	4605      	mov	r5, r0
 800930a:	b911      	cbnz	r1, 8009312 <sbrk_aligned+0x12>
 800930c:	f000 fe78 	bl	800a000 <_sbrk_r>
 8009310:	6030      	str	r0, [r6, #0]
 8009312:	4621      	mov	r1, r4
 8009314:	4628      	mov	r0, r5
 8009316:	f000 fe73 	bl	800a000 <_sbrk_r>
 800931a:	1c43      	adds	r3, r0, #1
 800931c:	d103      	bne.n	8009326 <sbrk_aligned+0x26>
 800931e:	f04f 34ff 	mov.w	r4, #4294967295
 8009322:	4620      	mov	r0, r4
 8009324:	bd70      	pop	{r4, r5, r6, pc}
 8009326:	1cc4      	adds	r4, r0, #3
 8009328:	f024 0403 	bic.w	r4, r4, #3
 800932c:	42a0      	cmp	r0, r4
 800932e:	d0f8      	beq.n	8009322 <sbrk_aligned+0x22>
 8009330:	1a21      	subs	r1, r4, r0
 8009332:	4628      	mov	r0, r5
 8009334:	f000 fe64 	bl	800a000 <_sbrk_r>
 8009338:	3001      	adds	r0, #1
 800933a:	d1f2      	bne.n	8009322 <sbrk_aligned+0x22>
 800933c:	e7ef      	b.n	800931e <sbrk_aligned+0x1e>
 800933e:	bf00      	nop
 8009340:	20000a64 	.word	0x20000a64

08009344 <_malloc_r>:
 8009344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009348:	1ccd      	adds	r5, r1, #3
 800934a:	f025 0503 	bic.w	r5, r5, #3
 800934e:	3508      	adds	r5, #8
 8009350:	2d0c      	cmp	r5, #12
 8009352:	bf38      	it	cc
 8009354:	250c      	movcc	r5, #12
 8009356:	2d00      	cmp	r5, #0
 8009358:	4606      	mov	r6, r0
 800935a:	db01      	blt.n	8009360 <_malloc_r+0x1c>
 800935c:	42a9      	cmp	r1, r5
 800935e:	d904      	bls.n	800936a <_malloc_r+0x26>
 8009360:	230c      	movs	r3, #12
 8009362:	6033      	str	r3, [r6, #0]
 8009364:	2000      	movs	r0, #0
 8009366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800936a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009440 <_malloc_r+0xfc>
 800936e:	f000 f869 	bl	8009444 <__malloc_lock>
 8009372:	f8d8 3000 	ldr.w	r3, [r8]
 8009376:	461c      	mov	r4, r3
 8009378:	bb44      	cbnz	r4, 80093cc <_malloc_r+0x88>
 800937a:	4629      	mov	r1, r5
 800937c:	4630      	mov	r0, r6
 800937e:	f7ff ffbf 	bl	8009300 <sbrk_aligned>
 8009382:	1c43      	adds	r3, r0, #1
 8009384:	4604      	mov	r4, r0
 8009386:	d158      	bne.n	800943a <_malloc_r+0xf6>
 8009388:	f8d8 4000 	ldr.w	r4, [r8]
 800938c:	4627      	mov	r7, r4
 800938e:	2f00      	cmp	r7, #0
 8009390:	d143      	bne.n	800941a <_malloc_r+0xd6>
 8009392:	2c00      	cmp	r4, #0
 8009394:	d04b      	beq.n	800942e <_malloc_r+0xea>
 8009396:	6823      	ldr	r3, [r4, #0]
 8009398:	4639      	mov	r1, r7
 800939a:	4630      	mov	r0, r6
 800939c:	eb04 0903 	add.w	r9, r4, r3
 80093a0:	f000 fe2e 	bl	800a000 <_sbrk_r>
 80093a4:	4581      	cmp	r9, r0
 80093a6:	d142      	bne.n	800942e <_malloc_r+0xea>
 80093a8:	6821      	ldr	r1, [r4, #0]
 80093aa:	1a6d      	subs	r5, r5, r1
 80093ac:	4629      	mov	r1, r5
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7ff ffa6 	bl	8009300 <sbrk_aligned>
 80093b4:	3001      	adds	r0, #1
 80093b6:	d03a      	beq.n	800942e <_malloc_r+0xea>
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	442b      	add	r3, r5
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	f8d8 3000 	ldr.w	r3, [r8]
 80093c2:	685a      	ldr	r2, [r3, #4]
 80093c4:	bb62      	cbnz	r2, 8009420 <_malloc_r+0xdc>
 80093c6:	f8c8 7000 	str.w	r7, [r8]
 80093ca:	e00f      	b.n	80093ec <_malloc_r+0xa8>
 80093cc:	6822      	ldr	r2, [r4, #0]
 80093ce:	1b52      	subs	r2, r2, r5
 80093d0:	d420      	bmi.n	8009414 <_malloc_r+0xd0>
 80093d2:	2a0b      	cmp	r2, #11
 80093d4:	d917      	bls.n	8009406 <_malloc_r+0xc2>
 80093d6:	1961      	adds	r1, r4, r5
 80093d8:	42a3      	cmp	r3, r4
 80093da:	6025      	str	r5, [r4, #0]
 80093dc:	bf18      	it	ne
 80093de:	6059      	strne	r1, [r3, #4]
 80093e0:	6863      	ldr	r3, [r4, #4]
 80093e2:	bf08      	it	eq
 80093e4:	f8c8 1000 	streq.w	r1, [r8]
 80093e8:	5162      	str	r2, [r4, r5]
 80093ea:	604b      	str	r3, [r1, #4]
 80093ec:	4630      	mov	r0, r6
 80093ee:	f000 f82f 	bl	8009450 <__malloc_unlock>
 80093f2:	f104 000b 	add.w	r0, r4, #11
 80093f6:	1d23      	adds	r3, r4, #4
 80093f8:	f020 0007 	bic.w	r0, r0, #7
 80093fc:	1ac2      	subs	r2, r0, r3
 80093fe:	bf1c      	itt	ne
 8009400:	1a1b      	subne	r3, r3, r0
 8009402:	50a3      	strne	r3, [r4, r2]
 8009404:	e7af      	b.n	8009366 <_malloc_r+0x22>
 8009406:	6862      	ldr	r2, [r4, #4]
 8009408:	42a3      	cmp	r3, r4
 800940a:	bf0c      	ite	eq
 800940c:	f8c8 2000 	streq.w	r2, [r8]
 8009410:	605a      	strne	r2, [r3, #4]
 8009412:	e7eb      	b.n	80093ec <_malloc_r+0xa8>
 8009414:	4623      	mov	r3, r4
 8009416:	6864      	ldr	r4, [r4, #4]
 8009418:	e7ae      	b.n	8009378 <_malloc_r+0x34>
 800941a:	463c      	mov	r4, r7
 800941c:	687f      	ldr	r7, [r7, #4]
 800941e:	e7b6      	b.n	800938e <_malloc_r+0x4a>
 8009420:	461a      	mov	r2, r3
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	42a3      	cmp	r3, r4
 8009426:	d1fb      	bne.n	8009420 <_malloc_r+0xdc>
 8009428:	2300      	movs	r3, #0
 800942a:	6053      	str	r3, [r2, #4]
 800942c:	e7de      	b.n	80093ec <_malloc_r+0xa8>
 800942e:	230c      	movs	r3, #12
 8009430:	6033      	str	r3, [r6, #0]
 8009432:	4630      	mov	r0, r6
 8009434:	f000 f80c 	bl	8009450 <__malloc_unlock>
 8009438:	e794      	b.n	8009364 <_malloc_r+0x20>
 800943a:	6005      	str	r5, [r0, #0]
 800943c:	e7d6      	b.n	80093ec <_malloc_r+0xa8>
 800943e:	bf00      	nop
 8009440:	20000a68 	.word	0x20000a68

08009444 <__malloc_lock>:
 8009444:	4801      	ldr	r0, [pc, #4]	@ (800944c <__malloc_lock+0x8>)
 8009446:	f000 be28 	b.w	800a09a <__retarget_lock_acquire_recursive>
 800944a:	bf00      	nop
 800944c:	20000bac 	.word	0x20000bac

08009450 <__malloc_unlock>:
 8009450:	4801      	ldr	r0, [pc, #4]	@ (8009458 <__malloc_unlock+0x8>)
 8009452:	f000 be23 	b.w	800a09c <__retarget_lock_release_recursive>
 8009456:	bf00      	nop
 8009458:	20000bac 	.word	0x20000bac

0800945c <__cvt>:
 800945c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009460:	ec57 6b10 	vmov	r6, r7, d0
 8009464:	2f00      	cmp	r7, #0
 8009466:	460c      	mov	r4, r1
 8009468:	4619      	mov	r1, r3
 800946a:	463b      	mov	r3, r7
 800946c:	bfbb      	ittet	lt
 800946e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009472:	461f      	movlt	r7, r3
 8009474:	2300      	movge	r3, #0
 8009476:	232d      	movlt	r3, #45	@ 0x2d
 8009478:	700b      	strb	r3, [r1, #0]
 800947a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800947c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009480:	4691      	mov	r9, r2
 8009482:	f023 0820 	bic.w	r8, r3, #32
 8009486:	bfbc      	itt	lt
 8009488:	4632      	movlt	r2, r6
 800948a:	4616      	movlt	r6, r2
 800948c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009490:	d005      	beq.n	800949e <__cvt+0x42>
 8009492:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009496:	d100      	bne.n	800949a <__cvt+0x3e>
 8009498:	3401      	adds	r4, #1
 800949a:	2102      	movs	r1, #2
 800949c:	e000      	b.n	80094a0 <__cvt+0x44>
 800949e:	2103      	movs	r1, #3
 80094a0:	ab03      	add	r3, sp, #12
 80094a2:	9301      	str	r3, [sp, #4]
 80094a4:	ab02      	add	r3, sp, #8
 80094a6:	9300      	str	r3, [sp, #0]
 80094a8:	ec47 6b10 	vmov	d0, r6, r7
 80094ac:	4653      	mov	r3, sl
 80094ae:	4622      	mov	r2, r4
 80094b0:	f000 fe7e 	bl	800a1b0 <_dtoa_r>
 80094b4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80094b8:	4605      	mov	r5, r0
 80094ba:	d119      	bne.n	80094f0 <__cvt+0x94>
 80094bc:	f019 0f01 	tst.w	r9, #1
 80094c0:	d00e      	beq.n	80094e0 <__cvt+0x84>
 80094c2:	eb00 0904 	add.w	r9, r0, r4
 80094c6:	2200      	movs	r2, #0
 80094c8:	2300      	movs	r3, #0
 80094ca:	4630      	mov	r0, r6
 80094cc:	4639      	mov	r1, r7
 80094ce:	f7f7 fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80094d2:	b108      	cbz	r0, 80094d8 <__cvt+0x7c>
 80094d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80094d8:	2230      	movs	r2, #48	@ 0x30
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	454b      	cmp	r3, r9
 80094de:	d31e      	bcc.n	800951e <__cvt+0xc2>
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80094e4:	1b5b      	subs	r3, r3, r5
 80094e6:	4628      	mov	r0, r5
 80094e8:	6013      	str	r3, [r2, #0]
 80094ea:	b004      	add	sp, #16
 80094ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80094f4:	eb00 0904 	add.w	r9, r0, r4
 80094f8:	d1e5      	bne.n	80094c6 <__cvt+0x6a>
 80094fa:	7803      	ldrb	r3, [r0, #0]
 80094fc:	2b30      	cmp	r3, #48	@ 0x30
 80094fe:	d10a      	bne.n	8009516 <__cvt+0xba>
 8009500:	2200      	movs	r2, #0
 8009502:	2300      	movs	r3, #0
 8009504:	4630      	mov	r0, r6
 8009506:	4639      	mov	r1, r7
 8009508:	f7f7 fade 	bl	8000ac8 <__aeabi_dcmpeq>
 800950c:	b918      	cbnz	r0, 8009516 <__cvt+0xba>
 800950e:	f1c4 0401 	rsb	r4, r4, #1
 8009512:	f8ca 4000 	str.w	r4, [sl]
 8009516:	f8da 3000 	ldr.w	r3, [sl]
 800951a:	4499      	add	r9, r3
 800951c:	e7d3      	b.n	80094c6 <__cvt+0x6a>
 800951e:	1c59      	adds	r1, r3, #1
 8009520:	9103      	str	r1, [sp, #12]
 8009522:	701a      	strb	r2, [r3, #0]
 8009524:	e7d9      	b.n	80094da <__cvt+0x7e>

08009526 <__exponent>:
 8009526:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009528:	2900      	cmp	r1, #0
 800952a:	bfba      	itte	lt
 800952c:	4249      	neglt	r1, r1
 800952e:	232d      	movlt	r3, #45	@ 0x2d
 8009530:	232b      	movge	r3, #43	@ 0x2b
 8009532:	2909      	cmp	r1, #9
 8009534:	7002      	strb	r2, [r0, #0]
 8009536:	7043      	strb	r3, [r0, #1]
 8009538:	dd29      	ble.n	800958e <__exponent+0x68>
 800953a:	f10d 0307 	add.w	r3, sp, #7
 800953e:	461d      	mov	r5, r3
 8009540:	270a      	movs	r7, #10
 8009542:	461a      	mov	r2, r3
 8009544:	fbb1 f6f7 	udiv	r6, r1, r7
 8009548:	fb07 1416 	mls	r4, r7, r6, r1
 800954c:	3430      	adds	r4, #48	@ 0x30
 800954e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009552:	460c      	mov	r4, r1
 8009554:	2c63      	cmp	r4, #99	@ 0x63
 8009556:	f103 33ff 	add.w	r3, r3, #4294967295
 800955a:	4631      	mov	r1, r6
 800955c:	dcf1      	bgt.n	8009542 <__exponent+0x1c>
 800955e:	3130      	adds	r1, #48	@ 0x30
 8009560:	1e94      	subs	r4, r2, #2
 8009562:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009566:	1c41      	adds	r1, r0, #1
 8009568:	4623      	mov	r3, r4
 800956a:	42ab      	cmp	r3, r5
 800956c:	d30a      	bcc.n	8009584 <__exponent+0x5e>
 800956e:	f10d 0309 	add.w	r3, sp, #9
 8009572:	1a9b      	subs	r3, r3, r2
 8009574:	42ac      	cmp	r4, r5
 8009576:	bf88      	it	hi
 8009578:	2300      	movhi	r3, #0
 800957a:	3302      	adds	r3, #2
 800957c:	4403      	add	r3, r0
 800957e:	1a18      	subs	r0, r3, r0
 8009580:	b003      	add	sp, #12
 8009582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009584:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009588:	f801 6f01 	strb.w	r6, [r1, #1]!
 800958c:	e7ed      	b.n	800956a <__exponent+0x44>
 800958e:	2330      	movs	r3, #48	@ 0x30
 8009590:	3130      	adds	r1, #48	@ 0x30
 8009592:	7083      	strb	r3, [r0, #2]
 8009594:	70c1      	strb	r1, [r0, #3]
 8009596:	1d03      	adds	r3, r0, #4
 8009598:	e7f1      	b.n	800957e <__exponent+0x58>
	...

0800959c <_printf_float>:
 800959c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095a0:	b08d      	sub	sp, #52	@ 0x34
 80095a2:	460c      	mov	r4, r1
 80095a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80095a8:	4616      	mov	r6, r2
 80095aa:	461f      	mov	r7, r3
 80095ac:	4605      	mov	r5, r0
 80095ae:	f000 fcef 	bl	8009f90 <_localeconv_r>
 80095b2:	6803      	ldr	r3, [r0, #0]
 80095b4:	9304      	str	r3, [sp, #16]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7f6 fe5a 	bl	8000270 <strlen>
 80095bc:	2300      	movs	r3, #0
 80095be:	930a      	str	r3, [sp, #40]	@ 0x28
 80095c0:	f8d8 3000 	ldr.w	r3, [r8]
 80095c4:	9005      	str	r0, [sp, #20]
 80095c6:	3307      	adds	r3, #7
 80095c8:	f023 0307 	bic.w	r3, r3, #7
 80095cc:	f103 0208 	add.w	r2, r3, #8
 80095d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80095d4:	f8d4 b000 	ldr.w	fp, [r4]
 80095d8:	f8c8 2000 	str.w	r2, [r8]
 80095dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80095e0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80095e4:	9307      	str	r3, [sp, #28]
 80095e6:	f8cd 8018 	str.w	r8, [sp, #24]
 80095ea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80095ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80095f2:	4b9c      	ldr	r3, [pc, #624]	@ (8009864 <_printf_float+0x2c8>)
 80095f4:	f04f 32ff 	mov.w	r2, #4294967295
 80095f8:	f7f7 fa98 	bl	8000b2c <__aeabi_dcmpun>
 80095fc:	bb70      	cbnz	r0, 800965c <_printf_float+0xc0>
 80095fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009602:	4b98      	ldr	r3, [pc, #608]	@ (8009864 <_printf_float+0x2c8>)
 8009604:	f04f 32ff 	mov.w	r2, #4294967295
 8009608:	f7f7 fa72 	bl	8000af0 <__aeabi_dcmple>
 800960c:	bb30      	cbnz	r0, 800965c <_printf_float+0xc0>
 800960e:	2200      	movs	r2, #0
 8009610:	2300      	movs	r3, #0
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f7 fa61 	bl	8000adc <__aeabi_dcmplt>
 800961a:	b110      	cbz	r0, 8009622 <_printf_float+0x86>
 800961c:	232d      	movs	r3, #45	@ 0x2d
 800961e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009622:	4a91      	ldr	r2, [pc, #580]	@ (8009868 <_printf_float+0x2cc>)
 8009624:	4b91      	ldr	r3, [pc, #580]	@ (800986c <_printf_float+0x2d0>)
 8009626:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800962a:	bf94      	ite	ls
 800962c:	4690      	movls	r8, r2
 800962e:	4698      	movhi	r8, r3
 8009630:	2303      	movs	r3, #3
 8009632:	6123      	str	r3, [r4, #16]
 8009634:	f02b 0304 	bic.w	r3, fp, #4
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	f04f 0900 	mov.w	r9, #0
 800963e:	9700      	str	r7, [sp, #0]
 8009640:	4633      	mov	r3, r6
 8009642:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009644:	4621      	mov	r1, r4
 8009646:	4628      	mov	r0, r5
 8009648:	f000 f9d2 	bl	80099f0 <_printf_common>
 800964c:	3001      	adds	r0, #1
 800964e:	f040 808d 	bne.w	800976c <_printf_float+0x1d0>
 8009652:	f04f 30ff 	mov.w	r0, #4294967295
 8009656:	b00d      	add	sp, #52	@ 0x34
 8009658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800965c:	4642      	mov	r2, r8
 800965e:	464b      	mov	r3, r9
 8009660:	4640      	mov	r0, r8
 8009662:	4649      	mov	r1, r9
 8009664:	f7f7 fa62 	bl	8000b2c <__aeabi_dcmpun>
 8009668:	b140      	cbz	r0, 800967c <_printf_float+0xe0>
 800966a:	464b      	mov	r3, r9
 800966c:	2b00      	cmp	r3, #0
 800966e:	bfbc      	itt	lt
 8009670:	232d      	movlt	r3, #45	@ 0x2d
 8009672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009676:	4a7e      	ldr	r2, [pc, #504]	@ (8009870 <_printf_float+0x2d4>)
 8009678:	4b7e      	ldr	r3, [pc, #504]	@ (8009874 <_printf_float+0x2d8>)
 800967a:	e7d4      	b.n	8009626 <_printf_float+0x8a>
 800967c:	6863      	ldr	r3, [r4, #4]
 800967e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009682:	9206      	str	r2, [sp, #24]
 8009684:	1c5a      	adds	r2, r3, #1
 8009686:	d13b      	bne.n	8009700 <_printf_float+0x164>
 8009688:	2306      	movs	r3, #6
 800968a:	6063      	str	r3, [r4, #4]
 800968c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009690:	2300      	movs	r3, #0
 8009692:	6022      	str	r2, [r4, #0]
 8009694:	9303      	str	r3, [sp, #12]
 8009696:	ab0a      	add	r3, sp, #40	@ 0x28
 8009698:	e9cd a301 	strd	sl, r3, [sp, #4]
 800969c:	ab09      	add	r3, sp, #36	@ 0x24
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	6861      	ldr	r1, [r4, #4]
 80096a2:	ec49 8b10 	vmov	d0, r8, r9
 80096a6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80096aa:	4628      	mov	r0, r5
 80096ac:	f7ff fed6 	bl	800945c <__cvt>
 80096b0:	9b06      	ldr	r3, [sp, #24]
 80096b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80096b4:	2b47      	cmp	r3, #71	@ 0x47
 80096b6:	4680      	mov	r8, r0
 80096b8:	d129      	bne.n	800970e <_printf_float+0x172>
 80096ba:	1cc8      	adds	r0, r1, #3
 80096bc:	db02      	blt.n	80096c4 <_printf_float+0x128>
 80096be:	6863      	ldr	r3, [r4, #4]
 80096c0:	4299      	cmp	r1, r3
 80096c2:	dd41      	ble.n	8009748 <_printf_float+0x1ac>
 80096c4:	f1aa 0a02 	sub.w	sl, sl, #2
 80096c8:	fa5f fa8a 	uxtb.w	sl, sl
 80096cc:	3901      	subs	r1, #1
 80096ce:	4652      	mov	r2, sl
 80096d0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80096d4:	9109      	str	r1, [sp, #36]	@ 0x24
 80096d6:	f7ff ff26 	bl	8009526 <__exponent>
 80096da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80096dc:	1813      	adds	r3, r2, r0
 80096de:	2a01      	cmp	r2, #1
 80096e0:	4681      	mov	r9, r0
 80096e2:	6123      	str	r3, [r4, #16]
 80096e4:	dc02      	bgt.n	80096ec <_printf_float+0x150>
 80096e6:	6822      	ldr	r2, [r4, #0]
 80096e8:	07d2      	lsls	r2, r2, #31
 80096ea:	d501      	bpl.n	80096f0 <_printf_float+0x154>
 80096ec:	3301      	adds	r3, #1
 80096ee:	6123      	str	r3, [r4, #16]
 80096f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d0a2      	beq.n	800963e <_printf_float+0xa2>
 80096f8:	232d      	movs	r3, #45	@ 0x2d
 80096fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096fe:	e79e      	b.n	800963e <_printf_float+0xa2>
 8009700:	9a06      	ldr	r2, [sp, #24]
 8009702:	2a47      	cmp	r2, #71	@ 0x47
 8009704:	d1c2      	bne.n	800968c <_printf_float+0xf0>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1c0      	bne.n	800968c <_printf_float+0xf0>
 800970a:	2301      	movs	r3, #1
 800970c:	e7bd      	b.n	800968a <_printf_float+0xee>
 800970e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009712:	d9db      	bls.n	80096cc <_printf_float+0x130>
 8009714:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009718:	d118      	bne.n	800974c <_printf_float+0x1b0>
 800971a:	2900      	cmp	r1, #0
 800971c:	6863      	ldr	r3, [r4, #4]
 800971e:	dd0b      	ble.n	8009738 <_printf_float+0x19c>
 8009720:	6121      	str	r1, [r4, #16]
 8009722:	b913      	cbnz	r3, 800972a <_printf_float+0x18e>
 8009724:	6822      	ldr	r2, [r4, #0]
 8009726:	07d0      	lsls	r0, r2, #31
 8009728:	d502      	bpl.n	8009730 <_printf_float+0x194>
 800972a:	3301      	adds	r3, #1
 800972c:	440b      	add	r3, r1
 800972e:	6123      	str	r3, [r4, #16]
 8009730:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	e7db      	b.n	80096f0 <_printf_float+0x154>
 8009738:	b913      	cbnz	r3, 8009740 <_printf_float+0x1a4>
 800973a:	6822      	ldr	r2, [r4, #0]
 800973c:	07d2      	lsls	r2, r2, #31
 800973e:	d501      	bpl.n	8009744 <_printf_float+0x1a8>
 8009740:	3302      	adds	r3, #2
 8009742:	e7f4      	b.n	800972e <_printf_float+0x192>
 8009744:	2301      	movs	r3, #1
 8009746:	e7f2      	b.n	800972e <_printf_float+0x192>
 8009748:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800974c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800974e:	4299      	cmp	r1, r3
 8009750:	db05      	blt.n	800975e <_printf_float+0x1c2>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	6121      	str	r1, [r4, #16]
 8009756:	07d8      	lsls	r0, r3, #31
 8009758:	d5ea      	bpl.n	8009730 <_printf_float+0x194>
 800975a:	1c4b      	adds	r3, r1, #1
 800975c:	e7e7      	b.n	800972e <_printf_float+0x192>
 800975e:	2900      	cmp	r1, #0
 8009760:	bfd4      	ite	le
 8009762:	f1c1 0202 	rsble	r2, r1, #2
 8009766:	2201      	movgt	r2, #1
 8009768:	4413      	add	r3, r2
 800976a:	e7e0      	b.n	800972e <_printf_float+0x192>
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	055a      	lsls	r2, r3, #21
 8009770:	d407      	bmi.n	8009782 <_printf_float+0x1e6>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	4642      	mov	r2, r8
 8009776:	4631      	mov	r1, r6
 8009778:	4628      	mov	r0, r5
 800977a:	47b8      	blx	r7
 800977c:	3001      	adds	r0, #1
 800977e:	d12b      	bne.n	80097d8 <_printf_float+0x23c>
 8009780:	e767      	b.n	8009652 <_printf_float+0xb6>
 8009782:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009786:	f240 80dd 	bls.w	8009944 <_printf_float+0x3a8>
 800978a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800978e:	2200      	movs	r2, #0
 8009790:	2300      	movs	r3, #0
 8009792:	f7f7 f999 	bl	8000ac8 <__aeabi_dcmpeq>
 8009796:	2800      	cmp	r0, #0
 8009798:	d033      	beq.n	8009802 <_printf_float+0x266>
 800979a:	4a37      	ldr	r2, [pc, #220]	@ (8009878 <_printf_float+0x2dc>)
 800979c:	2301      	movs	r3, #1
 800979e:	4631      	mov	r1, r6
 80097a0:	4628      	mov	r0, r5
 80097a2:	47b8      	blx	r7
 80097a4:	3001      	adds	r0, #1
 80097a6:	f43f af54 	beq.w	8009652 <_printf_float+0xb6>
 80097aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80097ae:	4543      	cmp	r3, r8
 80097b0:	db02      	blt.n	80097b8 <_printf_float+0x21c>
 80097b2:	6823      	ldr	r3, [r4, #0]
 80097b4:	07d8      	lsls	r0, r3, #31
 80097b6:	d50f      	bpl.n	80097d8 <_printf_float+0x23c>
 80097b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097bc:	4631      	mov	r1, r6
 80097be:	4628      	mov	r0, r5
 80097c0:	47b8      	blx	r7
 80097c2:	3001      	adds	r0, #1
 80097c4:	f43f af45 	beq.w	8009652 <_printf_float+0xb6>
 80097c8:	f04f 0900 	mov.w	r9, #0
 80097cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80097d0:	f104 0a1a 	add.w	sl, r4, #26
 80097d4:	45c8      	cmp	r8, r9
 80097d6:	dc09      	bgt.n	80097ec <_printf_float+0x250>
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	079b      	lsls	r3, r3, #30
 80097dc:	f100 8103 	bmi.w	80099e6 <_printf_float+0x44a>
 80097e0:	68e0      	ldr	r0, [r4, #12]
 80097e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097e4:	4298      	cmp	r0, r3
 80097e6:	bfb8      	it	lt
 80097e8:	4618      	movlt	r0, r3
 80097ea:	e734      	b.n	8009656 <_printf_float+0xba>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4652      	mov	r2, sl
 80097f0:	4631      	mov	r1, r6
 80097f2:	4628      	mov	r0, r5
 80097f4:	47b8      	blx	r7
 80097f6:	3001      	adds	r0, #1
 80097f8:	f43f af2b 	beq.w	8009652 <_printf_float+0xb6>
 80097fc:	f109 0901 	add.w	r9, r9, #1
 8009800:	e7e8      	b.n	80097d4 <_printf_float+0x238>
 8009802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009804:	2b00      	cmp	r3, #0
 8009806:	dc39      	bgt.n	800987c <_printf_float+0x2e0>
 8009808:	4a1b      	ldr	r2, [pc, #108]	@ (8009878 <_printf_float+0x2dc>)
 800980a:	2301      	movs	r3, #1
 800980c:	4631      	mov	r1, r6
 800980e:	4628      	mov	r0, r5
 8009810:	47b8      	blx	r7
 8009812:	3001      	adds	r0, #1
 8009814:	f43f af1d 	beq.w	8009652 <_printf_float+0xb6>
 8009818:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800981c:	ea59 0303 	orrs.w	r3, r9, r3
 8009820:	d102      	bne.n	8009828 <_printf_float+0x28c>
 8009822:	6823      	ldr	r3, [r4, #0]
 8009824:	07d9      	lsls	r1, r3, #31
 8009826:	d5d7      	bpl.n	80097d8 <_printf_float+0x23c>
 8009828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800982c:	4631      	mov	r1, r6
 800982e:	4628      	mov	r0, r5
 8009830:	47b8      	blx	r7
 8009832:	3001      	adds	r0, #1
 8009834:	f43f af0d 	beq.w	8009652 <_printf_float+0xb6>
 8009838:	f04f 0a00 	mov.w	sl, #0
 800983c:	f104 0b1a 	add.w	fp, r4, #26
 8009840:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009842:	425b      	negs	r3, r3
 8009844:	4553      	cmp	r3, sl
 8009846:	dc01      	bgt.n	800984c <_printf_float+0x2b0>
 8009848:	464b      	mov	r3, r9
 800984a:	e793      	b.n	8009774 <_printf_float+0x1d8>
 800984c:	2301      	movs	r3, #1
 800984e:	465a      	mov	r2, fp
 8009850:	4631      	mov	r1, r6
 8009852:	4628      	mov	r0, r5
 8009854:	47b8      	blx	r7
 8009856:	3001      	adds	r0, #1
 8009858:	f43f aefb 	beq.w	8009652 <_printf_float+0xb6>
 800985c:	f10a 0a01 	add.w	sl, sl, #1
 8009860:	e7ee      	b.n	8009840 <_printf_float+0x2a4>
 8009862:	bf00      	nop
 8009864:	7fefffff 	.word	0x7fefffff
 8009868:	0800bfe4 	.word	0x0800bfe4
 800986c:	0800bfe8 	.word	0x0800bfe8
 8009870:	0800bfec 	.word	0x0800bfec
 8009874:	0800bff0 	.word	0x0800bff0
 8009878:	0800bff4 	.word	0x0800bff4
 800987c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800987e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009882:	4553      	cmp	r3, sl
 8009884:	bfa8      	it	ge
 8009886:	4653      	movge	r3, sl
 8009888:	2b00      	cmp	r3, #0
 800988a:	4699      	mov	r9, r3
 800988c:	dc36      	bgt.n	80098fc <_printf_float+0x360>
 800988e:	f04f 0b00 	mov.w	fp, #0
 8009892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009896:	f104 021a 	add.w	r2, r4, #26
 800989a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800989c:	9306      	str	r3, [sp, #24]
 800989e:	eba3 0309 	sub.w	r3, r3, r9
 80098a2:	455b      	cmp	r3, fp
 80098a4:	dc31      	bgt.n	800990a <_printf_float+0x36e>
 80098a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098a8:	459a      	cmp	sl, r3
 80098aa:	dc3a      	bgt.n	8009922 <_printf_float+0x386>
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	07da      	lsls	r2, r3, #31
 80098b0:	d437      	bmi.n	8009922 <_printf_float+0x386>
 80098b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b4:	ebaa 0903 	sub.w	r9, sl, r3
 80098b8:	9b06      	ldr	r3, [sp, #24]
 80098ba:	ebaa 0303 	sub.w	r3, sl, r3
 80098be:	4599      	cmp	r9, r3
 80098c0:	bfa8      	it	ge
 80098c2:	4699      	movge	r9, r3
 80098c4:	f1b9 0f00 	cmp.w	r9, #0
 80098c8:	dc33      	bgt.n	8009932 <_printf_float+0x396>
 80098ca:	f04f 0800 	mov.w	r8, #0
 80098ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80098d2:	f104 0b1a 	add.w	fp, r4, #26
 80098d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d8:	ebaa 0303 	sub.w	r3, sl, r3
 80098dc:	eba3 0309 	sub.w	r3, r3, r9
 80098e0:	4543      	cmp	r3, r8
 80098e2:	f77f af79 	ble.w	80097d8 <_printf_float+0x23c>
 80098e6:	2301      	movs	r3, #1
 80098e8:	465a      	mov	r2, fp
 80098ea:	4631      	mov	r1, r6
 80098ec:	4628      	mov	r0, r5
 80098ee:	47b8      	blx	r7
 80098f0:	3001      	adds	r0, #1
 80098f2:	f43f aeae 	beq.w	8009652 <_printf_float+0xb6>
 80098f6:	f108 0801 	add.w	r8, r8, #1
 80098fa:	e7ec      	b.n	80098d6 <_printf_float+0x33a>
 80098fc:	4642      	mov	r2, r8
 80098fe:	4631      	mov	r1, r6
 8009900:	4628      	mov	r0, r5
 8009902:	47b8      	blx	r7
 8009904:	3001      	adds	r0, #1
 8009906:	d1c2      	bne.n	800988e <_printf_float+0x2f2>
 8009908:	e6a3      	b.n	8009652 <_printf_float+0xb6>
 800990a:	2301      	movs	r3, #1
 800990c:	4631      	mov	r1, r6
 800990e:	4628      	mov	r0, r5
 8009910:	9206      	str	r2, [sp, #24]
 8009912:	47b8      	blx	r7
 8009914:	3001      	adds	r0, #1
 8009916:	f43f ae9c 	beq.w	8009652 <_printf_float+0xb6>
 800991a:	9a06      	ldr	r2, [sp, #24]
 800991c:	f10b 0b01 	add.w	fp, fp, #1
 8009920:	e7bb      	b.n	800989a <_printf_float+0x2fe>
 8009922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009926:	4631      	mov	r1, r6
 8009928:	4628      	mov	r0, r5
 800992a:	47b8      	blx	r7
 800992c:	3001      	adds	r0, #1
 800992e:	d1c0      	bne.n	80098b2 <_printf_float+0x316>
 8009930:	e68f      	b.n	8009652 <_printf_float+0xb6>
 8009932:	9a06      	ldr	r2, [sp, #24]
 8009934:	464b      	mov	r3, r9
 8009936:	4442      	add	r2, r8
 8009938:	4631      	mov	r1, r6
 800993a:	4628      	mov	r0, r5
 800993c:	47b8      	blx	r7
 800993e:	3001      	adds	r0, #1
 8009940:	d1c3      	bne.n	80098ca <_printf_float+0x32e>
 8009942:	e686      	b.n	8009652 <_printf_float+0xb6>
 8009944:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009948:	f1ba 0f01 	cmp.w	sl, #1
 800994c:	dc01      	bgt.n	8009952 <_printf_float+0x3b6>
 800994e:	07db      	lsls	r3, r3, #31
 8009950:	d536      	bpl.n	80099c0 <_printf_float+0x424>
 8009952:	2301      	movs	r3, #1
 8009954:	4642      	mov	r2, r8
 8009956:	4631      	mov	r1, r6
 8009958:	4628      	mov	r0, r5
 800995a:	47b8      	blx	r7
 800995c:	3001      	adds	r0, #1
 800995e:	f43f ae78 	beq.w	8009652 <_printf_float+0xb6>
 8009962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009966:	4631      	mov	r1, r6
 8009968:	4628      	mov	r0, r5
 800996a:	47b8      	blx	r7
 800996c:	3001      	adds	r0, #1
 800996e:	f43f ae70 	beq.w	8009652 <_printf_float+0xb6>
 8009972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009976:	2200      	movs	r2, #0
 8009978:	2300      	movs	r3, #0
 800997a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800997e:	f7f7 f8a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009982:	b9c0      	cbnz	r0, 80099b6 <_printf_float+0x41a>
 8009984:	4653      	mov	r3, sl
 8009986:	f108 0201 	add.w	r2, r8, #1
 800998a:	4631      	mov	r1, r6
 800998c:	4628      	mov	r0, r5
 800998e:	47b8      	blx	r7
 8009990:	3001      	adds	r0, #1
 8009992:	d10c      	bne.n	80099ae <_printf_float+0x412>
 8009994:	e65d      	b.n	8009652 <_printf_float+0xb6>
 8009996:	2301      	movs	r3, #1
 8009998:	465a      	mov	r2, fp
 800999a:	4631      	mov	r1, r6
 800999c:	4628      	mov	r0, r5
 800999e:	47b8      	blx	r7
 80099a0:	3001      	adds	r0, #1
 80099a2:	f43f ae56 	beq.w	8009652 <_printf_float+0xb6>
 80099a6:	f108 0801 	add.w	r8, r8, #1
 80099aa:	45d0      	cmp	r8, sl
 80099ac:	dbf3      	blt.n	8009996 <_printf_float+0x3fa>
 80099ae:	464b      	mov	r3, r9
 80099b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80099b4:	e6df      	b.n	8009776 <_printf_float+0x1da>
 80099b6:	f04f 0800 	mov.w	r8, #0
 80099ba:	f104 0b1a 	add.w	fp, r4, #26
 80099be:	e7f4      	b.n	80099aa <_printf_float+0x40e>
 80099c0:	2301      	movs	r3, #1
 80099c2:	4642      	mov	r2, r8
 80099c4:	e7e1      	b.n	800998a <_printf_float+0x3ee>
 80099c6:	2301      	movs	r3, #1
 80099c8:	464a      	mov	r2, r9
 80099ca:	4631      	mov	r1, r6
 80099cc:	4628      	mov	r0, r5
 80099ce:	47b8      	blx	r7
 80099d0:	3001      	adds	r0, #1
 80099d2:	f43f ae3e 	beq.w	8009652 <_printf_float+0xb6>
 80099d6:	f108 0801 	add.w	r8, r8, #1
 80099da:	68e3      	ldr	r3, [r4, #12]
 80099dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80099de:	1a5b      	subs	r3, r3, r1
 80099e0:	4543      	cmp	r3, r8
 80099e2:	dcf0      	bgt.n	80099c6 <_printf_float+0x42a>
 80099e4:	e6fc      	b.n	80097e0 <_printf_float+0x244>
 80099e6:	f04f 0800 	mov.w	r8, #0
 80099ea:	f104 0919 	add.w	r9, r4, #25
 80099ee:	e7f4      	b.n	80099da <_printf_float+0x43e>

080099f0 <_printf_common>:
 80099f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f4:	4616      	mov	r6, r2
 80099f6:	4698      	mov	r8, r3
 80099f8:	688a      	ldr	r2, [r1, #8]
 80099fa:	690b      	ldr	r3, [r1, #16]
 80099fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009a00:	4293      	cmp	r3, r2
 8009a02:	bfb8      	it	lt
 8009a04:	4613      	movlt	r3, r2
 8009a06:	6033      	str	r3, [r6, #0]
 8009a08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	460c      	mov	r4, r1
 8009a10:	b10a      	cbz	r2, 8009a16 <_printf_common+0x26>
 8009a12:	3301      	adds	r3, #1
 8009a14:	6033      	str	r3, [r6, #0]
 8009a16:	6823      	ldr	r3, [r4, #0]
 8009a18:	0699      	lsls	r1, r3, #26
 8009a1a:	bf42      	ittt	mi
 8009a1c:	6833      	ldrmi	r3, [r6, #0]
 8009a1e:	3302      	addmi	r3, #2
 8009a20:	6033      	strmi	r3, [r6, #0]
 8009a22:	6825      	ldr	r5, [r4, #0]
 8009a24:	f015 0506 	ands.w	r5, r5, #6
 8009a28:	d106      	bne.n	8009a38 <_printf_common+0x48>
 8009a2a:	f104 0a19 	add.w	sl, r4, #25
 8009a2e:	68e3      	ldr	r3, [r4, #12]
 8009a30:	6832      	ldr	r2, [r6, #0]
 8009a32:	1a9b      	subs	r3, r3, r2
 8009a34:	42ab      	cmp	r3, r5
 8009a36:	dc26      	bgt.n	8009a86 <_printf_common+0x96>
 8009a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009a3c:	6822      	ldr	r2, [r4, #0]
 8009a3e:	3b00      	subs	r3, #0
 8009a40:	bf18      	it	ne
 8009a42:	2301      	movne	r3, #1
 8009a44:	0692      	lsls	r2, r2, #26
 8009a46:	d42b      	bmi.n	8009aa0 <_printf_common+0xb0>
 8009a48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	4638      	mov	r0, r7
 8009a50:	47c8      	blx	r9
 8009a52:	3001      	adds	r0, #1
 8009a54:	d01e      	beq.n	8009a94 <_printf_common+0xa4>
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	6922      	ldr	r2, [r4, #16]
 8009a5a:	f003 0306 	and.w	r3, r3, #6
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	bf02      	ittt	eq
 8009a62:	68e5      	ldreq	r5, [r4, #12]
 8009a64:	6833      	ldreq	r3, [r6, #0]
 8009a66:	1aed      	subeq	r5, r5, r3
 8009a68:	68a3      	ldr	r3, [r4, #8]
 8009a6a:	bf0c      	ite	eq
 8009a6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a70:	2500      	movne	r5, #0
 8009a72:	4293      	cmp	r3, r2
 8009a74:	bfc4      	itt	gt
 8009a76:	1a9b      	subgt	r3, r3, r2
 8009a78:	18ed      	addgt	r5, r5, r3
 8009a7a:	2600      	movs	r6, #0
 8009a7c:	341a      	adds	r4, #26
 8009a7e:	42b5      	cmp	r5, r6
 8009a80:	d11a      	bne.n	8009ab8 <_printf_common+0xc8>
 8009a82:	2000      	movs	r0, #0
 8009a84:	e008      	b.n	8009a98 <_printf_common+0xa8>
 8009a86:	2301      	movs	r3, #1
 8009a88:	4652      	mov	r2, sl
 8009a8a:	4641      	mov	r1, r8
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	47c8      	blx	r9
 8009a90:	3001      	adds	r0, #1
 8009a92:	d103      	bne.n	8009a9c <_printf_common+0xac>
 8009a94:	f04f 30ff 	mov.w	r0, #4294967295
 8009a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9c:	3501      	adds	r5, #1
 8009a9e:	e7c6      	b.n	8009a2e <_printf_common+0x3e>
 8009aa0:	18e1      	adds	r1, r4, r3
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	2030      	movs	r0, #48	@ 0x30
 8009aa6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009aaa:	4422      	add	r2, r4
 8009aac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ab0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	e7c7      	b.n	8009a48 <_printf_common+0x58>
 8009ab8:	2301      	movs	r3, #1
 8009aba:	4622      	mov	r2, r4
 8009abc:	4641      	mov	r1, r8
 8009abe:	4638      	mov	r0, r7
 8009ac0:	47c8      	blx	r9
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d0e6      	beq.n	8009a94 <_printf_common+0xa4>
 8009ac6:	3601      	adds	r6, #1
 8009ac8:	e7d9      	b.n	8009a7e <_printf_common+0x8e>
	...

08009acc <_printf_i>:
 8009acc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad0:	7e0f      	ldrb	r7, [r1, #24]
 8009ad2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ad4:	2f78      	cmp	r7, #120	@ 0x78
 8009ad6:	4691      	mov	r9, r2
 8009ad8:	4680      	mov	r8, r0
 8009ada:	460c      	mov	r4, r1
 8009adc:	469a      	mov	sl, r3
 8009ade:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ae2:	d807      	bhi.n	8009af4 <_printf_i+0x28>
 8009ae4:	2f62      	cmp	r7, #98	@ 0x62
 8009ae6:	d80a      	bhi.n	8009afe <_printf_i+0x32>
 8009ae8:	2f00      	cmp	r7, #0
 8009aea:	f000 80d2 	beq.w	8009c92 <_printf_i+0x1c6>
 8009aee:	2f58      	cmp	r7, #88	@ 0x58
 8009af0:	f000 80b9 	beq.w	8009c66 <_printf_i+0x19a>
 8009af4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009af8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009afc:	e03a      	b.n	8009b74 <_printf_i+0xa8>
 8009afe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009b02:	2b15      	cmp	r3, #21
 8009b04:	d8f6      	bhi.n	8009af4 <_printf_i+0x28>
 8009b06:	a101      	add	r1, pc, #4	@ (adr r1, 8009b0c <_printf_i+0x40>)
 8009b08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b0c:	08009b65 	.word	0x08009b65
 8009b10:	08009b79 	.word	0x08009b79
 8009b14:	08009af5 	.word	0x08009af5
 8009b18:	08009af5 	.word	0x08009af5
 8009b1c:	08009af5 	.word	0x08009af5
 8009b20:	08009af5 	.word	0x08009af5
 8009b24:	08009b79 	.word	0x08009b79
 8009b28:	08009af5 	.word	0x08009af5
 8009b2c:	08009af5 	.word	0x08009af5
 8009b30:	08009af5 	.word	0x08009af5
 8009b34:	08009af5 	.word	0x08009af5
 8009b38:	08009c79 	.word	0x08009c79
 8009b3c:	08009ba3 	.word	0x08009ba3
 8009b40:	08009c33 	.word	0x08009c33
 8009b44:	08009af5 	.word	0x08009af5
 8009b48:	08009af5 	.word	0x08009af5
 8009b4c:	08009c9b 	.word	0x08009c9b
 8009b50:	08009af5 	.word	0x08009af5
 8009b54:	08009ba3 	.word	0x08009ba3
 8009b58:	08009af5 	.word	0x08009af5
 8009b5c:	08009af5 	.word	0x08009af5
 8009b60:	08009c3b 	.word	0x08009c3b
 8009b64:	6833      	ldr	r3, [r6, #0]
 8009b66:	1d1a      	adds	r2, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6032      	str	r2, [r6, #0]
 8009b6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009b70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009b74:	2301      	movs	r3, #1
 8009b76:	e09d      	b.n	8009cb4 <_printf_i+0x1e8>
 8009b78:	6833      	ldr	r3, [r6, #0]
 8009b7a:	6820      	ldr	r0, [r4, #0]
 8009b7c:	1d19      	adds	r1, r3, #4
 8009b7e:	6031      	str	r1, [r6, #0]
 8009b80:	0606      	lsls	r6, r0, #24
 8009b82:	d501      	bpl.n	8009b88 <_printf_i+0xbc>
 8009b84:	681d      	ldr	r5, [r3, #0]
 8009b86:	e003      	b.n	8009b90 <_printf_i+0xc4>
 8009b88:	0645      	lsls	r5, r0, #25
 8009b8a:	d5fb      	bpl.n	8009b84 <_printf_i+0xb8>
 8009b8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009b90:	2d00      	cmp	r5, #0
 8009b92:	da03      	bge.n	8009b9c <_printf_i+0xd0>
 8009b94:	232d      	movs	r3, #45	@ 0x2d
 8009b96:	426d      	negs	r5, r5
 8009b98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b9c:	4859      	ldr	r0, [pc, #356]	@ (8009d04 <_printf_i+0x238>)
 8009b9e:	230a      	movs	r3, #10
 8009ba0:	e011      	b.n	8009bc6 <_printf_i+0xfa>
 8009ba2:	6821      	ldr	r1, [r4, #0]
 8009ba4:	6833      	ldr	r3, [r6, #0]
 8009ba6:	0608      	lsls	r0, r1, #24
 8009ba8:	f853 5b04 	ldr.w	r5, [r3], #4
 8009bac:	d402      	bmi.n	8009bb4 <_printf_i+0xe8>
 8009bae:	0649      	lsls	r1, r1, #25
 8009bb0:	bf48      	it	mi
 8009bb2:	b2ad      	uxthmi	r5, r5
 8009bb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8009bb6:	4853      	ldr	r0, [pc, #332]	@ (8009d04 <_printf_i+0x238>)
 8009bb8:	6033      	str	r3, [r6, #0]
 8009bba:	bf14      	ite	ne
 8009bbc:	230a      	movne	r3, #10
 8009bbe:	2308      	moveq	r3, #8
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009bc6:	6866      	ldr	r6, [r4, #4]
 8009bc8:	60a6      	str	r6, [r4, #8]
 8009bca:	2e00      	cmp	r6, #0
 8009bcc:	bfa2      	ittt	ge
 8009bce:	6821      	ldrge	r1, [r4, #0]
 8009bd0:	f021 0104 	bicge.w	r1, r1, #4
 8009bd4:	6021      	strge	r1, [r4, #0]
 8009bd6:	b90d      	cbnz	r5, 8009bdc <_printf_i+0x110>
 8009bd8:	2e00      	cmp	r6, #0
 8009bda:	d04b      	beq.n	8009c74 <_printf_i+0x1a8>
 8009bdc:	4616      	mov	r6, r2
 8009bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8009be2:	fb03 5711 	mls	r7, r3, r1, r5
 8009be6:	5dc7      	ldrb	r7, [r0, r7]
 8009be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bec:	462f      	mov	r7, r5
 8009bee:	42bb      	cmp	r3, r7
 8009bf0:	460d      	mov	r5, r1
 8009bf2:	d9f4      	bls.n	8009bde <_printf_i+0x112>
 8009bf4:	2b08      	cmp	r3, #8
 8009bf6:	d10b      	bne.n	8009c10 <_printf_i+0x144>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	07df      	lsls	r7, r3, #31
 8009bfc:	d508      	bpl.n	8009c10 <_printf_i+0x144>
 8009bfe:	6923      	ldr	r3, [r4, #16]
 8009c00:	6861      	ldr	r1, [r4, #4]
 8009c02:	4299      	cmp	r1, r3
 8009c04:	bfde      	ittt	le
 8009c06:	2330      	movle	r3, #48	@ 0x30
 8009c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c10:	1b92      	subs	r2, r2, r6
 8009c12:	6122      	str	r2, [r4, #16]
 8009c14:	f8cd a000 	str.w	sl, [sp]
 8009c18:	464b      	mov	r3, r9
 8009c1a:	aa03      	add	r2, sp, #12
 8009c1c:	4621      	mov	r1, r4
 8009c1e:	4640      	mov	r0, r8
 8009c20:	f7ff fee6 	bl	80099f0 <_printf_common>
 8009c24:	3001      	adds	r0, #1
 8009c26:	d14a      	bne.n	8009cbe <_printf_i+0x1f2>
 8009c28:	f04f 30ff 	mov.w	r0, #4294967295
 8009c2c:	b004      	add	sp, #16
 8009c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c32:	6823      	ldr	r3, [r4, #0]
 8009c34:	f043 0320 	orr.w	r3, r3, #32
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	4833      	ldr	r0, [pc, #204]	@ (8009d08 <_printf_i+0x23c>)
 8009c3c:	2778      	movs	r7, #120	@ 0x78
 8009c3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	6831      	ldr	r1, [r6, #0]
 8009c46:	061f      	lsls	r7, r3, #24
 8009c48:	f851 5b04 	ldr.w	r5, [r1], #4
 8009c4c:	d402      	bmi.n	8009c54 <_printf_i+0x188>
 8009c4e:	065f      	lsls	r7, r3, #25
 8009c50:	bf48      	it	mi
 8009c52:	b2ad      	uxthmi	r5, r5
 8009c54:	6031      	str	r1, [r6, #0]
 8009c56:	07d9      	lsls	r1, r3, #31
 8009c58:	bf44      	itt	mi
 8009c5a:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5e:	6023      	strmi	r3, [r4, #0]
 8009c60:	b11d      	cbz	r5, 8009c6a <_printf_i+0x19e>
 8009c62:	2310      	movs	r3, #16
 8009c64:	e7ac      	b.n	8009bc0 <_printf_i+0xf4>
 8009c66:	4827      	ldr	r0, [pc, #156]	@ (8009d04 <_printf_i+0x238>)
 8009c68:	e7e9      	b.n	8009c3e <_printf_i+0x172>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	f023 0320 	bic.w	r3, r3, #32
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	e7f6      	b.n	8009c62 <_printf_i+0x196>
 8009c74:	4616      	mov	r6, r2
 8009c76:	e7bd      	b.n	8009bf4 <_printf_i+0x128>
 8009c78:	6833      	ldr	r3, [r6, #0]
 8009c7a:	6825      	ldr	r5, [r4, #0]
 8009c7c:	6961      	ldr	r1, [r4, #20]
 8009c7e:	1d18      	adds	r0, r3, #4
 8009c80:	6030      	str	r0, [r6, #0]
 8009c82:	062e      	lsls	r6, r5, #24
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0x1c0>
 8009c88:	6019      	str	r1, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0x1c6>
 8009c8c:	0668      	lsls	r0, r5, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0x1bc>
 8009c90:	8019      	strh	r1, [r3, #0]
 8009c92:	2300      	movs	r3, #0
 8009c94:	6123      	str	r3, [r4, #16]
 8009c96:	4616      	mov	r6, r2
 8009c98:	e7bc      	b.n	8009c14 <_printf_i+0x148>
 8009c9a:	6833      	ldr	r3, [r6, #0]
 8009c9c:	1d1a      	adds	r2, r3, #4
 8009c9e:	6032      	str	r2, [r6, #0]
 8009ca0:	681e      	ldr	r6, [r3, #0]
 8009ca2:	6862      	ldr	r2, [r4, #4]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4630      	mov	r0, r6
 8009ca8:	f7f6 fa92 	bl	80001d0 <memchr>
 8009cac:	b108      	cbz	r0, 8009cb2 <_printf_i+0x1e6>
 8009cae:	1b80      	subs	r0, r0, r6
 8009cb0:	6060      	str	r0, [r4, #4]
 8009cb2:	6863      	ldr	r3, [r4, #4]
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cbc:	e7aa      	b.n	8009c14 <_printf_i+0x148>
 8009cbe:	6923      	ldr	r3, [r4, #16]
 8009cc0:	4632      	mov	r2, r6
 8009cc2:	4649      	mov	r1, r9
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	47d0      	blx	sl
 8009cc8:	3001      	adds	r0, #1
 8009cca:	d0ad      	beq.n	8009c28 <_printf_i+0x15c>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	079b      	lsls	r3, r3, #30
 8009cd0:	d413      	bmi.n	8009cfa <_printf_i+0x22e>
 8009cd2:	68e0      	ldr	r0, [r4, #12]
 8009cd4:	9b03      	ldr	r3, [sp, #12]
 8009cd6:	4298      	cmp	r0, r3
 8009cd8:	bfb8      	it	lt
 8009cda:	4618      	movlt	r0, r3
 8009cdc:	e7a6      	b.n	8009c2c <_printf_i+0x160>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	47d0      	blx	sl
 8009ce8:	3001      	adds	r0, #1
 8009cea:	d09d      	beq.n	8009c28 <_printf_i+0x15c>
 8009cec:	3501      	adds	r5, #1
 8009cee:	68e3      	ldr	r3, [r4, #12]
 8009cf0:	9903      	ldr	r1, [sp, #12]
 8009cf2:	1a5b      	subs	r3, r3, r1
 8009cf4:	42ab      	cmp	r3, r5
 8009cf6:	dcf2      	bgt.n	8009cde <_printf_i+0x212>
 8009cf8:	e7eb      	b.n	8009cd2 <_printf_i+0x206>
 8009cfa:	2500      	movs	r5, #0
 8009cfc:	f104 0619 	add.w	r6, r4, #25
 8009d00:	e7f5      	b.n	8009cee <_printf_i+0x222>
 8009d02:	bf00      	nop
 8009d04:	0800bff6 	.word	0x0800bff6
 8009d08:	0800c007 	.word	0x0800c007

08009d0c <std>:
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	b510      	push	{r4, lr}
 8009d10:	4604      	mov	r4, r0
 8009d12:	e9c0 3300 	strd	r3, r3, [r0]
 8009d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d1a:	6083      	str	r3, [r0, #8]
 8009d1c:	8181      	strh	r1, [r0, #12]
 8009d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009d20:	81c2      	strh	r2, [r0, #14]
 8009d22:	6183      	str	r3, [r0, #24]
 8009d24:	4619      	mov	r1, r3
 8009d26:	2208      	movs	r2, #8
 8009d28:	305c      	adds	r0, #92	@ 0x5c
 8009d2a:	f000 f928 	bl	8009f7e <memset>
 8009d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d64 <std+0x58>)
 8009d30:	6263      	str	r3, [r4, #36]	@ 0x24
 8009d32:	4b0d      	ldr	r3, [pc, #52]	@ (8009d68 <std+0x5c>)
 8009d34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d36:	4b0d      	ldr	r3, [pc, #52]	@ (8009d6c <std+0x60>)
 8009d38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d70 <std+0x64>)
 8009d3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8009d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009d74 <std+0x68>)
 8009d40:	6224      	str	r4, [r4, #32]
 8009d42:	429c      	cmp	r4, r3
 8009d44:	d006      	beq.n	8009d54 <std+0x48>
 8009d46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009d4a:	4294      	cmp	r4, r2
 8009d4c:	d002      	beq.n	8009d54 <std+0x48>
 8009d4e:	33d0      	adds	r3, #208	@ 0xd0
 8009d50:	429c      	cmp	r4, r3
 8009d52:	d105      	bne.n	8009d60 <std+0x54>
 8009d54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f000 b99c 	b.w	800a098 <__retarget_lock_init_recursive>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	bf00      	nop
 8009d64:	08009ef9 	.word	0x08009ef9
 8009d68:	08009f1b 	.word	0x08009f1b
 8009d6c:	08009f53 	.word	0x08009f53
 8009d70:	08009f77 	.word	0x08009f77
 8009d74:	20000a6c 	.word	0x20000a6c

08009d78 <stdio_exit_handler>:
 8009d78:	4a02      	ldr	r2, [pc, #8]	@ (8009d84 <stdio_exit_handler+0xc>)
 8009d7a:	4903      	ldr	r1, [pc, #12]	@ (8009d88 <stdio_exit_handler+0x10>)
 8009d7c:	4803      	ldr	r0, [pc, #12]	@ (8009d8c <stdio_exit_handler+0x14>)
 8009d7e:	f000 b869 	b.w	8009e54 <_fwalk_sglue>
 8009d82:	bf00      	nop
 8009d84:	2000002c 	.word	0x2000002c
 8009d88:	0800b889 	.word	0x0800b889
 8009d8c:	2000003c 	.word	0x2000003c

08009d90 <cleanup_stdio>:
 8009d90:	6841      	ldr	r1, [r0, #4]
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <cleanup_stdio+0x34>)
 8009d94:	4299      	cmp	r1, r3
 8009d96:	b510      	push	{r4, lr}
 8009d98:	4604      	mov	r4, r0
 8009d9a:	d001      	beq.n	8009da0 <cleanup_stdio+0x10>
 8009d9c:	f001 fd74 	bl	800b888 <_fflush_r>
 8009da0:	68a1      	ldr	r1, [r4, #8]
 8009da2:	4b09      	ldr	r3, [pc, #36]	@ (8009dc8 <cleanup_stdio+0x38>)
 8009da4:	4299      	cmp	r1, r3
 8009da6:	d002      	beq.n	8009dae <cleanup_stdio+0x1e>
 8009da8:	4620      	mov	r0, r4
 8009daa:	f001 fd6d 	bl	800b888 <_fflush_r>
 8009dae:	68e1      	ldr	r1, [r4, #12]
 8009db0:	4b06      	ldr	r3, [pc, #24]	@ (8009dcc <cleanup_stdio+0x3c>)
 8009db2:	4299      	cmp	r1, r3
 8009db4:	d004      	beq.n	8009dc0 <cleanup_stdio+0x30>
 8009db6:	4620      	mov	r0, r4
 8009db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dbc:	f001 bd64 	b.w	800b888 <_fflush_r>
 8009dc0:	bd10      	pop	{r4, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000a6c 	.word	0x20000a6c
 8009dc8:	20000ad4 	.word	0x20000ad4
 8009dcc:	20000b3c 	.word	0x20000b3c

08009dd0 <global_stdio_init.part.0>:
 8009dd0:	b510      	push	{r4, lr}
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <global_stdio_init.part.0+0x30>)
 8009dd4:	4c0b      	ldr	r4, [pc, #44]	@ (8009e04 <global_stdio_init.part.0+0x34>)
 8009dd6:	4a0c      	ldr	r2, [pc, #48]	@ (8009e08 <global_stdio_init.part.0+0x38>)
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	4620      	mov	r0, r4
 8009ddc:	2200      	movs	r2, #0
 8009dde:	2104      	movs	r1, #4
 8009de0:	f7ff ff94 	bl	8009d0c <std>
 8009de4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009de8:	2201      	movs	r2, #1
 8009dea:	2109      	movs	r1, #9
 8009dec:	f7ff ff8e 	bl	8009d0c <std>
 8009df0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009df4:	2202      	movs	r2, #2
 8009df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dfa:	2112      	movs	r1, #18
 8009dfc:	f7ff bf86 	b.w	8009d0c <std>
 8009e00:	20000ba4 	.word	0x20000ba4
 8009e04:	20000a6c 	.word	0x20000a6c
 8009e08:	08009d79 	.word	0x08009d79

08009e0c <__sfp_lock_acquire>:
 8009e0c:	4801      	ldr	r0, [pc, #4]	@ (8009e14 <__sfp_lock_acquire+0x8>)
 8009e0e:	f000 b944 	b.w	800a09a <__retarget_lock_acquire_recursive>
 8009e12:	bf00      	nop
 8009e14:	20000bad 	.word	0x20000bad

08009e18 <__sfp_lock_release>:
 8009e18:	4801      	ldr	r0, [pc, #4]	@ (8009e20 <__sfp_lock_release+0x8>)
 8009e1a:	f000 b93f 	b.w	800a09c <__retarget_lock_release_recursive>
 8009e1e:	bf00      	nop
 8009e20:	20000bad 	.word	0x20000bad

08009e24 <__sinit>:
 8009e24:	b510      	push	{r4, lr}
 8009e26:	4604      	mov	r4, r0
 8009e28:	f7ff fff0 	bl	8009e0c <__sfp_lock_acquire>
 8009e2c:	6a23      	ldr	r3, [r4, #32]
 8009e2e:	b11b      	cbz	r3, 8009e38 <__sinit+0x14>
 8009e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e34:	f7ff bff0 	b.w	8009e18 <__sfp_lock_release>
 8009e38:	4b04      	ldr	r3, [pc, #16]	@ (8009e4c <__sinit+0x28>)
 8009e3a:	6223      	str	r3, [r4, #32]
 8009e3c:	4b04      	ldr	r3, [pc, #16]	@ (8009e50 <__sinit+0x2c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1f5      	bne.n	8009e30 <__sinit+0xc>
 8009e44:	f7ff ffc4 	bl	8009dd0 <global_stdio_init.part.0>
 8009e48:	e7f2      	b.n	8009e30 <__sinit+0xc>
 8009e4a:	bf00      	nop
 8009e4c:	08009d91 	.word	0x08009d91
 8009e50:	20000ba4 	.word	0x20000ba4

08009e54 <_fwalk_sglue>:
 8009e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e58:	4607      	mov	r7, r0
 8009e5a:	4688      	mov	r8, r1
 8009e5c:	4614      	mov	r4, r2
 8009e5e:	2600      	movs	r6, #0
 8009e60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e64:	f1b9 0901 	subs.w	r9, r9, #1
 8009e68:	d505      	bpl.n	8009e76 <_fwalk_sglue+0x22>
 8009e6a:	6824      	ldr	r4, [r4, #0]
 8009e6c:	2c00      	cmp	r4, #0
 8009e6e:	d1f7      	bne.n	8009e60 <_fwalk_sglue+0xc>
 8009e70:	4630      	mov	r0, r6
 8009e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e76:	89ab      	ldrh	r3, [r5, #12]
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d907      	bls.n	8009e8c <_fwalk_sglue+0x38>
 8009e7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e80:	3301      	adds	r3, #1
 8009e82:	d003      	beq.n	8009e8c <_fwalk_sglue+0x38>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4638      	mov	r0, r7
 8009e88:	47c0      	blx	r8
 8009e8a:	4306      	orrs	r6, r0
 8009e8c:	3568      	adds	r5, #104	@ 0x68
 8009e8e:	e7e9      	b.n	8009e64 <_fwalk_sglue+0x10>

08009e90 <sniprintf>:
 8009e90:	b40c      	push	{r2, r3}
 8009e92:	b530      	push	{r4, r5, lr}
 8009e94:	4b17      	ldr	r3, [pc, #92]	@ (8009ef4 <sniprintf+0x64>)
 8009e96:	1e0c      	subs	r4, r1, #0
 8009e98:	681d      	ldr	r5, [r3, #0]
 8009e9a:	b09d      	sub	sp, #116	@ 0x74
 8009e9c:	da08      	bge.n	8009eb0 <sniprintf+0x20>
 8009e9e:	238b      	movs	r3, #139	@ 0x8b
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea6:	b01d      	add	sp, #116	@ 0x74
 8009ea8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009eac:	b002      	add	sp, #8
 8009eae:	4770      	bx	lr
 8009eb0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009eb4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009eb8:	bf14      	ite	ne
 8009eba:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ebe:	4623      	moveq	r3, r4
 8009ec0:	9304      	str	r3, [sp, #16]
 8009ec2:	9307      	str	r3, [sp, #28]
 8009ec4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ec8:	9002      	str	r0, [sp, #8]
 8009eca:	9006      	str	r0, [sp, #24]
 8009ecc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ed0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009ed2:	ab21      	add	r3, sp, #132	@ 0x84
 8009ed4:	a902      	add	r1, sp, #8
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	f001 fb55 	bl	800b588 <_svfiprintf_r>
 8009ede:	1c43      	adds	r3, r0, #1
 8009ee0:	bfbc      	itt	lt
 8009ee2:	238b      	movlt	r3, #139	@ 0x8b
 8009ee4:	602b      	strlt	r3, [r5, #0]
 8009ee6:	2c00      	cmp	r4, #0
 8009ee8:	d0dd      	beq.n	8009ea6 <sniprintf+0x16>
 8009eea:	9b02      	ldr	r3, [sp, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	701a      	strb	r2, [r3, #0]
 8009ef0:	e7d9      	b.n	8009ea6 <sniprintf+0x16>
 8009ef2:	bf00      	nop
 8009ef4:	20000038 	.word	0x20000038

08009ef8 <__sread>:
 8009ef8:	b510      	push	{r4, lr}
 8009efa:	460c      	mov	r4, r1
 8009efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f00:	f000 f86c 	bl	8009fdc <_read_r>
 8009f04:	2800      	cmp	r0, #0
 8009f06:	bfab      	itete	ge
 8009f08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8009f0c:	181b      	addge	r3, r3, r0
 8009f0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009f12:	bfac      	ite	ge
 8009f14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009f16:	81a3      	strhlt	r3, [r4, #12]
 8009f18:	bd10      	pop	{r4, pc}

08009f1a <__swrite>:
 8009f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1e:	461f      	mov	r7, r3
 8009f20:	898b      	ldrh	r3, [r1, #12]
 8009f22:	05db      	lsls	r3, r3, #23
 8009f24:	4605      	mov	r5, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4616      	mov	r6, r2
 8009f2a:	d505      	bpl.n	8009f38 <__swrite+0x1e>
 8009f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f30:	2302      	movs	r3, #2
 8009f32:	2200      	movs	r2, #0
 8009f34:	f000 f840 	bl	8009fb8 <_lseek_r>
 8009f38:	89a3      	ldrh	r3, [r4, #12]
 8009f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f42:	81a3      	strh	r3, [r4, #12]
 8009f44:	4632      	mov	r2, r6
 8009f46:	463b      	mov	r3, r7
 8009f48:	4628      	mov	r0, r5
 8009f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4e:	f000 b867 	b.w	800a020 <_write_r>

08009f52 <__sseek>:
 8009f52:	b510      	push	{r4, lr}
 8009f54:	460c      	mov	r4, r1
 8009f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f5a:	f000 f82d 	bl	8009fb8 <_lseek_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	bf15      	itete	ne
 8009f64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f6e:	81a3      	strheq	r3, [r4, #12]
 8009f70:	bf18      	it	ne
 8009f72:	81a3      	strhne	r3, [r4, #12]
 8009f74:	bd10      	pop	{r4, pc}

08009f76 <__sclose>:
 8009f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f7a:	f000 b80d 	b.w	8009f98 <_close_r>

08009f7e <memset>:
 8009f7e:	4402      	add	r2, r0
 8009f80:	4603      	mov	r3, r0
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d100      	bne.n	8009f88 <memset+0xa>
 8009f86:	4770      	bx	lr
 8009f88:	f803 1b01 	strb.w	r1, [r3], #1
 8009f8c:	e7f9      	b.n	8009f82 <memset+0x4>
	...

08009f90 <_localeconv_r>:
 8009f90:	4800      	ldr	r0, [pc, #0]	@ (8009f94 <_localeconv_r+0x4>)
 8009f92:	4770      	bx	lr
 8009f94:	20000178 	.word	0x20000178

08009f98 <_close_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4d06      	ldr	r5, [pc, #24]	@ (8009fb4 <_close_r+0x1c>)
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	4608      	mov	r0, r1
 8009fa2:	602b      	str	r3, [r5, #0]
 8009fa4:	f7f7 fb16 	bl	80015d4 <_close>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d102      	bne.n	8009fb2 <_close_r+0x1a>
 8009fac:	682b      	ldr	r3, [r5, #0]
 8009fae:	b103      	cbz	r3, 8009fb2 <_close_r+0x1a>
 8009fb0:	6023      	str	r3, [r4, #0]
 8009fb2:	bd38      	pop	{r3, r4, r5, pc}
 8009fb4:	20000ba8 	.word	0x20000ba8

08009fb8 <_lseek_r>:
 8009fb8:	b538      	push	{r3, r4, r5, lr}
 8009fba:	4d07      	ldr	r5, [pc, #28]	@ (8009fd8 <_lseek_r+0x20>)
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	4608      	mov	r0, r1
 8009fc0:	4611      	mov	r1, r2
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	602a      	str	r2, [r5, #0]
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	f7f7 fb2b 	bl	8001622 <_lseek>
 8009fcc:	1c43      	adds	r3, r0, #1
 8009fce:	d102      	bne.n	8009fd6 <_lseek_r+0x1e>
 8009fd0:	682b      	ldr	r3, [r5, #0]
 8009fd2:	b103      	cbz	r3, 8009fd6 <_lseek_r+0x1e>
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	bd38      	pop	{r3, r4, r5, pc}
 8009fd8:	20000ba8 	.word	0x20000ba8

08009fdc <_read_r>:
 8009fdc:	b538      	push	{r3, r4, r5, lr}
 8009fde:	4d07      	ldr	r5, [pc, #28]	@ (8009ffc <_read_r+0x20>)
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	4608      	mov	r0, r1
 8009fe4:	4611      	mov	r1, r2
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	602a      	str	r2, [r5, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	f7f7 fab9 	bl	8001562 <_read>
 8009ff0:	1c43      	adds	r3, r0, #1
 8009ff2:	d102      	bne.n	8009ffa <_read_r+0x1e>
 8009ff4:	682b      	ldr	r3, [r5, #0]
 8009ff6:	b103      	cbz	r3, 8009ffa <_read_r+0x1e>
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	bd38      	pop	{r3, r4, r5, pc}
 8009ffc:	20000ba8 	.word	0x20000ba8

0800a000 <_sbrk_r>:
 800a000:	b538      	push	{r3, r4, r5, lr}
 800a002:	4d06      	ldr	r5, [pc, #24]	@ (800a01c <_sbrk_r+0x1c>)
 800a004:	2300      	movs	r3, #0
 800a006:	4604      	mov	r4, r0
 800a008:	4608      	mov	r0, r1
 800a00a:	602b      	str	r3, [r5, #0]
 800a00c:	f7f7 fb16 	bl	800163c <_sbrk>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d102      	bne.n	800a01a <_sbrk_r+0x1a>
 800a014:	682b      	ldr	r3, [r5, #0]
 800a016:	b103      	cbz	r3, 800a01a <_sbrk_r+0x1a>
 800a018:	6023      	str	r3, [r4, #0]
 800a01a:	bd38      	pop	{r3, r4, r5, pc}
 800a01c:	20000ba8 	.word	0x20000ba8

0800a020 <_write_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	@ (800a040 <_write_r+0x20>)
 800a024:	4604      	mov	r4, r0
 800a026:	4608      	mov	r0, r1
 800a028:	4611      	mov	r1, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	602a      	str	r2, [r5, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f7f7 fab4 	bl	800159c <_write>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_write_r+0x1e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_write_r+0x1e>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20000ba8 	.word	0x20000ba8

0800a044 <__errno>:
 800a044:	4b01      	ldr	r3, [pc, #4]	@ (800a04c <__errno+0x8>)
 800a046:	6818      	ldr	r0, [r3, #0]
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000038 	.word	0x20000038

0800a050 <__libc_init_array>:
 800a050:	b570      	push	{r4, r5, r6, lr}
 800a052:	4d0d      	ldr	r5, [pc, #52]	@ (800a088 <__libc_init_array+0x38>)
 800a054:	4c0d      	ldr	r4, [pc, #52]	@ (800a08c <__libc_init_array+0x3c>)
 800a056:	1b64      	subs	r4, r4, r5
 800a058:	10a4      	asrs	r4, r4, #2
 800a05a:	2600      	movs	r6, #0
 800a05c:	42a6      	cmp	r6, r4
 800a05e:	d109      	bne.n	800a074 <__libc_init_array+0x24>
 800a060:	4d0b      	ldr	r5, [pc, #44]	@ (800a090 <__libc_init_array+0x40>)
 800a062:	4c0c      	ldr	r4, [pc, #48]	@ (800a094 <__libc_init_array+0x44>)
 800a064:	f001 ff9e 	bl	800bfa4 <_init>
 800a068:	1b64      	subs	r4, r4, r5
 800a06a:	10a4      	asrs	r4, r4, #2
 800a06c:	2600      	movs	r6, #0
 800a06e:	42a6      	cmp	r6, r4
 800a070:	d105      	bne.n	800a07e <__libc_init_array+0x2e>
 800a072:	bd70      	pop	{r4, r5, r6, pc}
 800a074:	f855 3b04 	ldr.w	r3, [r5], #4
 800a078:	4798      	blx	r3
 800a07a:	3601      	adds	r6, #1
 800a07c:	e7ee      	b.n	800a05c <__libc_init_array+0xc>
 800a07e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a082:	4798      	blx	r3
 800a084:	3601      	adds	r6, #1
 800a086:	e7f2      	b.n	800a06e <__libc_init_array+0x1e>
 800a088:	0800c360 	.word	0x0800c360
 800a08c:	0800c360 	.word	0x0800c360
 800a090:	0800c360 	.word	0x0800c360
 800a094:	0800c364 	.word	0x0800c364

0800a098 <__retarget_lock_init_recursive>:
 800a098:	4770      	bx	lr

0800a09a <__retarget_lock_acquire_recursive>:
 800a09a:	4770      	bx	lr

0800a09c <__retarget_lock_release_recursive>:
 800a09c:	4770      	bx	lr

0800a09e <quorem>:
 800a09e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a2:	6903      	ldr	r3, [r0, #16]
 800a0a4:	690c      	ldr	r4, [r1, #16]
 800a0a6:	42a3      	cmp	r3, r4
 800a0a8:	4607      	mov	r7, r0
 800a0aa:	db7e      	blt.n	800a1aa <quorem+0x10c>
 800a0ac:	3c01      	subs	r4, #1
 800a0ae:	f101 0814 	add.w	r8, r1, #20
 800a0b2:	00a3      	lsls	r3, r4, #2
 800a0b4:	f100 0514 	add.w	r5, r0, #20
 800a0b8:	9300      	str	r3, [sp, #0]
 800a0ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a0c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a0d0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a0d4:	d32e      	bcc.n	800a134 <quorem+0x96>
 800a0d6:	f04f 0a00 	mov.w	sl, #0
 800a0da:	46c4      	mov	ip, r8
 800a0dc:	46ae      	mov	lr, r5
 800a0de:	46d3      	mov	fp, sl
 800a0e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0e4:	b298      	uxth	r0, r3
 800a0e6:	fb06 a000 	mla	r0, r6, r0, sl
 800a0ea:	0c02      	lsrs	r2, r0, #16
 800a0ec:	0c1b      	lsrs	r3, r3, #16
 800a0ee:	fb06 2303 	mla	r3, r6, r3, r2
 800a0f2:	f8de 2000 	ldr.w	r2, [lr]
 800a0f6:	b280      	uxth	r0, r0
 800a0f8:	b292      	uxth	r2, r2
 800a0fa:	1a12      	subs	r2, r2, r0
 800a0fc:	445a      	add	r2, fp
 800a0fe:	f8de 0000 	ldr.w	r0, [lr]
 800a102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a106:	b29b      	uxth	r3, r3
 800a108:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a10c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a110:	b292      	uxth	r2, r2
 800a112:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a116:	45e1      	cmp	r9, ip
 800a118:	f84e 2b04 	str.w	r2, [lr], #4
 800a11c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a120:	d2de      	bcs.n	800a0e0 <quorem+0x42>
 800a122:	9b00      	ldr	r3, [sp, #0]
 800a124:	58eb      	ldr	r3, [r5, r3]
 800a126:	b92b      	cbnz	r3, 800a134 <quorem+0x96>
 800a128:	9b01      	ldr	r3, [sp, #4]
 800a12a:	3b04      	subs	r3, #4
 800a12c:	429d      	cmp	r5, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	d32f      	bcc.n	800a192 <quorem+0xf4>
 800a132:	613c      	str	r4, [r7, #16]
 800a134:	4638      	mov	r0, r7
 800a136:	f001 f8c3 	bl	800b2c0 <__mcmp>
 800a13a:	2800      	cmp	r0, #0
 800a13c:	db25      	blt.n	800a18a <quorem+0xec>
 800a13e:	4629      	mov	r1, r5
 800a140:	2000      	movs	r0, #0
 800a142:	f858 2b04 	ldr.w	r2, [r8], #4
 800a146:	f8d1 c000 	ldr.w	ip, [r1]
 800a14a:	fa1f fe82 	uxth.w	lr, r2
 800a14e:	fa1f f38c 	uxth.w	r3, ip
 800a152:	eba3 030e 	sub.w	r3, r3, lr
 800a156:	4403      	add	r3, r0
 800a158:	0c12      	lsrs	r2, r2, #16
 800a15a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a15e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a162:	b29b      	uxth	r3, r3
 800a164:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a168:	45c1      	cmp	r9, r8
 800a16a:	f841 3b04 	str.w	r3, [r1], #4
 800a16e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a172:	d2e6      	bcs.n	800a142 <quorem+0xa4>
 800a174:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a178:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a17c:	b922      	cbnz	r2, 800a188 <quorem+0xea>
 800a17e:	3b04      	subs	r3, #4
 800a180:	429d      	cmp	r5, r3
 800a182:	461a      	mov	r2, r3
 800a184:	d30b      	bcc.n	800a19e <quorem+0x100>
 800a186:	613c      	str	r4, [r7, #16]
 800a188:	3601      	adds	r6, #1
 800a18a:	4630      	mov	r0, r6
 800a18c:	b003      	add	sp, #12
 800a18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a192:	6812      	ldr	r2, [r2, #0]
 800a194:	3b04      	subs	r3, #4
 800a196:	2a00      	cmp	r2, #0
 800a198:	d1cb      	bne.n	800a132 <quorem+0x94>
 800a19a:	3c01      	subs	r4, #1
 800a19c:	e7c6      	b.n	800a12c <quorem+0x8e>
 800a19e:	6812      	ldr	r2, [r2, #0]
 800a1a0:	3b04      	subs	r3, #4
 800a1a2:	2a00      	cmp	r2, #0
 800a1a4:	d1ef      	bne.n	800a186 <quorem+0xe8>
 800a1a6:	3c01      	subs	r4, #1
 800a1a8:	e7ea      	b.n	800a180 <quorem+0xe2>
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	e7ee      	b.n	800a18c <quorem+0xee>
	...

0800a1b0 <_dtoa_r>:
 800a1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b4:	69c7      	ldr	r7, [r0, #28]
 800a1b6:	b099      	sub	sp, #100	@ 0x64
 800a1b8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a1bc:	ec55 4b10 	vmov	r4, r5, d0
 800a1c0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800a1c2:	9109      	str	r1, [sp, #36]	@ 0x24
 800a1c4:	4683      	mov	fp, r0
 800a1c6:	920e      	str	r2, [sp, #56]	@ 0x38
 800a1c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1ca:	b97f      	cbnz	r7, 800a1ec <_dtoa_r+0x3c>
 800a1cc:	2010      	movs	r0, #16
 800a1ce:	f7ff f887 	bl	80092e0 <malloc>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	f8cb 001c 	str.w	r0, [fp, #28]
 800a1d8:	b920      	cbnz	r0, 800a1e4 <_dtoa_r+0x34>
 800a1da:	4ba7      	ldr	r3, [pc, #668]	@ (800a478 <_dtoa_r+0x2c8>)
 800a1dc:	21ef      	movs	r1, #239	@ 0xef
 800a1de:	48a7      	ldr	r0, [pc, #668]	@ (800a47c <_dtoa_r+0x2cc>)
 800a1e0:	f001 fba2 	bl	800b928 <__assert_func>
 800a1e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a1e8:	6007      	str	r7, [r0, #0]
 800a1ea:	60c7      	str	r7, [r0, #12]
 800a1ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a1f0:	6819      	ldr	r1, [r3, #0]
 800a1f2:	b159      	cbz	r1, 800a20c <_dtoa_r+0x5c>
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	604a      	str	r2, [r1, #4]
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4093      	lsls	r3, r2
 800a1fc:	608b      	str	r3, [r1, #8]
 800a1fe:	4658      	mov	r0, fp
 800a200:	f000 fe24 	bl	800ae4c <_Bfree>
 800a204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a208:	2200      	movs	r2, #0
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	1e2b      	subs	r3, r5, #0
 800a20e:	bfb9      	ittee	lt
 800a210:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a214:	9303      	strlt	r3, [sp, #12]
 800a216:	2300      	movge	r3, #0
 800a218:	6033      	strge	r3, [r6, #0]
 800a21a:	9f03      	ldr	r7, [sp, #12]
 800a21c:	4b98      	ldr	r3, [pc, #608]	@ (800a480 <_dtoa_r+0x2d0>)
 800a21e:	bfbc      	itt	lt
 800a220:	2201      	movlt	r2, #1
 800a222:	6032      	strlt	r2, [r6, #0]
 800a224:	43bb      	bics	r3, r7
 800a226:	d112      	bne.n	800a24e <_dtoa_r+0x9e>
 800a228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a22a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a22e:	6013      	str	r3, [r2, #0]
 800a230:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a234:	4323      	orrs	r3, r4
 800a236:	f000 854d 	beq.w	800acd4 <_dtoa_r+0xb24>
 800a23a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a23c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800a494 <_dtoa_r+0x2e4>
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 854f 	beq.w	800ace4 <_dtoa_r+0xb34>
 800a246:	f10a 0303 	add.w	r3, sl, #3
 800a24a:	f000 bd49 	b.w	800ace0 <_dtoa_r+0xb30>
 800a24e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a252:	2200      	movs	r2, #0
 800a254:	ec51 0b17 	vmov	r0, r1, d7
 800a258:	2300      	movs	r3, #0
 800a25a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800a25e:	f7f6 fc33 	bl	8000ac8 <__aeabi_dcmpeq>
 800a262:	4680      	mov	r8, r0
 800a264:	b158      	cbz	r0, 800a27e <_dtoa_r+0xce>
 800a266:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a268:	2301      	movs	r3, #1
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a26e:	b113      	cbz	r3, 800a276 <_dtoa_r+0xc6>
 800a270:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a272:	4b84      	ldr	r3, [pc, #528]	@ (800a484 <_dtoa_r+0x2d4>)
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800a498 <_dtoa_r+0x2e8>
 800a27a:	f000 bd33 	b.w	800ace4 <_dtoa_r+0xb34>
 800a27e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a282:	aa16      	add	r2, sp, #88	@ 0x58
 800a284:	a917      	add	r1, sp, #92	@ 0x5c
 800a286:	4658      	mov	r0, fp
 800a288:	f001 f8ca 	bl	800b420 <__d2b>
 800a28c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a290:	4681      	mov	r9, r0
 800a292:	2e00      	cmp	r6, #0
 800a294:	d077      	beq.n	800a386 <_dtoa_r+0x1d6>
 800a296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a298:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800a29c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a2a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a2ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	4b74      	ldr	r3, [pc, #464]	@ (800a488 <_dtoa_r+0x2d8>)
 800a2b6:	f7f5 ffe7 	bl	8000288 <__aeabi_dsub>
 800a2ba:	a369      	add	r3, pc, #420	@ (adr r3, 800a460 <_dtoa_r+0x2b0>)
 800a2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c0:	f7f6 f99a 	bl	80005f8 <__aeabi_dmul>
 800a2c4:	a368      	add	r3, pc, #416	@ (adr r3, 800a468 <_dtoa_r+0x2b8>)
 800a2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ca:	f7f5 ffdf 	bl	800028c <__adddf3>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	4630      	mov	r0, r6
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	f7f6 f926 	bl	8000524 <__aeabi_i2d>
 800a2d8:	a365      	add	r3, pc, #404	@ (adr r3, 800a470 <_dtoa_r+0x2c0>)
 800a2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2de:	f7f6 f98b 	bl	80005f8 <__aeabi_dmul>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f5 ffcf 	bl	800028c <__adddf3>
 800a2ee:	4604      	mov	r4, r0
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	f7f6 fc31 	bl	8000b58 <__aeabi_d2iz>
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	4607      	mov	r7, r0
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f6 fbec 	bl	8000adc <__aeabi_dcmplt>
 800a304:	b140      	cbz	r0, 800a318 <_dtoa_r+0x168>
 800a306:	4638      	mov	r0, r7
 800a308:	f7f6 f90c 	bl	8000524 <__aeabi_i2d>
 800a30c:	4622      	mov	r2, r4
 800a30e:	462b      	mov	r3, r5
 800a310:	f7f6 fbda 	bl	8000ac8 <__aeabi_dcmpeq>
 800a314:	b900      	cbnz	r0, 800a318 <_dtoa_r+0x168>
 800a316:	3f01      	subs	r7, #1
 800a318:	2f16      	cmp	r7, #22
 800a31a:	d851      	bhi.n	800a3c0 <_dtoa_r+0x210>
 800a31c:	4b5b      	ldr	r3, [pc, #364]	@ (800a48c <_dtoa_r+0x2dc>)
 800a31e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a32a:	f7f6 fbd7 	bl	8000adc <__aeabi_dcmplt>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d048      	beq.n	800a3c4 <_dtoa_r+0x214>
 800a332:	3f01      	subs	r7, #1
 800a334:	2300      	movs	r3, #0
 800a336:	9312      	str	r3, [sp, #72]	@ 0x48
 800a338:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800a33a:	1b9b      	subs	r3, r3, r6
 800a33c:	1e5a      	subs	r2, r3, #1
 800a33e:	bf44      	itt	mi
 800a340:	f1c3 0801 	rsbmi	r8, r3, #1
 800a344:	2300      	movmi	r3, #0
 800a346:	9208      	str	r2, [sp, #32]
 800a348:	bf54      	ite	pl
 800a34a:	f04f 0800 	movpl.w	r8, #0
 800a34e:	9308      	strmi	r3, [sp, #32]
 800a350:	2f00      	cmp	r7, #0
 800a352:	db39      	blt.n	800a3c8 <_dtoa_r+0x218>
 800a354:	9b08      	ldr	r3, [sp, #32]
 800a356:	970f      	str	r7, [sp, #60]	@ 0x3c
 800a358:	443b      	add	r3, r7
 800a35a:	9308      	str	r3, [sp, #32]
 800a35c:	2300      	movs	r3, #0
 800a35e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a362:	2b09      	cmp	r3, #9
 800a364:	d864      	bhi.n	800a430 <_dtoa_r+0x280>
 800a366:	2b05      	cmp	r3, #5
 800a368:	bfc4      	itt	gt
 800a36a:	3b04      	subgt	r3, #4
 800a36c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800a36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a370:	f1a3 0302 	sub.w	r3, r3, #2
 800a374:	bfcc      	ite	gt
 800a376:	2400      	movgt	r4, #0
 800a378:	2401      	movle	r4, #1
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	d863      	bhi.n	800a446 <_dtoa_r+0x296>
 800a37e:	e8df f003 	tbb	[pc, r3]
 800a382:	372a      	.short	0x372a
 800a384:	5535      	.short	0x5535
 800a386:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800a38a:	441e      	add	r6, r3
 800a38c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a390:	2b20      	cmp	r3, #32
 800a392:	bfc1      	itttt	gt
 800a394:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a398:	409f      	lslgt	r7, r3
 800a39a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a39e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3a2:	bfd6      	itet	le
 800a3a4:	f1c3 0320 	rsble	r3, r3, #32
 800a3a8:	ea47 0003 	orrgt.w	r0, r7, r3
 800a3ac:	fa04 f003 	lslle.w	r0, r4, r3
 800a3b0:	f7f6 f8a8 	bl	8000504 <__aeabi_ui2d>
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a3ba:	3e01      	subs	r6, #1
 800a3bc:	9214      	str	r2, [sp, #80]	@ 0x50
 800a3be:	e777      	b.n	800a2b0 <_dtoa_r+0x100>
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e7b8      	b.n	800a336 <_dtoa_r+0x186>
 800a3c4:	9012      	str	r0, [sp, #72]	@ 0x48
 800a3c6:	e7b7      	b.n	800a338 <_dtoa_r+0x188>
 800a3c8:	427b      	negs	r3, r7
 800a3ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	eba8 0807 	sub.w	r8, r8, r7
 800a3d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3d4:	e7c4      	b.n	800a360 <_dtoa_r+0x1b0>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dc35      	bgt.n	800a44c <_dtoa_r+0x29c>
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	9300      	str	r3, [sp, #0]
 800a3e4:	9307      	str	r3, [sp, #28]
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3ea:	e00b      	b.n	800a404 <_dtoa_r+0x254>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e7f3      	b.n	800a3d8 <_dtoa_r+0x228>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a3f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a3f6:	18fb      	adds	r3, r7, r3
 800a3f8:	9300      	str	r3, [sp, #0]
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	bfb8      	it	lt
 800a402:	2301      	movlt	r3, #1
 800a404:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a408:	2100      	movs	r1, #0
 800a40a:	2204      	movs	r2, #4
 800a40c:	f102 0514 	add.w	r5, r2, #20
 800a410:	429d      	cmp	r5, r3
 800a412:	d91f      	bls.n	800a454 <_dtoa_r+0x2a4>
 800a414:	6041      	str	r1, [r0, #4]
 800a416:	4658      	mov	r0, fp
 800a418:	f000 fcd8 	bl	800adcc <_Balloc>
 800a41c:	4682      	mov	sl, r0
 800a41e:	2800      	cmp	r0, #0
 800a420:	d13c      	bne.n	800a49c <_dtoa_r+0x2ec>
 800a422:	4b1b      	ldr	r3, [pc, #108]	@ (800a490 <_dtoa_r+0x2e0>)
 800a424:	4602      	mov	r2, r0
 800a426:	f240 11af 	movw	r1, #431	@ 0x1af
 800a42a:	e6d8      	b.n	800a1de <_dtoa_r+0x2e>
 800a42c:	2301      	movs	r3, #1
 800a42e:	e7e0      	b.n	800a3f2 <_dtoa_r+0x242>
 800a430:	2401      	movs	r4, #1
 800a432:	2300      	movs	r3, #0
 800a434:	9309      	str	r3, [sp, #36]	@ 0x24
 800a436:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a438:	f04f 33ff 	mov.w	r3, #4294967295
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	9307      	str	r3, [sp, #28]
 800a440:	2200      	movs	r2, #0
 800a442:	2312      	movs	r3, #18
 800a444:	e7d0      	b.n	800a3e8 <_dtoa_r+0x238>
 800a446:	2301      	movs	r3, #1
 800a448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a44a:	e7f5      	b.n	800a438 <_dtoa_r+0x288>
 800a44c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	9307      	str	r3, [sp, #28]
 800a452:	e7d7      	b.n	800a404 <_dtoa_r+0x254>
 800a454:	3101      	adds	r1, #1
 800a456:	0052      	lsls	r2, r2, #1
 800a458:	e7d8      	b.n	800a40c <_dtoa_r+0x25c>
 800a45a:	bf00      	nop
 800a45c:	f3af 8000 	nop.w
 800a460:	636f4361 	.word	0x636f4361
 800a464:	3fd287a7 	.word	0x3fd287a7
 800a468:	8b60c8b3 	.word	0x8b60c8b3
 800a46c:	3fc68a28 	.word	0x3fc68a28
 800a470:	509f79fb 	.word	0x509f79fb
 800a474:	3fd34413 	.word	0x3fd34413
 800a478:	0800c025 	.word	0x0800c025
 800a47c:	0800c03c 	.word	0x0800c03c
 800a480:	7ff00000 	.word	0x7ff00000
 800a484:	0800bff5 	.word	0x0800bff5
 800a488:	3ff80000 	.word	0x3ff80000
 800a48c:	0800c138 	.word	0x0800c138
 800a490:	0800c094 	.word	0x0800c094
 800a494:	0800c021 	.word	0x0800c021
 800a498:	0800bff4 	.word	0x0800bff4
 800a49c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a4a0:	6018      	str	r0, [r3, #0]
 800a4a2:	9b07      	ldr	r3, [sp, #28]
 800a4a4:	2b0e      	cmp	r3, #14
 800a4a6:	f200 80a4 	bhi.w	800a5f2 <_dtoa_r+0x442>
 800a4aa:	2c00      	cmp	r4, #0
 800a4ac:	f000 80a1 	beq.w	800a5f2 <_dtoa_r+0x442>
 800a4b0:	2f00      	cmp	r7, #0
 800a4b2:	dd33      	ble.n	800a51c <_dtoa_r+0x36c>
 800a4b4:	4bad      	ldr	r3, [pc, #692]	@ (800a76c <_dtoa_r+0x5bc>)
 800a4b6:	f007 020f 	and.w	r2, r7, #15
 800a4ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4be:	ed93 7b00 	vldr	d7, [r3]
 800a4c2:	05f8      	lsls	r0, r7, #23
 800a4c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a4c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a4cc:	d516      	bpl.n	800a4fc <_dtoa_r+0x34c>
 800a4ce:	4ba8      	ldr	r3, [pc, #672]	@ (800a770 <_dtoa_r+0x5c0>)
 800a4d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a4d8:	f7f6 f9b8 	bl	800084c <__aeabi_ddiv>
 800a4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e0:	f004 040f 	and.w	r4, r4, #15
 800a4e4:	2603      	movs	r6, #3
 800a4e6:	4da2      	ldr	r5, [pc, #648]	@ (800a770 <_dtoa_r+0x5c0>)
 800a4e8:	b954      	cbnz	r4, 800a500 <_dtoa_r+0x350>
 800a4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4f2:	f7f6 f9ab 	bl	800084c <__aeabi_ddiv>
 800a4f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4fa:	e028      	b.n	800a54e <_dtoa_r+0x39e>
 800a4fc:	2602      	movs	r6, #2
 800a4fe:	e7f2      	b.n	800a4e6 <_dtoa_r+0x336>
 800a500:	07e1      	lsls	r1, r4, #31
 800a502:	d508      	bpl.n	800a516 <_dtoa_r+0x366>
 800a504:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a50c:	f7f6 f874 	bl	80005f8 <__aeabi_dmul>
 800a510:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a514:	3601      	adds	r6, #1
 800a516:	1064      	asrs	r4, r4, #1
 800a518:	3508      	adds	r5, #8
 800a51a:	e7e5      	b.n	800a4e8 <_dtoa_r+0x338>
 800a51c:	f000 80d2 	beq.w	800a6c4 <_dtoa_r+0x514>
 800a520:	427c      	negs	r4, r7
 800a522:	4b92      	ldr	r3, [pc, #584]	@ (800a76c <_dtoa_r+0x5bc>)
 800a524:	4d92      	ldr	r5, [pc, #584]	@ (800a770 <_dtoa_r+0x5c0>)
 800a526:	f004 020f 	and.w	r2, r4, #15
 800a52a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a532:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a536:	f7f6 f85f 	bl	80005f8 <__aeabi_dmul>
 800a53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a53e:	1124      	asrs	r4, r4, #4
 800a540:	2300      	movs	r3, #0
 800a542:	2602      	movs	r6, #2
 800a544:	2c00      	cmp	r4, #0
 800a546:	f040 80b2 	bne.w	800a6ae <_dtoa_r+0x4fe>
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d1d3      	bne.n	800a4f6 <_dtoa_r+0x346>
 800a54e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a550:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	f000 80b7 	beq.w	800a6c8 <_dtoa_r+0x518>
 800a55a:	4b86      	ldr	r3, [pc, #536]	@ (800a774 <_dtoa_r+0x5c4>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	4620      	mov	r0, r4
 800a560:	4629      	mov	r1, r5
 800a562:	f7f6 fabb 	bl	8000adc <__aeabi_dcmplt>
 800a566:	2800      	cmp	r0, #0
 800a568:	f000 80ae 	beq.w	800a6c8 <_dtoa_r+0x518>
 800a56c:	9b07      	ldr	r3, [sp, #28]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	f000 80aa 	beq.w	800a6c8 <_dtoa_r+0x518>
 800a574:	9b00      	ldr	r3, [sp, #0]
 800a576:	2b00      	cmp	r3, #0
 800a578:	dd37      	ble.n	800a5ea <_dtoa_r+0x43a>
 800a57a:	1e7b      	subs	r3, r7, #1
 800a57c:	9304      	str	r3, [sp, #16]
 800a57e:	4620      	mov	r0, r4
 800a580:	4b7d      	ldr	r3, [pc, #500]	@ (800a778 <_dtoa_r+0x5c8>)
 800a582:	2200      	movs	r2, #0
 800a584:	4629      	mov	r1, r5
 800a586:	f7f6 f837 	bl	80005f8 <__aeabi_dmul>
 800a58a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a58e:	9c00      	ldr	r4, [sp, #0]
 800a590:	3601      	adds	r6, #1
 800a592:	4630      	mov	r0, r6
 800a594:	f7f5 ffc6 	bl	8000524 <__aeabi_i2d>
 800a598:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a59c:	f7f6 f82c 	bl	80005f8 <__aeabi_dmul>
 800a5a0:	4b76      	ldr	r3, [pc, #472]	@ (800a77c <_dtoa_r+0x5cc>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f7f5 fe72 	bl	800028c <__adddf3>
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a5ae:	2c00      	cmp	r4, #0
 800a5b0:	f040 808d 	bne.w	800a6ce <_dtoa_r+0x51e>
 800a5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b8:	4b71      	ldr	r3, [pc, #452]	@ (800a780 <_dtoa_r+0x5d0>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f7f5 fe64 	bl	8000288 <__aeabi_dsub>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a5c8:	462a      	mov	r2, r5
 800a5ca:	4633      	mov	r3, r6
 800a5cc:	f7f6 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	f040 828b 	bne.w	800aaec <_dtoa_r+0x93c>
 800a5d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5da:	462a      	mov	r2, r5
 800a5dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a5e0:	f7f6 fa7c 	bl	8000adc <__aeabi_dcmplt>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f040 8128 	bne.w	800a83a <_dtoa_r+0x68a>
 800a5ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a5ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a5f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f2c0 815a 	blt.w	800a8ae <_dtoa_r+0x6fe>
 800a5fa:	2f0e      	cmp	r7, #14
 800a5fc:	f300 8157 	bgt.w	800a8ae <_dtoa_r+0x6fe>
 800a600:	4b5a      	ldr	r3, [pc, #360]	@ (800a76c <_dtoa_r+0x5bc>)
 800a602:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a606:	ed93 7b00 	vldr	d7, [r3]
 800a60a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	ed8d 7b00 	vstr	d7, [sp]
 800a612:	da03      	bge.n	800a61c <_dtoa_r+0x46c>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f340 8101 	ble.w	800a81e <_dtoa_r+0x66e>
 800a61c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a620:	4656      	mov	r6, sl
 800a622:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a626:	4620      	mov	r0, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f7f6 f90f 	bl	800084c <__aeabi_ddiv>
 800a62e:	f7f6 fa93 	bl	8000b58 <__aeabi_d2iz>
 800a632:	4680      	mov	r8, r0
 800a634:	f7f5 ff76 	bl	8000524 <__aeabi_i2d>
 800a638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a63c:	f7f5 ffdc 	bl	80005f8 <__aeabi_dmul>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a64c:	f7f5 fe1c 	bl	8000288 <__aeabi_dsub>
 800a650:	f806 4b01 	strb.w	r4, [r6], #1
 800a654:	9d07      	ldr	r5, [sp, #28]
 800a656:	eba6 040a 	sub.w	r4, r6, sl
 800a65a:	42a5      	cmp	r5, r4
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	f040 8117 	bne.w	800a892 <_dtoa_r+0x6e2>
 800a664:	f7f5 fe12 	bl	800028c <__adddf3>
 800a668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a66c:	4604      	mov	r4, r0
 800a66e:	460d      	mov	r5, r1
 800a670:	f7f6 fa52 	bl	8000b18 <__aeabi_dcmpgt>
 800a674:	2800      	cmp	r0, #0
 800a676:	f040 80f9 	bne.w	800a86c <_dtoa_r+0x6bc>
 800a67a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f6 fa21 	bl	8000ac8 <__aeabi_dcmpeq>
 800a686:	b118      	cbz	r0, 800a690 <_dtoa_r+0x4e0>
 800a688:	f018 0f01 	tst.w	r8, #1
 800a68c:	f040 80ee 	bne.w	800a86c <_dtoa_r+0x6bc>
 800a690:	4649      	mov	r1, r9
 800a692:	4658      	mov	r0, fp
 800a694:	f000 fbda 	bl	800ae4c <_Bfree>
 800a698:	2300      	movs	r3, #0
 800a69a:	7033      	strb	r3, [r6, #0]
 800a69c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a69e:	3701      	adds	r7, #1
 800a6a0:	601f      	str	r7, [r3, #0]
 800a6a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 831d 	beq.w	800ace4 <_dtoa_r+0xb34>
 800a6aa:	601e      	str	r6, [r3, #0]
 800a6ac:	e31a      	b.n	800ace4 <_dtoa_r+0xb34>
 800a6ae:	07e2      	lsls	r2, r4, #31
 800a6b0:	d505      	bpl.n	800a6be <_dtoa_r+0x50e>
 800a6b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6b6:	f7f5 ff9f 	bl	80005f8 <__aeabi_dmul>
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	2301      	movs	r3, #1
 800a6be:	1064      	asrs	r4, r4, #1
 800a6c0:	3508      	adds	r5, #8
 800a6c2:	e73f      	b.n	800a544 <_dtoa_r+0x394>
 800a6c4:	2602      	movs	r6, #2
 800a6c6:	e742      	b.n	800a54e <_dtoa_r+0x39e>
 800a6c8:	9c07      	ldr	r4, [sp, #28]
 800a6ca:	9704      	str	r7, [sp, #16]
 800a6cc:	e761      	b.n	800a592 <_dtoa_r+0x3e2>
 800a6ce:	4b27      	ldr	r3, [pc, #156]	@ (800a76c <_dtoa_r+0x5bc>)
 800a6d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a6d2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6da:	4454      	add	r4, sl
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	d053      	beq.n	800a788 <_dtoa_r+0x5d8>
 800a6e0:	4928      	ldr	r1, [pc, #160]	@ (800a784 <_dtoa_r+0x5d4>)
 800a6e2:	2000      	movs	r0, #0
 800a6e4:	f7f6 f8b2 	bl	800084c <__aeabi_ddiv>
 800a6e8:	4633      	mov	r3, r6
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	f7f5 fdcc 	bl	8000288 <__aeabi_dsub>
 800a6f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a6f4:	4656      	mov	r6, sl
 800a6f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a6fa:	f7f6 fa2d 	bl	8000b58 <__aeabi_d2iz>
 800a6fe:	4605      	mov	r5, r0
 800a700:	f7f5 ff10 	bl	8000524 <__aeabi_i2d>
 800a704:	4602      	mov	r2, r0
 800a706:	460b      	mov	r3, r1
 800a708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a70c:	f7f5 fdbc 	bl	8000288 <__aeabi_dsub>
 800a710:	3530      	adds	r5, #48	@ 0x30
 800a712:	4602      	mov	r2, r0
 800a714:	460b      	mov	r3, r1
 800a716:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a71a:	f806 5b01 	strb.w	r5, [r6], #1
 800a71e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a722:	f7f6 f9db 	bl	8000adc <__aeabi_dcmplt>
 800a726:	2800      	cmp	r0, #0
 800a728:	d171      	bne.n	800a80e <_dtoa_r+0x65e>
 800a72a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a72e:	4911      	ldr	r1, [pc, #68]	@ (800a774 <_dtoa_r+0x5c4>)
 800a730:	2000      	movs	r0, #0
 800a732:	f7f5 fda9 	bl	8000288 <__aeabi_dsub>
 800a736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a73a:	f7f6 f9cf 	bl	8000adc <__aeabi_dcmplt>
 800a73e:	2800      	cmp	r0, #0
 800a740:	f040 8095 	bne.w	800a86e <_dtoa_r+0x6be>
 800a744:	42a6      	cmp	r6, r4
 800a746:	f43f af50 	beq.w	800a5ea <_dtoa_r+0x43a>
 800a74a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a74e:	4b0a      	ldr	r3, [pc, #40]	@ (800a778 <_dtoa_r+0x5c8>)
 800a750:	2200      	movs	r2, #0
 800a752:	f7f5 ff51 	bl	80005f8 <__aeabi_dmul>
 800a756:	4b08      	ldr	r3, [pc, #32]	@ (800a778 <_dtoa_r+0x5c8>)
 800a758:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a75c:	2200      	movs	r2, #0
 800a75e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a762:	f7f5 ff49 	bl	80005f8 <__aeabi_dmul>
 800a766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a76a:	e7c4      	b.n	800a6f6 <_dtoa_r+0x546>
 800a76c:	0800c138 	.word	0x0800c138
 800a770:	0800c110 	.word	0x0800c110
 800a774:	3ff00000 	.word	0x3ff00000
 800a778:	40240000 	.word	0x40240000
 800a77c:	401c0000 	.word	0x401c0000
 800a780:	40140000 	.word	0x40140000
 800a784:	3fe00000 	.word	0x3fe00000
 800a788:	4631      	mov	r1, r6
 800a78a:	4628      	mov	r0, r5
 800a78c:	f7f5 ff34 	bl	80005f8 <__aeabi_dmul>
 800a790:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a794:	9415      	str	r4, [sp, #84]	@ 0x54
 800a796:	4656      	mov	r6, sl
 800a798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a79c:	f7f6 f9dc 	bl	8000b58 <__aeabi_d2iz>
 800a7a0:	4605      	mov	r5, r0
 800a7a2:	f7f5 febf 	bl	8000524 <__aeabi_i2d>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7ae:	f7f5 fd6b 	bl	8000288 <__aeabi_dsub>
 800a7b2:	3530      	adds	r5, #48	@ 0x30
 800a7b4:	f806 5b01 	strb.w	r5, [r6], #1
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	42a6      	cmp	r6, r4
 800a7be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a7c2:	f04f 0200 	mov.w	r2, #0
 800a7c6:	d124      	bne.n	800a812 <_dtoa_r+0x662>
 800a7c8:	4bac      	ldr	r3, [pc, #688]	@ (800aa7c <_dtoa_r+0x8cc>)
 800a7ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a7ce:	f7f5 fd5d 	bl	800028c <__adddf3>
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7da:	f7f6 f99d 	bl	8000b18 <__aeabi_dcmpgt>
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d145      	bne.n	800a86e <_dtoa_r+0x6be>
 800a7e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a7e6:	49a5      	ldr	r1, [pc, #660]	@ (800aa7c <_dtoa_r+0x8cc>)
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	f7f5 fd4d 	bl	8000288 <__aeabi_dsub>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7f6:	f7f6 f971 	bl	8000adc <__aeabi_dcmplt>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	f43f aef5 	beq.w	800a5ea <_dtoa_r+0x43a>
 800a800:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800a802:	1e73      	subs	r3, r6, #1
 800a804:	9315      	str	r3, [sp, #84]	@ 0x54
 800a806:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a80a:	2b30      	cmp	r3, #48	@ 0x30
 800a80c:	d0f8      	beq.n	800a800 <_dtoa_r+0x650>
 800a80e:	9f04      	ldr	r7, [sp, #16]
 800a810:	e73e      	b.n	800a690 <_dtoa_r+0x4e0>
 800a812:	4b9b      	ldr	r3, [pc, #620]	@ (800aa80 <_dtoa_r+0x8d0>)
 800a814:	f7f5 fef0 	bl	80005f8 <__aeabi_dmul>
 800a818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a81c:	e7bc      	b.n	800a798 <_dtoa_r+0x5e8>
 800a81e:	d10c      	bne.n	800a83a <_dtoa_r+0x68a>
 800a820:	4b98      	ldr	r3, [pc, #608]	@ (800aa84 <_dtoa_r+0x8d4>)
 800a822:	2200      	movs	r2, #0
 800a824:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a828:	f7f5 fee6 	bl	80005f8 <__aeabi_dmul>
 800a82c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a830:	f7f6 f968 	bl	8000b04 <__aeabi_dcmpge>
 800a834:	2800      	cmp	r0, #0
 800a836:	f000 8157 	beq.w	800aae8 <_dtoa_r+0x938>
 800a83a:	2400      	movs	r4, #0
 800a83c:	4625      	mov	r5, r4
 800a83e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a840:	43db      	mvns	r3, r3
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	4656      	mov	r6, sl
 800a846:	2700      	movs	r7, #0
 800a848:	4621      	mov	r1, r4
 800a84a:	4658      	mov	r0, fp
 800a84c:	f000 fafe 	bl	800ae4c <_Bfree>
 800a850:	2d00      	cmp	r5, #0
 800a852:	d0dc      	beq.n	800a80e <_dtoa_r+0x65e>
 800a854:	b12f      	cbz	r7, 800a862 <_dtoa_r+0x6b2>
 800a856:	42af      	cmp	r7, r5
 800a858:	d003      	beq.n	800a862 <_dtoa_r+0x6b2>
 800a85a:	4639      	mov	r1, r7
 800a85c:	4658      	mov	r0, fp
 800a85e:	f000 faf5 	bl	800ae4c <_Bfree>
 800a862:	4629      	mov	r1, r5
 800a864:	4658      	mov	r0, fp
 800a866:	f000 faf1 	bl	800ae4c <_Bfree>
 800a86a:	e7d0      	b.n	800a80e <_dtoa_r+0x65e>
 800a86c:	9704      	str	r7, [sp, #16]
 800a86e:	4633      	mov	r3, r6
 800a870:	461e      	mov	r6, r3
 800a872:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a876:	2a39      	cmp	r2, #57	@ 0x39
 800a878:	d107      	bne.n	800a88a <_dtoa_r+0x6da>
 800a87a:	459a      	cmp	sl, r3
 800a87c:	d1f8      	bne.n	800a870 <_dtoa_r+0x6c0>
 800a87e:	9a04      	ldr	r2, [sp, #16]
 800a880:	3201      	adds	r2, #1
 800a882:	9204      	str	r2, [sp, #16]
 800a884:	2230      	movs	r2, #48	@ 0x30
 800a886:	f88a 2000 	strb.w	r2, [sl]
 800a88a:	781a      	ldrb	r2, [r3, #0]
 800a88c:	3201      	adds	r2, #1
 800a88e:	701a      	strb	r2, [r3, #0]
 800a890:	e7bd      	b.n	800a80e <_dtoa_r+0x65e>
 800a892:	4b7b      	ldr	r3, [pc, #492]	@ (800aa80 <_dtoa_r+0x8d0>)
 800a894:	2200      	movs	r2, #0
 800a896:	f7f5 feaf 	bl	80005f8 <__aeabi_dmul>
 800a89a:	2200      	movs	r2, #0
 800a89c:	2300      	movs	r3, #0
 800a89e:	4604      	mov	r4, r0
 800a8a0:	460d      	mov	r5, r1
 800a8a2:	f7f6 f911 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f aebb 	beq.w	800a622 <_dtoa_r+0x472>
 800a8ac:	e6f0      	b.n	800a690 <_dtoa_r+0x4e0>
 800a8ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	f000 80db 	beq.w	800aa6c <_dtoa_r+0x8bc>
 800a8b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8b8:	2a01      	cmp	r2, #1
 800a8ba:	f300 80bf 	bgt.w	800aa3c <_dtoa_r+0x88c>
 800a8be:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800a8c0:	2a00      	cmp	r2, #0
 800a8c2:	f000 80b7 	beq.w	800aa34 <_dtoa_r+0x884>
 800a8c6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a8ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a8cc:	4646      	mov	r6, r8
 800a8ce:	9a08      	ldr	r2, [sp, #32]
 800a8d0:	2101      	movs	r1, #1
 800a8d2:	441a      	add	r2, r3
 800a8d4:	4658      	mov	r0, fp
 800a8d6:	4498      	add	r8, r3
 800a8d8:	9208      	str	r2, [sp, #32]
 800a8da:	f000 fb6b 	bl	800afb4 <__i2b>
 800a8de:	4605      	mov	r5, r0
 800a8e0:	b15e      	cbz	r6, 800a8fa <_dtoa_r+0x74a>
 800a8e2:	9b08      	ldr	r3, [sp, #32]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	dd08      	ble.n	800a8fa <_dtoa_r+0x74a>
 800a8e8:	42b3      	cmp	r3, r6
 800a8ea:	9a08      	ldr	r2, [sp, #32]
 800a8ec:	bfa8      	it	ge
 800a8ee:	4633      	movge	r3, r6
 800a8f0:	eba8 0803 	sub.w	r8, r8, r3
 800a8f4:	1af6      	subs	r6, r6, r3
 800a8f6:	1ad3      	subs	r3, r2, r3
 800a8f8:	9308      	str	r3, [sp, #32]
 800a8fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8fc:	b1f3      	cbz	r3, 800a93c <_dtoa_r+0x78c>
 800a8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 80b7 	beq.w	800aa74 <_dtoa_r+0x8c4>
 800a906:	b18c      	cbz	r4, 800a92c <_dtoa_r+0x77c>
 800a908:	4629      	mov	r1, r5
 800a90a:	4622      	mov	r2, r4
 800a90c:	4658      	mov	r0, fp
 800a90e:	f000 fc11 	bl	800b134 <__pow5mult>
 800a912:	464a      	mov	r2, r9
 800a914:	4601      	mov	r1, r0
 800a916:	4605      	mov	r5, r0
 800a918:	4658      	mov	r0, fp
 800a91a:	f000 fb61 	bl	800afe0 <__multiply>
 800a91e:	4649      	mov	r1, r9
 800a920:	9004      	str	r0, [sp, #16]
 800a922:	4658      	mov	r0, fp
 800a924:	f000 fa92 	bl	800ae4c <_Bfree>
 800a928:	9b04      	ldr	r3, [sp, #16]
 800a92a:	4699      	mov	r9, r3
 800a92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a92e:	1b1a      	subs	r2, r3, r4
 800a930:	d004      	beq.n	800a93c <_dtoa_r+0x78c>
 800a932:	4649      	mov	r1, r9
 800a934:	4658      	mov	r0, fp
 800a936:	f000 fbfd 	bl	800b134 <__pow5mult>
 800a93a:	4681      	mov	r9, r0
 800a93c:	2101      	movs	r1, #1
 800a93e:	4658      	mov	r0, fp
 800a940:	f000 fb38 	bl	800afb4 <__i2b>
 800a944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a946:	4604      	mov	r4, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 81cf 	beq.w	800acec <_dtoa_r+0xb3c>
 800a94e:	461a      	mov	r2, r3
 800a950:	4601      	mov	r1, r0
 800a952:	4658      	mov	r0, fp
 800a954:	f000 fbee 	bl	800b134 <__pow5mult>
 800a958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95a:	2b01      	cmp	r3, #1
 800a95c:	4604      	mov	r4, r0
 800a95e:	f300 8095 	bgt.w	800aa8c <_dtoa_r+0x8dc>
 800a962:	9b02      	ldr	r3, [sp, #8]
 800a964:	2b00      	cmp	r3, #0
 800a966:	f040 8087 	bne.w	800aa78 <_dtoa_r+0x8c8>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a970:	2b00      	cmp	r3, #0
 800a972:	f040 8089 	bne.w	800aa88 <_dtoa_r+0x8d8>
 800a976:	9b03      	ldr	r3, [sp, #12]
 800a978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a97c:	0d1b      	lsrs	r3, r3, #20
 800a97e:	051b      	lsls	r3, r3, #20
 800a980:	b12b      	cbz	r3, 800a98e <_dtoa_r+0x7de>
 800a982:	9b08      	ldr	r3, [sp, #32]
 800a984:	3301      	adds	r3, #1
 800a986:	9308      	str	r3, [sp, #32]
 800a988:	f108 0801 	add.w	r8, r8, #1
 800a98c:	2301      	movs	r3, #1
 800a98e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a990:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a992:	2b00      	cmp	r3, #0
 800a994:	f000 81b0 	beq.w	800acf8 <_dtoa_r+0xb48>
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a99e:	6918      	ldr	r0, [r3, #16]
 800a9a0:	f000 fabc 	bl	800af1c <__hi0bits>
 800a9a4:	f1c0 0020 	rsb	r0, r0, #32
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	4418      	add	r0, r3
 800a9ac:	f010 001f 	ands.w	r0, r0, #31
 800a9b0:	d077      	beq.n	800aaa2 <_dtoa_r+0x8f2>
 800a9b2:	f1c0 0320 	rsb	r3, r0, #32
 800a9b6:	2b04      	cmp	r3, #4
 800a9b8:	dd6b      	ble.n	800aa92 <_dtoa_r+0x8e2>
 800a9ba:	9b08      	ldr	r3, [sp, #32]
 800a9bc:	f1c0 001c 	rsb	r0, r0, #28
 800a9c0:	4403      	add	r3, r0
 800a9c2:	4480      	add	r8, r0
 800a9c4:	4406      	add	r6, r0
 800a9c6:	9308      	str	r3, [sp, #32]
 800a9c8:	f1b8 0f00 	cmp.w	r8, #0
 800a9cc:	dd05      	ble.n	800a9da <_dtoa_r+0x82a>
 800a9ce:	4649      	mov	r1, r9
 800a9d0:	4642      	mov	r2, r8
 800a9d2:	4658      	mov	r0, fp
 800a9d4:	f000 fc08 	bl	800b1e8 <__lshift>
 800a9d8:	4681      	mov	r9, r0
 800a9da:	9b08      	ldr	r3, [sp, #32]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	dd05      	ble.n	800a9ec <_dtoa_r+0x83c>
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	4658      	mov	r0, fp
 800a9e6:	f000 fbff 	bl	800b1e8 <__lshift>
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d059      	beq.n	800aaa6 <_dtoa_r+0x8f6>
 800a9f2:	4621      	mov	r1, r4
 800a9f4:	4648      	mov	r0, r9
 800a9f6:	f000 fc63 	bl	800b2c0 <__mcmp>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	da53      	bge.n	800aaa6 <_dtoa_r+0x8f6>
 800a9fe:	1e7b      	subs	r3, r7, #1
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	4649      	mov	r1, r9
 800aa04:	2300      	movs	r3, #0
 800aa06:	220a      	movs	r2, #10
 800aa08:	4658      	mov	r0, fp
 800aa0a:	f000 fa41 	bl	800ae90 <__multadd>
 800aa0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aa10:	4681      	mov	r9, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 8172 	beq.w	800acfc <_dtoa_r+0xb4c>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	4629      	mov	r1, r5
 800aa1c:	220a      	movs	r2, #10
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f000 fa36 	bl	800ae90 <__multadd>
 800aa24:	9b00      	ldr	r3, [sp, #0]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	4605      	mov	r5, r0
 800aa2a:	dc67      	bgt.n	800aafc <_dtoa_r+0x94c>
 800aa2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	dc41      	bgt.n	800aab6 <_dtoa_r+0x906>
 800aa32:	e063      	b.n	800aafc <_dtoa_r+0x94c>
 800aa34:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa36:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aa3a:	e746      	b.n	800a8ca <_dtoa_r+0x71a>
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	1e5c      	subs	r4, r3, #1
 800aa40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa42:	42a3      	cmp	r3, r4
 800aa44:	bfbf      	itttt	lt
 800aa46:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800aa48:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800aa4a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800aa4c:	1ae3      	sublt	r3, r4, r3
 800aa4e:	bfb4      	ite	lt
 800aa50:	18d2      	addlt	r2, r2, r3
 800aa52:	1b1c      	subge	r4, r3, r4
 800aa54:	9b07      	ldr	r3, [sp, #28]
 800aa56:	bfbc      	itt	lt
 800aa58:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800aa5a:	2400      	movlt	r4, #0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfb5      	itete	lt
 800aa60:	eba8 0603 	sublt.w	r6, r8, r3
 800aa64:	9b07      	ldrge	r3, [sp, #28]
 800aa66:	2300      	movlt	r3, #0
 800aa68:	4646      	movge	r6, r8
 800aa6a:	e730      	b.n	800a8ce <_dtoa_r+0x71e>
 800aa6c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aa6e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800aa70:	4646      	mov	r6, r8
 800aa72:	e735      	b.n	800a8e0 <_dtoa_r+0x730>
 800aa74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800aa76:	e75c      	b.n	800a932 <_dtoa_r+0x782>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	e788      	b.n	800a98e <_dtoa_r+0x7de>
 800aa7c:	3fe00000 	.word	0x3fe00000
 800aa80:	40240000 	.word	0x40240000
 800aa84:	40140000 	.word	0x40140000
 800aa88:	9b02      	ldr	r3, [sp, #8]
 800aa8a:	e780      	b.n	800a98e <_dtoa_r+0x7de>
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	930a      	str	r3, [sp, #40]	@ 0x28
 800aa90:	e782      	b.n	800a998 <_dtoa_r+0x7e8>
 800aa92:	d099      	beq.n	800a9c8 <_dtoa_r+0x818>
 800aa94:	9a08      	ldr	r2, [sp, #32]
 800aa96:	331c      	adds	r3, #28
 800aa98:	441a      	add	r2, r3
 800aa9a:	4498      	add	r8, r3
 800aa9c:	441e      	add	r6, r3
 800aa9e:	9208      	str	r2, [sp, #32]
 800aaa0:	e792      	b.n	800a9c8 <_dtoa_r+0x818>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	e7f6      	b.n	800aa94 <_dtoa_r+0x8e4>
 800aaa6:	9b07      	ldr	r3, [sp, #28]
 800aaa8:	9704      	str	r7, [sp, #16]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	dc20      	bgt.n	800aaf0 <_dtoa_r+0x940>
 800aaae:	9300      	str	r3, [sp, #0]
 800aab0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	dd1e      	ble.n	800aaf4 <_dtoa_r+0x944>
 800aab6:	9b00      	ldr	r3, [sp, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	f47f aec0 	bne.w	800a83e <_dtoa_r+0x68e>
 800aabe:	4621      	mov	r1, r4
 800aac0:	2205      	movs	r2, #5
 800aac2:	4658      	mov	r0, fp
 800aac4:	f000 f9e4 	bl	800ae90 <__multadd>
 800aac8:	4601      	mov	r1, r0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4648      	mov	r0, r9
 800aace:	f000 fbf7 	bl	800b2c0 <__mcmp>
 800aad2:	2800      	cmp	r0, #0
 800aad4:	f77f aeb3 	ble.w	800a83e <_dtoa_r+0x68e>
 800aad8:	4656      	mov	r6, sl
 800aada:	2331      	movs	r3, #49	@ 0x31
 800aadc:	f806 3b01 	strb.w	r3, [r6], #1
 800aae0:	9b04      	ldr	r3, [sp, #16]
 800aae2:	3301      	adds	r3, #1
 800aae4:	9304      	str	r3, [sp, #16]
 800aae6:	e6ae      	b.n	800a846 <_dtoa_r+0x696>
 800aae8:	9c07      	ldr	r4, [sp, #28]
 800aaea:	9704      	str	r7, [sp, #16]
 800aaec:	4625      	mov	r5, r4
 800aaee:	e7f3      	b.n	800aad8 <_dtoa_r+0x928>
 800aaf0:	9b07      	ldr	r3, [sp, #28]
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f000 8104 	beq.w	800ad04 <_dtoa_r+0xb54>
 800aafc:	2e00      	cmp	r6, #0
 800aafe:	dd05      	ble.n	800ab0c <_dtoa_r+0x95c>
 800ab00:	4629      	mov	r1, r5
 800ab02:	4632      	mov	r2, r6
 800ab04:	4658      	mov	r0, fp
 800ab06:	f000 fb6f 	bl	800b1e8 <__lshift>
 800ab0a:	4605      	mov	r5, r0
 800ab0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d05a      	beq.n	800abc8 <_dtoa_r+0xa18>
 800ab12:	6869      	ldr	r1, [r5, #4]
 800ab14:	4658      	mov	r0, fp
 800ab16:	f000 f959 	bl	800adcc <_Balloc>
 800ab1a:	4606      	mov	r6, r0
 800ab1c:	b928      	cbnz	r0, 800ab2a <_dtoa_r+0x97a>
 800ab1e:	4b84      	ldr	r3, [pc, #528]	@ (800ad30 <_dtoa_r+0xb80>)
 800ab20:	4602      	mov	r2, r0
 800ab22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab26:	f7ff bb5a 	b.w	800a1de <_dtoa_r+0x2e>
 800ab2a:	692a      	ldr	r2, [r5, #16]
 800ab2c:	3202      	adds	r2, #2
 800ab2e:	0092      	lsls	r2, r2, #2
 800ab30:	f105 010c 	add.w	r1, r5, #12
 800ab34:	300c      	adds	r0, #12
 800ab36:	f000 fee9 	bl	800b90c <memcpy>
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	4631      	mov	r1, r6
 800ab3e:	4658      	mov	r0, fp
 800ab40:	f000 fb52 	bl	800b1e8 <__lshift>
 800ab44:	f10a 0301 	add.w	r3, sl, #1
 800ab48:	9307      	str	r3, [sp, #28]
 800ab4a:	9b00      	ldr	r3, [sp, #0]
 800ab4c:	4453      	add	r3, sl
 800ab4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	462f      	mov	r7, r5
 800ab58:	930a      	str	r3, [sp, #40]	@ 0x28
 800ab5a:	4605      	mov	r5, r0
 800ab5c:	9b07      	ldr	r3, [sp, #28]
 800ab5e:	4621      	mov	r1, r4
 800ab60:	3b01      	subs	r3, #1
 800ab62:	4648      	mov	r0, r9
 800ab64:	9300      	str	r3, [sp, #0]
 800ab66:	f7ff fa9a 	bl	800a09e <quorem>
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	9002      	str	r0, [sp, #8]
 800ab6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ab72:	4648      	mov	r0, r9
 800ab74:	f000 fba4 	bl	800b2c0 <__mcmp>
 800ab78:	462a      	mov	r2, r5
 800ab7a:	9008      	str	r0, [sp, #32]
 800ab7c:	4621      	mov	r1, r4
 800ab7e:	4658      	mov	r0, fp
 800ab80:	f000 fbba 	bl	800b2f8 <__mdiff>
 800ab84:	68c2      	ldr	r2, [r0, #12]
 800ab86:	4606      	mov	r6, r0
 800ab88:	bb02      	cbnz	r2, 800abcc <_dtoa_r+0xa1c>
 800ab8a:	4601      	mov	r1, r0
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	f000 fb97 	bl	800b2c0 <__mcmp>
 800ab92:	4602      	mov	r2, r0
 800ab94:	4631      	mov	r1, r6
 800ab96:	4658      	mov	r0, fp
 800ab98:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab9a:	f000 f957 	bl	800ae4c <_Bfree>
 800ab9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aba0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aba2:	9e07      	ldr	r6, [sp, #28]
 800aba4:	ea43 0102 	orr.w	r1, r3, r2
 800aba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800abaa:	4319      	orrs	r1, r3
 800abac:	d110      	bne.n	800abd0 <_dtoa_r+0xa20>
 800abae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800abb2:	d029      	beq.n	800ac08 <_dtoa_r+0xa58>
 800abb4:	9b08      	ldr	r3, [sp, #32]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	dd02      	ble.n	800abc0 <_dtoa_r+0xa10>
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800abc0:	9b00      	ldr	r3, [sp, #0]
 800abc2:	f883 8000 	strb.w	r8, [r3]
 800abc6:	e63f      	b.n	800a848 <_dtoa_r+0x698>
 800abc8:	4628      	mov	r0, r5
 800abca:	e7bb      	b.n	800ab44 <_dtoa_r+0x994>
 800abcc:	2201      	movs	r2, #1
 800abce:	e7e1      	b.n	800ab94 <_dtoa_r+0x9e4>
 800abd0:	9b08      	ldr	r3, [sp, #32]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	db04      	blt.n	800abe0 <_dtoa_r+0xa30>
 800abd6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800abd8:	430b      	orrs	r3, r1
 800abda:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abdc:	430b      	orrs	r3, r1
 800abde:	d120      	bne.n	800ac22 <_dtoa_r+0xa72>
 800abe0:	2a00      	cmp	r2, #0
 800abe2:	dded      	ble.n	800abc0 <_dtoa_r+0xa10>
 800abe4:	4649      	mov	r1, r9
 800abe6:	2201      	movs	r2, #1
 800abe8:	4658      	mov	r0, fp
 800abea:	f000 fafd 	bl	800b1e8 <__lshift>
 800abee:	4621      	mov	r1, r4
 800abf0:	4681      	mov	r9, r0
 800abf2:	f000 fb65 	bl	800b2c0 <__mcmp>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	dc03      	bgt.n	800ac02 <_dtoa_r+0xa52>
 800abfa:	d1e1      	bne.n	800abc0 <_dtoa_r+0xa10>
 800abfc:	f018 0f01 	tst.w	r8, #1
 800ac00:	d0de      	beq.n	800abc0 <_dtoa_r+0xa10>
 800ac02:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac06:	d1d8      	bne.n	800abba <_dtoa_r+0xa0a>
 800ac08:	9a00      	ldr	r2, [sp, #0]
 800ac0a:	2339      	movs	r3, #57	@ 0x39
 800ac0c:	7013      	strb	r3, [r2, #0]
 800ac0e:	4633      	mov	r3, r6
 800ac10:	461e      	mov	r6, r3
 800ac12:	3b01      	subs	r3, #1
 800ac14:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac18:	2a39      	cmp	r2, #57	@ 0x39
 800ac1a:	d052      	beq.n	800acc2 <_dtoa_r+0xb12>
 800ac1c:	3201      	adds	r2, #1
 800ac1e:	701a      	strb	r2, [r3, #0]
 800ac20:	e612      	b.n	800a848 <_dtoa_r+0x698>
 800ac22:	2a00      	cmp	r2, #0
 800ac24:	dd07      	ble.n	800ac36 <_dtoa_r+0xa86>
 800ac26:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ac2a:	d0ed      	beq.n	800ac08 <_dtoa_r+0xa58>
 800ac2c:	9a00      	ldr	r2, [sp, #0]
 800ac2e:	f108 0301 	add.w	r3, r8, #1
 800ac32:	7013      	strb	r3, [r2, #0]
 800ac34:	e608      	b.n	800a848 <_dtoa_r+0x698>
 800ac36:	9b07      	ldr	r3, [sp, #28]
 800ac38:	9a07      	ldr	r2, [sp, #28]
 800ac3a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ac3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d028      	beq.n	800ac96 <_dtoa_r+0xae6>
 800ac44:	4649      	mov	r1, r9
 800ac46:	2300      	movs	r3, #0
 800ac48:	220a      	movs	r2, #10
 800ac4a:	4658      	mov	r0, fp
 800ac4c:	f000 f920 	bl	800ae90 <__multadd>
 800ac50:	42af      	cmp	r7, r5
 800ac52:	4681      	mov	r9, r0
 800ac54:	f04f 0300 	mov.w	r3, #0
 800ac58:	f04f 020a 	mov.w	r2, #10
 800ac5c:	4639      	mov	r1, r7
 800ac5e:	4658      	mov	r0, fp
 800ac60:	d107      	bne.n	800ac72 <_dtoa_r+0xac2>
 800ac62:	f000 f915 	bl	800ae90 <__multadd>
 800ac66:	4607      	mov	r7, r0
 800ac68:	4605      	mov	r5, r0
 800ac6a:	9b07      	ldr	r3, [sp, #28]
 800ac6c:	3301      	adds	r3, #1
 800ac6e:	9307      	str	r3, [sp, #28]
 800ac70:	e774      	b.n	800ab5c <_dtoa_r+0x9ac>
 800ac72:	f000 f90d 	bl	800ae90 <__multadd>
 800ac76:	4629      	mov	r1, r5
 800ac78:	4607      	mov	r7, r0
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	220a      	movs	r2, #10
 800ac7e:	4658      	mov	r0, fp
 800ac80:	f000 f906 	bl	800ae90 <__multadd>
 800ac84:	4605      	mov	r5, r0
 800ac86:	e7f0      	b.n	800ac6a <_dtoa_r+0xaba>
 800ac88:	9b00      	ldr	r3, [sp, #0]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	bfcc      	ite	gt
 800ac8e:	461e      	movgt	r6, r3
 800ac90:	2601      	movle	r6, #1
 800ac92:	4456      	add	r6, sl
 800ac94:	2700      	movs	r7, #0
 800ac96:	4649      	mov	r1, r9
 800ac98:	2201      	movs	r2, #1
 800ac9a:	4658      	mov	r0, fp
 800ac9c:	f000 faa4 	bl	800b1e8 <__lshift>
 800aca0:	4621      	mov	r1, r4
 800aca2:	4681      	mov	r9, r0
 800aca4:	f000 fb0c 	bl	800b2c0 <__mcmp>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	dcb0      	bgt.n	800ac0e <_dtoa_r+0xa5e>
 800acac:	d102      	bne.n	800acb4 <_dtoa_r+0xb04>
 800acae:	f018 0f01 	tst.w	r8, #1
 800acb2:	d1ac      	bne.n	800ac0e <_dtoa_r+0xa5e>
 800acb4:	4633      	mov	r3, r6
 800acb6:	461e      	mov	r6, r3
 800acb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800acbc:	2a30      	cmp	r2, #48	@ 0x30
 800acbe:	d0fa      	beq.n	800acb6 <_dtoa_r+0xb06>
 800acc0:	e5c2      	b.n	800a848 <_dtoa_r+0x698>
 800acc2:	459a      	cmp	sl, r3
 800acc4:	d1a4      	bne.n	800ac10 <_dtoa_r+0xa60>
 800acc6:	9b04      	ldr	r3, [sp, #16]
 800acc8:	3301      	adds	r3, #1
 800acca:	9304      	str	r3, [sp, #16]
 800accc:	2331      	movs	r3, #49	@ 0x31
 800acce:	f88a 3000 	strb.w	r3, [sl]
 800acd2:	e5b9      	b.n	800a848 <_dtoa_r+0x698>
 800acd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800acd6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ad34 <_dtoa_r+0xb84>
 800acda:	b11b      	cbz	r3, 800ace4 <_dtoa_r+0xb34>
 800acdc:	f10a 0308 	add.w	r3, sl, #8
 800ace0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ace2:	6013      	str	r3, [r2, #0]
 800ace4:	4650      	mov	r0, sl
 800ace6:	b019      	add	sp, #100	@ 0x64
 800ace8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acee:	2b01      	cmp	r3, #1
 800acf0:	f77f ae37 	ble.w	800a962 <_dtoa_r+0x7b2>
 800acf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acf6:	930a      	str	r3, [sp, #40]	@ 0x28
 800acf8:	2001      	movs	r0, #1
 800acfa:	e655      	b.n	800a9a8 <_dtoa_r+0x7f8>
 800acfc:	9b00      	ldr	r3, [sp, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	f77f aed6 	ble.w	800aab0 <_dtoa_r+0x900>
 800ad04:	4656      	mov	r6, sl
 800ad06:	4621      	mov	r1, r4
 800ad08:	4648      	mov	r0, r9
 800ad0a:	f7ff f9c8 	bl	800a09e <quorem>
 800ad0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ad12:	f806 8b01 	strb.w	r8, [r6], #1
 800ad16:	9b00      	ldr	r3, [sp, #0]
 800ad18:	eba6 020a 	sub.w	r2, r6, sl
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	ddb3      	ble.n	800ac88 <_dtoa_r+0xad8>
 800ad20:	4649      	mov	r1, r9
 800ad22:	2300      	movs	r3, #0
 800ad24:	220a      	movs	r2, #10
 800ad26:	4658      	mov	r0, fp
 800ad28:	f000 f8b2 	bl	800ae90 <__multadd>
 800ad2c:	4681      	mov	r9, r0
 800ad2e:	e7ea      	b.n	800ad06 <_dtoa_r+0xb56>
 800ad30:	0800c094 	.word	0x0800c094
 800ad34:	0800c018 	.word	0x0800c018

0800ad38 <_free_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	2900      	cmp	r1, #0
 800ad3e:	d041      	beq.n	800adc4 <_free_r+0x8c>
 800ad40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad44:	1f0c      	subs	r4, r1, #4
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	bfb8      	it	lt
 800ad4a:	18e4      	addlt	r4, r4, r3
 800ad4c:	f7fe fb7a 	bl	8009444 <__malloc_lock>
 800ad50:	4a1d      	ldr	r2, [pc, #116]	@ (800adc8 <_free_r+0x90>)
 800ad52:	6813      	ldr	r3, [r2, #0]
 800ad54:	b933      	cbnz	r3, 800ad64 <_free_r+0x2c>
 800ad56:	6063      	str	r3, [r4, #4]
 800ad58:	6014      	str	r4, [r2, #0]
 800ad5a:	4628      	mov	r0, r5
 800ad5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad60:	f7fe bb76 	b.w	8009450 <__malloc_unlock>
 800ad64:	42a3      	cmp	r3, r4
 800ad66:	d908      	bls.n	800ad7a <_free_r+0x42>
 800ad68:	6820      	ldr	r0, [r4, #0]
 800ad6a:	1821      	adds	r1, r4, r0
 800ad6c:	428b      	cmp	r3, r1
 800ad6e:	bf01      	itttt	eq
 800ad70:	6819      	ldreq	r1, [r3, #0]
 800ad72:	685b      	ldreq	r3, [r3, #4]
 800ad74:	1809      	addeq	r1, r1, r0
 800ad76:	6021      	streq	r1, [r4, #0]
 800ad78:	e7ed      	b.n	800ad56 <_free_r+0x1e>
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	b10b      	cbz	r3, 800ad84 <_free_r+0x4c>
 800ad80:	42a3      	cmp	r3, r4
 800ad82:	d9fa      	bls.n	800ad7a <_free_r+0x42>
 800ad84:	6811      	ldr	r1, [r2, #0]
 800ad86:	1850      	adds	r0, r2, r1
 800ad88:	42a0      	cmp	r0, r4
 800ad8a:	d10b      	bne.n	800ada4 <_free_r+0x6c>
 800ad8c:	6820      	ldr	r0, [r4, #0]
 800ad8e:	4401      	add	r1, r0
 800ad90:	1850      	adds	r0, r2, r1
 800ad92:	4283      	cmp	r3, r0
 800ad94:	6011      	str	r1, [r2, #0]
 800ad96:	d1e0      	bne.n	800ad5a <_free_r+0x22>
 800ad98:	6818      	ldr	r0, [r3, #0]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	6053      	str	r3, [r2, #4]
 800ad9e:	4408      	add	r0, r1
 800ada0:	6010      	str	r0, [r2, #0]
 800ada2:	e7da      	b.n	800ad5a <_free_r+0x22>
 800ada4:	d902      	bls.n	800adac <_free_r+0x74>
 800ada6:	230c      	movs	r3, #12
 800ada8:	602b      	str	r3, [r5, #0]
 800adaa:	e7d6      	b.n	800ad5a <_free_r+0x22>
 800adac:	6820      	ldr	r0, [r4, #0]
 800adae:	1821      	adds	r1, r4, r0
 800adb0:	428b      	cmp	r3, r1
 800adb2:	bf04      	itt	eq
 800adb4:	6819      	ldreq	r1, [r3, #0]
 800adb6:	685b      	ldreq	r3, [r3, #4]
 800adb8:	6063      	str	r3, [r4, #4]
 800adba:	bf04      	itt	eq
 800adbc:	1809      	addeq	r1, r1, r0
 800adbe:	6021      	streq	r1, [r4, #0]
 800adc0:	6054      	str	r4, [r2, #4]
 800adc2:	e7ca      	b.n	800ad5a <_free_r+0x22>
 800adc4:	bd38      	pop	{r3, r4, r5, pc}
 800adc6:	bf00      	nop
 800adc8:	20000a68 	.word	0x20000a68

0800adcc <_Balloc>:
 800adcc:	b570      	push	{r4, r5, r6, lr}
 800adce:	69c6      	ldr	r6, [r0, #28]
 800add0:	4604      	mov	r4, r0
 800add2:	460d      	mov	r5, r1
 800add4:	b976      	cbnz	r6, 800adf4 <_Balloc+0x28>
 800add6:	2010      	movs	r0, #16
 800add8:	f7fe fa82 	bl	80092e0 <malloc>
 800addc:	4602      	mov	r2, r0
 800adde:	61e0      	str	r0, [r4, #28]
 800ade0:	b920      	cbnz	r0, 800adec <_Balloc+0x20>
 800ade2:	4b18      	ldr	r3, [pc, #96]	@ (800ae44 <_Balloc+0x78>)
 800ade4:	4818      	ldr	r0, [pc, #96]	@ (800ae48 <_Balloc+0x7c>)
 800ade6:	216b      	movs	r1, #107	@ 0x6b
 800ade8:	f000 fd9e 	bl	800b928 <__assert_func>
 800adec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800adf0:	6006      	str	r6, [r0, #0]
 800adf2:	60c6      	str	r6, [r0, #12]
 800adf4:	69e6      	ldr	r6, [r4, #28]
 800adf6:	68f3      	ldr	r3, [r6, #12]
 800adf8:	b183      	cbz	r3, 800ae1c <_Balloc+0x50>
 800adfa:	69e3      	ldr	r3, [r4, #28]
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae02:	b9b8      	cbnz	r0, 800ae34 <_Balloc+0x68>
 800ae04:	2101      	movs	r1, #1
 800ae06:	fa01 f605 	lsl.w	r6, r1, r5
 800ae0a:	1d72      	adds	r2, r6, #5
 800ae0c:	0092      	lsls	r2, r2, #2
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 fda8 	bl	800b964 <_calloc_r>
 800ae14:	b160      	cbz	r0, 800ae30 <_Balloc+0x64>
 800ae16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae1a:	e00e      	b.n	800ae3a <_Balloc+0x6e>
 800ae1c:	2221      	movs	r2, #33	@ 0x21
 800ae1e:	2104      	movs	r1, #4
 800ae20:	4620      	mov	r0, r4
 800ae22:	f000 fd9f 	bl	800b964 <_calloc_r>
 800ae26:	69e3      	ldr	r3, [r4, #28]
 800ae28:	60f0      	str	r0, [r6, #12]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e4      	bne.n	800adfa <_Balloc+0x2e>
 800ae30:	2000      	movs	r0, #0
 800ae32:	bd70      	pop	{r4, r5, r6, pc}
 800ae34:	6802      	ldr	r2, [r0, #0]
 800ae36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ae40:	e7f7      	b.n	800ae32 <_Balloc+0x66>
 800ae42:	bf00      	nop
 800ae44:	0800c025 	.word	0x0800c025
 800ae48:	0800c0a5 	.word	0x0800c0a5

0800ae4c <_Bfree>:
 800ae4c:	b570      	push	{r4, r5, r6, lr}
 800ae4e:	69c6      	ldr	r6, [r0, #28]
 800ae50:	4605      	mov	r5, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b976      	cbnz	r6, 800ae74 <_Bfree+0x28>
 800ae56:	2010      	movs	r0, #16
 800ae58:	f7fe fa42 	bl	80092e0 <malloc>
 800ae5c:	4602      	mov	r2, r0
 800ae5e:	61e8      	str	r0, [r5, #28]
 800ae60:	b920      	cbnz	r0, 800ae6c <_Bfree+0x20>
 800ae62:	4b09      	ldr	r3, [pc, #36]	@ (800ae88 <_Bfree+0x3c>)
 800ae64:	4809      	ldr	r0, [pc, #36]	@ (800ae8c <_Bfree+0x40>)
 800ae66:	218f      	movs	r1, #143	@ 0x8f
 800ae68:	f000 fd5e 	bl	800b928 <__assert_func>
 800ae6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae70:	6006      	str	r6, [r0, #0]
 800ae72:	60c6      	str	r6, [r0, #12]
 800ae74:	b13c      	cbz	r4, 800ae86 <_Bfree+0x3a>
 800ae76:	69eb      	ldr	r3, [r5, #28]
 800ae78:	6862      	ldr	r2, [r4, #4]
 800ae7a:	68db      	ldr	r3, [r3, #12]
 800ae7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae80:	6021      	str	r1, [r4, #0]
 800ae82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	0800c025 	.word	0x0800c025
 800ae8c:	0800c0a5 	.word	0x0800c0a5

0800ae90 <__multadd>:
 800ae90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae94:	690d      	ldr	r5, [r1, #16]
 800ae96:	4607      	mov	r7, r0
 800ae98:	460c      	mov	r4, r1
 800ae9a:	461e      	mov	r6, r3
 800ae9c:	f101 0c14 	add.w	ip, r1, #20
 800aea0:	2000      	movs	r0, #0
 800aea2:	f8dc 3000 	ldr.w	r3, [ip]
 800aea6:	b299      	uxth	r1, r3
 800aea8:	fb02 6101 	mla	r1, r2, r1, r6
 800aeac:	0c1e      	lsrs	r6, r3, #16
 800aeae:	0c0b      	lsrs	r3, r1, #16
 800aeb0:	fb02 3306 	mla	r3, r2, r6, r3
 800aeb4:	b289      	uxth	r1, r1
 800aeb6:	3001      	adds	r0, #1
 800aeb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aebc:	4285      	cmp	r5, r0
 800aebe:	f84c 1b04 	str.w	r1, [ip], #4
 800aec2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aec6:	dcec      	bgt.n	800aea2 <__multadd+0x12>
 800aec8:	b30e      	cbz	r6, 800af0e <__multadd+0x7e>
 800aeca:	68a3      	ldr	r3, [r4, #8]
 800aecc:	42ab      	cmp	r3, r5
 800aece:	dc19      	bgt.n	800af04 <__multadd+0x74>
 800aed0:	6861      	ldr	r1, [r4, #4]
 800aed2:	4638      	mov	r0, r7
 800aed4:	3101      	adds	r1, #1
 800aed6:	f7ff ff79 	bl	800adcc <_Balloc>
 800aeda:	4680      	mov	r8, r0
 800aedc:	b928      	cbnz	r0, 800aeea <__multadd+0x5a>
 800aede:	4602      	mov	r2, r0
 800aee0:	4b0c      	ldr	r3, [pc, #48]	@ (800af14 <__multadd+0x84>)
 800aee2:	480d      	ldr	r0, [pc, #52]	@ (800af18 <__multadd+0x88>)
 800aee4:	21ba      	movs	r1, #186	@ 0xba
 800aee6:	f000 fd1f 	bl	800b928 <__assert_func>
 800aeea:	6922      	ldr	r2, [r4, #16]
 800aeec:	3202      	adds	r2, #2
 800aeee:	f104 010c 	add.w	r1, r4, #12
 800aef2:	0092      	lsls	r2, r2, #2
 800aef4:	300c      	adds	r0, #12
 800aef6:	f000 fd09 	bl	800b90c <memcpy>
 800aefa:	4621      	mov	r1, r4
 800aefc:	4638      	mov	r0, r7
 800aefe:	f7ff ffa5 	bl	800ae4c <_Bfree>
 800af02:	4644      	mov	r4, r8
 800af04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af08:	3501      	adds	r5, #1
 800af0a:	615e      	str	r6, [r3, #20]
 800af0c:	6125      	str	r5, [r4, #16]
 800af0e:	4620      	mov	r0, r4
 800af10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af14:	0800c094 	.word	0x0800c094
 800af18:	0800c0a5 	.word	0x0800c0a5

0800af1c <__hi0bits>:
 800af1c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800af20:	4603      	mov	r3, r0
 800af22:	bf36      	itet	cc
 800af24:	0403      	lslcc	r3, r0, #16
 800af26:	2000      	movcs	r0, #0
 800af28:	2010      	movcc	r0, #16
 800af2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800af2e:	bf3c      	itt	cc
 800af30:	021b      	lslcc	r3, r3, #8
 800af32:	3008      	addcc	r0, #8
 800af34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800af38:	bf3c      	itt	cc
 800af3a:	011b      	lslcc	r3, r3, #4
 800af3c:	3004      	addcc	r0, #4
 800af3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af42:	bf3c      	itt	cc
 800af44:	009b      	lslcc	r3, r3, #2
 800af46:	3002      	addcc	r0, #2
 800af48:	2b00      	cmp	r3, #0
 800af4a:	db05      	blt.n	800af58 <__hi0bits+0x3c>
 800af4c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800af50:	f100 0001 	add.w	r0, r0, #1
 800af54:	bf08      	it	eq
 800af56:	2020      	moveq	r0, #32
 800af58:	4770      	bx	lr

0800af5a <__lo0bits>:
 800af5a:	6803      	ldr	r3, [r0, #0]
 800af5c:	4602      	mov	r2, r0
 800af5e:	f013 0007 	ands.w	r0, r3, #7
 800af62:	d00b      	beq.n	800af7c <__lo0bits+0x22>
 800af64:	07d9      	lsls	r1, r3, #31
 800af66:	d421      	bmi.n	800afac <__lo0bits+0x52>
 800af68:	0798      	lsls	r0, r3, #30
 800af6a:	bf49      	itett	mi
 800af6c:	085b      	lsrmi	r3, r3, #1
 800af6e:	089b      	lsrpl	r3, r3, #2
 800af70:	2001      	movmi	r0, #1
 800af72:	6013      	strmi	r3, [r2, #0]
 800af74:	bf5c      	itt	pl
 800af76:	6013      	strpl	r3, [r2, #0]
 800af78:	2002      	movpl	r0, #2
 800af7a:	4770      	bx	lr
 800af7c:	b299      	uxth	r1, r3
 800af7e:	b909      	cbnz	r1, 800af84 <__lo0bits+0x2a>
 800af80:	0c1b      	lsrs	r3, r3, #16
 800af82:	2010      	movs	r0, #16
 800af84:	b2d9      	uxtb	r1, r3
 800af86:	b909      	cbnz	r1, 800af8c <__lo0bits+0x32>
 800af88:	3008      	adds	r0, #8
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	0719      	lsls	r1, r3, #28
 800af8e:	bf04      	itt	eq
 800af90:	091b      	lsreq	r3, r3, #4
 800af92:	3004      	addeq	r0, #4
 800af94:	0799      	lsls	r1, r3, #30
 800af96:	bf04      	itt	eq
 800af98:	089b      	lsreq	r3, r3, #2
 800af9a:	3002      	addeq	r0, #2
 800af9c:	07d9      	lsls	r1, r3, #31
 800af9e:	d403      	bmi.n	800afa8 <__lo0bits+0x4e>
 800afa0:	085b      	lsrs	r3, r3, #1
 800afa2:	f100 0001 	add.w	r0, r0, #1
 800afa6:	d003      	beq.n	800afb0 <__lo0bits+0x56>
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	4770      	bx	lr
 800afac:	2000      	movs	r0, #0
 800afae:	4770      	bx	lr
 800afb0:	2020      	movs	r0, #32
 800afb2:	4770      	bx	lr

0800afb4 <__i2b>:
 800afb4:	b510      	push	{r4, lr}
 800afb6:	460c      	mov	r4, r1
 800afb8:	2101      	movs	r1, #1
 800afba:	f7ff ff07 	bl	800adcc <_Balloc>
 800afbe:	4602      	mov	r2, r0
 800afc0:	b928      	cbnz	r0, 800afce <__i2b+0x1a>
 800afc2:	4b05      	ldr	r3, [pc, #20]	@ (800afd8 <__i2b+0x24>)
 800afc4:	4805      	ldr	r0, [pc, #20]	@ (800afdc <__i2b+0x28>)
 800afc6:	f240 1145 	movw	r1, #325	@ 0x145
 800afca:	f000 fcad 	bl	800b928 <__assert_func>
 800afce:	2301      	movs	r3, #1
 800afd0:	6144      	str	r4, [r0, #20]
 800afd2:	6103      	str	r3, [r0, #16]
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	bf00      	nop
 800afd8:	0800c094 	.word	0x0800c094
 800afdc:	0800c0a5 	.word	0x0800c0a5

0800afe0 <__multiply>:
 800afe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe4:	4614      	mov	r4, r2
 800afe6:	690a      	ldr	r2, [r1, #16]
 800afe8:	6923      	ldr	r3, [r4, #16]
 800afea:	429a      	cmp	r2, r3
 800afec:	bfa8      	it	ge
 800afee:	4623      	movge	r3, r4
 800aff0:	460f      	mov	r7, r1
 800aff2:	bfa4      	itt	ge
 800aff4:	460c      	movge	r4, r1
 800aff6:	461f      	movge	r7, r3
 800aff8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800affc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b000:	68a3      	ldr	r3, [r4, #8]
 800b002:	6861      	ldr	r1, [r4, #4]
 800b004:	eb0a 0609 	add.w	r6, sl, r9
 800b008:	42b3      	cmp	r3, r6
 800b00a:	b085      	sub	sp, #20
 800b00c:	bfb8      	it	lt
 800b00e:	3101      	addlt	r1, #1
 800b010:	f7ff fedc 	bl	800adcc <_Balloc>
 800b014:	b930      	cbnz	r0, 800b024 <__multiply+0x44>
 800b016:	4602      	mov	r2, r0
 800b018:	4b44      	ldr	r3, [pc, #272]	@ (800b12c <__multiply+0x14c>)
 800b01a:	4845      	ldr	r0, [pc, #276]	@ (800b130 <__multiply+0x150>)
 800b01c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b020:	f000 fc82 	bl	800b928 <__assert_func>
 800b024:	f100 0514 	add.w	r5, r0, #20
 800b028:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b02c:	462b      	mov	r3, r5
 800b02e:	2200      	movs	r2, #0
 800b030:	4543      	cmp	r3, r8
 800b032:	d321      	bcc.n	800b078 <__multiply+0x98>
 800b034:	f107 0114 	add.w	r1, r7, #20
 800b038:	f104 0214 	add.w	r2, r4, #20
 800b03c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b040:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b044:	9302      	str	r3, [sp, #8]
 800b046:	1b13      	subs	r3, r2, r4
 800b048:	3b15      	subs	r3, #21
 800b04a:	f023 0303 	bic.w	r3, r3, #3
 800b04e:	3304      	adds	r3, #4
 800b050:	f104 0715 	add.w	r7, r4, #21
 800b054:	42ba      	cmp	r2, r7
 800b056:	bf38      	it	cc
 800b058:	2304      	movcc	r3, #4
 800b05a:	9301      	str	r3, [sp, #4]
 800b05c:	9b02      	ldr	r3, [sp, #8]
 800b05e:	9103      	str	r1, [sp, #12]
 800b060:	428b      	cmp	r3, r1
 800b062:	d80c      	bhi.n	800b07e <__multiply+0x9e>
 800b064:	2e00      	cmp	r6, #0
 800b066:	dd03      	ble.n	800b070 <__multiply+0x90>
 800b068:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d05b      	beq.n	800b128 <__multiply+0x148>
 800b070:	6106      	str	r6, [r0, #16]
 800b072:	b005      	add	sp, #20
 800b074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b078:	f843 2b04 	str.w	r2, [r3], #4
 800b07c:	e7d8      	b.n	800b030 <__multiply+0x50>
 800b07e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b082:	f1ba 0f00 	cmp.w	sl, #0
 800b086:	d024      	beq.n	800b0d2 <__multiply+0xf2>
 800b088:	f104 0e14 	add.w	lr, r4, #20
 800b08c:	46a9      	mov	r9, r5
 800b08e:	f04f 0c00 	mov.w	ip, #0
 800b092:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b096:	f8d9 3000 	ldr.w	r3, [r9]
 800b09a:	fa1f fb87 	uxth.w	fp, r7
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b0a4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800b0a8:	f8d9 7000 	ldr.w	r7, [r9]
 800b0ac:	4463      	add	r3, ip
 800b0ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0b2:	fb0a c70b 	mla	r7, sl, fp, ip
 800b0b6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b0c0:	4572      	cmp	r2, lr
 800b0c2:	f849 3b04 	str.w	r3, [r9], #4
 800b0c6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b0ca:	d8e2      	bhi.n	800b092 <__multiply+0xb2>
 800b0cc:	9b01      	ldr	r3, [sp, #4]
 800b0ce:	f845 c003 	str.w	ip, [r5, r3]
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b0d8:	3104      	adds	r1, #4
 800b0da:	f1b9 0f00 	cmp.w	r9, #0
 800b0de:	d021      	beq.n	800b124 <__multiply+0x144>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	f104 0c14 	add.w	ip, r4, #20
 800b0e6:	46ae      	mov	lr, r5
 800b0e8:	f04f 0a00 	mov.w	sl, #0
 800b0ec:	f8bc b000 	ldrh.w	fp, [ip]
 800b0f0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b0f4:	fb09 770b 	mla	r7, r9, fp, r7
 800b0f8:	4457      	add	r7, sl
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b100:	f84e 3b04 	str.w	r3, [lr], #4
 800b104:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b10c:	f8be 3000 	ldrh.w	r3, [lr]
 800b110:	fb09 330a 	mla	r3, r9, sl, r3
 800b114:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b118:	4562      	cmp	r2, ip
 800b11a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b11e:	d8e5      	bhi.n	800b0ec <__multiply+0x10c>
 800b120:	9f01      	ldr	r7, [sp, #4]
 800b122:	51eb      	str	r3, [r5, r7]
 800b124:	3504      	adds	r5, #4
 800b126:	e799      	b.n	800b05c <__multiply+0x7c>
 800b128:	3e01      	subs	r6, #1
 800b12a:	e79b      	b.n	800b064 <__multiply+0x84>
 800b12c:	0800c094 	.word	0x0800c094
 800b130:	0800c0a5 	.word	0x0800c0a5

0800b134 <__pow5mult>:
 800b134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b138:	4615      	mov	r5, r2
 800b13a:	f012 0203 	ands.w	r2, r2, #3
 800b13e:	4607      	mov	r7, r0
 800b140:	460e      	mov	r6, r1
 800b142:	d007      	beq.n	800b154 <__pow5mult+0x20>
 800b144:	4c25      	ldr	r4, [pc, #148]	@ (800b1dc <__pow5mult+0xa8>)
 800b146:	3a01      	subs	r2, #1
 800b148:	2300      	movs	r3, #0
 800b14a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b14e:	f7ff fe9f 	bl	800ae90 <__multadd>
 800b152:	4606      	mov	r6, r0
 800b154:	10ad      	asrs	r5, r5, #2
 800b156:	d03d      	beq.n	800b1d4 <__pow5mult+0xa0>
 800b158:	69fc      	ldr	r4, [r7, #28]
 800b15a:	b97c      	cbnz	r4, 800b17c <__pow5mult+0x48>
 800b15c:	2010      	movs	r0, #16
 800b15e:	f7fe f8bf 	bl	80092e0 <malloc>
 800b162:	4602      	mov	r2, r0
 800b164:	61f8      	str	r0, [r7, #28]
 800b166:	b928      	cbnz	r0, 800b174 <__pow5mult+0x40>
 800b168:	4b1d      	ldr	r3, [pc, #116]	@ (800b1e0 <__pow5mult+0xac>)
 800b16a:	481e      	ldr	r0, [pc, #120]	@ (800b1e4 <__pow5mult+0xb0>)
 800b16c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b170:	f000 fbda 	bl	800b928 <__assert_func>
 800b174:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b178:	6004      	str	r4, [r0, #0]
 800b17a:	60c4      	str	r4, [r0, #12]
 800b17c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b180:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b184:	b94c      	cbnz	r4, 800b19a <__pow5mult+0x66>
 800b186:	f240 2171 	movw	r1, #625	@ 0x271
 800b18a:	4638      	mov	r0, r7
 800b18c:	f7ff ff12 	bl	800afb4 <__i2b>
 800b190:	2300      	movs	r3, #0
 800b192:	f8c8 0008 	str.w	r0, [r8, #8]
 800b196:	4604      	mov	r4, r0
 800b198:	6003      	str	r3, [r0, #0]
 800b19a:	f04f 0900 	mov.w	r9, #0
 800b19e:	07eb      	lsls	r3, r5, #31
 800b1a0:	d50a      	bpl.n	800b1b8 <__pow5mult+0x84>
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4622      	mov	r2, r4
 800b1a6:	4638      	mov	r0, r7
 800b1a8:	f7ff ff1a 	bl	800afe0 <__multiply>
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	4638      	mov	r0, r7
 800b1b2:	f7ff fe4b 	bl	800ae4c <_Bfree>
 800b1b6:	4646      	mov	r6, r8
 800b1b8:	106d      	asrs	r5, r5, #1
 800b1ba:	d00b      	beq.n	800b1d4 <__pow5mult+0xa0>
 800b1bc:	6820      	ldr	r0, [r4, #0]
 800b1be:	b938      	cbnz	r0, 800b1d0 <__pow5mult+0x9c>
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	4621      	mov	r1, r4
 800b1c4:	4638      	mov	r0, r7
 800b1c6:	f7ff ff0b 	bl	800afe0 <__multiply>
 800b1ca:	6020      	str	r0, [r4, #0]
 800b1cc:	f8c0 9000 	str.w	r9, [r0]
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	e7e4      	b.n	800b19e <__pow5mult+0x6a>
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800c100 	.word	0x0800c100
 800b1e0:	0800c025 	.word	0x0800c025
 800b1e4:	0800c0a5 	.word	0x0800c0a5

0800b1e8 <__lshift>:
 800b1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ec:	460c      	mov	r4, r1
 800b1ee:	6849      	ldr	r1, [r1, #4]
 800b1f0:	6923      	ldr	r3, [r4, #16]
 800b1f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b1f6:	68a3      	ldr	r3, [r4, #8]
 800b1f8:	4607      	mov	r7, r0
 800b1fa:	4691      	mov	r9, r2
 800b1fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b200:	f108 0601 	add.w	r6, r8, #1
 800b204:	42b3      	cmp	r3, r6
 800b206:	db0b      	blt.n	800b220 <__lshift+0x38>
 800b208:	4638      	mov	r0, r7
 800b20a:	f7ff fddf 	bl	800adcc <_Balloc>
 800b20e:	4605      	mov	r5, r0
 800b210:	b948      	cbnz	r0, 800b226 <__lshift+0x3e>
 800b212:	4602      	mov	r2, r0
 800b214:	4b28      	ldr	r3, [pc, #160]	@ (800b2b8 <__lshift+0xd0>)
 800b216:	4829      	ldr	r0, [pc, #164]	@ (800b2bc <__lshift+0xd4>)
 800b218:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b21c:	f000 fb84 	bl	800b928 <__assert_func>
 800b220:	3101      	adds	r1, #1
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	e7ee      	b.n	800b204 <__lshift+0x1c>
 800b226:	2300      	movs	r3, #0
 800b228:	f100 0114 	add.w	r1, r0, #20
 800b22c:	f100 0210 	add.w	r2, r0, #16
 800b230:	4618      	mov	r0, r3
 800b232:	4553      	cmp	r3, sl
 800b234:	db33      	blt.n	800b29e <__lshift+0xb6>
 800b236:	6920      	ldr	r0, [r4, #16]
 800b238:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b23c:	f104 0314 	add.w	r3, r4, #20
 800b240:	f019 091f 	ands.w	r9, r9, #31
 800b244:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b248:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b24c:	d02b      	beq.n	800b2a6 <__lshift+0xbe>
 800b24e:	f1c9 0e20 	rsb	lr, r9, #32
 800b252:	468a      	mov	sl, r1
 800b254:	2200      	movs	r2, #0
 800b256:	6818      	ldr	r0, [r3, #0]
 800b258:	fa00 f009 	lsl.w	r0, r0, r9
 800b25c:	4310      	orrs	r0, r2
 800b25e:	f84a 0b04 	str.w	r0, [sl], #4
 800b262:	f853 2b04 	ldr.w	r2, [r3], #4
 800b266:	459c      	cmp	ip, r3
 800b268:	fa22 f20e 	lsr.w	r2, r2, lr
 800b26c:	d8f3      	bhi.n	800b256 <__lshift+0x6e>
 800b26e:	ebac 0304 	sub.w	r3, ip, r4
 800b272:	3b15      	subs	r3, #21
 800b274:	f023 0303 	bic.w	r3, r3, #3
 800b278:	3304      	adds	r3, #4
 800b27a:	f104 0015 	add.w	r0, r4, #21
 800b27e:	4584      	cmp	ip, r0
 800b280:	bf38      	it	cc
 800b282:	2304      	movcc	r3, #4
 800b284:	50ca      	str	r2, [r1, r3]
 800b286:	b10a      	cbz	r2, 800b28c <__lshift+0xa4>
 800b288:	f108 0602 	add.w	r6, r8, #2
 800b28c:	3e01      	subs	r6, #1
 800b28e:	4638      	mov	r0, r7
 800b290:	612e      	str	r6, [r5, #16]
 800b292:	4621      	mov	r1, r4
 800b294:	f7ff fdda 	bl	800ae4c <_Bfree>
 800b298:	4628      	mov	r0, r5
 800b29a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b29e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	e7c5      	b.n	800b232 <__lshift+0x4a>
 800b2a6:	3904      	subs	r1, #4
 800b2a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2b0:	459c      	cmp	ip, r3
 800b2b2:	d8f9      	bhi.n	800b2a8 <__lshift+0xc0>
 800b2b4:	e7ea      	b.n	800b28c <__lshift+0xa4>
 800b2b6:	bf00      	nop
 800b2b8:	0800c094 	.word	0x0800c094
 800b2bc:	0800c0a5 	.word	0x0800c0a5

0800b2c0 <__mcmp>:
 800b2c0:	690a      	ldr	r2, [r1, #16]
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6900      	ldr	r0, [r0, #16]
 800b2c6:	1a80      	subs	r0, r0, r2
 800b2c8:	b530      	push	{r4, r5, lr}
 800b2ca:	d10e      	bne.n	800b2ea <__mcmp+0x2a>
 800b2cc:	3314      	adds	r3, #20
 800b2ce:	3114      	adds	r1, #20
 800b2d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b2d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b2d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2e0:	4295      	cmp	r5, r2
 800b2e2:	d003      	beq.n	800b2ec <__mcmp+0x2c>
 800b2e4:	d205      	bcs.n	800b2f2 <__mcmp+0x32>
 800b2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ea:	bd30      	pop	{r4, r5, pc}
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	d3f3      	bcc.n	800b2d8 <__mcmp+0x18>
 800b2f0:	e7fb      	b.n	800b2ea <__mcmp+0x2a>
 800b2f2:	2001      	movs	r0, #1
 800b2f4:	e7f9      	b.n	800b2ea <__mcmp+0x2a>
	...

0800b2f8 <__mdiff>:
 800b2f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	4689      	mov	r9, r1
 800b2fe:	4606      	mov	r6, r0
 800b300:	4611      	mov	r1, r2
 800b302:	4648      	mov	r0, r9
 800b304:	4614      	mov	r4, r2
 800b306:	f7ff ffdb 	bl	800b2c0 <__mcmp>
 800b30a:	1e05      	subs	r5, r0, #0
 800b30c:	d112      	bne.n	800b334 <__mdiff+0x3c>
 800b30e:	4629      	mov	r1, r5
 800b310:	4630      	mov	r0, r6
 800b312:	f7ff fd5b 	bl	800adcc <_Balloc>
 800b316:	4602      	mov	r2, r0
 800b318:	b928      	cbnz	r0, 800b326 <__mdiff+0x2e>
 800b31a:	4b3f      	ldr	r3, [pc, #252]	@ (800b418 <__mdiff+0x120>)
 800b31c:	f240 2137 	movw	r1, #567	@ 0x237
 800b320:	483e      	ldr	r0, [pc, #248]	@ (800b41c <__mdiff+0x124>)
 800b322:	f000 fb01 	bl	800b928 <__assert_func>
 800b326:	2301      	movs	r3, #1
 800b328:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b32c:	4610      	mov	r0, r2
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b334:	bfbc      	itt	lt
 800b336:	464b      	movlt	r3, r9
 800b338:	46a1      	movlt	r9, r4
 800b33a:	4630      	mov	r0, r6
 800b33c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b340:	bfba      	itte	lt
 800b342:	461c      	movlt	r4, r3
 800b344:	2501      	movlt	r5, #1
 800b346:	2500      	movge	r5, #0
 800b348:	f7ff fd40 	bl	800adcc <_Balloc>
 800b34c:	4602      	mov	r2, r0
 800b34e:	b918      	cbnz	r0, 800b358 <__mdiff+0x60>
 800b350:	4b31      	ldr	r3, [pc, #196]	@ (800b418 <__mdiff+0x120>)
 800b352:	f240 2145 	movw	r1, #581	@ 0x245
 800b356:	e7e3      	b.n	800b320 <__mdiff+0x28>
 800b358:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b35c:	6926      	ldr	r6, [r4, #16]
 800b35e:	60c5      	str	r5, [r0, #12]
 800b360:	f109 0310 	add.w	r3, r9, #16
 800b364:	f109 0514 	add.w	r5, r9, #20
 800b368:	f104 0e14 	add.w	lr, r4, #20
 800b36c:	f100 0b14 	add.w	fp, r0, #20
 800b370:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b374:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b378:	9301      	str	r3, [sp, #4]
 800b37a:	46d9      	mov	r9, fp
 800b37c:	f04f 0c00 	mov.w	ip, #0
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b386:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b38a:	9301      	str	r3, [sp, #4]
 800b38c:	fa1f f38a 	uxth.w	r3, sl
 800b390:	4619      	mov	r1, r3
 800b392:	b283      	uxth	r3, r0
 800b394:	1acb      	subs	r3, r1, r3
 800b396:	0c00      	lsrs	r0, r0, #16
 800b398:	4463      	add	r3, ip
 800b39a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b39e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b3a8:	4576      	cmp	r6, lr
 800b3aa:	f849 3b04 	str.w	r3, [r9], #4
 800b3ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b3b2:	d8e5      	bhi.n	800b380 <__mdiff+0x88>
 800b3b4:	1b33      	subs	r3, r6, r4
 800b3b6:	3b15      	subs	r3, #21
 800b3b8:	f023 0303 	bic.w	r3, r3, #3
 800b3bc:	3415      	adds	r4, #21
 800b3be:	3304      	adds	r3, #4
 800b3c0:	42a6      	cmp	r6, r4
 800b3c2:	bf38      	it	cc
 800b3c4:	2304      	movcc	r3, #4
 800b3c6:	441d      	add	r5, r3
 800b3c8:	445b      	add	r3, fp
 800b3ca:	461e      	mov	r6, r3
 800b3cc:	462c      	mov	r4, r5
 800b3ce:	4544      	cmp	r4, r8
 800b3d0:	d30e      	bcc.n	800b3f0 <__mdiff+0xf8>
 800b3d2:	f108 0103 	add.w	r1, r8, #3
 800b3d6:	1b49      	subs	r1, r1, r5
 800b3d8:	f021 0103 	bic.w	r1, r1, #3
 800b3dc:	3d03      	subs	r5, #3
 800b3de:	45a8      	cmp	r8, r5
 800b3e0:	bf38      	it	cc
 800b3e2:	2100      	movcc	r1, #0
 800b3e4:	440b      	add	r3, r1
 800b3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b3ea:	b191      	cbz	r1, 800b412 <__mdiff+0x11a>
 800b3ec:	6117      	str	r7, [r2, #16]
 800b3ee:	e79d      	b.n	800b32c <__mdiff+0x34>
 800b3f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b3f4:	46e6      	mov	lr, ip
 800b3f6:	0c08      	lsrs	r0, r1, #16
 800b3f8:	fa1c fc81 	uxtah	ip, ip, r1
 800b3fc:	4471      	add	r1, lr
 800b3fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b402:	b289      	uxth	r1, r1
 800b404:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b408:	f846 1b04 	str.w	r1, [r6], #4
 800b40c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b410:	e7dd      	b.n	800b3ce <__mdiff+0xd6>
 800b412:	3f01      	subs	r7, #1
 800b414:	e7e7      	b.n	800b3e6 <__mdiff+0xee>
 800b416:	bf00      	nop
 800b418:	0800c094 	.word	0x0800c094
 800b41c:	0800c0a5 	.word	0x0800c0a5

0800b420 <__d2b>:
 800b420:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b424:	460f      	mov	r7, r1
 800b426:	2101      	movs	r1, #1
 800b428:	ec59 8b10 	vmov	r8, r9, d0
 800b42c:	4616      	mov	r6, r2
 800b42e:	f7ff fccd 	bl	800adcc <_Balloc>
 800b432:	4604      	mov	r4, r0
 800b434:	b930      	cbnz	r0, 800b444 <__d2b+0x24>
 800b436:	4602      	mov	r2, r0
 800b438:	4b23      	ldr	r3, [pc, #140]	@ (800b4c8 <__d2b+0xa8>)
 800b43a:	4824      	ldr	r0, [pc, #144]	@ (800b4cc <__d2b+0xac>)
 800b43c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b440:	f000 fa72 	bl	800b928 <__assert_func>
 800b444:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b448:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b44c:	b10d      	cbz	r5, 800b452 <__d2b+0x32>
 800b44e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	f1b8 0300 	subs.w	r3, r8, #0
 800b458:	d023      	beq.n	800b4a2 <__d2b+0x82>
 800b45a:	4668      	mov	r0, sp
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	f7ff fd7c 	bl	800af5a <__lo0bits>
 800b462:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b466:	b1d0      	cbz	r0, 800b49e <__d2b+0x7e>
 800b468:	f1c0 0320 	rsb	r3, r0, #32
 800b46c:	fa02 f303 	lsl.w	r3, r2, r3
 800b470:	430b      	orrs	r3, r1
 800b472:	40c2      	lsrs	r2, r0
 800b474:	6163      	str	r3, [r4, #20]
 800b476:	9201      	str	r2, [sp, #4]
 800b478:	9b01      	ldr	r3, [sp, #4]
 800b47a:	61a3      	str	r3, [r4, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	bf0c      	ite	eq
 800b480:	2201      	moveq	r2, #1
 800b482:	2202      	movne	r2, #2
 800b484:	6122      	str	r2, [r4, #16]
 800b486:	b1a5      	cbz	r5, 800b4b2 <__d2b+0x92>
 800b488:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b48c:	4405      	add	r5, r0
 800b48e:	603d      	str	r5, [r7, #0]
 800b490:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b494:	6030      	str	r0, [r6, #0]
 800b496:	4620      	mov	r0, r4
 800b498:	b003      	add	sp, #12
 800b49a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b49e:	6161      	str	r1, [r4, #20]
 800b4a0:	e7ea      	b.n	800b478 <__d2b+0x58>
 800b4a2:	a801      	add	r0, sp, #4
 800b4a4:	f7ff fd59 	bl	800af5a <__lo0bits>
 800b4a8:	9b01      	ldr	r3, [sp, #4]
 800b4aa:	6163      	str	r3, [r4, #20]
 800b4ac:	3020      	adds	r0, #32
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	e7e8      	b.n	800b484 <__d2b+0x64>
 800b4b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b4b6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b4ba:	6038      	str	r0, [r7, #0]
 800b4bc:	6918      	ldr	r0, [r3, #16]
 800b4be:	f7ff fd2d 	bl	800af1c <__hi0bits>
 800b4c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b4c6:	e7e5      	b.n	800b494 <__d2b+0x74>
 800b4c8:	0800c094 	.word	0x0800c094
 800b4cc:	0800c0a5 	.word	0x0800c0a5

0800b4d0 <__ssputs_r>:
 800b4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4d4:	688e      	ldr	r6, [r1, #8]
 800b4d6:	461f      	mov	r7, r3
 800b4d8:	42be      	cmp	r6, r7
 800b4da:	680b      	ldr	r3, [r1, #0]
 800b4dc:	4682      	mov	sl, r0
 800b4de:	460c      	mov	r4, r1
 800b4e0:	4690      	mov	r8, r2
 800b4e2:	d82d      	bhi.n	800b540 <__ssputs_r+0x70>
 800b4e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4ec:	d026      	beq.n	800b53c <__ssputs_r+0x6c>
 800b4ee:	6965      	ldr	r5, [r4, #20]
 800b4f0:	6909      	ldr	r1, [r1, #16]
 800b4f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4f6:	eba3 0901 	sub.w	r9, r3, r1
 800b4fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4fe:	1c7b      	adds	r3, r7, #1
 800b500:	444b      	add	r3, r9
 800b502:	106d      	asrs	r5, r5, #1
 800b504:	429d      	cmp	r5, r3
 800b506:	bf38      	it	cc
 800b508:	461d      	movcc	r5, r3
 800b50a:	0553      	lsls	r3, r2, #21
 800b50c:	d527      	bpl.n	800b55e <__ssputs_r+0x8e>
 800b50e:	4629      	mov	r1, r5
 800b510:	f7fd ff18 	bl	8009344 <_malloc_r>
 800b514:	4606      	mov	r6, r0
 800b516:	b360      	cbz	r0, 800b572 <__ssputs_r+0xa2>
 800b518:	6921      	ldr	r1, [r4, #16]
 800b51a:	464a      	mov	r2, r9
 800b51c:	f000 f9f6 	bl	800b90c <memcpy>
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b526:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	6126      	str	r6, [r4, #16]
 800b52e:	6165      	str	r5, [r4, #20]
 800b530:	444e      	add	r6, r9
 800b532:	eba5 0509 	sub.w	r5, r5, r9
 800b536:	6026      	str	r6, [r4, #0]
 800b538:	60a5      	str	r5, [r4, #8]
 800b53a:	463e      	mov	r6, r7
 800b53c:	42be      	cmp	r6, r7
 800b53e:	d900      	bls.n	800b542 <__ssputs_r+0x72>
 800b540:	463e      	mov	r6, r7
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	4632      	mov	r2, r6
 800b546:	4641      	mov	r1, r8
 800b548:	f000 f9c6 	bl	800b8d8 <memmove>
 800b54c:	68a3      	ldr	r3, [r4, #8]
 800b54e:	1b9b      	subs	r3, r3, r6
 800b550:	60a3      	str	r3, [r4, #8]
 800b552:	6823      	ldr	r3, [r4, #0]
 800b554:	4433      	add	r3, r6
 800b556:	6023      	str	r3, [r4, #0]
 800b558:	2000      	movs	r0, #0
 800b55a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b55e:	462a      	mov	r2, r5
 800b560:	f000 fa26 	bl	800b9b0 <_realloc_r>
 800b564:	4606      	mov	r6, r0
 800b566:	2800      	cmp	r0, #0
 800b568:	d1e0      	bne.n	800b52c <__ssputs_r+0x5c>
 800b56a:	6921      	ldr	r1, [r4, #16]
 800b56c:	4650      	mov	r0, sl
 800b56e:	f7ff fbe3 	bl	800ad38 <_free_r>
 800b572:	230c      	movs	r3, #12
 800b574:	f8ca 3000 	str.w	r3, [sl]
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b57e:	81a3      	strh	r3, [r4, #12]
 800b580:	f04f 30ff 	mov.w	r0, #4294967295
 800b584:	e7e9      	b.n	800b55a <__ssputs_r+0x8a>
	...

0800b588 <_svfiprintf_r>:
 800b588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b58c:	4698      	mov	r8, r3
 800b58e:	898b      	ldrh	r3, [r1, #12]
 800b590:	061b      	lsls	r3, r3, #24
 800b592:	b09d      	sub	sp, #116	@ 0x74
 800b594:	4607      	mov	r7, r0
 800b596:	460d      	mov	r5, r1
 800b598:	4614      	mov	r4, r2
 800b59a:	d510      	bpl.n	800b5be <_svfiprintf_r+0x36>
 800b59c:	690b      	ldr	r3, [r1, #16]
 800b59e:	b973      	cbnz	r3, 800b5be <_svfiprintf_r+0x36>
 800b5a0:	2140      	movs	r1, #64	@ 0x40
 800b5a2:	f7fd fecf 	bl	8009344 <_malloc_r>
 800b5a6:	6028      	str	r0, [r5, #0]
 800b5a8:	6128      	str	r0, [r5, #16]
 800b5aa:	b930      	cbnz	r0, 800b5ba <_svfiprintf_r+0x32>
 800b5ac:	230c      	movs	r3, #12
 800b5ae:	603b      	str	r3, [r7, #0]
 800b5b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5b4:	b01d      	add	sp, #116	@ 0x74
 800b5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ba:	2340      	movs	r3, #64	@ 0x40
 800b5bc:	616b      	str	r3, [r5, #20]
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5c2:	2320      	movs	r3, #32
 800b5c4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5cc:	2330      	movs	r3, #48	@ 0x30
 800b5ce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b76c <_svfiprintf_r+0x1e4>
 800b5d2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5d6:	f04f 0901 	mov.w	r9, #1
 800b5da:	4623      	mov	r3, r4
 800b5dc:	469a      	mov	sl, r3
 800b5de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5e2:	b10a      	cbz	r2, 800b5e8 <_svfiprintf_r+0x60>
 800b5e4:	2a25      	cmp	r2, #37	@ 0x25
 800b5e6:	d1f9      	bne.n	800b5dc <_svfiprintf_r+0x54>
 800b5e8:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ec:	d00b      	beq.n	800b606 <_svfiprintf_r+0x7e>
 800b5ee:	465b      	mov	r3, fp
 800b5f0:	4622      	mov	r2, r4
 800b5f2:	4629      	mov	r1, r5
 800b5f4:	4638      	mov	r0, r7
 800b5f6:	f7ff ff6b 	bl	800b4d0 <__ssputs_r>
 800b5fa:	3001      	adds	r0, #1
 800b5fc:	f000 80a7 	beq.w	800b74e <_svfiprintf_r+0x1c6>
 800b600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b602:	445a      	add	r2, fp
 800b604:	9209      	str	r2, [sp, #36]	@ 0x24
 800b606:	f89a 3000 	ldrb.w	r3, [sl]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 809f 	beq.w	800b74e <_svfiprintf_r+0x1c6>
 800b610:	2300      	movs	r3, #0
 800b612:	f04f 32ff 	mov.w	r2, #4294967295
 800b616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b61a:	f10a 0a01 	add.w	sl, sl, #1
 800b61e:	9304      	str	r3, [sp, #16]
 800b620:	9307      	str	r3, [sp, #28]
 800b622:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b626:	931a      	str	r3, [sp, #104]	@ 0x68
 800b628:	4654      	mov	r4, sl
 800b62a:	2205      	movs	r2, #5
 800b62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b630:	484e      	ldr	r0, [pc, #312]	@ (800b76c <_svfiprintf_r+0x1e4>)
 800b632:	f7f4 fdcd 	bl	80001d0 <memchr>
 800b636:	9a04      	ldr	r2, [sp, #16]
 800b638:	b9d8      	cbnz	r0, 800b672 <_svfiprintf_r+0xea>
 800b63a:	06d0      	lsls	r0, r2, #27
 800b63c:	bf44      	itt	mi
 800b63e:	2320      	movmi	r3, #32
 800b640:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b644:	0711      	lsls	r1, r2, #28
 800b646:	bf44      	itt	mi
 800b648:	232b      	movmi	r3, #43	@ 0x2b
 800b64a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b64e:	f89a 3000 	ldrb.w	r3, [sl]
 800b652:	2b2a      	cmp	r3, #42	@ 0x2a
 800b654:	d015      	beq.n	800b682 <_svfiprintf_r+0xfa>
 800b656:	9a07      	ldr	r2, [sp, #28]
 800b658:	4654      	mov	r4, sl
 800b65a:	2000      	movs	r0, #0
 800b65c:	f04f 0c0a 	mov.w	ip, #10
 800b660:	4621      	mov	r1, r4
 800b662:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b666:	3b30      	subs	r3, #48	@ 0x30
 800b668:	2b09      	cmp	r3, #9
 800b66a:	d94b      	bls.n	800b704 <_svfiprintf_r+0x17c>
 800b66c:	b1b0      	cbz	r0, 800b69c <_svfiprintf_r+0x114>
 800b66e:	9207      	str	r2, [sp, #28]
 800b670:	e014      	b.n	800b69c <_svfiprintf_r+0x114>
 800b672:	eba0 0308 	sub.w	r3, r0, r8
 800b676:	fa09 f303 	lsl.w	r3, r9, r3
 800b67a:	4313      	orrs	r3, r2
 800b67c:	9304      	str	r3, [sp, #16]
 800b67e:	46a2      	mov	sl, r4
 800b680:	e7d2      	b.n	800b628 <_svfiprintf_r+0xa0>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	1d19      	adds	r1, r3, #4
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	9103      	str	r1, [sp, #12]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bfbb      	ittet	lt
 800b68e:	425b      	neglt	r3, r3
 800b690:	f042 0202 	orrlt.w	r2, r2, #2
 800b694:	9307      	strge	r3, [sp, #28]
 800b696:	9307      	strlt	r3, [sp, #28]
 800b698:	bfb8      	it	lt
 800b69a:	9204      	strlt	r2, [sp, #16]
 800b69c:	7823      	ldrb	r3, [r4, #0]
 800b69e:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6a0:	d10a      	bne.n	800b6b8 <_svfiprintf_r+0x130>
 800b6a2:	7863      	ldrb	r3, [r4, #1]
 800b6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6a6:	d132      	bne.n	800b70e <_svfiprintf_r+0x186>
 800b6a8:	9b03      	ldr	r3, [sp, #12]
 800b6aa:	1d1a      	adds	r2, r3, #4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	9203      	str	r2, [sp, #12]
 800b6b0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6b4:	3402      	adds	r4, #2
 800b6b6:	9305      	str	r3, [sp, #20]
 800b6b8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b77c <_svfiprintf_r+0x1f4>
 800b6bc:	7821      	ldrb	r1, [r4, #0]
 800b6be:	2203      	movs	r2, #3
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	f7f4 fd85 	bl	80001d0 <memchr>
 800b6c6:	b138      	cbz	r0, 800b6d8 <_svfiprintf_r+0x150>
 800b6c8:	9b04      	ldr	r3, [sp, #16]
 800b6ca:	eba0 000a 	sub.w	r0, r0, sl
 800b6ce:	2240      	movs	r2, #64	@ 0x40
 800b6d0:	4082      	lsls	r2, r0
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	3401      	adds	r4, #1
 800b6d6:	9304      	str	r3, [sp, #16]
 800b6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6dc:	4824      	ldr	r0, [pc, #144]	@ (800b770 <_svfiprintf_r+0x1e8>)
 800b6de:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6e2:	2206      	movs	r2, #6
 800b6e4:	f7f4 fd74 	bl	80001d0 <memchr>
 800b6e8:	2800      	cmp	r0, #0
 800b6ea:	d036      	beq.n	800b75a <_svfiprintf_r+0x1d2>
 800b6ec:	4b21      	ldr	r3, [pc, #132]	@ (800b774 <_svfiprintf_r+0x1ec>)
 800b6ee:	bb1b      	cbnz	r3, 800b738 <_svfiprintf_r+0x1b0>
 800b6f0:	9b03      	ldr	r3, [sp, #12]
 800b6f2:	3307      	adds	r3, #7
 800b6f4:	f023 0307 	bic.w	r3, r3, #7
 800b6f8:	3308      	adds	r3, #8
 800b6fa:	9303      	str	r3, [sp, #12]
 800b6fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6fe:	4433      	add	r3, r6
 800b700:	9309      	str	r3, [sp, #36]	@ 0x24
 800b702:	e76a      	b.n	800b5da <_svfiprintf_r+0x52>
 800b704:	fb0c 3202 	mla	r2, ip, r2, r3
 800b708:	460c      	mov	r4, r1
 800b70a:	2001      	movs	r0, #1
 800b70c:	e7a8      	b.n	800b660 <_svfiprintf_r+0xd8>
 800b70e:	2300      	movs	r3, #0
 800b710:	3401      	adds	r4, #1
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	4619      	mov	r1, r3
 800b716:	f04f 0c0a 	mov.w	ip, #10
 800b71a:	4620      	mov	r0, r4
 800b71c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b720:	3a30      	subs	r2, #48	@ 0x30
 800b722:	2a09      	cmp	r2, #9
 800b724:	d903      	bls.n	800b72e <_svfiprintf_r+0x1a6>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d0c6      	beq.n	800b6b8 <_svfiprintf_r+0x130>
 800b72a:	9105      	str	r1, [sp, #20]
 800b72c:	e7c4      	b.n	800b6b8 <_svfiprintf_r+0x130>
 800b72e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b732:	4604      	mov	r4, r0
 800b734:	2301      	movs	r3, #1
 800b736:	e7f0      	b.n	800b71a <_svfiprintf_r+0x192>
 800b738:	ab03      	add	r3, sp, #12
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	462a      	mov	r2, r5
 800b73e:	4b0e      	ldr	r3, [pc, #56]	@ (800b778 <_svfiprintf_r+0x1f0>)
 800b740:	a904      	add	r1, sp, #16
 800b742:	4638      	mov	r0, r7
 800b744:	f7fd ff2a 	bl	800959c <_printf_float>
 800b748:	1c42      	adds	r2, r0, #1
 800b74a:	4606      	mov	r6, r0
 800b74c:	d1d6      	bne.n	800b6fc <_svfiprintf_r+0x174>
 800b74e:	89ab      	ldrh	r3, [r5, #12]
 800b750:	065b      	lsls	r3, r3, #25
 800b752:	f53f af2d 	bmi.w	800b5b0 <_svfiprintf_r+0x28>
 800b756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b758:	e72c      	b.n	800b5b4 <_svfiprintf_r+0x2c>
 800b75a:	ab03      	add	r3, sp, #12
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	462a      	mov	r2, r5
 800b760:	4b05      	ldr	r3, [pc, #20]	@ (800b778 <_svfiprintf_r+0x1f0>)
 800b762:	a904      	add	r1, sp, #16
 800b764:	4638      	mov	r0, r7
 800b766:	f7fe f9b1 	bl	8009acc <_printf_i>
 800b76a:	e7ed      	b.n	800b748 <_svfiprintf_r+0x1c0>
 800b76c:	0800c200 	.word	0x0800c200
 800b770:	0800c20a 	.word	0x0800c20a
 800b774:	0800959d 	.word	0x0800959d
 800b778:	0800b4d1 	.word	0x0800b4d1
 800b77c:	0800c206 	.word	0x0800c206

0800b780 <__sflush_r>:
 800b780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b788:	0716      	lsls	r6, r2, #28
 800b78a:	4605      	mov	r5, r0
 800b78c:	460c      	mov	r4, r1
 800b78e:	d454      	bmi.n	800b83a <__sflush_r+0xba>
 800b790:	684b      	ldr	r3, [r1, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	dc02      	bgt.n	800b79c <__sflush_r+0x1c>
 800b796:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	dd48      	ble.n	800b82e <__sflush_r+0xae>
 800b79c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b79e:	2e00      	cmp	r6, #0
 800b7a0:	d045      	beq.n	800b82e <__sflush_r+0xae>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7a8:	682f      	ldr	r7, [r5, #0]
 800b7aa:	6a21      	ldr	r1, [r4, #32]
 800b7ac:	602b      	str	r3, [r5, #0]
 800b7ae:	d030      	beq.n	800b812 <__sflush_r+0x92>
 800b7b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	0759      	lsls	r1, r3, #29
 800b7b6:	d505      	bpl.n	800b7c4 <__sflush_r+0x44>
 800b7b8:	6863      	ldr	r3, [r4, #4]
 800b7ba:	1ad2      	subs	r2, r2, r3
 800b7bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7be:	b10b      	cbz	r3, 800b7c4 <__sflush_r+0x44>
 800b7c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7c2:	1ad2      	subs	r2, r2, r3
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7c8:	6a21      	ldr	r1, [r4, #32]
 800b7ca:	4628      	mov	r0, r5
 800b7cc:	47b0      	blx	r6
 800b7ce:	1c43      	adds	r3, r0, #1
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	d106      	bne.n	800b7e2 <__sflush_r+0x62>
 800b7d4:	6829      	ldr	r1, [r5, #0]
 800b7d6:	291d      	cmp	r1, #29
 800b7d8:	d82b      	bhi.n	800b832 <__sflush_r+0xb2>
 800b7da:	4a2a      	ldr	r2, [pc, #168]	@ (800b884 <__sflush_r+0x104>)
 800b7dc:	410a      	asrs	r2, r1
 800b7de:	07d6      	lsls	r6, r2, #31
 800b7e0:	d427      	bmi.n	800b832 <__sflush_r+0xb2>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	6062      	str	r2, [r4, #4]
 800b7e6:	04d9      	lsls	r1, r3, #19
 800b7e8:	6922      	ldr	r2, [r4, #16]
 800b7ea:	6022      	str	r2, [r4, #0]
 800b7ec:	d504      	bpl.n	800b7f8 <__sflush_r+0x78>
 800b7ee:	1c42      	adds	r2, r0, #1
 800b7f0:	d101      	bne.n	800b7f6 <__sflush_r+0x76>
 800b7f2:	682b      	ldr	r3, [r5, #0]
 800b7f4:	b903      	cbnz	r3, 800b7f8 <__sflush_r+0x78>
 800b7f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b7f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b7fa:	602f      	str	r7, [r5, #0]
 800b7fc:	b1b9      	cbz	r1, 800b82e <__sflush_r+0xae>
 800b7fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b802:	4299      	cmp	r1, r3
 800b804:	d002      	beq.n	800b80c <__sflush_r+0x8c>
 800b806:	4628      	mov	r0, r5
 800b808:	f7ff fa96 	bl	800ad38 <_free_r>
 800b80c:	2300      	movs	r3, #0
 800b80e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b810:	e00d      	b.n	800b82e <__sflush_r+0xae>
 800b812:	2301      	movs	r3, #1
 800b814:	4628      	mov	r0, r5
 800b816:	47b0      	blx	r6
 800b818:	4602      	mov	r2, r0
 800b81a:	1c50      	adds	r0, r2, #1
 800b81c:	d1c9      	bne.n	800b7b2 <__sflush_r+0x32>
 800b81e:	682b      	ldr	r3, [r5, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d0c6      	beq.n	800b7b2 <__sflush_r+0x32>
 800b824:	2b1d      	cmp	r3, #29
 800b826:	d001      	beq.n	800b82c <__sflush_r+0xac>
 800b828:	2b16      	cmp	r3, #22
 800b82a:	d11e      	bne.n	800b86a <__sflush_r+0xea>
 800b82c:	602f      	str	r7, [r5, #0]
 800b82e:	2000      	movs	r0, #0
 800b830:	e022      	b.n	800b878 <__sflush_r+0xf8>
 800b832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b836:	b21b      	sxth	r3, r3
 800b838:	e01b      	b.n	800b872 <__sflush_r+0xf2>
 800b83a:	690f      	ldr	r7, [r1, #16]
 800b83c:	2f00      	cmp	r7, #0
 800b83e:	d0f6      	beq.n	800b82e <__sflush_r+0xae>
 800b840:	0793      	lsls	r3, r2, #30
 800b842:	680e      	ldr	r6, [r1, #0]
 800b844:	bf08      	it	eq
 800b846:	694b      	ldreq	r3, [r1, #20]
 800b848:	600f      	str	r7, [r1, #0]
 800b84a:	bf18      	it	ne
 800b84c:	2300      	movne	r3, #0
 800b84e:	eba6 0807 	sub.w	r8, r6, r7
 800b852:	608b      	str	r3, [r1, #8]
 800b854:	f1b8 0f00 	cmp.w	r8, #0
 800b858:	dde9      	ble.n	800b82e <__sflush_r+0xae>
 800b85a:	6a21      	ldr	r1, [r4, #32]
 800b85c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b85e:	4643      	mov	r3, r8
 800b860:	463a      	mov	r2, r7
 800b862:	4628      	mov	r0, r5
 800b864:	47b0      	blx	r6
 800b866:	2800      	cmp	r0, #0
 800b868:	dc08      	bgt.n	800b87c <__sflush_r+0xfc>
 800b86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b86e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	f04f 30ff 	mov.w	r0, #4294967295
 800b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87c:	4407      	add	r7, r0
 800b87e:	eba8 0800 	sub.w	r8, r8, r0
 800b882:	e7e7      	b.n	800b854 <__sflush_r+0xd4>
 800b884:	dfbffffe 	.word	0xdfbffffe

0800b888 <_fflush_r>:
 800b888:	b538      	push	{r3, r4, r5, lr}
 800b88a:	690b      	ldr	r3, [r1, #16]
 800b88c:	4605      	mov	r5, r0
 800b88e:	460c      	mov	r4, r1
 800b890:	b913      	cbnz	r3, 800b898 <_fflush_r+0x10>
 800b892:	2500      	movs	r5, #0
 800b894:	4628      	mov	r0, r5
 800b896:	bd38      	pop	{r3, r4, r5, pc}
 800b898:	b118      	cbz	r0, 800b8a2 <_fflush_r+0x1a>
 800b89a:	6a03      	ldr	r3, [r0, #32]
 800b89c:	b90b      	cbnz	r3, 800b8a2 <_fflush_r+0x1a>
 800b89e:	f7fe fac1 	bl	8009e24 <__sinit>
 800b8a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d0f3      	beq.n	800b892 <_fflush_r+0xa>
 800b8aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8ac:	07d0      	lsls	r0, r2, #31
 800b8ae:	d404      	bmi.n	800b8ba <_fflush_r+0x32>
 800b8b0:	0599      	lsls	r1, r3, #22
 800b8b2:	d402      	bmi.n	800b8ba <_fflush_r+0x32>
 800b8b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8b6:	f7fe fbf0 	bl	800a09a <__retarget_lock_acquire_recursive>
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f7ff ff5f 	bl	800b780 <__sflush_r>
 800b8c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8c4:	07da      	lsls	r2, r3, #31
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	d4e4      	bmi.n	800b894 <_fflush_r+0xc>
 800b8ca:	89a3      	ldrh	r3, [r4, #12]
 800b8cc:	059b      	lsls	r3, r3, #22
 800b8ce:	d4e1      	bmi.n	800b894 <_fflush_r+0xc>
 800b8d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8d2:	f7fe fbe3 	bl	800a09c <__retarget_lock_release_recursive>
 800b8d6:	e7dd      	b.n	800b894 <_fflush_r+0xc>

0800b8d8 <memmove>:
 800b8d8:	4288      	cmp	r0, r1
 800b8da:	b510      	push	{r4, lr}
 800b8dc:	eb01 0402 	add.w	r4, r1, r2
 800b8e0:	d902      	bls.n	800b8e8 <memmove+0x10>
 800b8e2:	4284      	cmp	r4, r0
 800b8e4:	4623      	mov	r3, r4
 800b8e6:	d807      	bhi.n	800b8f8 <memmove+0x20>
 800b8e8:	1e43      	subs	r3, r0, #1
 800b8ea:	42a1      	cmp	r1, r4
 800b8ec:	d008      	beq.n	800b900 <memmove+0x28>
 800b8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b8f6:	e7f8      	b.n	800b8ea <memmove+0x12>
 800b8f8:	4402      	add	r2, r0
 800b8fa:	4601      	mov	r1, r0
 800b8fc:	428a      	cmp	r2, r1
 800b8fe:	d100      	bne.n	800b902 <memmove+0x2a>
 800b900:	bd10      	pop	{r4, pc}
 800b902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b90a:	e7f7      	b.n	800b8fc <memmove+0x24>

0800b90c <memcpy>:
 800b90c:	440a      	add	r2, r1
 800b90e:	4291      	cmp	r1, r2
 800b910:	f100 33ff 	add.w	r3, r0, #4294967295
 800b914:	d100      	bne.n	800b918 <memcpy+0xc>
 800b916:	4770      	bx	lr
 800b918:	b510      	push	{r4, lr}
 800b91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b922:	4291      	cmp	r1, r2
 800b924:	d1f9      	bne.n	800b91a <memcpy+0xe>
 800b926:	bd10      	pop	{r4, pc}

0800b928 <__assert_func>:
 800b928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b92a:	4614      	mov	r4, r2
 800b92c:	461a      	mov	r2, r3
 800b92e:	4b09      	ldr	r3, [pc, #36]	@ (800b954 <__assert_func+0x2c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4605      	mov	r5, r0
 800b934:	68d8      	ldr	r0, [r3, #12]
 800b936:	b954      	cbnz	r4, 800b94e <__assert_func+0x26>
 800b938:	4b07      	ldr	r3, [pc, #28]	@ (800b958 <__assert_func+0x30>)
 800b93a:	461c      	mov	r4, r3
 800b93c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b940:	9100      	str	r1, [sp, #0]
 800b942:	462b      	mov	r3, r5
 800b944:	4905      	ldr	r1, [pc, #20]	@ (800b95c <__assert_func+0x34>)
 800b946:	f000 f86f 	bl	800ba28 <fiprintf>
 800b94a:	f000 f87f 	bl	800ba4c <abort>
 800b94e:	4b04      	ldr	r3, [pc, #16]	@ (800b960 <__assert_func+0x38>)
 800b950:	e7f4      	b.n	800b93c <__assert_func+0x14>
 800b952:	bf00      	nop
 800b954:	20000038 	.word	0x20000038
 800b958:	0800c256 	.word	0x0800c256
 800b95c:	0800c228 	.word	0x0800c228
 800b960:	0800c21b 	.word	0x0800c21b

0800b964 <_calloc_r>:
 800b964:	b570      	push	{r4, r5, r6, lr}
 800b966:	fba1 5402 	umull	r5, r4, r1, r2
 800b96a:	b93c      	cbnz	r4, 800b97c <_calloc_r+0x18>
 800b96c:	4629      	mov	r1, r5
 800b96e:	f7fd fce9 	bl	8009344 <_malloc_r>
 800b972:	4606      	mov	r6, r0
 800b974:	b928      	cbnz	r0, 800b982 <_calloc_r+0x1e>
 800b976:	2600      	movs	r6, #0
 800b978:	4630      	mov	r0, r6
 800b97a:	bd70      	pop	{r4, r5, r6, pc}
 800b97c:	220c      	movs	r2, #12
 800b97e:	6002      	str	r2, [r0, #0]
 800b980:	e7f9      	b.n	800b976 <_calloc_r+0x12>
 800b982:	462a      	mov	r2, r5
 800b984:	4621      	mov	r1, r4
 800b986:	f7fe fafa 	bl	8009f7e <memset>
 800b98a:	e7f5      	b.n	800b978 <_calloc_r+0x14>

0800b98c <__ascii_mbtowc>:
 800b98c:	b082      	sub	sp, #8
 800b98e:	b901      	cbnz	r1, 800b992 <__ascii_mbtowc+0x6>
 800b990:	a901      	add	r1, sp, #4
 800b992:	b142      	cbz	r2, 800b9a6 <__ascii_mbtowc+0x1a>
 800b994:	b14b      	cbz	r3, 800b9aa <__ascii_mbtowc+0x1e>
 800b996:	7813      	ldrb	r3, [r2, #0]
 800b998:	600b      	str	r3, [r1, #0]
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	1e10      	subs	r0, r2, #0
 800b99e:	bf18      	it	ne
 800b9a0:	2001      	movne	r0, #1
 800b9a2:	b002      	add	sp, #8
 800b9a4:	4770      	bx	lr
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	e7fb      	b.n	800b9a2 <__ascii_mbtowc+0x16>
 800b9aa:	f06f 0001 	mvn.w	r0, #1
 800b9ae:	e7f8      	b.n	800b9a2 <__ascii_mbtowc+0x16>

0800b9b0 <_realloc_r>:
 800b9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b4:	4680      	mov	r8, r0
 800b9b6:	4615      	mov	r5, r2
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	b921      	cbnz	r1, 800b9c6 <_realloc_r+0x16>
 800b9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	f7fd bcbf 	b.w	8009344 <_malloc_r>
 800b9c6:	b92a      	cbnz	r2, 800b9d4 <_realloc_r+0x24>
 800b9c8:	f7ff f9b6 	bl	800ad38 <_free_r>
 800b9cc:	2400      	movs	r4, #0
 800b9ce:	4620      	mov	r0, r4
 800b9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d4:	f000 f841 	bl	800ba5a <_malloc_usable_size_r>
 800b9d8:	4285      	cmp	r5, r0
 800b9da:	4606      	mov	r6, r0
 800b9dc:	d802      	bhi.n	800b9e4 <_realloc_r+0x34>
 800b9de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b9e2:	d8f4      	bhi.n	800b9ce <_realloc_r+0x1e>
 800b9e4:	4629      	mov	r1, r5
 800b9e6:	4640      	mov	r0, r8
 800b9e8:	f7fd fcac 	bl	8009344 <_malloc_r>
 800b9ec:	4607      	mov	r7, r0
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d0ec      	beq.n	800b9cc <_realloc_r+0x1c>
 800b9f2:	42b5      	cmp	r5, r6
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4621      	mov	r1, r4
 800b9f8:	bf28      	it	cs
 800b9fa:	4632      	movcs	r2, r6
 800b9fc:	f7ff ff86 	bl	800b90c <memcpy>
 800ba00:	4621      	mov	r1, r4
 800ba02:	4640      	mov	r0, r8
 800ba04:	f7ff f998 	bl	800ad38 <_free_r>
 800ba08:	463c      	mov	r4, r7
 800ba0a:	e7e0      	b.n	800b9ce <_realloc_r+0x1e>

0800ba0c <__ascii_wctomb>:
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	4608      	mov	r0, r1
 800ba10:	b141      	cbz	r1, 800ba24 <__ascii_wctomb+0x18>
 800ba12:	2aff      	cmp	r2, #255	@ 0xff
 800ba14:	d904      	bls.n	800ba20 <__ascii_wctomb+0x14>
 800ba16:	228a      	movs	r2, #138	@ 0x8a
 800ba18:	601a      	str	r2, [r3, #0]
 800ba1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1e:	4770      	bx	lr
 800ba20:	700a      	strb	r2, [r1, #0]
 800ba22:	2001      	movs	r0, #1
 800ba24:	4770      	bx	lr
	...

0800ba28 <fiprintf>:
 800ba28:	b40e      	push	{r1, r2, r3}
 800ba2a:	b503      	push	{r0, r1, lr}
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	ab03      	add	r3, sp, #12
 800ba30:	4805      	ldr	r0, [pc, #20]	@ (800ba48 <fiprintf+0x20>)
 800ba32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba36:	6800      	ldr	r0, [r0, #0]
 800ba38:	9301      	str	r3, [sp, #4]
 800ba3a:	f000 f83f 	bl	800babc <_vfiprintf_r>
 800ba3e:	b002      	add	sp, #8
 800ba40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba44:	b003      	add	sp, #12
 800ba46:	4770      	bx	lr
 800ba48:	20000038 	.word	0x20000038

0800ba4c <abort>:
 800ba4c:	b508      	push	{r3, lr}
 800ba4e:	2006      	movs	r0, #6
 800ba50:	f000 fa08 	bl	800be64 <raise>
 800ba54:	2001      	movs	r0, #1
 800ba56:	f7f5 fd79 	bl	800154c <_exit>

0800ba5a <_malloc_usable_size_r>:
 800ba5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba5e:	1f18      	subs	r0, r3, #4
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfbc      	itt	lt
 800ba64:	580b      	ldrlt	r3, [r1, r0]
 800ba66:	18c0      	addlt	r0, r0, r3
 800ba68:	4770      	bx	lr

0800ba6a <__sfputc_r>:
 800ba6a:	6893      	ldr	r3, [r2, #8]
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	b410      	push	{r4}
 800ba72:	6093      	str	r3, [r2, #8]
 800ba74:	da08      	bge.n	800ba88 <__sfputc_r+0x1e>
 800ba76:	6994      	ldr	r4, [r2, #24]
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	db01      	blt.n	800ba80 <__sfputc_r+0x16>
 800ba7c:	290a      	cmp	r1, #10
 800ba7e:	d103      	bne.n	800ba88 <__sfputc_r+0x1e>
 800ba80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba84:	f000 b932 	b.w	800bcec <__swbuf_r>
 800ba88:	6813      	ldr	r3, [r2, #0]
 800ba8a:	1c58      	adds	r0, r3, #1
 800ba8c:	6010      	str	r0, [r2, #0]
 800ba8e:	7019      	strb	r1, [r3, #0]
 800ba90:	4608      	mov	r0, r1
 800ba92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <__sfputs_r>:
 800ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9a:	4606      	mov	r6, r0
 800ba9c:	460f      	mov	r7, r1
 800ba9e:	4614      	mov	r4, r2
 800baa0:	18d5      	adds	r5, r2, r3
 800baa2:	42ac      	cmp	r4, r5
 800baa4:	d101      	bne.n	800baaa <__sfputs_r+0x12>
 800baa6:	2000      	movs	r0, #0
 800baa8:	e007      	b.n	800baba <__sfputs_r+0x22>
 800baaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baae:	463a      	mov	r2, r7
 800bab0:	4630      	mov	r0, r6
 800bab2:	f7ff ffda 	bl	800ba6a <__sfputc_r>
 800bab6:	1c43      	adds	r3, r0, #1
 800bab8:	d1f3      	bne.n	800baa2 <__sfputs_r+0xa>
 800baba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800babc <_vfiprintf_r>:
 800babc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bac0:	460d      	mov	r5, r1
 800bac2:	b09d      	sub	sp, #116	@ 0x74
 800bac4:	4614      	mov	r4, r2
 800bac6:	4698      	mov	r8, r3
 800bac8:	4606      	mov	r6, r0
 800baca:	b118      	cbz	r0, 800bad4 <_vfiprintf_r+0x18>
 800bacc:	6a03      	ldr	r3, [r0, #32]
 800bace:	b90b      	cbnz	r3, 800bad4 <_vfiprintf_r+0x18>
 800bad0:	f7fe f9a8 	bl	8009e24 <__sinit>
 800bad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bad6:	07d9      	lsls	r1, r3, #31
 800bad8:	d405      	bmi.n	800bae6 <_vfiprintf_r+0x2a>
 800bada:	89ab      	ldrh	r3, [r5, #12]
 800badc:	059a      	lsls	r2, r3, #22
 800bade:	d402      	bmi.n	800bae6 <_vfiprintf_r+0x2a>
 800bae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bae2:	f7fe fada 	bl	800a09a <__retarget_lock_acquire_recursive>
 800bae6:	89ab      	ldrh	r3, [r5, #12]
 800bae8:	071b      	lsls	r3, r3, #28
 800baea:	d501      	bpl.n	800baf0 <_vfiprintf_r+0x34>
 800baec:	692b      	ldr	r3, [r5, #16]
 800baee:	b99b      	cbnz	r3, 800bb18 <_vfiprintf_r+0x5c>
 800baf0:	4629      	mov	r1, r5
 800baf2:	4630      	mov	r0, r6
 800baf4:	f000 f938 	bl	800bd68 <__swsetup_r>
 800baf8:	b170      	cbz	r0, 800bb18 <_vfiprintf_r+0x5c>
 800bafa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafc:	07dc      	lsls	r4, r3, #31
 800bafe:	d504      	bpl.n	800bb0a <_vfiprintf_r+0x4e>
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295
 800bb04:	b01d      	add	sp, #116	@ 0x74
 800bb06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0a:	89ab      	ldrh	r3, [r5, #12]
 800bb0c:	0598      	lsls	r0, r3, #22
 800bb0e:	d4f7      	bmi.n	800bb00 <_vfiprintf_r+0x44>
 800bb10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb12:	f7fe fac3 	bl	800a09c <__retarget_lock_release_recursive>
 800bb16:	e7f3      	b.n	800bb00 <_vfiprintf_r+0x44>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb1c:	2320      	movs	r3, #32
 800bb1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb22:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb26:	2330      	movs	r3, #48	@ 0x30
 800bb28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcd8 <_vfiprintf_r+0x21c>
 800bb2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb30:	f04f 0901 	mov.w	r9, #1
 800bb34:	4623      	mov	r3, r4
 800bb36:	469a      	mov	sl, r3
 800bb38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb3c:	b10a      	cbz	r2, 800bb42 <_vfiprintf_r+0x86>
 800bb3e:	2a25      	cmp	r2, #37	@ 0x25
 800bb40:	d1f9      	bne.n	800bb36 <_vfiprintf_r+0x7a>
 800bb42:	ebba 0b04 	subs.w	fp, sl, r4
 800bb46:	d00b      	beq.n	800bb60 <_vfiprintf_r+0xa4>
 800bb48:	465b      	mov	r3, fp
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	4630      	mov	r0, r6
 800bb50:	f7ff ffa2 	bl	800ba98 <__sfputs_r>
 800bb54:	3001      	adds	r0, #1
 800bb56:	f000 80a7 	beq.w	800bca8 <_vfiprintf_r+0x1ec>
 800bb5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb5c:	445a      	add	r2, fp
 800bb5e:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb60:	f89a 3000 	ldrb.w	r3, [sl]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	f000 809f 	beq.w	800bca8 <_vfiprintf_r+0x1ec>
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb74:	f10a 0a01 	add.w	sl, sl, #1
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	9307      	str	r3, [sp, #28]
 800bb7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb80:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb82:	4654      	mov	r4, sl
 800bb84:	2205      	movs	r2, #5
 800bb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb8a:	4853      	ldr	r0, [pc, #332]	@ (800bcd8 <_vfiprintf_r+0x21c>)
 800bb8c:	f7f4 fb20 	bl	80001d0 <memchr>
 800bb90:	9a04      	ldr	r2, [sp, #16]
 800bb92:	b9d8      	cbnz	r0, 800bbcc <_vfiprintf_r+0x110>
 800bb94:	06d1      	lsls	r1, r2, #27
 800bb96:	bf44      	itt	mi
 800bb98:	2320      	movmi	r3, #32
 800bb9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb9e:	0713      	lsls	r3, r2, #28
 800bba0:	bf44      	itt	mi
 800bba2:	232b      	movmi	r3, #43	@ 0x2b
 800bba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bba8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbac:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbae:	d015      	beq.n	800bbdc <_vfiprintf_r+0x120>
 800bbb0:	9a07      	ldr	r2, [sp, #28]
 800bbb2:	4654      	mov	r4, sl
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	f04f 0c0a 	mov.w	ip, #10
 800bbba:	4621      	mov	r1, r4
 800bbbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbc0:	3b30      	subs	r3, #48	@ 0x30
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d94b      	bls.n	800bc5e <_vfiprintf_r+0x1a2>
 800bbc6:	b1b0      	cbz	r0, 800bbf6 <_vfiprintf_r+0x13a>
 800bbc8:	9207      	str	r2, [sp, #28]
 800bbca:	e014      	b.n	800bbf6 <_vfiprintf_r+0x13a>
 800bbcc:	eba0 0308 	sub.w	r3, r0, r8
 800bbd0:	fa09 f303 	lsl.w	r3, r9, r3
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	9304      	str	r3, [sp, #16]
 800bbd8:	46a2      	mov	sl, r4
 800bbda:	e7d2      	b.n	800bb82 <_vfiprintf_r+0xc6>
 800bbdc:	9b03      	ldr	r3, [sp, #12]
 800bbde:	1d19      	adds	r1, r3, #4
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	9103      	str	r1, [sp, #12]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	bfbb      	ittet	lt
 800bbe8:	425b      	neglt	r3, r3
 800bbea:	f042 0202 	orrlt.w	r2, r2, #2
 800bbee:	9307      	strge	r3, [sp, #28]
 800bbf0:	9307      	strlt	r3, [sp, #28]
 800bbf2:	bfb8      	it	lt
 800bbf4:	9204      	strlt	r2, [sp, #16]
 800bbf6:	7823      	ldrb	r3, [r4, #0]
 800bbf8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbfa:	d10a      	bne.n	800bc12 <_vfiprintf_r+0x156>
 800bbfc:	7863      	ldrb	r3, [r4, #1]
 800bbfe:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc00:	d132      	bne.n	800bc68 <_vfiprintf_r+0x1ac>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	1d1a      	adds	r2, r3, #4
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	9203      	str	r2, [sp, #12]
 800bc0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc0e:	3402      	adds	r4, #2
 800bc10:	9305      	str	r3, [sp, #20]
 800bc12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bce8 <_vfiprintf_r+0x22c>
 800bc16:	7821      	ldrb	r1, [r4, #0]
 800bc18:	2203      	movs	r2, #3
 800bc1a:	4650      	mov	r0, sl
 800bc1c:	f7f4 fad8 	bl	80001d0 <memchr>
 800bc20:	b138      	cbz	r0, 800bc32 <_vfiprintf_r+0x176>
 800bc22:	9b04      	ldr	r3, [sp, #16]
 800bc24:	eba0 000a 	sub.w	r0, r0, sl
 800bc28:	2240      	movs	r2, #64	@ 0x40
 800bc2a:	4082      	lsls	r2, r0
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	3401      	adds	r4, #1
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc36:	4829      	ldr	r0, [pc, #164]	@ (800bcdc <_vfiprintf_r+0x220>)
 800bc38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc3c:	2206      	movs	r2, #6
 800bc3e:	f7f4 fac7 	bl	80001d0 <memchr>
 800bc42:	2800      	cmp	r0, #0
 800bc44:	d03f      	beq.n	800bcc6 <_vfiprintf_r+0x20a>
 800bc46:	4b26      	ldr	r3, [pc, #152]	@ (800bce0 <_vfiprintf_r+0x224>)
 800bc48:	bb1b      	cbnz	r3, 800bc92 <_vfiprintf_r+0x1d6>
 800bc4a:	9b03      	ldr	r3, [sp, #12]
 800bc4c:	3307      	adds	r3, #7
 800bc4e:	f023 0307 	bic.w	r3, r3, #7
 800bc52:	3308      	adds	r3, #8
 800bc54:	9303      	str	r3, [sp, #12]
 800bc56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc58:	443b      	add	r3, r7
 800bc5a:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc5c:	e76a      	b.n	800bb34 <_vfiprintf_r+0x78>
 800bc5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc62:	460c      	mov	r4, r1
 800bc64:	2001      	movs	r0, #1
 800bc66:	e7a8      	b.n	800bbba <_vfiprintf_r+0xfe>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	3401      	adds	r4, #1
 800bc6c:	9305      	str	r3, [sp, #20]
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f04f 0c0a 	mov.w	ip, #10
 800bc74:	4620      	mov	r0, r4
 800bc76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc7a:	3a30      	subs	r2, #48	@ 0x30
 800bc7c:	2a09      	cmp	r2, #9
 800bc7e:	d903      	bls.n	800bc88 <_vfiprintf_r+0x1cc>
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d0c6      	beq.n	800bc12 <_vfiprintf_r+0x156>
 800bc84:	9105      	str	r1, [sp, #20]
 800bc86:	e7c4      	b.n	800bc12 <_vfiprintf_r+0x156>
 800bc88:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc8c:	4604      	mov	r4, r0
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e7f0      	b.n	800bc74 <_vfiprintf_r+0x1b8>
 800bc92:	ab03      	add	r3, sp, #12
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	462a      	mov	r2, r5
 800bc98:	4b12      	ldr	r3, [pc, #72]	@ (800bce4 <_vfiprintf_r+0x228>)
 800bc9a:	a904      	add	r1, sp, #16
 800bc9c:	4630      	mov	r0, r6
 800bc9e:	f7fd fc7d 	bl	800959c <_printf_float>
 800bca2:	4607      	mov	r7, r0
 800bca4:	1c78      	adds	r0, r7, #1
 800bca6:	d1d6      	bne.n	800bc56 <_vfiprintf_r+0x19a>
 800bca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcaa:	07d9      	lsls	r1, r3, #31
 800bcac:	d405      	bmi.n	800bcba <_vfiprintf_r+0x1fe>
 800bcae:	89ab      	ldrh	r3, [r5, #12]
 800bcb0:	059a      	lsls	r2, r3, #22
 800bcb2:	d402      	bmi.n	800bcba <_vfiprintf_r+0x1fe>
 800bcb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bcb6:	f7fe f9f1 	bl	800a09c <__retarget_lock_release_recursive>
 800bcba:	89ab      	ldrh	r3, [r5, #12]
 800bcbc:	065b      	lsls	r3, r3, #25
 800bcbe:	f53f af1f 	bmi.w	800bb00 <_vfiprintf_r+0x44>
 800bcc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcc4:	e71e      	b.n	800bb04 <_vfiprintf_r+0x48>
 800bcc6:	ab03      	add	r3, sp, #12
 800bcc8:	9300      	str	r3, [sp, #0]
 800bcca:	462a      	mov	r2, r5
 800bccc:	4b05      	ldr	r3, [pc, #20]	@ (800bce4 <_vfiprintf_r+0x228>)
 800bcce:	a904      	add	r1, sp, #16
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f7fd fefb 	bl	8009acc <_printf_i>
 800bcd6:	e7e4      	b.n	800bca2 <_vfiprintf_r+0x1e6>
 800bcd8:	0800c200 	.word	0x0800c200
 800bcdc:	0800c20a 	.word	0x0800c20a
 800bce0:	0800959d 	.word	0x0800959d
 800bce4:	0800ba99 	.word	0x0800ba99
 800bce8:	0800c206 	.word	0x0800c206

0800bcec <__swbuf_r>:
 800bcec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcee:	460e      	mov	r6, r1
 800bcf0:	4614      	mov	r4, r2
 800bcf2:	4605      	mov	r5, r0
 800bcf4:	b118      	cbz	r0, 800bcfe <__swbuf_r+0x12>
 800bcf6:	6a03      	ldr	r3, [r0, #32]
 800bcf8:	b90b      	cbnz	r3, 800bcfe <__swbuf_r+0x12>
 800bcfa:	f7fe f893 	bl	8009e24 <__sinit>
 800bcfe:	69a3      	ldr	r3, [r4, #24]
 800bd00:	60a3      	str	r3, [r4, #8]
 800bd02:	89a3      	ldrh	r3, [r4, #12]
 800bd04:	071a      	lsls	r2, r3, #28
 800bd06:	d501      	bpl.n	800bd0c <__swbuf_r+0x20>
 800bd08:	6923      	ldr	r3, [r4, #16]
 800bd0a:	b943      	cbnz	r3, 800bd1e <__swbuf_r+0x32>
 800bd0c:	4621      	mov	r1, r4
 800bd0e:	4628      	mov	r0, r5
 800bd10:	f000 f82a 	bl	800bd68 <__swsetup_r>
 800bd14:	b118      	cbz	r0, 800bd1e <__swbuf_r+0x32>
 800bd16:	f04f 37ff 	mov.w	r7, #4294967295
 800bd1a:	4638      	mov	r0, r7
 800bd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd1e:	6823      	ldr	r3, [r4, #0]
 800bd20:	6922      	ldr	r2, [r4, #16]
 800bd22:	1a98      	subs	r0, r3, r2
 800bd24:	6963      	ldr	r3, [r4, #20]
 800bd26:	b2f6      	uxtb	r6, r6
 800bd28:	4283      	cmp	r3, r0
 800bd2a:	4637      	mov	r7, r6
 800bd2c:	dc05      	bgt.n	800bd3a <__swbuf_r+0x4e>
 800bd2e:	4621      	mov	r1, r4
 800bd30:	4628      	mov	r0, r5
 800bd32:	f7ff fda9 	bl	800b888 <_fflush_r>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d1ed      	bne.n	800bd16 <__swbuf_r+0x2a>
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	3b01      	subs	r3, #1
 800bd3e:	60a3      	str	r3, [r4, #8]
 800bd40:	6823      	ldr	r3, [r4, #0]
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	6022      	str	r2, [r4, #0]
 800bd46:	701e      	strb	r6, [r3, #0]
 800bd48:	6962      	ldr	r2, [r4, #20]
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d004      	beq.n	800bd5a <__swbuf_r+0x6e>
 800bd50:	89a3      	ldrh	r3, [r4, #12]
 800bd52:	07db      	lsls	r3, r3, #31
 800bd54:	d5e1      	bpl.n	800bd1a <__swbuf_r+0x2e>
 800bd56:	2e0a      	cmp	r6, #10
 800bd58:	d1df      	bne.n	800bd1a <__swbuf_r+0x2e>
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	4628      	mov	r0, r5
 800bd5e:	f7ff fd93 	bl	800b888 <_fflush_r>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	d0d9      	beq.n	800bd1a <__swbuf_r+0x2e>
 800bd66:	e7d6      	b.n	800bd16 <__swbuf_r+0x2a>

0800bd68 <__swsetup_r>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	4b29      	ldr	r3, [pc, #164]	@ (800be10 <__swsetup_r+0xa8>)
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	6818      	ldr	r0, [r3, #0]
 800bd70:	460c      	mov	r4, r1
 800bd72:	b118      	cbz	r0, 800bd7c <__swsetup_r+0x14>
 800bd74:	6a03      	ldr	r3, [r0, #32]
 800bd76:	b90b      	cbnz	r3, 800bd7c <__swsetup_r+0x14>
 800bd78:	f7fe f854 	bl	8009e24 <__sinit>
 800bd7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd80:	0719      	lsls	r1, r3, #28
 800bd82:	d422      	bmi.n	800bdca <__swsetup_r+0x62>
 800bd84:	06da      	lsls	r2, r3, #27
 800bd86:	d407      	bmi.n	800bd98 <__swsetup_r+0x30>
 800bd88:	2209      	movs	r2, #9
 800bd8a:	602a      	str	r2, [r5, #0]
 800bd8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd90:	81a3      	strh	r3, [r4, #12]
 800bd92:	f04f 30ff 	mov.w	r0, #4294967295
 800bd96:	e033      	b.n	800be00 <__swsetup_r+0x98>
 800bd98:	0758      	lsls	r0, r3, #29
 800bd9a:	d512      	bpl.n	800bdc2 <__swsetup_r+0x5a>
 800bd9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd9e:	b141      	cbz	r1, 800bdb2 <__swsetup_r+0x4a>
 800bda0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bda4:	4299      	cmp	r1, r3
 800bda6:	d002      	beq.n	800bdae <__swsetup_r+0x46>
 800bda8:	4628      	mov	r0, r5
 800bdaa:	f7fe ffc5 	bl	800ad38 <_free_r>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdb2:	89a3      	ldrh	r3, [r4, #12]
 800bdb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bdb8:	81a3      	strh	r3, [r4, #12]
 800bdba:	2300      	movs	r3, #0
 800bdbc:	6063      	str	r3, [r4, #4]
 800bdbe:	6923      	ldr	r3, [r4, #16]
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	89a3      	ldrh	r3, [r4, #12]
 800bdc4:	f043 0308 	orr.w	r3, r3, #8
 800bdc8:	81a3      	strh	r3, [r4, #12]
 800bdca:	6923      	ldr	r3, [r4, #16]
 800bdcc:	b94b      	cbnz	r3, 800bde2 <__swsetup_r+0x7a>
 800bdce:	89a3      	ldrh	r3, [r4, #12]
 800bdd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bdd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bdd8:	d003      	beq.n	800bde2 <__swsetup_r+0x7a>
 800bdda:	4621      	mov	r1, r4
 800bddc:	4628      	mov	r0, r5
 800bdde:	f000 f883 	bl	800bee8 <__smakebuf_r>
 800bde2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bde6:	f013 0201 	ands.w	r2, r3, #1
 800bdea:	d00a      	beq.n	800be02 <__swsetup_r+0x9a>
 800bdec:	2200      	movs	r2, #0
 800bdee:	60a2      	str	r2, [r4, #8]
 800bdf0:	6962      	ldr	r2, [r4, #20]
 800bdf2:	4252      	negs	r2, r2
 800bdf4:	61a2      	str	r2, [r4, #24]
 800bdf6:	6922      	ldr	r2, [r4, #16]
 800bdf8:	b942      	cbnz	r2, 800be0c <__swsetup_r+0xa4>
 800bdfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bdfe:	d1c5      	bne.n	800bd8c <__swsetup_r+0x24>
 800be00:	bd38      	pop	{r3, r4, r5, pc}
 800be02:	0799      	lsls	r1, r3, #30
 800be04:	bf58      	it	pl
 800be06:	6962      	ldrpl	r2, [r4, #20]
 800be08:	60a2      	str	r2, [r4, #8]
 800be0a:	e7f4      	b.n	800bdf6 <__swsetup_r+0x8e>
 800be0c:	2000      	movs	r0, #0
 800be0e:	e7f7      	b.n	800be00 <__swsetup_r+0x98>
 800be10:	20000038 	.word	0x20000038

0800be14 <_raise_r>:
 800be14:	291f      	cmp	r1, #31
 800be16:	b538      	push	{r3, r4, r5, lr}
 800be18:	4605      	mov	r5, r0
 800be1a:	460c      	mov	r4, r1
 800be1c:	d904      	bls.n	800be28 <_raise_r+0x14>
 800be1e:	2316      	movs	r3, #22
 800be20:	6003      	str	r3, [r0, #0]
 800be22:	f04f 30ff 	mov.w	r0, #4294967295
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800be2a:	b112      	cbz	r2, 800be32 <_raise_r+0x1e>
 800be2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be30:	b94b      	cbnz	r3, 800be46 <_raise_r+0x32>
 800be32:	4628      	mov	r0, r5
 800be34:	f000 f830 	bl	800be98 <_getpid_r>
 800be38:	4622      	mov	r2, r4
 800be3a:	4601      	mov	r1, r0
 800be3c:	4628      	mov	r0, r5
 800be3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be42:	f000 b817 	b.w	800be74 <_kill_r>
 800be46:	2b01      	cmp	r3, #1
 800be48:	d00a      	beq.n	800be60 <_raise_r+0x4c>
 800be4a:	1c59      	adds	r1, r3, #1
 800be4c:	d103      	bne.n	800be56 <_raise_r+0x42>
 800be4e:	2316      	movs	r3, #22
 800be50:	6003      	str	r3, [r0, #0]
 800be52:	2001      	movs	r0, #1
 800be54:	e7e7      	b.n	800be26 <_raise_r+0x12>
 800be56:	2100      	movs	r1, #0
 800be58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800be5c:	4620      	mov	r0, r4
 800be5e:	4798      	blx	r3
 800be60:	2000      	movs	r0, #0
 800be62:	e7e0      	b.n	800be26 <_raise_r+0x12>

0800be64 <raise>:
 800be64:	4b02      	ldr	r3, [pc, #8]	@ (800be70 <raise+0xc>)
 800be66:	4601      	mov	r1, r0
 800be68:	6818      	ldr	r0, [r3, #0]
 800be6a:	f7ff bfd3 	b.w	800be14 <_raise_r>
 800be6e:	bf00      	nop
 800be70:	20000038 	.word	0x20000038

0800be74 <_kill_r>:
 800be74:	b538      	push	{r3, r4, r5, lr}
 800be76:	4d07      	ldr	r5, [pc, #28]	@ (800be94 <_kill_r+0x20>)
 800be78:	2300      	movs	r3, #0
 800be7a:	4604      	mov	r4, r0
 800be7c:	4608      	mov	r0, r1
 800be7e:	4611      	mov	r1, r2
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	f7f5 fb53 	bl	800152c <_kill>
 800be86:	1c43      	adds	r3, r0, #1
 800be88:	d102      	bne.n	800be90 <_kill_r+0x1c>
 800be8a:	682b      	ldr	r3, [r5, #0]
 800be8c:	b103      	cbz	r3, 800be90 <_kill_r+0x1c>
 800be8e:	6023      	str	r3, [r4, #0]
 800be90:	bd38      	pop	{r3, r4, r5, pc}
 800be92:	bf00      	nop
 800be94:	20000ba8 	.word	0x20000ba8

0800be98 <_getpid_r>:
 800be98:	f7f5 bb40 	b.w	800151c <_getpid>

0800be9c <__swhatbuf_r>:
 800be9c:	b570      	push	{r4, r5, r6, lr}
 800be9e:	460c      	mov	r4, r1
 800bea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bea4:	2900      	cmp	r1, #0
 800bea6:	b096      	sub	sp, #88	@ 0x58
 800bea8:	4615      	mov	r5, r2
 800beaa:	461e      	mov	r6, r3
 800beac:	da0d      	bge.n	800beca <__swhatbuf_r+0x2e>
 800beae:	89a3      	ldrh	r3, [r4, #12]
 800beb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800beb4:	f04f 0100 	mov.w	r1, #0
 800beb8:	bf14      	ite	ne
 800beba:	2340      	movne	r3, #64	@ 0x40
 800bebc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bec0:	2000      	movs	r0, #0
 800bec2:	6031      	str	r1, [r6, #0]
 800bec4:	602b      	str	r3, [r5, #0]
 800bec6:	b016      	add	sp, #88	@ 0x58
 800bec8:	bd70      	pop	{r4, r5, r6, pc}
 800beca:	466a      	mov	r2, sp
 800becc:	f000 f848 	bl	800bf60 <_fstat_r>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	dbec      	blt.n	800beae <__swhatbuf_r+0x12>
 800bed4:	9901      	ldr	r1, [sp, #4]
 800bed6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800beda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bede:	4259      	negs	r1, r3
 800bee0:	4159      	adcs	r1, r3
 800bee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bee6:	e7eb      	b.n	800bec0 <__swhatbuf_r+0x24>

0800bee8 <__smakebuf_r>:
 800bee8:	898b      	ldrh	r3, [r1, #12]
 800beea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beec:	079d      	lsls	r5, r3, #30
 800beee:	4606      	mov	r6, r0
 800bef0:	460c      	mov	r4, r1
 800bef2:	d507      	bpl.n	800bf04 <__smakebuf_r+0x1c>
 800bef4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	6123      	str	r3, [r4, #16]
 800befc:	2301      	movs	r3, #1
 800befe:	6163      	str	r3, [r4, #20]
 800bf00:	b003      	add	sp, #12
 800bf02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf04:	ab01      	add	r3, sp, #4
 800bf06:	466a      	mov	r2, sp
 800bf08:	f7ff ffc8 	bl	800be9c <__swhatbuf_r>
 800bf0c:	9f00      	ldr	r7, [sp, #0]
 800bf0e:	4605      	mov	r5, r0
 800bf10:	4639      	mov	r1, r7
 800bf12:	4630      	mov	r0, r6
 800bf14:	f7fd fa16 	bl	8009344 <_malloc_r>
 800bf18:	b948      	cbnz	r0, 800bf2e <__smakebuf_r+0x46>
 800bf1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf1e:	059a      	lsls	r2, r3, #22
 800bf20:	d4ee      	bmi.n	800bf00 <__smakebuf_r+0x18>
 800bf22:	f023 0303 	bic.w	r3, r3, #3
 800bf26:	f043 0302 	orr.w	r3, r3, #2
 800bf2a:	81a3      	strh	r3, [r4, #12]
 800bf2c:	e7e2      	b.n	800bef4 <__smakebuf_r+0xc>
 800bf2e:	89a3      	ldrh	r3, [r4, #12]
 800bf30:	6020      	str	r0, [r4, #0]
 800bf32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf36:	81a3      	strh	r3, [r4, #12]
 800bf38:	9b01      	ldr	r3, [sp, #4]
 800bf3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf3e:	b15b      	cbz	r3, 800bf58 <__smakebuf_r+0x70>
 800bf40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf44:	4630      	mov	r0, r6
 800bf46:	f000 f81d 	bl	800bf84 <_isatty_r>
 800bf4a:	b128      	cbz	r0, 800bf58 <__smakebuf_r+0x70>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	f043 0301 	orr.w	r3, r3, #1
 800bf56:	81a3      	strh	r3, [r4, #12]
 800bf58:	89a3      	ldrh	r3, [r4, #12]
 800bf5a:	431d      	orrs	r5, r3
 800bf5c:	81a5      	strh	r5, [r4, #12]
 800bf5e:	e7cf      	b.n	800bf00 <__smakebuf_r+0x18>

0800bf60 <_fstat_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d07      	ldr	r5, [pc, #28]	@ (800bf80 <_fstat_r+0x20>)
 800bf64:	2300      	movs	r3, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	4608      	mov	r0, r1
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	602b      	str	r3, [r5, #0]
 800bf6e:	f7f5 fb3d 	bl	80015ec <_fstat>
 800bf72:	1c43      	adds	r3, r0, #1
 800bf74:	d102      	bne.n	800bf7c <_fstat_r+0x1c>
 800bf76:	682b      	ldr	r3, [r5, #0]
 800bf78:	b103      	cbz	r3, 800bf7c <_fstat_r+0x1c>
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	bd38      	pop	{r3, r4, r5, pc}
 800bf7e:	bf00      	nop
 800bf80:	20000ba8 	.word	0x20000ba8

0800bf84 <_isatty_r>:
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4d06      	ldr	r5, [pc, #24]	@ (800bfa0 <_isatty_r+0x1c>)
 800bf88:	2300      	movs	r3, #0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	4608      	mov	r0, r1
 800bf8e:	602b      	str	r3, [r5, #0]
 800bf90:	f7f5 fb3c 	bl	800160c <_isatty>
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	d102      	bne.n	800bf9e <_isatty_r+0x1a>
 800bf98:	682b      	ldr	r3, [r5, #0]
 800bf9a:	b103      	cbz	r3, 800bf9e <_isatty_r+0x1a>
 800bf9c:	6023      	str	r3, [r4, #0]
 800bf9e:	bd38      	pop	{r3, r4, r5, pc}
 800bfa0:	20000ba8 	.word	0x20000ba8

0800bfa4 <_init>:
 800bfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfa6:	bf00      	nop
 800bfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfaa:	bc08      	pop	{r3}
 800bfac:	469e      	mov	lr, r3
 800bfae:	4770      	bx	lr

0800bfb0 <_fini>:
 800bfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfb2:	bf00      	nop
 800bfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bfb6:	bc08      	pop	{r3}
 800bfb8:	469e      	mov	lr, r3
 800bfba:	4770      	bx	lr
