
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009728  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080098b8  080098b8  0000a8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800990c  0800990c  0000b088  2**0
                  CONTENTS
  4 .ARM          00000008  0800990c  0800990c  0000a90c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009914  08009914  0000b088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009914  08009914  0000a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009918  08009918  0000a918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800991c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b088  2**0
                  CONTENTS
 10 .bss          00000a20  20000088  20000088  0000b088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa8  20000aa8  0000b088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015163  00000000  00000000  0000b0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a50  00000000  00000000  0002021b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00023c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8d  00000000  00000000  00024e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002498d  00000000  00000000  00025bd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c23  00000000  00000000  0004a562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd372  00000000  00000000  00063185  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001304f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000517c  00000000  00000000  0013053c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  001356b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098a0 	.word	0x080098a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	080098a0 	.word	0x080098a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fca1 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f83f 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f93b 	bl	80007e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000572:	f000 f8a5 	bl	80006c0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000576:	f000 f8d1 	bl	800071c <MX_I2S3_Init>
  MX_SPI1_Init();
 800057a:	f000 f8ff 	bl	800077c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800057e:	f007 ff45 	bl	800840c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  int state_past = 0 , value = 0, count = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	2300      	movs	r3, #0
 800058c:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value = HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_4);
 800058e:	2110      	movs	r1, #16
 8000590:	4813      	ldr	r0, [pc, #76]	@ (80005e0 <main+0x80>)
 8000592:	f000 ffcf 	bl	8001534 <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	607b      	str	r3, [r7, #4]
//	  past = HAL_GetTick();
	  if (value == 0){
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d105      	bne.n	80005ac <main+0x4c>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005a6:	480f      	ldr	r0, [pc, #60]	@ (80005e4 <main+0x84>)
 80005a8:	f000 ffdc 	bl	8001564 <HAL_GPIO_WritePin>
	  }
	  if (value!=state_past&&value==1){
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d00b      	beq.n	80005cc <main+0x6c>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d108      	bne.n	80005cc <main+0x6c>
		  count ++;
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	3301      	adds	r3, #1
 80005be:	60bb      	str	r3, [r7, #8]
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005c6:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <main+0x84>)
 80005c8:	f000 ffcc 	bl	8001564 <HAL_GPIO_WritePin>
	  }
	  state_past = value;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
	  printf("%d\n", count);
 80005d0:	68b9      	ldr	r1, [r7, #8]
 80005d2:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <main+0x88>)
 80005d4:	f008 fba4 	bl	8008d20 <iprintf>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005d8:	f007 ff3e 	bl	8008458 <MX_USB_HOST_Process>
  {
 80005dc:	e7d7      	b.n	800058e <main+0x2e>
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40020c00 	.word	0x40020c00
 80005e8:	080098b8 	.word	0x080098b8

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b094      	sub	sp, #80	@ 0x50
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0320 	add.w	r3, r7, #32
 80005f6:	2230      	movs	r2, #48	@ 0x30
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f008 fbe5 	bl	8008dca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000610:	2300      	movs	r3, #0
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	4b28      	ldr	r3, [pc, #160]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000618:	4a27      	ldr	r2, [pc, #156]	@ (80006b8 <SystemClock_Config+0xcc>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000620:	4b25      	ldr	r3, [pc, #148]	@ (80006b8 <SystemClock_Config+0xcc>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <SystemClock_Config+0xd0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a21      	ldr	r2, [pc, #132]	@ (80006bc <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800065c:	2308      	movs	r3, #8
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fe8e 	bl	8004394 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800067e:	f000 f9bd 	bl	80009fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800068e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000692:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2105      	movs	r1, #5
 80006a0:	4618      	mov	r0, r3
 80006a2:	f004 f8ef 	bl	8004884 <HAL_RCC_ClockConfig>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006ac:	f000 f9a6 	bl	80009fc <Error_Handler>
  }
}
 80006b0:	bf00      	nop
 80006b2:	3750      	adds	r7, #80	@ 0x50
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006c6:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <MX_I2C1_Init+0x54>)
 80006c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006cc:	4a12      	ldr	r2, [pc, #72]	@ (8000718 <MX_I2C1_Init+0x58>)
 80006ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f0:	4b07      	ldr	r3, [pc, #28]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_I2C1_Init+0x50>)
 80006fe:	f003 f865 	bl	80037cc <HAL_I2C_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000708:	f000 f978 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	200000a4 	.word	0x200000a4
 8000714:	40005400 	.word	0x40005400
 8000718:	000186a0 	.word	0x000186a0

0800071c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000720:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000722:	4a14      	ldr	r2, [pc, #80]	@ (8000774 <MX_I2S3_Init+0x58>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000726:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000734:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800073a:	4b0d      	ldr	r3, [pc, #52]	@ (8000770 <MX_I2S3_Init+0x54>)
 800073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000740:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000744:	4a0c      	ldr	r2, [pc, #48]	@ (8000778 <MX_I2S3_Init+0x5c>)
 8000746:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2S3_Init+0x54>)
 800074a:	2200      	movs	r2, #0
 800074c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2S3_Init+0x54>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_I2S3_Init+0x54>)
 800075c:	f003 f97a 	bl	8003a54 <HAL_I2S_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000766:	f000 f949 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200000f8 	.word	0x200000f8
 8000774:	40003c00 	.word	0x40003c00
 8000778:	00017700 	.word	0x00017700

0800077c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000782:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <MX_SPI1_Init+0x68>)
 8000784:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000788:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800078c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000794:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800079a:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_SPI1_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a0:	4b0f      	ldr	r3, [pc, #60]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ae:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ba:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007c6:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007c8:	220a      	movs	r2, #10
 80007ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_SPI1_Init+0x64>)
 80007ce:	f004 fba7 	bl	8004f20 <HAL_SPI_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d8:	f000 f910 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000140 	.word	0x20000140
 80007e4:	40013000 	.word	0x40013000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08c      	sub	sp, #48	@ 0x30
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 031c 	add.w	r3, r7, #28
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	61bb      	str	r3, [r7, #24]
 8000802:	4b78      	ldr	r3, [pc, #480]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a77      	ldr	r2, [pc, #476]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b75      	ldr	r3, [pc, #468]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0310 	and.w	r3, r3, #16
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	4b71      	ldr	r3, [pc, #452]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a70      	ldr	r2, [pc, #448]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b6e      	ldr	r3, [pc, #440]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	613b      	str	r3, [r7, #16]
 800083a:	4b6a      	ldr	r3, [pc, #424]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a69      	ldr	r2, [pc, #420]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b67      	ldr	r3, [pc, #412]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
 8000856:	4b63      	ldr	r3, [pc, #396]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a62      	ldr	r2, [pc, #392]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b60      	ldr	r3, [pc, #384]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
 8000872:	4b5c      	ldr	r3, [pc, #368]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	4a5b      	ldr	r2, [pc, #364]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	6313      	str	r3, [r2, #48]	@ 0x30
 800087e:	4b59      	ldr	r3, [pc, #356]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	f003 0302 	and.w	r3, r3, #2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b55      	ldr	r3, [pc, #340]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a54      	ldr	r2, [pc, #336]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 8000894:	f043 0308 	orr.w	r3, r3, #8
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b52      	ldr	r3, [pc, #328]	@ (80009e4 <MX_GPIO_Init+0x1fc>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2108      	movs	r1, #8
 80008aa:	484f      	ldr	r0, [pc, #316]	@ (80009e8 <MX_GPIO_Init+0x200>)
 80008ac:	f000 fe5a 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2101      	movs	r1, #1
 80008b4:	484d      	ldr	r0, [pc, #308]	@ (80009ec <MX_GPIO_Init+0x204>)
 80008b6:	f000 fe55 	bl	8001564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008ba:	2200      	movs	r2, #0
 80008bc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008c0:	484b      	ldr	r0, [pc, #300]	@ (80009f0 <MX_GPIO_Init+0x208>)
 80008c2:	f000 fe4f 	bl	8001564 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 031c 	add.w	r3, r7, #28
 80008da:	4619      	mov	r1, r3
 80008dc:	4842      	ldr	r0, [pc, #264]	@ (80009e8 <MX_GPIO_Init+0x200>)
 80008de:	f000 fc8d 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008e2:	2310      	movs	r3, #16
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	2300      	movs	r3, #0
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	483c      	ldr	r0, [pc, #240]	@ (80009e8 <MX_GPIO_Init+0x200>)
 80008f6:	f000 fc81 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4836      	ldr	r0, [pc, #216]	@ (80009ec <MX_GPIO_Init+0x204>)
 8000912:	f000 fc73 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000916:	2308      	movs	r3, #8
 8000918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091a:	2302      	movs	r3, #2
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000926:	2305      	movs	r3, #5
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800092a:	f107 031c 	add.w	r3, r7, #28
 800092e:	4619      	mov	r1, r3
 8000930:	482e      	ldr	r0, [pc, #184]	@ (80009ec <MX_GPIO_Init+0x204>)
 8000932:	f000 fc63 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000936:	2301      	movs	r3, #1
 8000938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800093a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	4619      	mov	r1, r3
 800094a:	482a      	ldr	r0, [pc, #168]	@ (80009f4 <MX_GPIO_Init+0x20c>)
 800094c:	f000 fc56 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000950:	2304      	movs	r3, #4
 8000952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000954:	2300      	movs	r3, #0
 8000956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	4619      	mov	r1, r3
 8000962:	4825      	ldr	r0, [pc, #148]	@ (80009f8 <MX_GPIO_Init+0x210>)
 8000964:	f000 fc4a 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	2302      	movs	r3, #2
 8000970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	2300      	movs	r3, #0
 8000978:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800097a:	2305      	movs	r3, #5
 800097c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 031c 	add.w	r3, r7, #28
 8000982:	4619      	mov	r1, r3
 8000984:	481c      	ldr	r0, [pc, #112]	@ (80009f8 <MX_GPIO_Init+0x210>)
 8000986:	f000 fc39 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800098a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800098e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000998:	2300      	movs	r3, #0
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4813      	ldr	r0, [pc, #76]	@ (80009f0 <MX_GPIO_Init+0x208>)
 80009a4:	f000 fc2a 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009a8:	2320      	movs	r3, #32
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <MX_GPIO_Init+0x208>)
 80009bc:	f000 fc1e 	bl	80011fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009c4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_GPIO_Init+0x200>)
 80009d6:	f000 fc11 	bl	80011fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40021000 	.word	0x40021000
 80009ec:	40020800 	.word	0x40020800
 80009f0:	40020c00 	.word	0x40020c00
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400

080009fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a00:	b672      	cpsid	i
}
 8000a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <Error_Handler+0x8>

08000a08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	4a0f      	ldr	r2, [pc, #60]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	4a08      	ldr	r2, [pc, #32]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a3a:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <HAL_MspInit+0x4c>)
 8000a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a46:	2007      	movs	r0, #7
 8000a48:	f000 fb96 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	@ 0x28
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <HAL_I2C_MspInit+0x84>)
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d12c      	bne.n	8000ad4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a17      	ldr	r2, [pc, #92]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a84:	f043 0302 	orr.w	r3, r3, #2
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0302 	and.w	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a96:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9c:	2312      	movs	r3, #18
 8000a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480c      	ldr	r0, [pc, #48]	@ (8000ae4 <HAL_I2C_MspInit+0x8c>)
 8000ab4:	f000 fba2 	bl	80011fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
 8000abc:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac0:	4a07      	ldr	r2, [pc, #28]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000ac2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ac8:	4b05      	ldr	r3, [pc, #20]	@ (8000ae0 <HAL_I2C_MspInit+0x88>)
 8000aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	@ 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08e      	sub	sp, #56	@ 0x38
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a31      	ldr	r2, [pc, #196]	@ (8000bd8 <HAL_I2S_MspInit+0xf0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d15a      	bne.n	8000bce <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b1c:	23c0      	movs	r3, #192	@ 0xc0
 8000b1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f004 f8b7 	bl	8004c9c <HAL_RCCEx_PeriphCLKConfig>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b34:	f7ff ff62 	bl	80009fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	4b27      	ldr	r3, [pc, #156]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	4a26      	ldr	r2, [pc, #152]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b46:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b48:	4b24      	ldr	r3, [pc, #144]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b64:	4b1d      	ldr	r3, [pc, #116]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b70:	2300      	movs	r3, #0
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	4b19      	ldr	r3, [pc, #100]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b78:	4a18      	ldr	r2, [pc, #96]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b7a:	f043 0304 	orr.w	r3, r3, #4
 8000b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b80:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <HAL_I2S_MspInit+0xf4>)
 8000b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480e      	ldr	r0, [pc, #56]	@ (8000be0 <HAL_I2S_MspInit+0xf8>)
 8000ba8:	f000 fb28 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bac:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bbe:	2306      	movs	r3, #6
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <HAL_I2S_MspInit+0xfc>)
 8000bca:	f000 fb17 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000bce:	bf00      	nop
 8000bd0:	3738      	adds	r7, #56	@ 0x38
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40003c00 	.word	0x40003c00
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020800 	.word	0x40020800

08000be8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a19      	ldr	r2, [pc, #100]	@ (8000c6c <HAL_SPI_MspInit+0x84>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d12b      	bne.n	8000c62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a17      	ldr	r2, [pc, #92]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a10      	ldr	r2, [pc, #64]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_SPI_MspInit+0x88>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c42:	23e0      	movs	r3, #224	@ 0xe0
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c52:	2305      	movs	r3, #5
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <HAL_SPI_MspInit+0x8c>)
 8000c5e:	f000 facd 	bl	80011fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40013000 	.word	0x40013000
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cce:	f000 f93f 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000cdc:	4802      	ldr	r0, [pc, #8]	@ (8000ce8 <OTG_FS_IRQHandler+0x10>)
 8000cde:	f000 ff3b 	bl	8001b58 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000057c 	.word	0x2000057c

08000cec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	60f8      	str	r0, [r7, #12]
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
 8000cfc:	e00a      	b.n	8000d14 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cfe:	f3af 8000 	nop.w
 8000d02:	4601      	mov	r1, r0
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	1c5a      	adds	r2, r3, #1
 8000d08:	60ba      	str	r2, [r7, #8]
 8000d0a:	b2ca      	uxtb	r2, r1
 8000d0c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	3301      	adds	r3, #1
 8000d12:	617b      	str	r3, [r7, #20]
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	dbf0      	blt.n	8000cfe <_read+0x12>
  }

  return len;
 8000d1c:	687b      	ldr	r3, [r7, #4]
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	60b9      	str	r1, [r7, #8]
 8000d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
 8000d36:	e009      	b.n	8000d4c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf1      	blt.n	8000d38 <_write+0x12>
  }
  return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_close>:

int _close(int file)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b083      	sub	sp, #12
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
 8000d7e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d86:	605a      	str	r2, [r3, #4]
  return 0;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <_isatty>:

int _isatty(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
	...

08000dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd0:	4a14      	ldr	r2, [pc, #80]	@ (8000e24 <_sbrk+0x5c>)
 8000dd2:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <_sbrk+0x60>)
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ddc:	4b13      	ldr	r3, [pc, #76]	@ (8000e2c <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d102      	bne.n	8000dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de4:	4b11      	ldr	r3, [pc, #68]	@ (8000e2c <_sbrk+0x64>)
 8000de6:	4a12      	ldr	r2, [pc, #72]	@ (8000e30 <_sbrk+0x68>)
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <_sbrk+0x64>)
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4413      	add	r3, r2
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d207      	bcs.n	8000e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df8:	f008 f846 	bl	8008e88 <__errno>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	220c      	movs	r2, #12
 8000e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e02:	f04f 33ff 	mov.w	r3, #4294967295
 8000e06:	e009      	b.n	8000e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e08:	4b08      	ldr	r3, [pc, #32]	@ (8000e2c <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <_sbrk+0x64>)
 8000e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20020000 	.word	0x20020000
 8000e28:	00000400 	.word	0x00000400
 8000e2c:	20000198 	.word	0x20000198
 8000e30:	20000aa8 	.word	0x20000aa8

08000e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <SystemInit+0x20>)
 8000e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e3e:	4a05      	ldr	r2, [pc, #20]	@ (8000e54 <SystemInit+0x20>)
 8000e40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e90 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e5c:	f7ff ffea 	bl	8000e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e60:	480c      	ldr	r0, [pc, #48]	@ (8000e94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e62:	490d      	ldr	r1, [pc, #52]	@ (8000e98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e68:	e002      	b.n	8000e70 <LoopCopyDataInit>

08000e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e6e:	3304      	adds	r3, #4

08000e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e74:	d3f9      	bcc.n	8000e6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ea4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e7c:	e001      	b.n	8000e82 <LoopFillZerobss>

08000e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e80:	3204      	adds	r2, #4

08000e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e84:	d3fb      	bcc.n	8000e7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e86:	f008 f805 	bl	8008e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e8a:	f7ff fb69 	bl	8000560 <main>
  bx  lr    
 8000e8e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e98:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000e9c:	0800991c 	.word	0x0800991c
  ldr r2, =_sbss
 8000ea0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000ea4:	20000aa8 	.word	0x20000aa8

08000ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ea8:	e7fe      	b.n	8000ea8 <ADC_IRQHandler>
	...

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	@ (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f94f 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f000 f808 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f7ff fd92 	bl	8000a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 f967 	bl	80011e2 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 f92f 	bl	800118e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000000 	.word	0x20000000
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	2000019c 	.word	0x2000019c

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	2000019c 	.word	0x2000019c

08000f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f98:	f7ff ffee 	bl	8000f78 <HAL_GetTick>
 8000f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fa8:	d005      	beq.n	8000fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_Delay+0x44>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fb6:	bf00      	nop
 8000fb8:	f7ff ffde 	bl	8000f78 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d8f7      	bhi.n	8000fb8 <HAL_Delay+0x28>
  {
  }
}
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a0:	f7ff ff3e 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	6978      	ldr	r0, [r7, #20]
 80011ac:	f7ff ff8e 	bl	80010cc <NVIC_EncodePriority>
 80011b0:	4602      	mov	r2, r0
 80011b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff5d 	bl	8001078 <__NVIC_SetPriority>
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff ff31 	bl	800103c <__NVIC_EnableIRQ>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ffa2 	bl	8001134 <SysTick_Config>
 80011f0:	4603      	mov	r3, r0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	@ 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120e:	2300      	movs	r3, #0
 8001210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]
 8001216:	e16b      	b.n	80014f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001218:	2201      	movs	r2, #1
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	429a      	cmp	r2, r3
 8001232:	f040 815a 	bne.w	80014ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	2b01      	cmp	r3, #1
 8001240:	d005      	beq.n	800124e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800124a:	2b02      	cmp	r3, #2
 800124c:	d130      	bne.n	80012b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	2203      	movs	r2, #3
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68da      	ldr	r2, [r3, #12]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4013      	ands	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	69b9      	ldr	r1, [r7, #24]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80b4 	beq.w	80014ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <HAL_GPIO_Init+0x30c>)
 8001388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800138a:	4a5f      	ldr	r2, [pc, #380]	@ (8001508 <HAL_GPIO_Init+0x30c>)
 800138c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001390:	6453      	str	r3, [r2, #68]	@ 0x44
 8001392:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <HAL_GPIO_Init+0x30c>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139e:	4a5b      	ldr	r2, [pc, #364]	@ (800150c <HAL_GPIO_Init+0x310>)
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	089b      	lsrs	r3, r3, #2
 80013a4:	3302      	adds	r3, #2
 80013a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	220f      	movs	r2, #15
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a52      	ldr	r2, [pc, #328]	@ (8001510 <HAL_GPIO_Init+0x314>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d02b      	beq.n	8001422 <HAL_GPIO_Init+0x226>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a51      	ldr	r2, [pc, #324]	@ (8001514 <HAL_GPIO_Init+0x318>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x222>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a50      	ldr	r2, [pc, #320]	@ (8001518 <HAL_GPIO_Init+0x31c>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x21e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4f      	ldr	r2, [pc, #316]	@ (800151c <HAL_GPIO_Init+0x320>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x21a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001520 <HAL_GPIO_Init+0x324>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x216>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001524 <HAL_GPIO_Init+0x328>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x212>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001528 <HAL_GPIO_Init+0x32c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x20e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4b      	ldr	r2, [pc, #300]	@ (800152c <HAL_GPIO_Init+0x330>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x20a>
 8001402:	2307      	movs	r3, #7
 8001404:	e00e      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001406:	2308      	movs	r3, #8
 8001408:	e00c      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800140a:	2306      	movs	r3, #6
 800140c:	e00a      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800140e:	2305      	movs	r3, #5
 8001410:	e008      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001412:	2304      	movs	r3, #4
 8001414:	e006      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001416:	2303      	movs	r3, #3
 8001418:	e004      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800141a:	2302      	movs	r3, #2
 800141c:	e002      	b.n	8001424 <HAL_GPIO_Init+0x228>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <HAL_GPIO_Init+0x228>
 8001422:	2300      	movs	r3, #0
 8001424:	69fa      	ldr	r2, [r7, #28]
 8001426:	f002 0203 	and.w	r2, r2, #3
 800142a:	0092      	lsls	r2, r2, #2
 800142c:	4093      	lsls	r3, r2
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001434:	4935      	ldr	r1, [pc, #212]	@ (800150c <HAL_GPIO_Init+0x310>)
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	089b      	lsrs	r3, r3, #2
 800143a:	3302      	adds	r3, #2
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <HAL_GPIO_Init+0x334>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d003      	beq.n	8001466 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001466:	4a32      	ldr	r2, [pc, #200]	@ (8001530 <HAL_GPIO_Init+0x334>)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800146c:	4b30      	ldr	r3, [pc, #192]	@ (8001530 <HAL_GPIO_Init+0x334>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001490:	4a27      	ldr	r2, [pc, #156]	@ (8001530 <HAL_GPIO_Init+0x334>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001496:	4b26      	ldr	r3, [pc, #152]	@ (8001530 <HAL_GPIO_Init+0x334>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	43db      	mvns	r3, r3
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4013      	ands	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014ba:	4a1d      	ldr	r2, [pc, #116]	@ (8001530 <HAL_GPIO_Init+0x334>)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <HAL_GPIO_Init+0x334>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014e4:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <HAL_GPIO_Init+0x334>)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3301      	adds	r3, #1
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	2b0f      	cmp	r3, #15
 80014f4:	f67f ae90 	bls.w	8001218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3724      	adds	r7, #36	@ 0x24
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40013800 	.word	0x40013800
 8001510:	40020000 	.word	0x40020000
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020c00 	.word	0x40020c00
 8001520:	40021000 	.word	0x40021000
 8001524:	40021400 	.word	0x40021400
 8001528:	40021800 	.word	0x40021800
 800152c:	40021c00 	.word	0x40021c00
 8001530:	40013c00 	.word	0x40013c00

08001534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	887b      	ldrh	r3, [r7, #2]
 8001546:	4013      	ands	r3, r2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d002      	beq.n	8001552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e001      	b.n	8001556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001556:	7bfb      	ldrb	r3, [r7, #15]
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
 8001570:	4613      	mov	r3, r2
 8001572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001574:	787b      	ldrb	r3, [r7, #1]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001580:	e003      	b.n	800158a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	041a      	lsls	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	619a      	str	r2, [r3, #24]
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af02      	add	r7, sp, #8
 800159c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e059      	b.n	800165c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f006 ff80 	bl	80084c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015d6:	d102      	bne.n	80015de <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fd9a 	bl	800511c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6818      	ldr	r0, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	7c1a      	ldrb	r2, [r3, #16]
 80015f0:	f88d 2000 	strb.w	r2, [sp]
 80015f4:	3304      	adds	r3, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	f003 fd1b 	bl	8005032 <USB_CoreInit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d005      	beq.n	800160e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2202      	movs	r2, #2
 8001606:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e026      	b.n	800165c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2101      	movs	r1, #1
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fd92 	bl	800513e <USB_SetCurrentMode>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d005      	beq.n	800162c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e017      	b.n	800165c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7c1a      	ldrb	r2, [r3, #16]
 8001634:	f88d 2000 	strb.w	r2, [sp]
 8001638:	3304      	adds	r3, #4
 800163a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800163c:	f003 ff34 	bl	80054a8 <USB_HostInit>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e004      	b.n	800165c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3710      	adds	r7, #16
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001664:	b590      	push	{r4, r7, lr}
 8001666:	b08b      	sub	sp, #44	@ 0x2c
 8001668:	af04      	add	r7, sp, #16
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	70fb      	strb	r3, [r7, #3]
 8001676:	460b      	mov	r3, r1
 8001678:	70bb      	strb	r3, [r7, #2]
 800167a:	4613      	mov	r3, r2
 800167c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800167e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001680:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001688:	2b01      	cmp	r3, #1
 800168a:	d101      	bne.n	8001690 <HAL_HCD_HC_Init+0x2c>
 800168c:	2302      	movs	r3, #2
 800168e:	e09d      	b.n	80017cc <HAL_HCD_HC_Init+0x168>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001698:	78fa      	ldrb	r2, [r7, #3]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	011b      	lsls	r3, r3, #4
 80016a0:	1a9b      	subs	r3, r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	440b      	add	r3, r1
 80016a6:	3319      	adds	r3, #25
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016ac:	78fa      	ldrb	r2, [r7, #3]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	011b      	lsls	r3, r3, #4
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3314      	adds	r3, #20
 80016bc:	787a      	ldrb	r2, [r7, #1]
 80016be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016c0:	78fa      	ldrb	r2, [r7, #3]
 80016c2:	6879      	ldr	r1, [r7, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	011b      	lsls	r3, r3, #4
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	3315      	adds	r3, #21
 80016d0:	78fa      	ldrb	r2, [r7, #3]
 80016d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	3326      	adds	r3, #38	@ 0x26
 80016e4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80016e8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	78bb      	ldrb	r3, [r7, #2]
 80016ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80016f2:	b2d8      	uxtb	r0, r3
 80016f4:	6879      	ldr	r1, [r7, #4]
 80016f6:	4613      	mov	r3, r2
 80016f8:	011b      	lsls	r3, r3, #4
 80016fa:	1a9b      	subs	r3, r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	440b      	add	r3, r1
 8001700:	3316      	adds	r3, #22
 8001702:	4602      	mov	r2, r0
 8001704:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	4619      	mov	r1, r3
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 fbc8 	bl	8001ea0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001710:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001714:	2b00      	cmp	r3, #0
 8001716:	da0a      	bge.n	800172e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	4613      	mov	r3, r2
 800171e:	011b      	lsls	r3, r3, #4
 8001720:	1a9b      	subs	r3, r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3317      	adds	r3, #23
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	e009      	b.n	8001742 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	6879      	ldr	r1, [r7, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a9b      	subs	r3, r3, r2
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	440b      	add	r3, r1
 800173c:	3317      	adds	r3, #23
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f004 f812 	bl	8005770 <USB_GetHostSpeed>
 800174c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800174e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001752:	2b01      	cmp	r3, #1
 8001754:	d10b      	bne.n	800176e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001756:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_HCD_HC_Init+0x10a>
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d104      	bne.n	800176e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2bbc      	cmp	r3, #188	@ 0xbc
 8001768:	d901      	bls.n	800176e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800176a:	23bc      	movs	r3, #188	@ 0xbc
 800176c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800176e:	78fa      	ldrb	r2, [r7, #3]
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	011b      	lsls	r3, r3, #4
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3318      	adds	r3, #24
 800177e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001782:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001784:	78fa      	ldrb	r2, [r7, #3]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	b298      	uxth	r0, r3
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	4613      	mov	r3, r2
 800178e:	011b      	lsls	r3, r3, #4
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	3328      	adds	r3, #40	@ 0x28
 8001798:	4602      	mov	r2, r0
 800179a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6818      	ldr	r0, [r3, #0]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	787c      	ldrb	r4, [r7, #1]
 80017a6:	78ba      	ldrb	r2, [r7, #2]
 80017a8:	78f9      	ldrb	r1, [r7, #3]
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	4623      	mov	r3, r4
 80017ba:	f004 f801 	bl	80057c0 <USB_HC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}

080017d4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d101      	bne.n	80017f2 <HAL_HCD_HC_Halt+0x1e>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e00f      	b.n	8001812 <HAL_HCD_HC_Halt+0x3e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	78fa      	ldrb	r2, [r7, #3]
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fb93 	bl	8005f2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	4608      	mov	r0, r1
 8001826:	4611      	mov	r1, r2
 8001828:	461a      	mov	r2, r3
 800182a:	4603      	mov	r3, r0
 800182c:	70fb      	strb	r3, [r7, #3]
 800182e:	460b      	mov	r3, r1
 8001830:	70bb      	strb	r3, [r7, #2]
 8001832:	4613      	mov	r3, r2
 8001834:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001836:	78fa      	ldrb	r2, [r7, #3]
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	1a9b      	subs	r3, r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	3317      	adds	r3, #23
 8001846:	78ba      	ldrb	r2, [r7, #2]
 8001848:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800184a:	78fa      	ldrb	r2, [r7, #3]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	1a9b      	subs	r3, r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	3326      	adds	r3, #38	@ 0x26
 800185a:	787a      	ldrb	r2, [r7, #1]
 800185c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800185e:	7c3b      	ldrb	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d114      	bne.n	800188e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001864:	78fa      	ldrb	r2, [r7, #3]
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	4613      	mov	r3, r2
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	1a9b      	subs	r3, r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	332a      	adds	r3, #42	@ 0x2a
 8001874:	2203      	movs	r2, #3
 8001876:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001878:	78fa      	ldrb	r2, [r7, #3]
 800187a:	6879      	ldr	r1, [r7, #4]
 800187c:	4613      	mov	r3, r2
 800187e:	011b      	lsls	r3, r3, #4
 8001880:	1a9b      	subs	r3, r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3319      	adds	r3, #25
 8001888:	7f3a      	ldrb	r2, [r7, #28]
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e009      	b.n	80018a2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	6879      	ldr	r1, [r7, #4]
 8001892:	4613      	mov	r3, r2
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	1a9b      	subs	r3, r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	332a      	adds	r3, #42	@ 0x2a
 800189e:	2202      	movs	r2, #2
 80018a0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018a2:	787b      	ldrb	r3, [r7, #1]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	f200 8102 	bhi.w	8001aae <HAL_HCD_HC_SubmitRequest+0x292>
 80018aa:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80018ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	08001a99 	.word	0x08001a99
 80018b8:	08001985 	.word	0x08001985
 80018bc:	08001a0f 	.word	0x08001a0f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80018c0:	7c3b      	ldrb	r3, [r7, #16]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	f040 80f5 	bne.w	8001ab2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80018c8:	78bb      	ldrb	r3, [r7, #2]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d12d      	bne.n	800192a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80018ce:	8b3b      	ldrh	r3, [r7, #24]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d109      	bne.n	80018e8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80018d4:	78fa      	ldrb	r2, [r7, #3]
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	011b      	lsls	r3, r3, #4
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	333d      	adds	r3, #61	@ 0x3d
 80018e4:	2201      	movs	r2, #1
 80018e6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	333d      	adds	r3, #61	@ 0x3d
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d10a      	bne.n	8001914 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	332a      	adds	r3, #42	@ 0x2a
 800190e:	2200      	movs	r2, #0
 8001910:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001912:	e0ce      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e0c3      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800192a:	78fa      	ldrb	r2, [r7, #3]
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	4613      	mov	r3, r2
 8001930:	011b      	lsls	r3, r3, #4
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	331a      	adds	r3, #26
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	f040 80b8 	bne.w	8001ab2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	4613      	mov	r3, r2
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	1a9b      	subs	r3, r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	440b      	add	r3, r1
 8001950:	333c      	adds	r3, #60	@ 0x3c
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10a      	bne.n	800196e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	332a      	adds	r3, #42	@ 0x2a
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
      break;
 800196c:	e0a1      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	6879      	ldr	r1, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	1a9b      	subs	r3, r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	440b      	add	r3, r1
 800197c:	332a      	adds	r3, #42	@ 0x2a
 800197e:	2202      	movs	r2, #2
 8001980:	701a      	strb	r2, [r3, #0]
      break;
 8001982:	e096      	b.n	8001ab2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d120      	bne.n	80019cc <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800198a:	78fa      	ldrb	r2, [r7, #3]
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	333d      	adds	r3, #61	@ 0x3d
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10a      	bne.n	80019b6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a0:	78fa      	ldrb	r2, [r7, #3]
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	4613      	mov	r3, r2
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	1a9b      	subs	r3, r3, r2
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	440b      	add	r3, r1
 80019ae:	332a      	adds	r3, #42	@ 0x2a
 80019b0:	2200      	movs	r2, #0
 80019b2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80019b4:	e07e      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019b6:	78fa      	ldrb	r2, [r7, #3]
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	1a9b      	subs	r3, r3, r2
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	440b      	add	r3, r1
 80019c4:	332a      	adds	r3, #42	@ 0x2a
 80019c6:	2202      	movs	r2, #2
 80019c8:	701a      	strb	r2, [r3, #0]
      break;
 80019ca:	e073      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019cc:	78fa      	ldrb	r2, [r7, #3]
 80019ce:	6879      	ldr	r1, [r7, #4]
 80019d0:	4613      	mov	r3, r2
 80019d2:	011b      	lsls	r3, r3, #4
 80019d4:	1a9b      	subs	r3, r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	333c      	adds	r3, #60	@ 0x3c
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10a      	bne.n	80019f8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019e2:	78fa      	ldrb	r2, [r7, #3]
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	1a9b      	subs	r3, r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	440b      	add	r3, r1
 80019f0:	332a      	adds	r3, #42	@ 0x2a
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
      break;
 80019f6:	e05d      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019f8:	78fa      	ldrb	r2, [r7, #3]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	4613      	mov	r3, r2
 80019fe:	011b      	lsls	r3, r3, #4
 8001a00:	1a9b      	subs	r3, r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	440b      	add	r3, r1
 8001a06:	332a      	adds	r3, #42	@ 0x2a
 8001a08:	2202      	movs	r2, #2
 8001a0a:	701a      	strb	r2, [r3, #0]
      break;
 8001a0c:	e052      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a0e:	78bb      	ldrb	r3, [r7, #2]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d120      	bne.n	8001a56 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	6879      	ldr	r1, [r7, #4]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	011b      	lsls	r3, r3, #4
 8001a1c:	1a9b      	subs	r3, r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	440b      	add	r3, r1
 8001a22:	333d      	adds	r3, #61	@ 0x3d
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10a      	bne.n	8001a40 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a2a:	78fa      	ldrb	r2, [r7, #3]
 8001a2c:	6879      	ldr	r1, [r7, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	332a      	adds	r3, #42	@ 0x2a
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a3e:	e039      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a40:	78fa      	ldrb	r2, [r7, #3]
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	4613      	mov	r3, r2
 8001a46:	011b      	lsls	r3, r3, #4
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	332a      	adds	r3, #42	@ 0x2a
 8001a50:	2202      	movs	r2, #2
 8001a52:	701a      	strb	r2, [r3, #0]
      break;
 8001a54:	e02e      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a56:	78fa      	ldrb	r2, [r7, #3]
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	1a9b      	subs	r3, r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	440b      	add	r3, r1
 8001a64:	333c      	adds	r3, #60	@ 0x3c
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d10a      	bne.n	8001a82 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a6c:	78fa      	ldrb	r2, [r7, #3]
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	332a      	adds	r3, #42	@ 0x2a
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
      break;
 8001a80:	e018      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a82:	78fa      	ldrb	r2, [r7, #3]
 8001a84:	6879      	ldr	r1, [r7, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	440b      	add	r3, r1
 8001a90:	332a      	adds	r3, #42	@ 0x2a
 8001a92:	2202      	movs	r2, #2
 8001a94:	701a      	strb	r2, [r3, #0]
      break;
 8001a96:	e00d      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	1a9b      	subs	r3, r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	332a      	adds	r3, #42	@ 0x2a
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
      break;
 8001aac:	e002      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001aae:	bf00      	nop
 8001ab0:	e000      	b.n	8001ab4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001ab2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001ab4:	78fa      	ldrb	r2, [r7, #3]
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	332c      	adds	r3, #44	@ 0x2c
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001ac8:	78fa      	ldrb	r2, [r7, #3]
 8001aca:	8b39      	ldrh	r1, [r7, #24]
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	1a9b      	subs	r3, r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4403      	add	r3, r0
 8001ad8:	3334      	adds	r3, #52	@ 0x34
 8001ada:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001adc:	78fa      	ldrb	r2, [r7, #3]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	1a9b      	subs	r3, r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	334c      	adds	r3, #76	@ 0x4c
 8001aec:	2200      	movs	r2, #0
 8001aee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001af0:	78fa      	ldrb	r2, [r7, #3]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a9b      	subs	r3, r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	3338      	adds	r3, #56	@ 0x38
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	3315      	adds	r3, #21
 8001b14:	78fa      	ldrb	r2, [r7, #3]
 8001b16:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	011b      	lsls	r3, r3, #4
 8001b20:	1a9b      	subs	r3, r3, r2
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	440b      	add	r3, r1
 8001b26:	334d      	adds	r3, #77	@ 0x4d
 8001b28:	2200      	movs	r2, #0
 8001b2a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	4613      	mov	r3, r2
 8001b34:	011b      	lsls	r3, r3, #4
 8001b36:	1a9b      	subs	r3, r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3310      	adds	r3, #16
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	1d19      	adds	r1, r3, #4
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	799b      	ldrb	r3, [r3, #6]
 8001b46:	461a      	mov	r2, r3
 8001b48:	f003 ff66 	bl	8005a18 <USB_HC_StartXfer>
 8001b4c:	4603      	mov	r3, r0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop

08001b58 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 fc5b 	bl	800542a <USB_GetMode>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	f040 80fb 	bne.w	8001d72 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f003 fc1e 	bl	80053c2 <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 80f1 	beq.w	8001d70 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fc15 	bl	80053c2 <USB_ReadInterrupts>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ba2:	d104      	bne.n	8001bae <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fc05 	bl	80053c2 <USB_ReadInterrupts>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001bc2:	d104      	bne.n	8001bce <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001bcc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 fbf5 	bl	80053c2 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001be2:	d104      	bne.n	8001bee <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fbe5 	bl	80053c2 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d103      	bne.n	8001c0a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2202      	movs	r2, #2
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 fbd7 	bl	80053c2 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c1e:	d120      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c28:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d113      	bne.n	8001c62 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	6938      	ldr	r0, [r7, #16]
 8001c3e:	f003 faca 	bl	80051d6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c42:	6938      	ldr	r0, [r7, #16]
 8001c44:	f003 faf9 	bl	800523a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	7a5b      	ldrb	r3, [r3, #9]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d105      	bne.n	8001c5c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	4618      	mov	r0, r3
 8001c58:	f003 fcea 	bl	8005630 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f006 fcb1 	bl	80085c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f003 fbab 	bl	80053c2 <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c76:	d102      	bne.n	8001c7e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f001 fd33 	bl	80036e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fb9d 	bl	80053c2 <USB_ReadInterrupts>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d106      	bne.n	8001ca0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c92:	6878      	ldr	r0, [r7, #4]
 8001c94:	f006 fc7a 	bl	800858c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f003 fb8c 	bl	80053c2 <USB_ReadInterrupts>
 8001caa:	4603      	mov	r3, r0
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001cb4:	d139      	bne.n	8001d2a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f004 f926 	bl	8005f0c <USB_HC_ReadInterrupt>
 8001cc0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	e025      	b.n	8001d14 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	f003 030f 	and.w	r3, r3, #15
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d018      	beq.n	8001d0e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	015a      	lsls	r2, r3, #5
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001cf2:	d106      	bne.n	8001d02 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f905 	bl	8001f0a <HCD_HC_IN_IRQHandler>
 8001d00:	e005      	b.n	8001d0e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	4619      	mov	r1, r3
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 ff67 	bl	8002bdc <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	795b      	ldrb	r3, [r3, #5]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d3d3      	bcc.n	8001cc8 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fb47 	bl	80053c2 <USB_ReadInterrupts>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f003 0310 	and.w	r3, r3, #16
 8001d3a:	2b10      	cmp	r3, #16
 8001d3c:	d101      	bne.n	8001d42 <HAL_HCD_IRQHandler+0x1ea>
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_HCD_IRQHandler+0x1ec>
 8001d42:	2300      	movs	r3, #0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d014      	beq.n	8001d72 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	699a      	ldr	r2, [r3, #24]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0210 	bic.w	r2, r2, #16
 8001d56:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f001 fbe4 	bl	8003526 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0210 	orr.w	r2, r2, #16
 8001d6c:	619a      	str	r2, [r3, #24]
 8001d6e:	e000      	b.n	8001d72 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001d70:	bf00      	nop
    }
  }
}
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_HCD_Start+0x16>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e013      	b.n	8001db6 <HAL_HCD_Start+0x3e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fcae 	bl	80056fe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f003 f9a7 	bl	80050fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_HCD_Stop+0x16>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e00d      	b.n	8001df0 <HAL_HCD_Stop+0x32>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 fa01 	bl	80061e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fc50 	bl	80056aa <USB_ResetPort>
 8001e0a:	4603      	mov	r3, r0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e20:	78fa      	ldrb	r2, [r7, #3]
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	011b      	lsls	r3, r3, #4
 8001e28:	1a9b      	subs	r3, r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	334c      	adds	r3, #76	@ 0x4c
 8001e30:	781b      	ldrb	r3, [r3, #0]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	1a9b      	subs	r3, r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3338      	adds	r3, #56	@ 0x38
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f003 fc92 	bl	800579e <USB_GetCurrentFrame>
 8001e7a:	4603      	mov	r3, r0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f003 fc6d 	bl	8005770 <USB_GetHostSpeed>
 8001e96:	4603      	mov	r3, r0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001eac:	78fa      	ldrb	r2, [r7, #3]
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	011b      	lsls	r3, r3, #4
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	331a      	adds	r3, #26
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001ec0:	78fa      	ldrb	r2, [r7, #3]
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	011b      	lsls	r3, r3, #4
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	440b      	add	r3, r1
 8001ece:	331b      	adds	r3, #27
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001ed4:	78fa      	ldrb	r2, [r7, #3]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	011b      	lsls	r3, r3, #4
 8001edc:	1a9b      	subs	r3, r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	3325      	adds	r3, #37	@ 0x25
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	4613      	mov	r3, r2
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	1a9b      	subs	r3, r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3324      	adds	r3, #36	@ 0x24
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	460b      	mov	r3, r1
 8001f14:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f003 fa5d 	bl	80053e8 <USB_ReadChInterrupts>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b04      	cmp	r3, #4
 8001f36:	d11a      	bne.n	8001f6e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f44:	461a      	mov	r2, r3
 8001f46:	2304      	movs	r3, #4
 8001f48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	334d      	adds	r3, #77	@ 0x4d
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f003 ffe1 	bl	8005f2e <USB_HC_Halt>
 8001f6c:	e09e      	b.n	80020ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fa36 	bl	80053e8 <USB_ReadChInterrupts>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f86:	d11b      	bne.n	8001fc0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	334d      	adds	r3, #77	@ 0x4d
 8001fac:	2208      	movs	r2, #8
 8001fae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	78fa      	ldrb	r2, [r7, #3]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f003 ffb8 	bl	8005f2e <USB_HC_Halt>
 8001fbe:	e075      	b.n	80020ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fa0d 	bl	80053e8 <USB_ReadChInterrupts>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d11a      	bne.n	800200e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001fea:	78fa      	ldrb	r2, [r7, #3]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	1a9b      	subs	r3, r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	334d      	adds	r3, #77	@ 0x4d
 8001ffa:	2206      	movs	r2, #6
 8001ffc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f003 ff91 	bl	8005f2e <USB_HC_Halt>
 800200c:	e04e      	b.n	80020ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	4611      	mov	r1, r2
 8002016:	4618      	mov	r0, r3
 8002018:	f003 f9e6 	bl	80053e8 <USB_ReadChInterrupts>
 800201c:	4603      	mov	r3, r0
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002026:	d11b      	bne.n	8002060 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800203a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	334d      	adds	r3, #77	@ 0x4d
 800204c:	2209      	movs	r2, #9
 800204e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	78fa      	ldrb	r2, [r7, #3]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f003 ff68 	bl	8005f2e <USB_HC_Halt>
 800205e:	e025      	b.n	80020ac <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	4611      	mov	r1, r2
 8002068:	4618      	mov	r0, r3
 800206a:	f003 f9bd 	bl	80053e8 <USB_ReadChInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002074:	2b80      	cmp	r3, #128	@ 0x80
 8002076:	d119      	bne.n	80020ac <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002084:	461a      	mov	r2, r3
 8002086:	2380      	movs	r3, #128	@ 0x80
 8002088:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800208a:	78fa      	ldrb	r2, [r7, #3]
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	1a9b      	subs	r3, r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	334d      	adds	r3, #77	@ 0x4d
 800209a:	2207      	movs	r2, #7
 800209c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	4611      	mov	r1, r2
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 ff41 	bl	8005f2e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	4611      	mov	r1, r2
 80020b4:	4618      	mov	r0, r3
 80020b6:	f003 f997 	bl	80053e8 <USB_ReadChInterrupts>
 80020ba:	4603      	mov	r3, r0
 80020bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020c4:	d112      	bne.n	80020ec <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	78fa      	ldrb	r2, [r7, #3]
 80020cc:	4611      	mov	r1, r2
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 ff2d 	bl	8005f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80020d4:	78fb      	ldrb	r3, [r7, #3]
 80020d6:	015a      	lsls	r2, r3, #5
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	4413      	add	r3, r2
 80020dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020e0:	461a      	mov	r2, r3
 80020e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e6:	6093      	str	r3, [r2, #8]
 80020e8:	f000 bd75 	b.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 f977 	bl	80053e8 <USB_ReadChInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	f040 8128 	bne.w	8002356 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002106:	78fb      	ldrb	r3, [r7, #3]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	2320      	movs	r3, #32
 8002116:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002118:	78fa      	ldrb	r2, [r7, #3]
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	011b      	lsls	r3, r3, #4
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	331b      	adds	r3, #27
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d119      	bne.n	8002162 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800212e:	78fa      	ldrb	r2, [r7, #3]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	1a9b      	subs	r3, r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	331b      	adds	r3, #27
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	015a      	lsls	r2, r3, #5
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4413      	add	r3, r2
 800214a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	0151      	lsls	r1, r2, #5
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	440a      	add	r2, r1
 8002158:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800215c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002160:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	799b      	ldrb	r3, [r3, #6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d01b      	beq.n	80021a2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3330      	adds	r3, #48	@ 0x30
 800217a:	6819      	ldr	r1, [r3, #0]
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	015a      	lsls	r2, r3, #5
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4413      	add	r3, r2
 8002184:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	1ac9      	subs	r1, r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	1a9b      	subs	r3, r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4403      	add	r3, r0
 800219e:	3338      	adds	r3, #56	@ 0x38
 80021a0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	334d      	adds	r3, #77	@ 0x4d
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3344      	adds	r3, #68	@ 0x44
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80021ca:	78fb      	ldrb	r3, [r7, #3]
 80021cc:	015a      	lsls	r2, r3, #5
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	4413      	add	r3, r2
 80021d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d6:	461a      	mov	r2, r3
 80021d8:	2301      	movs	r3, #1
 80021da:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	3326      	adds	r3, #38	@ 0x26
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	3326      	adds	r3, #38	@ 0x26
 8002202:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002204:	2b02      	cmp	r3, #2
 8002206:	d110      	bne.n	800222a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	78fa      	ldrb	r2, [r7, #3]
 800220e:	4611      	mov	r1, r2
 8002210:	4618      	mov	r0, r3
 8002212:	f003 fe8c 	bl	8005f2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	015a      	lsls	r2, r3, #5
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002222:	461a      	mov	r2, r3
 8002224:	2310      	movs	r3, #16
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	e03d      	b.n	80022a6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800222a:	78fa      	ldrb	r2, [r7, #3]
 800222c:	6879      	ldr	r1, [r7, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	440b      	add	r3, r1
 8002238:	3326      	adds	r3, #38	@ 0x26
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d00a      	beq.n	8002256 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	3326      	adds	r3, #38	@ 0x26
 8002250:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002252:	2b01      	cmp	r3, #1
 8002254:	d127      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002256:	78fb      	ldrb	r3, [r7, #3]
 8002258:	015a      	lsls	r2, r3, #5
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	4413      	add	r3, r2
 800225e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	78fa      	ldrb	r2, [r7, #3]
 8002266:	0151      	lsls	r1, r2, #5
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	440a      	add	r2, r1
 800226c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002270:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002274:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002276:	78fa      	ldrb	r2, [r7, #3]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	011b      	lsls	r3, r3, #4
 800227e:	1a9b      	subs	r3, r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	334c      	adds	r3, #76	@ 0x4c
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	334c      	adds	r3, #76	@ 0x4c
 800229a:	781a      	ldrb	r2, [r3, #0]
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	4619      	mov	r1, r3
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f006 f99d 	bl	80085e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	799b      	ldrb	r3, [r3, #6]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d13b      	bne.n	8002326 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	3338      	adds	r3, #56	@ 0x38
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4403      	add	r3, r0
 80022ce:	3328      	adds	r3, #40	@ 0x28
 80022d0:	881b      	ldrh	r3, [r3, #0]
 80022d2:	440b      	add	r3, r1
 80022d4:	1e59      	subs	r1, r3, #1
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4403      	add	r3, r0
 80022e4:	3328      	adds	r3, #40	@ 0x28
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8470 	beq.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333c      	adds	r3, #60	@ 0x3c
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	f083 0301 	eor.w	r3, r3, #1
 800230e:	b2d8      	uxtb	r0, r3
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	333c      	adds	r3, #60	@ 0x3c
 800231e:	4602      	mov	r2, r0
 8002320:	701a      	strb	r2, [r3, #0]
 8002322:	f000 bc58 	b.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	333c      	adds	r3, #60	@ 0x3c
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2d8      	uxtb	r0, r3
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	333c      	adds	r3, #60	@ 0x3c
 800234e:	4602      	mov	r2, r0
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	f000 bc40 	b.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f842 	bl	80053e8 <USB_ReadChInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 0320 	and.w	r3, r3, #32
 800236a:	2b20      	cmp	r3, #32
 800236c:	d131      	bne.n	80023d2 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800236e:	78fb      	ldrb	r3, [r7, #3]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800237a:	461a      	mov	r2, r3
 800237c:	2320      	movs	r3, #32
 800237e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	331a      	adds	r3, #26
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b01      	cmp	r3, #1
 8002394:	f040 841f 	bne.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	6879      	ldr	r1, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	331b      	adds	r3, #27
 80023a8:	2201      	movs	r2, #1
 80023aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	334d      	adds	r3, #77	@ 0x4d
 80023bc:	2203      	movs	r2, #3
 80023be:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	78fa      	ldrb	r2, [r7, #3]
 80023c6:	4611      	mov	r1, r2
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 fdb0 	bl	8005f2e <USB_HC_Halt>
 80023ce:	f000 bc02 	b.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f804 	bl	80053e8 <USB_ReadChInterrupts>
 80023e0:	4603      	mov	r3, r0
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	f040 8305 	bne.w	80029f6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80023ec:	78fb      	ldrb	r3, [r7, #3]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023f8:	461a      	mov	r2, r3
 80023fa:	2302      	movs	r3, #2
 80023fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	334d      	adds	r3, #77	@ 0x4d
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b01      	cmp	r3, #1
 8002412:	d114      	bne.n	800243e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	334d      	adds	r3, #77	@ 0x4d
 8002424:	2202      	movs	r2, #2
 8002426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	334c      	adds	r3, #76	@ 0x4c
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e2cc      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800243e:	78fa      	ldrb	r2, [r7, #3]
 8002440:	6879      	ldr	r1, [r7, #4]
 8002442:	4613      	mov	r3, r2
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	1a9b      	subs	r3, r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	440b      	add	r3, r1
 800244c:	334d      	adds	r3, #77	@ 0x4d
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b06      	cmp	r3, #6
 8002452:	d114      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	334d      	adds	r3, #77	@ 0x4d
 8002464:	2202      	movs	r2, #2
 8002466:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	334c      	adds	r3, #76	@ 0x4c
 8002478:	2205      	movs	r2, #5
 800247a:	701a      	strb	r2, [r3, #0]
 800247c:	e2ac      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	334d      	adds	r3, #77	@ 0x4d
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b07      	cmp	r3, #7
 8002492:	d00b      	beq.n	80024ac <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002494:	78fa      	ldrb	r2, [r7, #3]
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	4613      	mov	r3, r2
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	1a9b      	subs	r3, r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	440b      	add	r3, r1
 80024a2:	334d      	adds	r3, #77	@ 0x4d
 80024a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024a6:	2b09      	cmp	r3, #9
 80024a8:	f040 80a6 	bne.w	80025f8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	334d      	adds	r3, #77	@ 0x4d
 80024bc:	2202      	movs	r2, #2
 80024be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80024c0:	78fa      	ldrb	r2, [r7, #3]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	011b      	lsls	r3, r3, #4
 80024c8:	1a9b      	subs	r3, r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3344      	adds	r3, #68	@ 0x44
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	1c59      	adds	r1, r3, #1
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4403      	add	r3, r0
 80024e0:	3344      	adds	r3, #68	@ 0x44
 80024e2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	3344      	adds	r3, #68	@ 0x44
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d943      	bls.n	8002582 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3344      	adds	r3, #68	@ 0x44
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	331a      	adds	r3, #26
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d123      	bne.n	800256c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002524:	78fa      	ldrb	r2, [r7, #3]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	331b      	adds	r3, #27
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	331c      	adds	r3, #28
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800254c:	78fb      	ldrb	r3, [r7, #3]
 800254e:	015a      	lsls	r2, r3, #5
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	4413      	add	r3, r2
 8002554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	0151      	lsls	r1, r2, #5
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	440a      	add	r2, r1
 8002562:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800256a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	4613      	mov	r3, r2
 8002572:	011b      	lsls	r3, r3, #4
 8002574:	1a9b      	subs	r3, r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	440b      	add	r3, r1
 800257a:	334c      	adds	r3, #76	@ 0x4c
 800257c:	2204      	movs	r2, #4
 800257e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002580:	e229      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002582:	78fa      	ldrb	r2, [r7, #3]
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	011b      	lsls	r3, r3, #4
 800258a:	1a9b      	subs	r3, r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	334c      	adds	r3, #76	@ 0x4c
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	3326      	adds	r3, #38	@ 0x26
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00b      	beq.n	80025c4 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	3326      	adds	r3, #38	@ 0x26
 80025bc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025be:	2b02      	cmp	r3, #2
 80025c0:	f040 8209 	bne.w	80029d6 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025da:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80025e2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f0:	461a      	mov	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025f6:	e1ee      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	334d      	adds	r3, #77	@ 0x4d
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b05      	cmp	r3, #5
 800260c:	f040 80c8 	bne.w	80027a0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	334d      	adds	r3, #77	@ 0x4d
 8002620:	2202      	movs	r2, #2
 8002622:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	6879      	ldr	r1, [r7, #4]
 8002628:	4613      	mov	r3, r2
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	1a9b      	subs	r3, r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	331b      	adds	r3, #27
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	f040 81ce 	bne.w	80029d8 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	3326      	adds	r3, #38	@ 0x26
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d16b      	bne.n	800272a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002652:	78fa      	ldrb	r2, [r7, #3]
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	4613      	mov	r3, r2
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	1a9b      	subs	r3, r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	440b      	add	r3, r1
 8002660:	3348      	adds	r3, #72	@ 0x48
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	1c59      	adds	r1, r3, #1
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4403      	add	r3, r0
 8002672:	3348      	adds	r3, #72	@ 0x48
 8002674:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002676:	78fa      	ldrb	r2, [r7, #3]
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4613      	mov	r3, r2
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	1a9b      	subs	r3, r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	440b      	add	r3, r1
 8002684:	3348      	adds	r3, #72	@ 0x48
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d943      	bls.n	8002714 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3348      	adds	r3, #72	@ 0x48
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	331b      	adds	r3, #27
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	3344      	adds	r3, #68	@ 0x44
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d809      	bhi.n	80026de <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80026ca:	78fa      	ldrb	r2, [r7, #3]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	1a9b      	subs	r3, r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	331c      	adds	r3, #28
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	015a      	lsls	r2, r3, #5
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4413      	add	r3, r2
 80026e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	0151      	lsls	r1, r2, #5
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	440a      	add	r2, r1
 80026f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026fc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80026fe:	78fa      	ldrb	r2, [r7, #3]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	440b      	add	r3, r1
 800270c:	334c      	adds	r3, #76	@ 0x4c
 800270e:	2204      	movs	r2, #4
 8002710:	701a      	strb	r2, [r3, #0]
 8002712:	e014      	b.n	800273e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	011b      	lsls	r3, r3, #4
 800271c:	1a9b      	subs	r3, r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	334c      	adds	r3, #76	@ 0x4c
 8002724:	2202      	movs	r2, #2
 8002726:	701a      	strb	r2, [r3, #0]
 8002728:	e009      	b.n	800273e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334c      	adds	r3, #76	@ 0x4c
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800273e:	78fa      	ldrb	r2, [r7, #3]
 8002740:	6879      	ldr	r1, [r7, #4]
 8002742:	4613      	mov	r3, r2
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	1a9b      	subs	r3, r3, r2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	440b      	add	r3, r1
 800274c:	3326      	adds	r3, #38	@ 0x26
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3326      	adds	r3, #38	@ 0x26
 8002764:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002766:	2b02      	cmp	r3, #2
 8002768:	f040 8136 	bne.w	80029d8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800276c:	78fb      	ldrb	r3, [r7, #3]
 800276e:	015a      	lsls	r2, r3, #5
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4413      	add	r3, r2
 8002774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002782:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800278a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	015a      	lsls	r2, r3, #5
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	4413      	add	r3, r2
 8002794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002798:	461a      	mov	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e11b      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	6879      	ldr	r1, [r7, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	011b      	lsls	r3, r3, #4
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	334d      	adds	r3, #77	@ 0x4d
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	f040 8081 	bne.w	80028ba <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	6879      	ldr	r1, [r7, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	011b      	lsls	r3, r3, #4
 80027c0:	1a9b      	subs	r3, r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	334d      	adds	r3, #77	@ 0x4d
 80027c8:	2202      	movs	r2, #2
 80027ca:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	331b      	adds	r3, #27
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	f040 80fa 	bne.w	80029d8 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	334c      	adds	r3, #76	@ 0x4c
 80027f4:	2202      	movs	r2, #2
 80027f6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	015a      	lsls	r2, r3, #5
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	4413      	add	r3, r2
 8002800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	78fa      	ldrb	r2, [r7, #3]
 8002808:	0151      	lsls	r1, r2, #5
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	440a      	add	r2, r1
 800280e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002816:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	4413      	add	r3, r2
 8002820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	0151      	lsls	r1, r2, #5
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	440a      	add	r2, r1
 800282e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002832:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002836:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	0151      	lsls	r1, r2, #5
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	440a      	add	r2, r1
 800284e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002852:	f023 0320 	bic.w	r3, r3, #32
 8002856:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	6879      	ldr	r1, [r7, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	1a9b      	subs	r3, r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3326      	adds	r3, #38	@ 0x26
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00b      	beq.n	8002886 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	3326      	adds	r3, #38	@ 0x26
 800287e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002880:	2b02      	cmp	r3, #2
 8002882:	f040 80a9 	bne.w	80029d8 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	015a      	lsls	r2, r3, #5
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	4413      	add	r3, r2
 800288e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800289c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028a4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028a6:	78fb      	ldrb	r3, [r7, #3]
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e08e      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80028ba:	78fa      	ldrb	r2, [r7, #3]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	4613      	mov	r3, r2
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a9b      	subs	r3, r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	334d      	adds	r3, #77	@ 0x4d
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b04      	cmp	r3, #4
 80028ce:	d143      	bne.n	8002958 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028d0:	78fa      	ldrb	r2, [r7, #3]
 80028d2:	6879      	ldr	r1, [r7, #4]
 80028d4:	4613      	mov	r3, r2
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	1a9b      	subs	r3, r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	334d      	adds	r3, #77	@ 0x4d
 80028e0:	2202      	movs	r2, #2
 80028e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	6879      	ldr	r1, [r7, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	011b      	lsls	r3, r3, #4
 80028ec:	1a9b      	subs	r3, r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	334c      	adds	r3, #76	@ 0x4c
 80028f4:	2202      	movs	r2, #2
 80028f6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3326      	adds	r3, #38	@ 0x26
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3326      	adds	r3, #38	@ 0x26
 800291e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002920:	2b02      	cmp	r3, #2
 8002922:	d159      	bne.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800293a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002942:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002944:	78fb      	ldrb	r3, [r7, #3]
 8002946:	015a      	lsls	r2, r3, #5
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	4413      	add	r3, r2
 800294c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002950:	461a      	mov	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e03f      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334d      	adds	r3, #77	@ 0x4d
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b08      	cmp	r3, #8
 800296c:	d126      	bne.n	80029bc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800296e:	78fa      	ldrb	r2, [r7, #3]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	1a9b      	subs	r3, r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	334d      	adds	r3, #77	@ 0x4d
 800297e:	2202      	movs	r2, #2
 8002980:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3344      	adds	r3, #68	@ 0x44
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	1c59      	adds	r1, r3, #1
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	011b      	lsls	r3, r3, #4
 800299c:	1a9b      	subs	r3, r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4403      	add	r3, r0
 80029a2:	3344      	adds	r3, #68	@ 0x44
 80029a4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	334c      	adds	r3, #76	@ 0x4c
 80029b6:	2204      	movs	r2, #4
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	e00d      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80029bc:	78fa      	ldrb	r2, [r7, #3]
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	1a9b      	subs	r3, r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	334d      	adds	r3, #77	@ 0x4d
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	f000 8100 	beq.w	8002bd4 <HCD_HC_IN_IRQHandler+0xcca>
 80029d4:	e000      	b.n	80029d8 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80029d6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80029d8:	78fa      	ldrb	r2, [r7, #3]
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	1a9b      	subs	r3, r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	440b      	add	r3, r1
 80029e6:	334c      	adds	r3, #76	@ 0x4c
 80029e8:	781a      	ldrb	r2, [r3, #0]
 80029ea:	78fb      	ldrb	r3, [r7, #3]
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f005 fdf6 	bl	80085e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80029f4:	e0ef      	b.n	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	78fa      	ldrb	r2, [r7, #3]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f002 fcf2 	bl	80053e8 <USB_ReadChInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a0a:	2b40      	cmp	r3, #64	@ 0x40
 8002a0c:	d12f      	bne.n	8002a6e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a0e:	78fb      	ldrb	r3, [r7, #3]
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	2340      	movs	r3, #64	@ 0x40
 8002a1e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a20:	78fa      	ldrb	r2, [r7, #3]
 8002a22:	6879      	ldr	r1, [r7, #4]
 8002a24:	4613      	mov	r3, r2
 8002a26:	011b      	lsls	r3, r3, #4
 8002a28:	1a9b      	subs	r3, r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	440b      	add	r3, r1
 8002a2e:	334d      	adds	r3, #77	@ 0x4d
 8002a30:	2205      	movs	r2, #5
 8002a32:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	011b      	lsls	r3, r3, #4
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	440b      	add	r3, r1
 8002a42:	331a      	adds	r3, #26
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d109      	bne.n	8002a5e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a9b      	subs	r3, r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	440b      	add	r3, r1
 8002a58:	3344      	adds	r3, #68	@ 0x44
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f003 fa61 	bl	8005f2e <USB_HC_Halt>
 8002a6c:	e0b3      	b.n	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fcb6 	bl	80053e8 <USB_ReadChInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b10      	cmp	r3, #16
 8002a84:	f040 80a7 	bne.w	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002a88:	78fa      	ldrb	r2, [r7, #3]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	1a9b      	subs	r3, r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	3326      	adds	r3, #38	@ 0x26
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d11b      	bne.n	8002ad6 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3344      	adds	r3, #68	@ 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334d      	adds	r3, #77	@ 0x4d
 8002ac2:	2204      	movs	r2, #4
 8002ac4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	4611      	mov	r1, r2
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f003 fa2d 	bl	8005f2e <USB_HC_Halt>
 8002ad4:	e03f      	b.n	8002b56 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3326      	adds	r3, #38	@ 0x26
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aec:	78fa      	ldrb	r2, [r7, #3]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	1a9b      	subs	r3, r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3326      	adds	r3, #38	@ 0x26
 8002afc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d129      	bne.n	8002b56 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3344      	adds	r3, #68	@ 0x44
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	331b      	adds	r3, #27
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d110      	bne.n	8002b56 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b34:	78fa      	ldrb	r2, [r7, #3]
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	334d      	adds	r3, #77	@ 0x4d
 8002b44:	2204      	movs	r2, #4
 8002b46:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f003 f9ec 	bl	8005f2e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	331b      	adds	r3, #27
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d129      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b6c:	78fa      	ldrb	r2, [r7, #3]
 8002b6e:	6879      	ldr	r1, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	015a      	lsls	r2, r3, #5
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4413      	add	r3, r2
 8002b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	0151      	lsls	r1, r2, #5
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	440a      	add	r2, r1
 8002b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b9e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ba0:	78fb      	ldrb	r3, [r7, #3]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	0151      	lsls	r1, r2, #5
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	440a      	add	r2, r1
 8002bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bba:	f043 0320 	orr.w	r3, r3, #32
 8002bbe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2310      	movs	r3, #16
 8002bd0:	6093      	str	r3, [r2, #8]
 8002bd2:	e000      	b.n	8002bd6 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002bd4:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002bd6:	3718      	adds	r7, #24
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f002 fbf4 	bl	80053e8 <USB_ReadChInterrupts>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d11b      	bne.n	8002c42 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c16:	461a      	mov	r2, r3
 8002c18:	2304      	movs	r3, #4
 8002c1a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	334d      	adds	r3, #77	@ 0x4d
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	4611      	mov	r1, r2
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f003 f978 	bl	8005f2e <USB_HC_Halt>
 8002c3e:	f000 bc6f 	b.w	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f002 fbcc 	bl	80053e8 <USB_ReadChInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 8082 	bne.w	8002d60 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002c6e:	78fa      	ldrb	r2, [r7, #3]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	1a9b      	subs	r3, r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3319      	adds	r3, #25
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d124      	bne.n	8002cce <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	3319      	adds	r3, #25
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334c      	adds	r3, #76	@ 0x4c
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334d      	adds	r3, #77	@ 0x4d
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 f930 	bl	8005f2e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	331a      	adds	r3, #26
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	f040 841d 	bne.w	8003520 <HCD_HC_OUT_IRQHandler+0x944>
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	331b      	adds	r3, #27
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f040 8411 	bne.w	8003520 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3326      	adds	r3, #38	@ 0x26
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d009      	beq.n	8002d28 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	331b      	adds	r3, #27
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	334d      	adds	r3, #77	@ 0x4d
 8002d38:	2203      	movs	r2, #3
 8002d3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f003 f8f2 	bl	8005f2e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	3344      	adds	r3, #68	@ 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	e3df      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fb3d 	bl	80053e8 <USB_ReadChInterrupts>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d78:	d111      	bne.n	8002d9e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	015a      	lsls	r2, r3, #5
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4413      	add	r3, r2
 8002d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d86:	461a      	mov	r2, r3
 8002d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d8c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	4611      	mov	r1, r2
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 f8c9 	bl	8005f2e <USB_HC_Halt>
 8002d9c:	e3c0      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	78fa      	ldrb	r2, [r7, #3]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fb1e 	bl	80053e8 <USB_ReadChInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d168      	bne.n	8002e88 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	3344      	adds	r3, #68	@ 0x44
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 fb08 	bl	80053e8 <USB_ReadChInterrupts>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dde:	2b40      	cmp	r3, #64	@ 0x40
 8002de0:	d112      	bne.n	8002e08 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3319      	adds	r3, #25
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002df6:	78fb      	ldrb	r3, [r7, #3]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e02:	461a      	mov	r2, r3
 8002e04:	2340      	movs	r3, #64	@ 0x40
 8002e06:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	331b      	adds	r3, #27
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d019      	beq.n	8002e52 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	331b      	adds	r3, #27
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	0151      	lsls	r1, r2, #5
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	440a      	add	r2, r1
 8002e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e50:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	015a      	lsls	r2, r3, #5
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4413      	add	r3, r2
 8002e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5e:	461a      	mov	r2, r3
 8002e60:	2301      	movs	r3, #1
 8002e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	334d      	adds	r3, #77	@ 0x4d
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 f854 	bl	8005f2e <USB_HC_Halt>
 8002e86:	e34b      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 faa9 	bl	80053e8 <USB_ReadChInterrupts>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9c:	2b40      	cmp	r3, #64	@ 0x40
 8002e9e:	d139      	bne.n	8002f14 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	334d      	adds	r3, #77	@ 0x4d
 8002eb0:	2205      	movs	r2, #5
 8002eb2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	331a      	adds	r3, #26
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	3319      	adds	r3, #25
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	3344      	adds	r3, #68	@ 0x44
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 f817 	bl	8005f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	2340      	movs	r3, #64	@ 0x40
 8002f10:	6093      	str	r3, [r2, #8]
 8002f12:	e305      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	78fa      	ldrb	r2, [r7, #3]
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f002 fa63 	bl	80053e8 <USB_ReadChInterrupts>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d11a      	bne.n	8002f62 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f38:	461a      	mov	r2, r3
 8002f3a:	2308      	movs	r3, #8
 8002f3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	6879      	ldr	r1, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	011b      	lsls	r3, r3, #4
 8002f46:	1a9b      	subs	r3, r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	334d      	adds	r3, #77	@ 0x4d
 8002f4e:	2206      	movs	r2, #6
 8002f50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	4611      	mov	r1, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f002 ffe7 	bl	8005f2e <USB_HC_Halt>
 8002f60:	e2de      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	4611      	mov	r1, r2
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fa3c 	bl	80053e8 <USB_ReadChInterrupts>
 8002f70:	4603      	mov	r3, r0
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	2b10      	cmp	r3, #16
 8002f78:	d144      	bne.n	8003004 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3344      	adds	r3, #68	@ 0x44
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	334d      	adds	r3, #77	@ 0x4d
 8002f9e:	2204      	movs	r2, #4
 8002fa0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	3319      	adds	r3, #25
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d114      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002fb8:	78fa      	ldrb	r2, [r7, #3]
 8002fba:	6879      	ldr	r1, [r7, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	011b      	lsls	r3, r3, #4
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d109      	bne.n	8002fe2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	6879      	ldr	r1, [r7, #4]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	011b      	lsls	r3, r3, #4
 8002fd6:	1a9b      	subs	r3, r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	440b      	add	r3, r1
 8002fdc:	3319      	adds	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f002 ff9f 	bl	8005f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2310      	movs	r3, #16
 8003000:	6093      	str	r3, [r2, #8]
 8003002:	e28d      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	4611      	mov	r1, r2
 800300c:	4618      	mov	r0, r3
 800300e:	f002 f9eb 	bl	80053e8 <USB_ReadChInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003018:	2b80      	cmp	r3, #128	@ 0x80
 800301a:	d169      	bne.n	80030f0 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	799b      	ldrb	r3, [r3, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d111      	bne.n	8003048 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334d      	adds	r3, #77	@ 0x4d
 8003034:	2207      	movs	r2, #7
 8003036:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f002 ff74 	bl	8005f2e <USB_HC_Halt>
 8003046:	e049      	b.n	80030dc <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	3344      	adds	r3, #68	@ 0x44
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	1c59      	adds	r1, r3, #1
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	011b      	lsls	r3, r3, #4
 8003062:	1a9b      	subs	r3, r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4403      	add	r3, r0
 8003068:	3344      	adds	r3, #68	@ 0x44
 800306a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	3344      	adds	r3, #68	@ 0x44
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d922      	bls.n	80030c8 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003082:	78fa      	ldrb	r2, [r7, #3]
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	4613      	mov	r3, r2
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	1a9b      	subs	r3, r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	3344      	adds	r3, #68	@ 0x44
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	334c      	adds	r3, #76	@ 0x4c
 80030a6:	2204      	movs	r2, #4
 80030a8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	334c      	adds	r3, #76	@ 0x4c
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f005 fa8d 	bl	80085e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030c6:	e009      	b.n	80030dc <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334c      	adds	r3, #76	@ 0x4c
 80030d8:	2202      	movs	r2, #2
 80030da:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	015a      	lsls	r2, r3, #5
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	4413      	add	r3, r2
 80030e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e8:	461a      	mov	r2, r3
 80030ea:	2380      	movs	r3, #128	@ 0x80
 80030ec:	6093      	str	r3, [r2, #8]
 80030ee:	e217      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f002 f975 	bl	80053e8 <USB_ReadChInterrupts>
 80030fe:	4603      	mov	r3, r0
 8003100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003108:	d11b      	bne.n	8003142 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334d      	adds	r3, #77	@ 0x4d
 800311a:	2209      	movs	r2, #9
 800311c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f002 ff01 	bl	8005f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800312c:	78fb      	ldrb	r3, [r7, #3]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003138:	461a      	mov	r2, r3
 800313a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800313e:	6093      	str	r3, [r2, #8]
 8003140:	e1ee      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f002 f94c 	bl	80053e8 <USB_ReadChInterrupts>
 8003150:	4603      	mov	r3, r0
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b02      	cmp	r3, #2
 8003158:	f040 81df 	bne.w	800351a <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003168:	461a      	mov	r2, r3
 800316a:	2302      	movs	r3, #2
 800316c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	334d      	adds	r3, #77	@ 0x4d
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b01      	cmp	r3, #1
 8003182:	f040 8093 	bne.w	80032ac <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	334d      	adds	r3, #77	@ 0x4d
 8003196:	2202      	movs	r2, #2
 8003198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800319a:	78fa      	ldrb	r2, [r7, #3]
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	4613      	mov	r3, r2
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	440b      	add	r3, r1
 80031a8:	334c      	adds	r3, #76	@ 0x4c
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3326      	adds	r3, #38	@ 0x26
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d00b      	beq.n	80031dc <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	3326      	adds	r3, #38	@ 0x26
 80031d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	f040 8190 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	799b      	ldrb	r3, [r3, #6]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d115      	bne.n	8003210 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	333d      	adds	r3, #61	@ 0x3d
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2d8      	uxtb	r0, r3
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	333d      	adds	r3, #61	@ 0x3d
 800320c:	4602      	mov	r2, r0
 800320e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	799b      	ldrb	r3, [r3, #6]
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 8171 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x920>
 800321a:	78fa      	ldrb	r2, [r7, #3]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	011b      	lsls	r3, r3, #4
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	3334      	adds	r3, #52	@ 0x34
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8165 	beq.w	80034fc <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3334      	adds	r3, #52	@ 0x34
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4403      	add	r3, r0
 8003252:	3328      	adds	r3, #40	@ 0x28
 8003254:	881b      	ldrh	r3, [r3, #0]
 8003256:	440b      	add	r3, r1
 8003258:	1e59      	subs	r1, r3, #1
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4403      	add	r3, r0
 8003268:	3328      	adds	r3, #40	@ 0x28
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003270:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 813f 	beq.w	80034fc <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	333d      	adds	r3, #61	@ 0x3d
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	f083 0301 	eor.w	r3, r3, #1
 8003296:	b2d8      	uxtb	r0, r3
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	333d      	adds	r3, #61	@ 0x3d
 80032a6:	4602      	mov	r2, r0
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e127      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b03      	cmp	r3, #3
 80032c0:	d120      	bne.n	8003304 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334d      	adds	r3, #77	@ 0x4d
 80032d2:	2202      	movs	r2, #2
 80032d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	331b      	adds	r3, #27
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	f040 8107 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	1a9b      	subs	r3, r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334c      	adds	r3, #76	@ 0x4c
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
 8003302:	e0fb      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334d      	adds	r3, #77	@ 0x4d
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b04      	cmp	r3, #4
 8003318:	d13a      	bne.n	8003390 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334d      	adds	r3, #77	@ 0x4d
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334c      	adds	r3, #76	@ 0x4c
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	331b      	adds	r3, #27
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b01      	cmp	r3, #1
 8003356:	f040 80d1 	bne.w	80034fc <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	331b      	adds	r3, #27
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800336e:	78fb      	ldrb	r3, [r7, #3]
 8003370:	015a      	lsls	r2, r3, #5
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4413      	add	r3, r2
 8003376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	0151      	lsls	r1, r2, #5
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	440a      	add	r2, r1
 8003384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800338c:	6053      	str	r3, [r2, #4]
 800338e:	e0b5      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	011b      	lsls	r3, r3, #4
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334d      	adds	r3, #77	@ 0x4d
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b05      	cmp	r3, #5
 80033a4:	d114      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033a6:	78fa      	ldrb	r2, [r7, #3]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	1a9b      	subs	r3, r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	440b      	add	r3, r1
 80033b4:	334d      	adds	r3, #77	@ 0x4d
 80033b6:	2202      	movs	r2, #2
 80033b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80033ba:	78fa      	ldrb	r2, [r7, #3]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	1a9b      	subs	r3, r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	334c      	adds	r3, #76	@ 0x4c
 80033ca:	2202      	movs	r2, #2
 80033cc:	701a      	strb	r2, [r3, #0]
 80033ce:	e095      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	334d      	adds	r3, #77	@ 0x4d
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b06      	cmp	r3, #6
 80033e4:	d114      	bne.n	8003410 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	334d      	adds	r3, #77	@ 0x4d
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	334c      	adds	r3, #76	@ 0x4c
 800340a:	2205      	movs	r2, #5
 800340c:	701a      	strb	r2, [r3, #0]
 800340e:	e075      	b.n	80034fc <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	334d      	adds	r3, #77	@ 0x4d
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b07      	cmp	r3, #7
 8003424:	d00a      	beq.n	800343c <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334d      	adds	r3, #77	@ 0x4d
 8003436:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003438:	2b09      	cmp	r3, #9
 800343a:	d170      	bne.n	800351e <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334d      	adds	r3, #77	@ 0x4d
 800344c:	2202      	movs	r2, #2
 800344e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3344      	adds	r3, #68	@ 0x44
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1c59      	adds	r1, r3, #1
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	011b      	lsls	r3, r3, #4
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4403      	add	r3, r0
 8003470:	3344      	adds	r3, #68	@ 0x44
 8003472:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3344      	adds	r3, #68	@ 0x44
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d914      	bls.n	80034b4 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3344      	adds	r3, #68	@ 0x44
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	334c      	adds	r3, #76	@ 0x4c
 80034ae:	2204      	movs	r2, #4
 80034b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b2:	e022      	b.n	80034fa <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334c      	adds	r3, #76	@ 0x4c
 80034c4:	2202      	movs	r2, #2
 80034c6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80034c8:	78fb      	ldrb	r3, [r7, #3]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034f4:	461a      	mov	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034fa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80034fc:	78fa      	ldrb	r2, [r7, #3]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	011b      	lsls	r3, r3, #4
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	334c      	adds	r3, #76	@ 0x4c
 800350c:	781a      	ldrb	r2, [r3, #0]
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	4619      	mov	r1, r3
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f005 f864 	bl	80085e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003518:	e002      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800351a:	bf00      	nop
 800351c:	e000      	b.n	8003520 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 800351e:	bf00      	nop
  }
}
 8003520:	3718      	adds	r7, #24
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08a      	sub	sp, #40	@ 0x28
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003536:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	0c5b      	lsrs	r3, r3, #17
 800354c:	f003 030f 	and.w	r3, r3, #15
 8003550:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800355a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d004      	beq.n	800356c <HCD_RXQLVL_IRQHandler+0x46>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b05      	cmp	r3, #5
 8003566:	f000 80b6 	beq.w	80036d6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800356a:	e0b7      	b.n	80036dc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 80b3 	beq.w	80036da <HCD_RXQLVL_IRQHandler+0x1b4>
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4613      	mov	r3, r2
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	1a9b      	subs	r3, r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	440b      	add	r3, r1
 8003582:	332c      	adds	r3, #44	@ 0x2c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	f000 80a7 	beq.w	80036da <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3338      	adds	r3, #56	@ 0x38
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	18d1      	adds	r1, r2, r3
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4403      	add	r3, r0
 80035b0:	3334      	adds	r3, #52	@ 0x34
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4299      	cmp	r1, r3
 80035b6:	f200 8083 	bhi.w	80036c0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6818      	ldr	r0, [r3, #0]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	332c      	adds	r3, #44	@ 0x2c
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	b292      	uxth	r2, r2
 80035d4:	4619      	mov	r1, r3
 80035d6:	f001 fe9c 	bl	8005312 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	332c      	adds	r3, #44	@ 0x2c
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	18d1      	adds	r1, r2, r3
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4403      	add	r3, r0
 80035fe:	332c      	adds	r3, #44	@ 0x2c
 8003600:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3338      	adds	r3, #56	@ 0x38
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	18d1      	adds	r1, r2, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4613      	mov	r3, r2
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	1a9b      	subs	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4403      	add	r3, r0
 8003626:	3338      	adds	r3, #56	@ 0x38
 8003628:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	0cdb      	lsrs	r3, r3, #19
 800363a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4613      	mov	r3, r2
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	1a9b      	subs	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	3328      	adds	r3, #40	@ 0x28
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	461a      	mov	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4293      	cmp	r3, r2
 8003658:	d13f      	bne.n	80036da <HCD_RXQLVL_IRQHandler+0x1b4>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03c      	beq.n	80036da <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	4413      	add	r3, r2
 8003668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003676:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800367e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	4413      	add	r3, r2
 8003688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800368c:	461a      	mov	r2, r3
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	333c      	adds	r3, #60	@ 0x3c
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2d8      	uxtb	r0, r3
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	333c      	adds	r3, #60	@ 0x3c
 80036ba:	4602      	mov	r2, r0
 80036bc:	701a      	strb	r2, [r3, #0]
      break;
 80036be:	e00c      	b.n	80036da <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80036c0:	6879      	ldr	r1, [r7, #4]
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334c      	adds	r3, #76	@ 0x4c
 80036d0:	2204      	movs	r2, #4
 80036d2:	701a      	strb	r2, [r3, #0]
      break;
 80036d4:	e001      	b.n	80036da <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80036d6:	bf00      	nop
 80036d8:	e000      	b.n	80036dc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80036da:	bf00      	nop
  }
}
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	@ 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003710:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d10b      	bne.n	8003734 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d102      	bne.n	800372c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f004 ff3e 	bl	80085a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0308 	and.w	r3, r3, #8
 800373a:	2b08      	cmp	r3, #8
 800373c:	d132      	bne.n	80037a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	f043 0308 	orr.w	r3, r3, #8
 8003744:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b04      	cmp	r3, #4
 800374e:	d126      	bne.n	800379e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7a5b      	ldrb	r3, [r3, #9]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d113      	bne.n	8003780 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800375e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003762:	d106      	bne.n	8003772 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2102      	movs	r1, #2
 800376a:	4618      	mov	r0, r3
 800376c:	f001 ff60 	bl	8005630 <USB_InitFSLSPClkSel>
 8003770:	e011      	b.n	8003796 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2101      	movs	r1, #1
 8003778:	4618      	mov	r0, r3
 800377a:	f001 ff59 	bl	8005630 <USB_InitFSLSPClkSel>
 800377e:	e00a      	b.n	8003796 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	79db      	ldrb	r3, [r3, #7]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d106      	bne.n	8003796 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800378e:	461a      	mov	r2, r3
 8003790:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003794:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f004 ff30 	bl	80085fc <HAL_HCD_PortEnabled_Callback>
 800379c:	e002      	b.n	80037a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f004 ff3a 	bl	8008618 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d103      	bne.n	80037b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f043 0320 	orr.w	r3, r3, #32
 80037b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80037bc:	461a      	mov	r2, r3
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	6013      	str	r3, [r2, #0]
}
 80037c2:	bf00      	nop
 80037c4:	3718      	adds	r7, #24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
	...

080037cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d101      	bne.n	80037de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e12b      	b.n	8003a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd f930 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	@ 0x24
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 0201 	bic.w	r2, r2, #1
 800380e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800381e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800382e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003830:	f001 fa20 	bl	8004c74 <HAL_RCC_GetPCLK1Freq>
 8003834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	4a81      	ldr	r2, [pc, #516]	@ (8003a40 <HAL_I2C_Init+0x274>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d807      	bhi.n	8003850 <HAL_I2C_Init+0x84>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4a80      	ldr	r2, [pc, #512]	@ (8003a44 <HAL_I2C_Init+0x278>)
 8003844:	4293      	cmp	r3, r2
 8003846:	bf94      	ite	ls
 8003848:	2301      	movls	r3, #1
 800384a:	2300      	movhi	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e006      	b.n	800385e <HAL_I2C_Init+0x92>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a7d      	ldr	r2, [pc, #500]	@ (8003a48 <HAL_I2C_Init+0x27c>)
 8003854:	4293      	cmp	r3, r2
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0e7      	b.n	8003a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a78      	ldr	r2, [pc, #480]	@ (8003a4c <HAL_I2C_Init+0x280>)
 800386a:	fba2 2303 	umull	r2, r3, r2, r3
 800386e:	0c9b      	lsrs	r3, r3, #18
 8003870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a6a      	ldr	r2, [pc, #424]	@ (8003a40 <HAL_I2C_Init+0x274>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d802      	bhi.n	80038a0 <HAL_I2C_Init+0xd4>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	3301      	adds	r3, #1
 800389e:	e009      	b.n	80038b4 <HAL_I2C_Init+0xe8>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	4a69      	ldr	r2, [pc, #420]	@ (8003a50 <HAL_I2C_Init+0x284>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	3301      	adds	r3, #1
 80038b4:	687a      	ldr	r2, [r7, #4]
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	495c      	ldr	r1, [pc, #368]	@ (8003a40 <HAL_I2C_Init+0x274>)
 80038d0:	428b      	cmp	r3, r1
 80038d2:	d819      	bhi.n	8003908 <HAL_I2C_Init+0x13c>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e59      	subs	r1, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e2:	1c59      	adds	r1, r3, #1
 80038e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038e8:	400b      	ands	r3, r1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d00a      	beq.n	8003904 <HAL_I2C_Init+0x138>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	1e59      	subs	r1, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	e051      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003904:	2304      	movs	r3, #4
 8003906:	e04f      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d111      	bne.n	8003934 <HAL_I2C_Init+0x168>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	440b      	add	r3, r1
 800391e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003922:	3301      	adds	r3, #1
 8003924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	e012      	b.n	800395a <HAL_I2C_Init+0x18e>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	1e58      	subs	r0, r3, #1
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6859      	ldr	r1, [r3, #4]
 800393c:	460b      	mov	r3, r1
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	0099      	lsls	r1, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	fbb0 f3f3 	udiv	r3, r0, r3
 800394a:	3301      	adds	r3, #1
 800394c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003950:	2b00      	cmp	r3, #0
 8003952:	bf0c      	ite	eq
 8003954:	2301      	moveq	r3, #1
 8003956:	2300      	movne	r3, #0
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d001      	beq.n	8003962 <HAL_I2C_Init+0x196>
 800395e:	2301      	movs	r3, #1
 8003960:	e022      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10e      	bne.n	8003988 <HAL_I2C_Init+0x1bc>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e58      	subs	r0, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6859      	ldr	r1, [r3, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	440b      	add	r3, r1
 8003978:	fbb0 f3f3 	udiv	r3, r0, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003986:	e00f      	b.n	80039a8 <HAL_I2C_Init+0x1dc>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1e58      	subs	r0, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6859      	ldr	r1, [r3, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	0099      	lsls	r1, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	6809      	ldr	r1, [r1, #0]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69da      	ldr	r2, [r3, #28]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6911      	ldr	r1, [r2, #16]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68d2      	ldr	r2, [r2, #12]
 80039e2:	4311      	orrs	r1, r2
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6812      	ldr	r2, [r2, #0]
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	000186a0 	.word	0x000186a0
 8003a44:	001e847f 	.word	0x001e847f
 8003a48:	003d08ff 	.word	0x003d08ff
 8003a4c:	431bde83 	.word	0x431bde83
 8003a50:	10624dd3 	.word	0x10624dd3

08003a54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e128      	b.n	8003cb8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a90      	ldr	r2, [pc, #576]	@ (8003cc0 <HAL_I2S_Init+0x26c>)
 8003a7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fd f831 	bl	8000ae8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6812      	ldr	r2, [r2, #0]
 8003a98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a9c:	f023 030f 	bic.w	r3, r3, #15
 8003aa0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d060      	beq.n	8003b74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d102      	bne.n	8003ac0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003aba:	2310      	movs	r3, #16
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	e001      	b.n	8003ac4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ac0:	2320      	movs	r3, #32
 8003ac2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	d802      	bhi.n	8003ad2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f001 f9c4 	bl	8004e60 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ad8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ae2:	d125      	bne.n	8003b30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d010      	beq.n	8003b0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8003af6:	4613      	mov	r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	461a      	mov	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	3305      	adds	r3, #5
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	e01f      	b.n	8003b4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	00db      	lsls	r3, r3, #3
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	461a      	mov	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	3305      	adds	r3, #5
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e00e      	b.n	8003b4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	461a      	mov	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4a:	3305      	adds	r3, #5
 8003b4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4a5c      	ldr	r2, [pc, #368]	@ (8003cc4 <HAL_I2S_Init+0x270>)
 8003b52:	fba2 2303 	umull	r2, r3, r2, r3
 8003b56:	08db      	lsrs	r3, r3, #3
 8003b58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f003 0301 	and.w	r3, r3, #1
 8003b60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	e003      	b.n	8003b7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b74:	2302      	movs	r3, #2
 8003b76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d902      	bls.n	8003b88 <HAL_I2S_Init+0x134>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2bff      	cmp	r3, #255	@ 0xff
 8003b86:	d907      	bls.n	8003b98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8c:	f043 0210 	orr.w	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e08f      	b.n	8003cb8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	69db      	ldr	r3, [r3, #28]
 8003bb2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003bb6:	f023 030f 	bic.w	r3, r3, #15
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6851      	ldr	r1, [r2, #4]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6892      	ldr	r2, [r2, #8]
 8003bc2:	4311      	orrs	r1, r2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68d2      	ldr	r2, [r2, #12]
 8003bc8:	4311      	orrs	r1, r2
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	6992      	ldr	r2, [r2, #24]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a1b      	ldr	r3, [r3, #32]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d161      	bne.n	8003ca8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a38      	ldr	r2, [pc, #224]	@ (8003cc8 <HAL_I2S_Init+0x274>)
 8003be8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a37      	ldr	r2, [pc, #220]	@ (8003ccc <HAL_I2S_Init+0x278>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_I2S_Init+0x1a4>
 8003bf4:	4b36      	ldr	r3, [pc, #216]	@ (8003cd0 <HAL_I2S_Init+0x27c>)
 8003bf6:	e001      	b.n	8003bfc <HAL_I2S_Init+0x1a8>
 8003bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	4932      	ldr	r1, [pc, #200]	@ (8003ccc <HAL_I2S_Init+0x278>)
 8003c04:	428a      	cmp	r2, r1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2S_Init+0x1b8>
 8003c08:	4a31      	ldr	r2, [pc, #196]	@ (8003cd0 <HAL_I2S_Init+0x27c>)
 8003c0a:	e001      	b.n	8003c10 <HAL_I2S_Init+0x1bc>
 8003c0c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c10:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c14:	f023 030f 	bic.w	r3, r3, #15
 8003c18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003ccc <HAL_I2S_Init+0x278>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d101      	bne.n	8003c28 <HAL_I2S_Init+0x1d4>
 8003c24:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd0 <HAL_I2S_Init+0x27c>)
 8003c26:	e001      	b.n	8003c2c <HAL_I2S_Init+0x1d8>
 8003c28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	@ (8003ccc <HAL_I2S_Init+0x278>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d101      	bne.n	8003c3e <HAL_I2S_Init+0x1ea>
 8003c3a:	4b25      	ldr	r3, [pc, #148]	@ (8003cd0 <HAL_I2S_Init+0x27c>)
 8003c3c:	e001      	b.n	8003c42 <HAL_I2S_Init+0x1ee>
 8003c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4e:	d003      	beq.n	8003c58 <HAL_I2S_Init+0x204>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d103      	bne.n	8003c60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	e001      	b.n	8003c64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c82:	4313      	orrs	r3, r2
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	897b      	ldrh	r3, [r7, #10]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <HAL_I2S_Init+0x278>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d101      	bne.n	8003ca0 <HAL_I2S_Init+0x24c>
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <HAL_I2S_Init+0x27c>)
 8003c9e:	e001      	b.n	8003ca4 <HAL_I2S_Init+0x250>
 8003ca0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ca4:	897a      	ldrh	r2, [r7, #10]
 8003ca6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3720      	adds	r7, #32
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	08003dcb 	.word	0x08003dcb
 8003cc4:	cccccccd 	.word	0xcccccccd
 8003cc8:	08003ee1 	.word	0x08003ee1
 8003ccc:	40003800 	.word	0x40003800
 8003cd0:	40003400 	.word	0x40003400

08003cd4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1c:	881a      	ldrh	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	1c9a      	adds	r2, r3, #2
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10e      	bne.n	8003d64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7ff ffb8 	bl	8003cd4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d64:	bf00      	nop
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7e:	b292      	uxth	r2, r2
 8003d80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d86:	1c9a      	adds	r2, r3, #2
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10e      	bne.n	8003dc2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003db2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff93 	bl	8003ce8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b086      	sub	sp, #24
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d13a      	bne.n	8003e5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0301 	and.w	r3, r3, #1
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d109      	bne.n	8003e04 <I2S_IRQHandler+0x3a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b40      	cmp	r3, #64	@ 0x40
 8003dfc:	d102      	bne.n	8003e04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f7ff ffb4 	bl	8003d6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e0a:	2b40      	cmp	r3, #64	@ 0x40
 8003e0c:	d126      	bne.n	8003e5c <I2S_IRQHandler+0x92>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0320 	and.w	r3, r3, #32
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d11f      	bne.n	8003e5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	613b      	str	r3, [r7, #16]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff50 	bl	8003cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b03      	cmp	r3, #3
 8003e66:	d136      	bne.n	8003ed6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d109      	bne.n	8003e86 <I2S_IRQHandler+0xbc>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	2b80      	cmp	r3, #128	@ 0x80
 8003e7e:	d102      	bne.n	8003e86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ff45 	bl	8003d10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0308 	and.w	r3, r3, #8
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d122      	bne.n	8003ed6 <I2S_IRQHandler+0x10c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0320 	and.w	r3, r3, #32
 8003e9a:	2b20      	cmp	r3, #32
 8003e9c:	d11b      	bne.n	8003ed6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003eac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec8:	f043 0204 	orr.w	r2, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ff13 	bl	8003cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
	...

08003ee0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b088      	sub	sp, #32
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a92      	ldr	r2, [pc, #584]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d101      	bne.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003efa:	4b92      	ldr	r3, [pc, #584]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003efc:	e001      	b.n	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003efe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a8b      	ldr	r2, [pc, #556]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d101      	bne.n	8003f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f18:	4b8a      	ldr	r3, [pc, #552]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f1a:	e001      	b.n	8003f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f2c:	d004      	beq.n	8003f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 8099 	bne.w	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d107      	bne.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f925 	bl	800419c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d107      	bne.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f9c8 	bl	80042fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d13a      	bne.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	f003 0320 	and.w	r3, r3, #32
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d035      	beq.n	8003fec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6e      	ldr	r2, [pc, #440]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d101      	bne.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f8c:	e001      	b.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4969      	ldr	r1, [pc, #420]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f9a:	428b      	cmp	r3, r1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f9e:	4b69      	ldr	r3, [pc, #420]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa0:	e001      	b.n	8003fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003fa2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003faa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685a      	ldr	r2, [r3, #4]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003fba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fde:	f043 0202 	orr.w	r2, r3, #2
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fe88 	bl	8003cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	f040 80c3 	bne.w	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 80bd 	beq.w	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004012:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a49      	ldr	r2, [pc, #292]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800401e:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004020:	e001      	b.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004022:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4944      	ldr	r1, [pc, #272]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800402e:	428b      	cmp	r3, r1
 8004030:	d101      	bne.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004032:	4b44      	ldr	r3, [pc, #272]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004034:	e001      	b.n	800403a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004036:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800403a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800403e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405a:	f043 0204 	orr.w	r2, r3, #4
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fe4a 	bl	8003cfc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004068:	e089      	b.n	800417e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b02      	cmp	r3, #2
 8004072:	d107      	bne.n	8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407a:	2b00      	cmp	r3, #0
 800407c:	d002      	beq.n	8004084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8be 	bl	8004200 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d107      	bne.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 f8fd 	bl	8004298 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a4:	2b40      	cmp	r3, #64	@ 0x40
 80040a6:	d12f      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d02a      	beq.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040ce:	e001      	b.n	80040d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80040d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4919      	ldr	r1, [pc, #100]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040dc:	428b      	cmp	r3, r1
 80040de:	d101      	bne.n	80040e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80040e0:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040e2:	e001      	b.n	80040e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80040e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fa:	f043 0202 	orr.w	r2, r3, #2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7ff fdfa 	bl	8003cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004108:	69bb      	ldr	r3, [r7, #24]
 800410a:	f003 0308 	and.w	r3, r3, #8
 800410e:	2b08      	cmp	r3, #8
 8004110:	d136      	bne.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d031      	beq.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a07      	ldr	r2, [pc, #28]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d101      	bne.n	800412a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004126:	4b07      	ldr	r3, [pc, #28]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004128:	e001      	b.n	800412e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800412a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4902      	ldr	r1, [pc, #8]	@ (8004140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004136:	428b      	cmp	r3, r1
 8004138:	d106      	bne.n	8004148 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800413a:	4b02      	ldr	r3, [pc, #8]	@ (8004144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800413c:	e006      	b.n	800414c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800413e:	bf00      	nop
 8004140:	40003800 	.word	0x40003800
 8004144:	40003400 	.word	0x40003400
 8004148:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800414c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004150:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685a      	ldr	r2, [r3, #4]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004160:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416e:	f043 0204 	orr.w	r2, r3, #4
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff fdc0 	bl	8003cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800417c:	e000      	b.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800417e:	bf00      	nop
}
 8004180:	bf00      	nop
 8004182:	3720      	adds	r7, #32
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a8:	1c99      	adds	r1, r3, #2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80041ae:	881a      	ldrh	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	3b01      	subs	r3, #1
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d113      	bne.n	80041f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d106      	bne.n	80041f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ffc9 	bl	8004188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420c:	1c99      	adds	r1, r3, #2
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	6251      	str	r1, [r2, #36]	@ 0x24
 8004212:	8819      	ldrh	r1, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1d      	ldr	r2, [pc, #116]	@ (8004290 <I2SEx_TxISR_I2SExt+0x90>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d101      	bne.n	8004222 <I2SEx_TxISR_I2SExt+0x22>
 800421e:	4b1d      	ldr	r3, [pc, #116]	@ (8004294 <I2SEx_TxISR_I2SExt+0x94>)
 8004220:	e001      	b.n	8004226 <I2SEx_TxISR_I2SExt+0x26>
 8004222:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004226:	460a      	mov	r2, r1
 8004228:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29a      	uxth	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d121      	bne.n	8004286 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a12      	ldr	r2, [pc, #72]	@ (8004290 <I2SEx_TxISR_I2SExt+0x90>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <I2SEx_TxISR_I2SExt+0x50>
 800424c:	4b11      	ldr	r3, [pc, #68]	@ (8004294 <I2SEx_TxISR_I2SExt+0x94>)
 800424e:	e001      	b.n	8004254 <I2SEx_TxISR_I2SExt+0x54>
 8004250:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	490d      	ldr	r1, [pc, #52]	@ (8004290 <I2SEx_TxISR_I2SExt+0x90>)
 800425c:	428b      	cmp	r3, r1
 800425e:	d101      	bne.n	8004264 <I2SEx_TxISR_I2SExt+0x64>
 8004260:	4b0c      	ldr	r3, [pc, #48]	@ (8004294 <I2SEx_TxISR_I2SExt+0x94>)
 8004262:	e001      	b.n	8004268 <I2SEx_TxISR_I2SExt+0x68>
 8004264:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004268:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800426c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f7ff ff81 	bl	8004188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004286:	bf00      	nop
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40003800 	.word	0x40003800
 8004294:	40003400 	.word	0x40003400

08004298 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68d8      	ldr	r0, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042aa:	1c99      	adds	r1, r3, #2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80042b0:	b282      	uxth	r2, r0
 80042b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	3b01      	subs	r3, #1
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d113      	bne.n	80042f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2201      	movs	r2, #1
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7ff ff4a 	bl	8004188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042f4:	bf00      	nop
 80042f6:	3708      	adds	r7, #8
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a20      	ldr	r2, [pc, #128]	@ (800438c <I2SEx_RxISR_I2SExt+0x90>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d101      	bne.n	8004312 <I2SEx_RxISR_I2SExt+0x16>
 800430e:	4b20      	ldr	r3, [pc, #128]	@ (8004390 <I2SEx_RxISR_I2SExt+0x94>)
 8004310:	e001      	b.n	8004316 <I2SEx_RxISR_I2SExt+0x1a>
 8004312:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004316:	68d8      	ldr	r0, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	1c99      	adds	r1, r3, #2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004322:	b282      	uxth	r2, r0
 8004324:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004338:	b29b      	uxth	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d121      	bne.n	8004382 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a12      	ldr	r2, [pc, #72]	@ (800438c <I2SEx_RxISR_I2SExt+0x90>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <I2SEx_RxISR_I2SExt+0x50>
 8004348:	4b11      	ldr	r3, [pc, #68]	@ (8004390 <I2SEx_RxISR_I2SExt+0x94>)
 800434a:	e001      	b.n	8004350 <I2SEx_RxISR_I2SExt+0x54>
 800434c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004350:	685a      	ldr	r2, [r3, #4]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	490d      	ldr	r1, [pc, #52]	@ (800438c <I2SEx_RxISR_I2SExt+0x90>)
 8004358:	428b      	cmp	r3, r1
 800435a:	d101      	bne.n	8004360 <I2SEx_RxISR_I2SExt+0x64>
 800435c:	4b0c      	ldr	r3, [pc, #48]	@ (8004390 <I2SEx_RxISR_I2SExt+0x94>)
 800435e:	e001      	b.n	8004364 <I2SEx_RxISR_I2SExt+0x68>
 8004360:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004364:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004368:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7ff ff03 	bl	8004188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40003800 	.word	0x40003800
 8004390:	40003400 	.word	0x40003400

08004394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e267      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d075      	beq.n	800449e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b2:	4b88      	ldr	r3, [pc, #544]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	d00c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043be:	4b85      	ldr	r3, [pc, #532]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d112      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ca:	4b82      	ldr	r3, [pc, #520]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043d6:	d10b      	bne.n	80043f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b7e      	ldr	r3, [pc, #504]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d05b      	beq.n	800449c <HAL_RCC_OscConfig+0x108>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d157      	bne.n	800449c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e242      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f8:	d106      	bne.n	8004408 <HAL_RCC_OscConfig+0x74>
 80043fa:	4b76      	ldr	r3, [pc, #472]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a75      	ldr	r2, [pc, #468]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e01d      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x98>
 8004412:	4b70      	ldr	r3, [pc, #448]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a6f      	ldr	r2, [pc, #444]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b6d      	ldr	r3, [pc, #436]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a6c      	ldr	r2, [pc, #432]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00b      	b.n	8004444 <HAL_RCC_OscConfig+0xb0>
 800442c:	4b69      	ldr	r3, [pc, #420]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a68      	ldr	r2, [pc, #416]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b66      	ldr	r3, [pc, #408]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a65      	ldr	r2, [pc, #404]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 800443e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d013      	beq.n	8004474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444c:	f7fc fd94 	bl	8000f78 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004454:	f7fc fd90 	bl	8000f78 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b64      	cmp	r3, #100	@ 0x64
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e207      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004466:	4b5b      	ldr	r3, [pc, #364]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f0      	beq.n	8004454 <HAL_RCC_OscConfig+0xc0>
 8004472:	e014      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004474:	f7fc fd80 	bl	8000f78 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800447c:	f7fc fd7c 	bl	8000f78 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b64      	cmp	r3, #100	@ 0x64
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e1f3      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448e:	4b51      	ldr	r3, [pc, #324]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0xe8>
 800449a:	e000      	b.n	800449e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0302 	and.w	r3, r3, #2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d063      	beq.n	8004572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044aa:	4b4a      	ldr	r3, [pc, #296]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00b      	beq.n	80044ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044b6:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d11c      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c2:	4b44      	ldr	r3, [pc, #272]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d116      	bne.n	80044fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ce:	4b41      	ldr	r3, [pc, #260]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d001      	beq.n	80044e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e1c7      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e6:	4b3b      	ldr	r3, [pc, #236]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4937      	ldr	r1, [pc, #220]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fa:	e03a      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d020      	beq.n	8004546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004504:	4b34      	ldr	r3, [pc, #208]	@ (80045d8 <HAL_RCC_OscConfig+0x244>)
 8004506:	2201      	movs	r2, #1
 8004508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450a:	f7fc fd35 	bl	8000f78 <HAL_GetTick>
 800450e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004510:	e008      	b.n	8004524 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004512:	f7fc fd31 	bl	8000f78 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b02      	cmp	r3, #2
 800451e:	d901      	bls.n	8004524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	e1a8      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d0f0      	beq.n	8004512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4925      	ldr	r1, [pc, #148]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004540:	4313      	orrs	r3, r2
 8004542:	600b      	str	r3, [r1, #0]
 8004544:	e015      	b.n	8004572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004546:	4b24      	ldr	r3, [pc, #144]	@ (80045d8 <HAL_RCC_OscConfig+0x244>)
 8004548:	2200      	movs	r2, #0
 800454a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fc fd14 	bl	8000f78 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004554:	f7fc fd10 	bl	8000f78 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e187      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	4b1b      	ldr	r3, [pc, #108]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0308 	and.w	r3, r3, #8
 800457a:	2b00      	cmp	r3, #0
 800457c:	d036      	beq.n	80045ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004586:	4b15      	ldr	r3, [pc, #84]	@ (80045dc <HAL_RCC_OscConfig+0x248>)
 8004588:	2201      	movs	r2, #1
 800458a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fc fcf4 	bl	8000f78 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004594:	f7fc fcf0 	bl	8000f78 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e167      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	4b0b      	ldr	r3, [pc, #44]	@ (80045d4 <HAL_RCC_OscConfig+0x240>)
 80045a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x200>
 80045b2:	e01b      	b.n	80045ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b4:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <HAL_RCC_OscConfig+0x248>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7fc fcdd 	bl	8000f78 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c0:	e00e      	b.n	80045e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c2:	f7fc fcd9 	bl	8000f78 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d907      	bls.n	80045e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e150      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	42470000 	.word	0x42470000
 80045dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045e0:	4b88      	ldr	r3, [pc, #544]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80045e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1ea      	bne.n	80045c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0304 	and.w	r3, r3, #4
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8097 	beq.w	8004728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045fa:	2300      	movs	r3, #0
 80045fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fe:	4b81      	ldr	r3, [pc, #516]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10f      	bne.n	800462a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	2300      	movs	r3, #0
 800460c:	60bb      	str	r3, [r7, #8]
 800460e:	4b7d      	ldr	r3, [pc, #500]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004612:	4a7c      	ldr	r2, [pc, #496]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004618:	6413      	str	r3, [r2, #64]	@ 0x40
 800461a:	4b7a      	ldr	r3, [pc, #488]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 800461c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004626:	2301      	movs	r3, #1
 8004628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b77      	ldr	r3, [pc, #476]	@ (8004808 <HAL_RCC_OscConfig+0x474>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004632:	2b00      	cmp	r3, #0
 8004634:	d118      	bne.n	8004668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004636:	4b74      	ldr	r3, [pc, #464]	@ (8004808 <HAL_RCC_OscConfig+0x474>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a73      	ldr	r2, [pc, #460]	@ (8004808 <HAL_RCC_OscConfig+0x474>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004642:	f7fc fc99 	bl	8000f78 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fc fc95 	bl	8000f78 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e10c      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	4b6a      	ldr	r3, [pc, #424]	@ (8004808 <HAL_RCC_OscConfig+0x474>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x2ea>
 8004670:	4b64      	ldr	r3, [pc, #400]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004674:	4a63      	ldr	r2, [pc, #396]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	6713      	str	r3, [r2, #112]	@ 0x70
 800467c:	e01c      	b.n	80046b8 <HAL_RCC_OscConfig+0x324>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b05      	cmp	r3, #5
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x30c>
 8004686:	4b5f      	ldr	r3, [pc, #380]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	4a5e      	ldr	r2, [pc, #376]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 800468c:	f043 0304 	orr.w	r3, r3, #4
 8004690:	6713      	str	r3, [r2, #112]	@ 0x70
 8004692:	4b5c      	ldr	r3, [pc, #368]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004696:	4a5b      	ldr	r2, [pc, #364]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004698:	f043 0301 	orr.w	r3, r3, #1
 800469c:	6713      	str	r3, [r2, #112]	@ 0x70
 800469e:	e00b      	b.n	80046b8 <HAL_RCC_OscConfig+0x324>
 80046a0:	4b58      	ldr	r3, [pc, #352]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a4:	4a57      	ldr	r2, [pc, #348]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80046ac:	4b55      	ldr	r3, [pc, #340]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046b0:	4a54      	ldr	r2, [pc, #336]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80046b2:	f023 0304 	bic.w	r3, r3, #4
 80046b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d015      	beq.n	80046ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c0:	f7fc fc5a 	bl	8000f78 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c6:	e00a      	b.n	80046de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c8:	f7fc fc56 	bl	8000f78 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d901      	bls.n	80046de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80046da:	2303      	movs	r3, #3
 80046dc:	e0cb      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046de:	4b49      	ldr	r3, [pc, #292]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80046e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0ee      	beq.n	80046c8 <HAL_RCC_OscConfig+0x334>
 80046ea:	e014      	b.n	8004716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ec:	f7fc fc44 	bl	8000f78 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f2:	e00a      	b.n	800470a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f4:	f7fc fc40 	bl	8000f78 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004702:	4293      	cmp	r3, r2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e0b5      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470a:	4b3e      	ldr	r3, [pc, #248]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1ee      	bne.n	80046f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b39      	ldr	r3, [pc, #228]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 800471e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004720:	4a38      	ldr	r2, [pc, #224]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004726:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a1 	beq.w	8004874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004732:	4b34      	ldr	r3, [pc, #208]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
 800473a:	2b08      	cmp	r3, #8
 800473c:	d05c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d141      	bne.n	80047ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b31      	ldr	r3, [pc, #196]	@ (800480c <HAL_RCC_OscConfig+0x478>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fc fc14 	bl	8000f78 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004754:	f7fc fc10 	bl	8000f78 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e087      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69da      	ldr	r2, [r3, #28]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a1b      	ldr	r3, [r3, #32]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	019b      	lsls	r3, r3, #6
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	085b      	lsrs	r3, r3, #1
 800478a:	3b01      	subs	r3, #1
 800478c:	041b      	lsls	r3, r3, #16
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004794:	061b      	lsls	r3, r3, #24
 8004796:	491b      	ldr	r1, [pc, #108]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 8004798:	4313      	orrs	r3, r2
 800479a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479c:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <HAL_RCC_OscConfig+0x478>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a2:	f7fc fbe9 	bl	8000f78 <HAL_GetTick>
 80047a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047aa:	f7fc fbe5 	bl	8000f78 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e05c      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCC_OscConfig+0x416>
 80047c8:	e054      	b.n	8004874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <HAL_RCC_OscConfig+0x478>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fc fbd2 	bl	8000f78 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fc fbce 	bl	8000f78 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e045      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	4b06      	ldr	r3, [pc, #24]	@ (8004804 <HAL_RCC_OscConfig+0x470>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x444>
 80047f6:	e03d      	b.n	8004874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e038      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
 8004804:	40023800 	.word	0x40023800
 8004808:	40007000 	.word	0x40007000
 800480c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004810:	4b1b      	ldr	r3, [pc, #108]	@ (8004880 <HAL_RCC_OscConfig+0x4ec>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d028      	beq.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004828:	429a      	cmp	r2, r3
 800482a:	d121      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d11a      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004848:	4293      	cmp	r3, r2
 800484a:	d111      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	3b01      	subs	r3, #1
 800485a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d107      	bne.n	8004870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800486c:	429a      	cmp	r2, r3
 800486e:	d001      	beq.n	8004874 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	40023800 	.word	0x40023800

08004884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0cc      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004898:	4b68      	ldr	r3, [pc, #416]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d90c      	bls.n	80048c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048a6:	4b65      	ldr	r3, [pc, #404]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b63      	ldr	r3, [pc, #396]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0307 	and.w	r3, r3, #7
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0b8      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d8:	4b59      	ldr	r3, [pc, #356]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	4a58      	ldr	r2, [pc, #352]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80048e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f0:	4b53      	ldr	r3, [pc, #332]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4a52      	ldr	r2, [pc, #328]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80048fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fc:	4b50      	ldr	r3, [pc, #320]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	494d      	ldr	r1, [pc, #308]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d044      	beq.n	80049a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b47      	ldr	r3, [pc, #284]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d119      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e07f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d003      	beq.n	8004942 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800493e:	2b03      	cmp	r3, #3
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	4b3f      	ldr	r3, [pc, #252]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e06f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004952:	4b3b      	ldr	r3, [pc, #236]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e067      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004962:	4b37      	ldr	r3, [pc, #220]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f023 0203 	bic.w	r2, r3, #3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	4934      	ldr	r1, [pc, #208]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004974:	f7fc fb00 	bl	8000f78 <HAL_GetTick>
 8004978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800497a:	e00a      	b.n	8004992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800497c:	f7fc fafc 	bl	8000f78 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498a:	4293      	cmp	r3, r2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e04f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004992:	4b2b      	ldr	r3, [pc, #172]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 020c 	and.w	r2, r3, #12
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1eb      	bne.n	800497c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049a4:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d20c      	bcs.n	80049cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049b2:	4b22      	ldr	r3, [pc, #136]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	683a      	ldr	r2, [r7, #0]
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	@ (8004a3c <HAL_RCC_ClockConfig+0x1b8>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0307 	and.w	r3, r3, #7
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e032      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4b19      	ldr	r3, [pc, #100]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4916      	ldr	r1, [pc, #88]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	490e      	ldr	r1, [pc, #56]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a0a:	f000 f821 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	4b0b      	ldr	r3, [pc, #44]	@ (8004a40 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	490a      	ldr	r1, [pc, #40]	@ (8004a44 <HAL_RCC_ClockConfig+0x1c0>)
 8004a1c:	5ccb      	ldrb	r3, [r1, r3]
 8004a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a22:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a26:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <HAL_RCC_ClockConfig+0x1c8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fc fa60 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00
 8004a40:	40023800 	.word	0x40023800
 8004a44:	080098c0 	.word	0x080098c0
 8004a48:	20000000 	.word	0x20000000
 8004a4c:	20000004 	.word	0x20000004

08004a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a54:	b094      	sub	sp, #80	@ 0x50
 8004a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a60:	2300      	movs	r3, #0
 8004a62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a68:	4b79      	ldr	r3, [pc, #484]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f003 030c 	and.w	r3, r3, #12
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d00d      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x40>
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	f200 80e1 	bhi.w	8004c3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d003      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a82:	e0db      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a84:	4b73      	ldr	r3, [pc, #460]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a86:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004a88:	e0db      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a8a:	4b73      	ldr	r3, [pc, #460]	@ (8004c58 <HAL_RCC_GetSysClockFreq+0x208>)
 8004a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a8e:	e0d8      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a90:	4b6f      	ldr	r3, [pc, #444]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d063      	beq.n	8004b6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	099b      	lsrs	r3, r3, #6
 8004aac:	2200      	movs	r2, #0
 8004aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ab0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004aba:	2300      	movs	r3, #0
 8004abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	462b      	mov	r3, r5
 8004ac6:	f04f 0000 	mov.w	r0, #0
 8004aca:	f04f 0100 	mov.w	r1, #0
 8004ace:	0159      	lsls	r1, r3, #5
 8004ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ad4:	0150      	lsls	r0, r2, #5
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	460b      	mov	r3, r1
 8004ada:	4621      	mov	r1, r4
 8004adc:	1a51      	subs	r1, r2, r1
 8004ade:	6139      	str	r1, [r7, #16]
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004af4:	4659      	mov	r1, fp
 8004af6:	018b      	lsls	r3, r1, #6
 8004af8:	4651      	mov	r1, sl
 8004afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004afe:	4651      	mov	r1, sl
 8004b00:	018a      	lsls	r2, r1, #6
 8004b02:	4651      	mov	r1, sl
 8004b04:	ebb2 0801 	subs.w	r8, r2, r1
 8004b08:	4659      	mov	r1, fp
 8004b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8004b0e:	f04f 0200 	mov.w	r2, #0
 8004b12:	f04f 0300 	mov.w	r3, #0
 8004b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b22:	4690      	mov	r8, r2
 8004b24:	4699      	mov	r9, r3
 8004b26:	4623      	mov	r3, r4
 8004b28:	eb18 0303 	adds.w	r3, r8, r3
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	462b      	mov	r3, r5
 8004b30:	eb49 0303 	adc.w	r3, r9, r3
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	f04f 0300 	mov.w	r3, #0
 8004b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004b42:	4629      	mov	r1, r5
 8004b44:	024b      	lsls	r3, r1, #9
 8004b46:	4621      	mov	r1, r4
 8004b48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b4c:	4621      	mov	r1, r4
 8004b4e:	024a      	lsls	r2, r1, #9
 8004b50:	4610      	mov	r0, r2
 8004b52:	4619      	mov	r1, r3
 8004b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b56:	2200      	movs	r2, #0
 8004b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b60:	f7fb fb86 	bl	8000270 <__aeabi_uldivmod>
 8004b64:	4602      	mov	r2, r0
 8004b66:	460b      	mov	r3, r1
 8004b68:	4613      	mov	r3, r2
 8004b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b6c:	e058      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6e:	4b38      	ldr	r3, [pc, #224]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	2200      	movs	r2, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	4611      	mov	r1, r2
 8004b7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004b7e:	623b      	str	r3, [r7, #32]
 8004b80:	2300      	movs	r3, #0
 8004b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004b88:	4642      	mov	r2, r8
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	f04f 0000 	mov.w	r0, #0
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	0159      	lsls	r1, r3, #5
 8004b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b9a:	0150      	lsls	r0, r2, #5
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	4641      	mov	r1, r8
 8004ba2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ba6:	4649      	mov	r1, r9
 8004ba8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004bac:	f04f 0200 	mov.w	r2, #0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8004bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	00eb      	lsls	r3, r5, #3
 8004bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bd6:	00e2      	lsls	r2, r4, #3
 8004bd8:	4614      	mov	r4, r2
 8004bda:	461d      	mov	r5, r3
 8004bdc:	4643      	mov	r3, r8
 8004bde:	18e3      	adds	r3, r4, r3
 8004be0:	603b      	str	r3, [r7, #0]
 8004be2:	464b      	mov	r3, r9
 8004be4:	eb45 0303 	adc.w	r3, r5, r3
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	f04f 0200 	mov.w	r2, #0
 8004bee:	f04f 0300 	mov.w	r3, #0
 8004bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	028b      	lsls	r3, r1, #10
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c00:	4621      	mov	r1, r4
 8004c02:	028a      	lsls	r2, r1, #10
 8004c04:	4610      	mov	r0, r2
 8004c06:	4619      	mov	r1, r3
 8004c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	61fa      	str	r2, [r7, #28]
 8004c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c14:	f7fb fb2c 	bl	8000270 <__aeabi_uldivmod>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	0c1b      	lsrs	r3, r3, #16
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004c30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4b05      	ldr	r3, [pc, #20]	@ (8004c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3750      	adds	r7, #80	@ 0x50
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c4e:	bf00      	nop
 8004c50:	40023800 	.word	0x40023800
 8004c54:	00f42400 	.word	0x00f42400
 8004c58:	007a1200 	.word	0x007a1200

08004c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c60:	4b03      	ldr	r3, [pc, #12]	@ (8004c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20000000 	.word	0x20000000

08004c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c78:	f7ff fff0 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	0a9b      	lsrs	r3, r3, #10
 8004c84:	f003 0307 	and.w	r3, r3, #7
 8004c88:	4903      	ldr	r1, [pc, #12]	@ (8004c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c8a:	5ccb      	ldrb	r3, [r1, r3]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40023800 	.word	0x40023800
 8004c98:	080098d0 	.word	0x080098d0

08004c9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d035      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cc4:	4b62      	ldr	r3, [pc, #392]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cca:	f7fc f955 	bl	8000f78 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004cd2:	f7fc f951 	bl	8000f78 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0b0      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	071b      	lsls	r3, r3, #28
 8004cfc:	4955      	ldr	r1, [pc, #340]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d04:	4b52      	ldr	r3, [pc, #328]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc f935 	bl	8000f78 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d12:	f7fc f931 	bl	8000f78 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e090      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d24:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8083 	beq.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	4b44      	ldr	r3, [pc, #272]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	4a43      	ldr	r2, [pc, #268]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d66:	f7fc f907 	bl	8000f78 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fc f903 	bl	8000f78 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e062      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004d80:	4b35      	ldr	r3, [pc, #212]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d8c:	4b31      	ldr	r3, [pc, #196]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02f      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d028      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004daa:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004db4:	4b29      	ldr	r3, [pc, #164]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dc0:	4a24      	ldr	r2, [pc, #144]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d114      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dd2:	f7fc f8d1 	bl	8000f78 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fc f8cd 	bl	8000f78 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e02a      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	4b18      	ldr	r3, [pc, #96]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ee      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e08:	d10d      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1e:	490d      	ldr	r1, [pc, #52]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
 8004e24:	e005      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e26:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3e:	4905      	ldr	r1, [pc, #20]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	42470068 	.word	0x42470068
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42470e40 	.word	0x42470e40

08004e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d13f      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e7e:	4b24      	ldr	r3, [pc, #144]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e86:	60fb      	str	r3, [r7, #12]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e94:	d12f      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e96:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e98:	617b      	str	r3, [r7, #20]
          break;
 8004e9a:	e02f      	b.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea8:	d108      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eaa:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb2:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e007      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ebc:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ecc:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
          break;
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
          break;
 8004efa:	bf00      	nop
        }
      }
      break;
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8004efe:	bf00      	nop
    }
  }
  return frequency;
 8004f00:	697b      	ldr	r3, [r7, #20]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	00bb8000 	.word	0x00bb8000
 8004f18:	007a1200 	.word	0x007a1200
 8004f1c:	00f42400 	.word	0x00f42400

08004f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07b      	b.n	800502a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f42:	d009      	beq.n	8004f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
 8004f4a:	e005      	b.n	8004f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fe38 	bl	8000be8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fdc:	ea42 0103 	orr.w	r1, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	f003 0104 	and.w	r1, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	f003 0210 	and.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005032:	b084      	sub	sp, #16
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	f107 001c 	add.w	r0, r7, #28
 8005040:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005044:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005048:	2b01      	cmp	r3, #1
 800504a:	d123      	bne.n	8005094 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005050:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005074:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 f9dc 	bl	8005446 <USB_CoreReset>
 800508e:	4603      	mov	r3, r0
 8005090:	73fb      	strb	r3, [r7, #15]
 8005092:	e01b      	b.n	80050cc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f9d0 	bl	8005446 <USB_CoreReset>
 80050a6:	4603      	mov	r3, r0
 80050a8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80050be:	e005      	b.n	80050cc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050cc:	7fbb      	ldrb	r3, [r7, #30]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d10b      	bne.n	80050ea <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f043 0206 	orr.w	r2, r3, #6
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f043 0220 	orr.w	r2, r3, #32
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050f6:	b004      	add	sp, #16
 80050f8:	4770      	bx	lr

080050fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f043 0201 	orr.w	r2, r3, #1
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 0201 	bic.w	r2, r3, #1
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800515a:	78fb      	ldrb	r3, [r7, #3]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d115      	bne.n	800518c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800516c:	200a      	movs	r0, #10
 800516e:	f7fb ff0f 	bl	8000f90 <HAL_Delay>
      ms += 10U;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	330a      	adds	r3, #10
 8005176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f956 	bl	800542a <USB_GetMode>
 800517e:	4603      	mov	r3, r0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d01e      	beq.n	80051c2 <USB_SetCurrentMode+0x84>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2bc7      	cmp	r3, #199	@ 0xc7
 8005188:	d9f0      	bls.n	800516c <USB_SetCurrentMode+0x2e>
 800518a:	e01a      	b.n	80051c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800518c:	78fb      	ldrb	r3, [r7, #3]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d115      	bne.n	80051be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800519e:	200a      	movs	r0, #10
 80051a0:	f7fb fef6 	bl	8000f90 <HAL_Delay>
      ms += 10U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	330a      	adds	r3, #10
 80051a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f93d 	bl	800542a <USB_GetMode>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <USB_SetCurrentMode+0x84>
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80051ba:	d9f0      	bls.n	800519e <USB_SetCurrentMode+0x60>
 80051bc:	e001      	b.n	80051c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e005      	b.n	80051ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80051c6:	d101      	bne.n	80051cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051e0:	2300      	movs	r3, #0
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3301      	adds	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051f0:	d901      	bls.n	80051f6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e01b      	b.n	800522e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	daf2      	bge.n	80051e4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051fe:	2300      	movs	r3, #0
 8005200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	019b      	lsls	r3, r3, #6
 8005206:	f043 0220 	orr.w	r2, r3, #32
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	3301      	adds	r3, #1
 8005212:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800521a:	d901      	bls.n	8005220 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e006      	b.n	800522e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d0f0      	beq.n	800520e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3301      	adds	r3, #1
 800524a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005252:	d901      	bls.n	8005258 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e018      	b.n	800528a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	daf2      	bge.n	8005246 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2210      	movs	r2, #16
 8005268:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3301      	adds	r3, #1
 800526e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005276:	d901      	bls.n	800527c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e006      	b.n	800528a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0310 	and.w	r3, r3, #16
 8005284:	2b10      	cmp	r3, #16
 8005286:	d0f0      	beq.n	800526a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3714      	adds	r7, #20
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005296:	b480      	push	{r7}
 8005298:	b089      	sub	sp, #36	@ 0x24
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	4611      	mov	r1, r2
 80052a2:	461a      	mov	r2, r3
 80052a4:	460b      	mov	r3, r1
 80052a6:	71fb      	strb	r3, [r7, #7]
 80052a8:	4613      	mov	r3, r2
 80052aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d123      	bne.n	8005304 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052bc:	88bb      	ldrh	r3, [r7, #4]
 80052be:	3303      	adds	r3, #3
 80052c0:	089b      	lsrs	r3, r3, #2
 80052c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052c4:	2300      	movs	r3, #0
 80052c6:	61bb      	str	r3, [r7, #24]
 80052c8:	e018      	b.n	80052fc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80052ca:	79fb      	ldrb	r3, [r7, #7]
 80052cc:	031a      	lsls	r2, r3, #12
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80052d6:	461a      	mov	r2, r3
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	3301      	adds	r3, #1
 80052e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3301      	adds	r3, #1
 80052ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	3301      	adds	r3, #1
 80052fa:	61bb      	str	r3, [r7, #24]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d3e2      	bcc.n	80052ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3724      	adds	r7, #36	@ 0x24
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005312:	b480      	push	{r7}
 8005314:	b08b      	sub	sp, #44	@ 0x2c
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	4613      	mov	r3, r2
 800531e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	089b      	lsrs	r3, r3, #2
 800532c:	b29b      	uxth	r3, r3
 800532e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005330:	88fb      	ldrh	r3, [r7, #6]
 8005332:	f003 0303 	and.w	r3, r3, #3
 8005336:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005338:	2300      	movs	r3, #0
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	e014      	b.n	8005368 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	601a      	str	r2, [r3, #0]
    pDest++;
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	3301      	adds	r3, #1
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	3301      	adds	r3, #1
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	3301      	adds	r3, #1
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800535c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535e:	3301      	adds	r3, #1
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	3301      	adds	r3, #1
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	6a3a      	ldr	r2, [r7, #32]
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	429a      	cmp	r2, r3
 800536e:	d3e6      	bcc.n	800533e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005370:	8bfb      	ldrh	r3, [r7, #30]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d01e      	beq.n	80053b4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005380:	461a      	mov	r2, r3
 8005382:	f107 0310 	add.w	r3, r7, #16
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	b2da      	uxtb	r2, r3
 8005398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539a:	701a      	strb	r2, [r3, #0]
      i++;
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	3301      	adds	r3, #1
 80053a0:	623b      	str	r3, [r7, #32]
      pDest++;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	3301      	adds	r3, #1
 80053a6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80053a8:	8bfb      	ldrh	r3, [r7, #30]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053ae:	8bfb      	ldrh	r3, [r7, #30]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ea      	bne.n	800538a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	372c      	adds	r7, #44	@ 0x2c
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b085      	sub	sp, #20
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	699b      	ldr	r3, [r3, #24]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4013      	ands	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053da:	68fb      	ldr	r3, [r7, #12]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	460b      	mov	r3, r1
 80053f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005408:	78fb      	ldrb	r3, [r7, #3]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	4013      	ands	r3, r2
 800541a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800541c:	68bb      	ldr	r3, [r7, #8]
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f003 0301 	and.w	r3, r3, #1
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005446:	b480      	push	{r7}
 8005448:	b085      	sub	sp, #20
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800544e:	2300      	movs	r3, #0
 8005450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3301      	adds	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800545e:	d901      	bls.n	8005464 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e01b      	b.n	800549c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	2b00      	cmp	r3, #0
 800546a:	daf2      	bge.n	8005452 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	f043 0201 	orr.w	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005488:	d901      	bls.n	800548e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e006      	b.n	800549c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	f003 0301 	and.w	r3, r3, #1
 8005496:	2b01      	cmp	r3, #1
 8005498:	d0f0      	beq.n	800547c <USB_CoreReset+0x36>

  return HAL_OK;
 800549a:	2300      	movs	r3, #0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3714      	adds	r7, #20
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr

080054a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a8:	b084      	sub	sp, #16
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b086      	sub	sp, #24
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
 80054b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054ba:	2300      	movs	r3, #0
 80054bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80054c8:	461a      	mov	r2, r3
 80054ca:	2300      	movs	r3, #0
 80054cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d119      	bne.n	8005532 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80054fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10a      	bne.n	800551c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005514:	f043 0304 	orr.w	r3, r3, #4
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	e014      	b.n	8005546 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800552a:	f023 0304 	bic.w	r3, r3, #4
 800552e:	6013      	str	r3, [r2, #0]
 8005530:	e009      	b.n	8005546 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005540:	f023 0304 	bic.w	r3, r3, #4
 8005544:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005546:	2110      	movs	r1, #16
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f7ff fe44 	bl	80051d6 <USB_FlushTxFifo>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff fe6e 	bl	800523a <USB_FlushRxFifo>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005568:	2300      	movs	r3, #0
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e015      	b.n	800559a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557a:	461a      	mov	r2, r3
 800557c:	f04f 33ff 	mov.w	r3, #4294967295
 8005580:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800558e:	461a      	mov	r2, r3
 8005590:	2300      	movs	r3, #0
 8005592:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	3301      	adds	r3, #1
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800559e:	461a      	mov	r2, r3
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d3e3      	bcc.n	800556e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f04f 32ff 	mov.w	r2, #4294967295
 80055b2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a18      	ldr	r2, [pc, #96]	@ (8005618 <USB_HostInit+0x170>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10b      	bne.n	80055d4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055c2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a15      	ldr	r2, [pc, #84]	@ (800561c <USB_HostInit+0x174>)
 80055c8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a14      	ldr	r2, [pc, #80]	@ (8005620 <USB_HostInit+0x178>)
 80055ce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80055d2:	e009      	b.n	80055e8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2280      	movs	r2, #128	@ 0x80
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a11      	ldr	r2, [pc, #68]	@ (8005624 <USB_HostInit+0x17c>)
 80055de:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a11      	ldr	r2, [pc, #68]	@ (8005628 <USB_HostInit+0x180>)
 80055e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	f043 0210 	orr.w	r2, r3, #16
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	699a      	ldr	r2, [r3, #24]
 8005600:	4b0a      	ldr	r3, [pc, #40]	@ (800562c <USB_HostInit+0x184>)
 8005602:	4313      	orrs	r3, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005608:	7dfb      	ldrb	r3, [r7, #23]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005614:	b004      	add	sp, #16
 8005616:	4770      	bx	lr
 8005618:	40040000 	.word	0x40040000
 800561c:	01000200 	.word	0x01000200
 8005620:	00e00300 	.word	0x00e00300
 8005624:	00600080 	.word	0x00600080
 8005628:	004000e0 	.word	0x004000e0
 800562c:	a3200008 	.word	0xa3200008

08005630 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800564e:	f023 0303 	bic.w	r3, r3, #3
 8005652:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	78fb      	ldrb	r3, [r7, #3]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	68f9      	ldr	r1, [r7, #12]
 8005664:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005668:	4313      	orrs	r3, r2
 800566a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800566c:	78fb      	ldrb	r3, [r7, #3]
 800566e:	2b01      	cmp	r3, #1
 8005670:	d107      	bne.n	8005682 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005678:	461a      	mov	r2, r3
 800567a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800567e:	6053      	str	r3, [r2, #4]
 8005680:	e00c      	b.n	800569c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005682:	78fb      	ldrb	r3, [r7, #3]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d107      	bne.n	8005698 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800568e:	461a      	mov	r2, r3
 8005690:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005694:	6053      	str	r3, [r2, #4]
 8005696:	e001      	b.n	800569c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e000      	b.n	800569e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b084      	sub	sp, #16
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80056ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80056da:	2064      	movs	r0, #100	@ 0x64
 80056dc:	f7fb fc58 	bl	8000f90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80056e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80056ee:	200a      	movs	r0, #10
 80056f0:	f7fb fc4e 	bl	8000f90 <HAL_Delay>

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005722:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <USB_DriveVbus+0x44>
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d106      	bne.n	8005742 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800573c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005740:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574c:	d109      	bne.n	8005762 <USB_DriveVbus+0x64>
 800574e:	78fb      	ldrb	r3, [r7, #3]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d106      	bne.n	8005762 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800575c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005760:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3714      	adds	r7, #20
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800577c:	2300      	movs	r3, #0
 800577e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	0c5b      	lsrs	r3, r3, #17
 800578e:	f003 0303 	and.w	r3, r3, #3
}
 8005792:	4618      	mov	r0, r3
 8005794:	3714      	adds	r7, #20
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr

0800579e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	b29b      	uxth	r3, r3
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b088      	sub	sp, #32
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	4608      	mov	r0, r1
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	70fb      	strb	r3, [r7, #3]
 80057d2:	460b      	mov	r3, r1
 80057d4:	70bb      	strb	r3, [r7, #2]
 80057d6:	4613      	mov	r3, r2
 80057d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	015a      	lsls	r2, r3, #5
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	4413      	add	r3, r2
 80057ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ee:	461a      	mov	r2, r3
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
 80057f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d87c      	bhi.n	80058f8 <USB_HC_Init+0x138>
 80057fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <USB_HC_Init+0x44>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005815 	.word	0x08005815
 8005808:	080058bb 	.word	0x080058bb
 800580c:	08005815 	.word	0x08005815
 8005810:	0800587d 	.word	0x0800587d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005814:	78fb      	ldrb	r3, [r7, #3]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	4413      	add	r3, r2
 800581c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005820:	461a      	mov	r2, r3
 8005822:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005826:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800582c:	2b00      	cmp	r3, #0
 800582e:	da10      	bge.n	8005852 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	015a      	lsls	r2, r3, #5
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	4413      	add	r3, r2
 8005838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	78fa      	ldrb	r2, [r7, #3]
 8005840:	0151      	lsls	r1, r2, #5
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	440a      	add	r2, r1
 8005846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800584a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005850:	e055      	b.n	80058fe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a6f      	ldr	r2, [pc, #444]	@ (8005a14 <USB_HC_Init+0x254>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d151      	bne.n	80058fe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800585a:	78fb      	ldrb	r3, [r7, #3]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	4413      	add	r3, r2
 8005862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	78fa      	ldrb	r2, [r7, #3]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	440a      	add	r2, r1
 8005870:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005874:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005878:	60d3      	str	r3, [r2, #12]
      break;
 800587a:	e040      	b.n	80058fe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	015a      	lsls	r2, r3, #5
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	4413      	add	r3, r2
 8005884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005888:	461a      	mov	r2, r3
 800588a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800588e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005894:	2b00      	cmp	r3, #0
 8005896:	da34      	bge.n	8005902 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005898:	78fb      	ldrb	r3, [r7, #3]
 800589a:	015a      	lsls	r2, r3, #5
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	4413      	add	r3, r2
 80058a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	78fa      	ldrb	r2, [r7, #3]
 80058a8:	0151      	lsls	r1, r2, #5
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	440a      	add	r2, r1
 80058ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058b8:	e023      	b.n	8005902 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c6:	461a      	mov	r2, r3
 80058c8:	f240 2325 	movw	r3, #549	@ 0x225
 80058cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	da17      	bge.n	8005906 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058f0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80058f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058f6:	e006      	b.n	8005906 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	77fb      	strb	r3, [r7, #31]
      break;
 80058fc:	e004      	b.n	8005908 <USB_HC_Init+0x148>
      break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <USB_HC_Init+0x148>
      break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <USB_HC_Init+0x148>
      break;
 8005906:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005908:	78fb      	ldrb	r3, [r7, #3]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005914:	461a      	mov	r2, r3
 8005916:	2300      	movs	r3, #0
 8005918:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800591a:	78fb      	ldrb	r3, [r7, #3]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	440a      	add	r2, r1
 8005930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005934:	f043 0302 	orr.w	r3, r3, #2
 8005938:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	2101      	movs	r1, #1
 800594a:	fa01 f303 	lsl.w	r3, r1, r3
 800594e:	6939      	ldr	r1, [r7, #16]
 8005950:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005954:	4313      	orrs	r3, r2
 8005956:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005964:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005968:	2b00      	cmp	r3, #0
 800596a:	da03      	bge.n	8005974 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800596c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005970:	61bb      	str	r3, [r7, #24]
 8005972:	e001      	b.n	8005978 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fef9 	bl	8005770 <USB_GetHostSpeed>
 800597e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005980:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005984:	2b02      	cmp	r3, #2
 8005986:	d106      	bne.n	8005996 <USB_HC_Init+0x1d6>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b02      	cmp	r3, #2
 800598c:	d003      	beq.n	8005996 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800598e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005992:	617b      	str	r3, [r7, #20]
 8005994:	e001      	b.n	800599a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005996:	2300      	movs	r3, #0
 8005998:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800599a:	787b      	ldrb	r3, [r7, #1]
 800599c:	059b      	lsls	r3, r3, #22
 800599e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059a2:	78bb      	ldrb	r3, [r7, #2]
 80059a4:	02db      	lsls	r3, r3, #11
 80059a6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059b0:	049b      	lsls	r3, r3, #18
 80059b2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80059b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80059b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80059ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059be:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059c8:	78fa      	ldrb	r2, [r7, #3]
 80059ca:	0151      	lsls	r1, r2, #5
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	440a      	add	r2, r1
 80059d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80059d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059d8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80059da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059de:	2b03      	cmp	r3, #3
 80059e0:	d003      	beq.n	80059ea <USB_HC_Init+0x22a>
 80059e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d10f      	bne.n	8005a0a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	78fa      	ldrb	r2, [r7, #3]
 80059fa:	0151      	lsls	r1, r2, #5
 80059fc:	693a      	ldr	r2, [r7, #16]
 80059fe:	440a      	add	r2, r1
 8005a00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40040000 	.word	0x40040000

08005a18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af02      	add	r7, sp, #8
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a34:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	4a5d      	ldr	r2, [pc, #372]	@ (8005bb0 <USB_HC_StartXfer+0x198>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d12f      	bne.n	8005a9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d11c      	bne.n	8005a7e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	7c9b      	ldrb	r3, [r3, #18]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <USB_HC_StartXfer+0x3c>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	7c9b      	ldrb	r3, [r3, #18]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d124      	bne.n	8005a9e <USB_HC_StartXfer+0x86>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	799b      	ldrb	r3, [r3, #6]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d120      	bne.n	8005a9e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	69fa      	ldr	r2, [r7, #28]
 8005a6c:	0151      	lsls	r1, r2, #5
 8005a6e:	6a3a      	ldr	r2, [r7, #32]
 8005a70:	440a      	add	r2, r1
 8005a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7a:	60d3      	str	r3, [r2, #12]
 8005a7c:	e00f      	b.n	8005a9e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	791b      	ldrb	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10b      	bne.n	8005a9e <USB_HC_StartXfer+0x86>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	795b      	ldrb	r3, [r3, #5]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d107      	bne.n	8005a9e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	785b      	ldrb	r3, [r3, #1]
 8005a92:	4619      	mov	r1, r3
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fb6b 	bl	8006170 <USB_DoPing>
        return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e232      	b.n	8005f04 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	799b      	ldrb	r3, [r3, #6]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d158      	bne.n	8005b58 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d007      	beq.n	8005ac2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	8a92      	ldrh	r2, [r2, #20]
 8005ab8:	fb03 f202 	mul.w	r2, r3, r2
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	61da      	str	r2, [r3, #28]
 8005ac0:	e07c      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	7c9b      	ldrb	r3, [r3, #18]
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d130      	bne.n	8005b2c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	2bbc      	cmp	r3, #188	@ 0xbc
 8005ad0:	d918      	bls.n	8005b04 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	8a9b      	ldrh	r3, [r3, #20]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	69da      	ldr	r2, [r3, #28]
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d003      	beq.n	8005af4 <USB_HC_StartXfer+0xdc>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d103      	bne.n	8005afc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2202      	movs	r2, #2
 8005af8:	60da      	str	r2, [r3, #12]
 8005afa:	e05f      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2201      	movs	r2, #1
 8005b00:	60da      	str	r2, [r3, #12]
 8005b02:	e05b      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	6a1a      	ldr	r2, [r3, #32]
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d007      	beq.n	8005b24 <USB_HC_StartXfer+0x10c>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d003      	beq.n	8005b24 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2204      	movs	r2, #4
 8005b20:	60da      	str	r2, [r3, #12]
 8005b22:	e04b      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2203      	movs	r2, #3
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	e047      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d10d      	bne.n	8005b4e <USB_HC_StartXfer+0x136>
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	8a92      	ldrh	r2, [r2, #20]
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d907      	bls.n	8005b4e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	8a92      	ldrh	r2, [r2, #20]
 8005b44:	fb03 f202 	mul.w	r2, r3, r2
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	61da      	str	r2, [r3, #28]
 8005b4c:	e036      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	6a1a      	ldr	r2, [r3, #32]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	61da      	str	r2, [r3, #28]
 8005b56:	e031      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d018      	beq.n	8005b92 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	8a92      	ldrh	r2, [r2, #20]
 8005b68:	4413      	add	r3, r2
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	8a92      	ldrh	r2, [r2, #20]
 8005b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b74:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005b76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005b78:	8b7b      	ldrh	r3, [r7, #26]
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d90b      	bls.n	8005b96 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005b7e:	8b7b      	ldrh	r3, [r7, #26]
 8005b80:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	8a92      	ldrh	r2, [r2, #20]
 8005b88:	fb03 f202 	mul.w	r2, r3, r2
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	61da      	str	r2, [r3, #28]
 8005b90:	e001      	b.n	8005b96 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005b92:	2301      	movs	r3, #1
 8005b94:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	78db      	ldrb	r3, [r3, #3]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005b9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	8a92      	ldrh	r2, [r2, #20]
 8005ba4:	fb03 f202 	mul.w	r2, r3, r2
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	61da      	str	r2, [r3, #28]
 8005bac:	e006      	b.n	8005bbc <USB_HC_StartXfer+0x1a4>
 8005bae:	bf00      	nop
 8005bb0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6a1a      	ldr	r2, [r3, #32]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005bc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005bc6:	04d9      	lsls	r1, r3, #19
 8005bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8005e58 <USB_HC_StartXfer+0x440>)
 8005bca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005bcc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	7d9b      	ldrb	r3, [r3, #22]
 8005bd2:	075b      	lsls	r3, r3, #29
 8005bd4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005bd8:	69f9      	ldr	r1, [r7, #28]
 8005bda:	0148      	lsls	r0, r1, #5
 8005bdc:	6a39      	ldr	r1, [r7, #32]
 8005bde:	4401      	add	r1, r0
 8005be0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005be4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005be6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005be8:	79fb      	ldrb	r3, [r7, #7]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d009      	beq.n	8005c02 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	6999      	ldr	r1, [r3, #24]
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bfe:	460a      	mov	r2, r1
 8005c00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	bf0c      	ite	eq
 8005c12:	2301      	moveq	r3, #1
 8005c14:	2300      	movne	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	015a      	lsls	r2, r3, #5
 8005c1e:	6a3b      	ldr	r3, [r7, #32]
 8005c20:	4413      	add	r3, r2
 8005c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	0151      	lsls	r1, r2, #5
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	440a      	add	r2, r1
 8005c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005c38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	7e7b      	ldrb	r3, [r7, #25]
 8005c4a:	075b      	lsls	r3, r3, #29
 8005c4c:	69f9      	ldr	r1, [r7, #28]
 8005c4e:	0148      	lsls	r0, r1, #5
 8005c50:	6a39      	ldr	r1, [r7, #32]
 8005c52:	4401      	add	r1, r0
 8005c54:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	799b      	ldrb	r3, [r3, #6]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 80c3 	bne.w	8005dec <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	7c5b      	ldrb	r3, [r3, #17]
 8005c6a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005c70:	4313      	orrs	r3, r2
 8005c72:	69fa      	ldr	r2, [r7, #28]
 8005c74:	0151      	lsls	r1, r2, #5
 8005c76:	6a3a      	ldr	r2, [r7, #32]
 8005c78:	440a      	add	r2, r1
 8005c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005c82:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	69fa      	ldr	r2, [r7, #28]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	6a3a      	ldr	r2, [r7, #32]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	79db      	ldrb	r3, [r3, #7]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d123      	bne.n	8005cf4 <USB_HC_StartXfer+0x2dc>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	78db      	ldrb	r3, [r3, #3]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d11f      	bne.n	8005cf4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	015a      	lsls	r2, r3, #5
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	4413      	add	r3, r2
 8005cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	0151      	lsls	r1, r2, #5
 8005cc6:	6a3a      	ldr	r2, [r7, #32]
 8005cc8:	440a      	add	r2, r1
 8005cca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cd2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	6a3a      	ldr	r2, [r7, #32]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	7c9b      	ldrb	r3, [r3, #18]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d003      	beq.n	8005d04 <USB_HC_StartXfer+0x2ec>
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	7c9b      	ldrb	r3, [r3, #18]
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d117      	bne.n	8005d34 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d113      	bne.n	8005d34 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10f      	bne.n	8005d34 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	015a      	lsls	r2, r3, #5
 8005d18:	6a3b      	ldr	r3, [r7, #32]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	0151      	lsls	r1, r2, #5
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	440a      	add	r2, r1
 8005d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d32:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	7c9b      	ldrb	r3, [r3, #18]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d162      	bne.n	8005e02 <USB_HC_StartXfer+0x3ea>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	78db      	ldrb	r3, [r3, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d15e      	bne.n	8005e02 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d858      	bhi.n	8005e00 <USB_HC_StartXfer+0x3e8>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <USB_HC_StartXfer+0x33c>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005d65 	.word	0x08005d65
 8005d58:	08005d87 	.word	0x08005d87
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005dcb 	.word	0x08005dcb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	6a3a      	ldr	r2, [r7, #32]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d82:	6053      	str	r3, [r2, #4]
          break;
 8005d84:	e03d      	b.n	8005e02 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	0151      	lsls	r1, r2, #5
 8005d98:	6a3a      	ldr	r2, [r7, #32]
 8005d9a:	440a      	add	r2, r1
 8005d9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005da0:	f043 030e 	orr.w	r3, r3, #14
 8005da4:	6053      	str	r3, [r2, #4]
          break;
 8005da6:	e02c      	b.n	8005e02 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	015a      	lsls	r2, r3, #5
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	4413      	add	r3, r2
 8005db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	6a3a      	ldr	r2, [r7, #32]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005dc6:	6053      	str	r3, [r2, #4]
          break;
 8005dc8:	e01b      	b.n	8005e02 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	69fa      	ldr	r2, [r7, #28]
 8005dda:	0151      	lsls	r1, r2, #5
 8005ddc:	6a3a      	ldr	r2, [r7, #32]
 8005dde:	440a      	add	r2, r1
 8005de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005de8:	6053      	str	r3, [r2, #4]
          break;
 8005dea:	e00a      	b.n	8005e02 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df8:	461a      	mov	r2, r3
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	6053      	str	r3, [r2, #4]
 8005dfe:	e000      	b.n	8005e02 <USB_HC_StartXfer+0x3ea>
          break;
 8005e00:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	6a3b      	ldr	r3, [r7, #32]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e18:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	78db      	ldrb	r3, [r3, #3]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d004      	beq.n	8005e2c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e28:	613b      	str	r3, [r7, #16]
 8005e2a:	e003      	b.n	8005e34 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005e32:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e3a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e48:	461a      	mov	r2, r3
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d003      	beq.n	8005e5c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005e54:	2300      	movs	r3, #0
 8005e56:	e055      	b.n	8005f04 <USB_HC_StartXfer+0x4ec>
 8005e58:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	78db      	ldrb	r3, [r3, #3]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d14e      	bne.n	8005f02 <USB_HC_StartXfer+0x4ea>
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d04a      	beq.n	8005f02 <USB_HC_StartXfer+0x4ea>
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	79db      	ldrb	r3, [r3, #7]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d146      	bne.n	8005f02 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	7c9b      	ldrb	r3, [r3, #18]
 8005e78:	2b03      	cmp	r3, #3
 8005e7a:	d831      	bhi.n	8005ee0 <USB_HC_StartXfer+0x4c8>
 8005e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <USB_HC_StartXfer+0x46c>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005eb9 	.word	0x08005eb9
 8005e8c:	08005e95 	.word	0x08005e95
 8005e90:	08005eb9 	.word	0x08005eb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	3303      	adds	r3, #3
 8005e9a:	089b      	lsrs	r3, r3, #2
 8005e9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005e9e:	8afa      	ldrh	r2, [r7, #22]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d91c      	bls.n	8005ee4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f043 0220 	orr.w	r2, r3, #32
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8005eb6:	e015      	b.n	8005ee4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	3303      	adds	r3, #3
 8005ebe:	089b      	lsrs	r3, r3, #2
 8005ec0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005ec2:	8afa      	ldrh	r2, [r7, #22]
 8005ec4:	6a3b      	ldr	r3, [r7, #32]
 8005ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d90a      	bls.n	8005ee8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	619a      	str	r2, [r3, #24]
        }
        break;
 8005ede:	e003      	b.n	8005ee8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005ee0:	bf00      	nop
 8005ee2:	e002      	b.n	8005eea <USB_HC_StartXfer+0x4d2>
        break;
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <USB_HC_StartXfer+0x4d2>
        break;
 8005ee8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	6999      	ldr	r1, [r3, #24]
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	785a      	ldrb	r2, [r3, #1]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2000      	movs	r0, #0
 8005efa:	9000      	str	r0, [sp, #0]
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f7ff f9ca 	bl	8005296 <USB_WritePacket>
  }

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3728      	adds	r7, #40	@ 0x28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	b29b      	uxth	r3, r3
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b089      	sub	sp, #36	@ 0x24
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	0c9b      	lsrs	r3, r3, #18
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	0fdb      	lsrs	r3, r3, #31
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	0fdb      	lsrs	r3, r3, #31
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	d10d      	bne.n	8005fb0 <USB_HC_Halt+0x82>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <USB_HC_Halt+0x82>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d005      	beq.n	8005fac <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d002      	beq.n	8005fac <USB_HC_Halt+0x7e>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d101      	bne.n	8005fb0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e0d8      	b.n	8006162 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <USB_HC_Halt+0x8e>
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d173      	bne.n	80060a4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	015a      	lsls	r2, r3, #5
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	4413      	add	r3, r2
 8005fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	0151      	lsls	r1, r2, #5
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	440a      	add	r2, r1
 8005fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fda:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d14a      	bne.n	800607e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d133      	bne.n	800605c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	69fa      	ldr	r2, [r7, #28]
 8006008:	440a      	add	r2, r1
 800600a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800600e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006012:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	69fb      	ldr	r3, [r7, #28]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69ba      	ldr	r2, [r7, #24]
 8006024:	0151      	lsls	r1, r2, #5
 8006026:	69fa      	ldr	r2, [r7, #28]
 8006028:	440a      	add	r2, r1
 800602a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800602e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006032:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	3301      	adds	r3, #1
 8006038:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006040:	d82e      	bhi.n	80060a0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	015a      	lsls	r2, r3, #5
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4413      	add	r3, r2
 800604a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006058:	d0ec      	beq.n	8006034 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800605a:	e081      	b.n	8006160 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	015a      	lsls	r2, r3, #5
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	4413      	add	r3, r2
 8006064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	0151      	lsls	r1, r2, #5
 800606e:	69fa      	ldr	r2, [r7, #28]
 8006070:	440a      	add	r2, r1
 8006072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800607a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800607c:	e070      	b.n	8006160 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	015a      	lsls	r2, r3, #5
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	0151      	lsls	r1, r2, #5
 8006090:	69fa      	ldr	r2, [r7, #28]
 8006092:	440a      	add	r2, r1
 8006094:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800609c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800609e:	e05f      	b.n	8006160 <USB_HC_Halt+0x232>
            break;
 80060a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80060a2:	e05d      	b.n	8006160 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d133      	bne.n	800613c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	69fa      	ldr	r2, [r7, #28]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80060f4:	69bb      	ldr	r3, [r7, #24]
 80060f6:	015a      	lsls	r2, r3, #5
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	4413      	add	r3, r2
 80060fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	0151      	lsls	r1, r2, #5
 8006106:	69fa      	ldr	r2, [r7, #28]
 8006108:	440a      	add	r2, r1
 800610a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800610e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006112:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	3301      	adds	r3, #1
 8006118:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006120:	d81d      	bhi.n	800615e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006138:	d0ec      	beq.n	8006114 <USB_HC_Halt+0x1e6>
 800613a:	e011      	b.n	8006160 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	69fa      	ldr	r2, [r7, #28]
 8006150:	440a      	add	r2, r1
 8006152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006156:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800615a:	6013      	str	r3, [r2, #0]
 800615c:	e000      	b.n	8006160 <USB_HC_Halt+0x232>
          break;
 800615e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3724      	adds	r7, #36	@ 0x24
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
	...

08006170 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	460b      	mov	r3, r1
 800617a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006180:	78fb      	ldrb	r3, [r7, #3]
 8006182:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006184:	2301      	movs	r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	04da      	lsls	r2, r3, #19
 800618c:	4b15      	ldr	r3, [pc, #84]	@ (80061e4 <USB_DoPing+0x74>)
 800618e:	4013      	ands	r3, r2
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	697a      	ldr	r2, [r7, #20]
 8006196:	440a      	add	r2, r1
 8006198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800619c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80061b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ce:	461a      	mov	r2, r3
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	371c      	adds	r7, #28
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	1ff80000 	.word	0x1ff80000

080061e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80061f0:	2300      	movs	r3, #0
 80061f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80061f8:	2300      	movs	r3, #0
 80061fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7fe ff8d 	bl	800511c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006202:	2110      	movs	r1, #16
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fe ffe6 	bl	80051d6 <USB_FlushTxFifo>
 800620a:	4603      	mov	r3, r0
 800620c:	2b00      	cmp	r3, #0
 800620e:	d001      	beq.n	8006214 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f7ff f810 	bl	800523a <USB_FlushRxFifo>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006224:	2300      	movs	r3, #0
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	e01f      	b.n	800626a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006240:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006248:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006250:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	015a      	lsls	r2, r3, #5
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	4413      	add	r3, r2
 800625a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800625e:	461a      	mov	r2, r3
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	3301      	adds	r3, #1
 8006268:	61bb      	str	r3, [r7, #24]
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	2b0f      	cmp	r3, #15
 800626e:	d9dc      	bls.n	800622a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006270:	2300      	movs	r3, #0
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e034      	b.n	80062e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	4413      	add	r3, r2
 800627e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800628c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006294:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800629c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062aa:	461a      	mov	r2, r3
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80062bc:	d80c      	bhi.n	80062d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d4:	d0ec      	beq.n	80062b0 <USB_StopHost+0xc8>
 80062d6:	e000      	b.n	80062da <USB_StopHost+0xf2>
        break;
 80062d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	3301      	adds	r3, #1
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b0f      	cmp	r3, #15
 80062e4:	d9c7      	bls.n	8006276 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062ec:	461a      	mov	r2, r3
 80062ee:	f04f 33ff 	mov.w	r3, #4294967295
 80062f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f04f 32ff 	mov.w	r2, #4294967295
 80062fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7fe fefc 	bl	80050fa <USB_EnableGlobalInt>

  return ret;
 8006302:	7ffb      	ldrb	r3, [r7, #31]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800630c:	b590      	push	{r4, r7, lr}
 800630e:	b089      	sub	sp, #36	@ 0x24
 8006310:	af04      	add	r7, sp, #16
 8006312:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006314:	2301      	movs	r3, #1
 8006316:	2202      	movs	r2, #2
 8006318:	2102      	movs	r1, #2
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fc85 	bl	8006c2a <USBH_FindInterface>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006324:	7bfb      	ldrb	r3, [r7, #15]
 8006326:	2bff      	cmp	r3, #255	@ 0xff
 8006328:	d002      	beq.n	8006330 <USBH_CDC_InterfaceInit+0x24>
 800632a:	7bfb      	ldrb	r3, [r7, #15]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d901      	bls.n	8006334 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006330:	2302      	movs	r3, #2
 8006332:	e13d      	b.n	80065b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fc5a 	bl	8006bf2 <USBH_SelectInterface>
 800633e:	4603      	mov	r3, r0
 8006340:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006342:	7bbb      	ldrb	r3, [r7, #14]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d001      	beq.n	800634c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006348:	2302      	movs	r3, #2
 800634a:	e131      	b.n	80065b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006352:	2050      	movs	r0, #80	@ 0x50
 8006354:	f002 fb64 	bl	8008a20 <malloc>
 8006358:	4603      	mov	r3, r0
 800635a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800636c:	2302      	movs	r3, #2
 800636e:	e11f      	b.n	80065b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006370:	2250      	movs	r2, #80	@ 0x50
 8006372:	2100      	movs	r1, #0
 8006374:	68b8      	ldr	r0, [r7, #8]
 8006376:	f002 fd28 	bl	8008dca <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	211a      	movs	r1, #26
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	4413      	add	r3, r2
 8006386:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	b25b      	sxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	da15      	bge.n	80063be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	211a      	movs	r1, #26
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	211a      	movs	r1, #26
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	785b      	ldrb	r3, [r3, #1]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 ffbe 	bl	8008346 <USBH_AllocPipe>
 80063ca:	4603      	mov	r3, r0
 80063cc:	461a      	mov	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	7819      	ldrb	r1, [r3, #0]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	7858      	ldrb	r0, [r3, #1]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	8952      	ldrh	r2, [r2, #10]
 80063ea:	9202      	str	r2, [sp, #8]
 80063ec:	2203      	movs	r2, #3
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4623      	mov	r3, r4
 80063f4:	4602      	mov	r2, r0
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f001 ff76 	bl	80082e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f002 fa85 	bl	8008914 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800640a:	2300      	movs	r3, #0
 800640c:	2200      	movs	r2, #0
 800640e:	210a      	movs	r1, #10
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fc0a 	bl	8006c2a <USBH_FindInterface>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	2bff      	cmp	r3, #255	@ 0xff
 800641e:	d002      	beq.n	8006426 <USBH_CDC_InterfaceInit+0x11a>
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d901      	bls.n	800642a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006426:	2302      	movs	r3, #2
 8006428:	e0c2      	b.n	80065b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	211a      	movs	r1, #26
 8006430:	fb01 f303 	mul.w	r3, r1, r3
 8006434:	4413      	add	r3, r2
 8006436:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	b25b      	sxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	da16      	bge.n	8006470 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	211a      	movs	r1, #26
 8006448:	fb01 f303 	mul.w	r3, r1, r3
 800644c:	4413      	add	r3, r2
 800644e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006452:	781a      	ldrb	r2, [r3, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006458:	7bfb      	ldrb	r3, [r7, #15]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	211a      	movs	r1, #26
 800645e:	fb01 f303 	mul.w	r3, r1, r3
 8006462:	4413      	add	r3, r2
 8006464:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	835a      	strh	r2, [r3, #26]
 800646e:	e015      	b.n	800649c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	211a      	movs	r1, #26
 8006476:	fb01 f303 	mul.w	r3, r1, r3
 800647a:	4413      	add	r3, r2
 800647c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006480:	781a      	ldrb	r2, [r3, #0]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006486:	7bfb      	ldrb	r3, [r7, #15]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	211a      	movs	r1, #26
 800648c:	fb01 f303 	mul.w	r3, r1, r3
 8006490:	4413      	add	r3, r2
 8006492:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006496:	881a      	ldrh	r2, [r3, #0]
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	211a      	movs	r1, #26
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	4413      	add	r3, r2
 80064a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	b25b      	sxtb	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	da16      	bge.n	80064e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064b4:	7bfb      	ldrb	r3, [r7, #15]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	211a      	movs	r1, #26
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064c4:	781a      	ldrb	r2, [r3, #0]
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	211a      	movs	r1, #26
 80064d0:	fb01 f303 	mul.w	r3, r1, r3
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80064da:	881a      	ldrh	r2, [r3, #0]
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	835a      	strh	r2, [r3, #26]
 80064e0:	e015      	b.n	800650e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	211a      	movs	r1, #26
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064f2:	781a      	ldrb	r2, [r3, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	211a      	movs	r1, #26
 80064fe:	fb01 f303 	mul.w	r3, r1, r3
 8006502:	4413      	add	r3, r2
 8006504:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006508:	881a      	ldrh	r2, [r3, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	7b9b      	ldrb	r3, [r3, #14]
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f001 ff16 	bl	8008346 <USBH_AllocPipe>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	7bdb      	ldrb	r3, [r3, #15]
 8006526:	4619      	mov	r1, r3
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f001 ff0c 	bl	8008346 <USBH_AllocPipe>
 800652e:	4603      	mov	r3, r0
 8006530:	461a      	mov	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	7b59      	ldrb	r1, [r3, #13]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	7b98      	ldrb	r0, [r3, #14]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	8b12      	ldrh	r2, [r2, #24]
 800654e:	9202      	str	r2, [sp, #8]
 8006550:	2202      	movs	r2, #2
 8006552:	9201      	str	r2, [sp, #4]
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	4623      	mov	r3, r4
 8006558:	4602      	mov	r2, r0
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f001 fec4 	bl	80082e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	7b19      	ldrb	r1, [r3, #12]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	7bd8      	ldrb	r0, [r3, #15]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	8b52      	ldrh	r2, [r2, #26]
 8006578:	9202      	str	r2, [sp, #8]
 800657a:	2202      	movs	r2, #2
 800657c:	9201      	str	r2, [sp, #4]
 800657e:	9300      	str	r3, [sp, #0]
 8006580:	4623      	mov	r3, r4
 8006582:	4602      	mov	r2, r0
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 feaf 	bl	80082e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	7b5b      	ldrb	r3, [r3, #13]
 8006596:	2200      	movs	r2, #0
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f002 f9ba 	bl	8008914 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	7b1b      	ldrb	r3, [r3, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	4619      	mov	r1, r3
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f002 f9b3 	bl	8008914 <USBH_LL_SetToggle>

  return USBH_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd90      	pop	{r4, r7, pc}

080065b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80065c6:	69db      	ldr	r3, [r3, #28]
 80065c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00e      	beq.n	80065f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f001 fea4 	bl	8008326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f001 fecf 	bl	8008388 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	7b1b      	ldrb	r3, [r3, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00e      	beq.n	8006616 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	7b1b      	ldrb	r3, [r3, #12]
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f001 fe91 	bl	8008326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	7b1b      	ldrb	r3, [r3, #12]
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f001 febc 	bl	8008388 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	7b5b      	ldrb	r3, [r3, #13]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00e      	beq.n	800663c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	7b5b      	ldrb	r3, [r3, #13]
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 fe7e 	bl	8008326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	7b5b      	ldrb	r3, [r3, #13]
 800662e:	4619      	mov	r1, r3
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 fea9 	bl	8008388 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006642:	69db      	ldr	r3, [r3, #28]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800664e:	69db      	ldr	r3, [r3, #28]
 8006650:	4618      	mov	r0, r3
 8006652:	f002 f9ed 	bl	8008a30 <free>
    phost->pActiveClass->pData = 0U;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800665c:	2200      	movs	r2, #0
 800665e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	3340      	adds	r3, #64	@ 0x40
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8b1 	bl	80067ea <GetLineCoding>
 8006688:	4603      	mov	r3, r0
 800668a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800668c:	7afb      	ldrb	r3, [r7, #11]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d105      	bne.n	800669e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006698:	2102      	movs	r1, #2
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800669e:	7afb      	ldrb	r3, [r7, #11]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066b0:	2301      	movs	r3, #1
 80066b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066be:	69db      	ldr	r3, [r3, #28]
 80066c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80066c8:	2b04      	cmp	r3, #4
 80066ca:	d877      	bhi.n	80067bc <USBH_CDC_Process+0x114>
 80066cc:	a201      	add	r2, pc, #4	@ (adr r2, 80066d4 <USBH_CDC_Process+0x2c>)
 80066ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d2:	bf00      	nop
 80066d4:	080066e9 	.word	0x080066e9
 80066d8:	080066ef 	.word	0x080066ef
 80066dc:	0800671f 	.word	0x0800671f
 80066e0:	08006793 	.word	0x08006793
 80066e4:	080067a1 	.word	0x080067a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80066e8:	2300      	movs	r3, #0
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	e06d      	b.n	80067ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f2:	4619      	mov	r1, r3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f897 	bl	8006828 <SetLineCoding>
 80066fa:	4603      	mov	r3, r0
 80066fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d104      	bne.n	800670e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800670c:	e058      	b.n	80067c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800670e:	7bbb      	ldrb	r3, [r7, #14]
 8006710:	2b01      	cmp	r3, #1
 8006712:	d055      	beq.n	80067c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2204      	movs	r2, #4
 8006718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800671c:	e050      	b.n	80067c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	3340      	adds	r3, #64	@ 0x40
 8006722:	4619      	mov	r1, r3
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 f860 	bl	80067ea <GetLineCoding>
 800672a:	4603      	mov	r3, r0
 800672c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800672e:	7bbb      	ldrb	r3, [r7, #14]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d126      	bne.n	8006782 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	2200      	movs	r2, #0
 8006738:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006746:	791b      	ldrb	r3, [r3, #4]
 8006748:	429a      	cmp	r2, r3
 800674a:	d13b      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006756:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006758:	429a      	cmp	r2, r3
 800675a:	d133      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006766:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006768:	429a      	cmp	r2, r3
 800676a:	d12b      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006774:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006776:	429a      	cmp	r2, r3
 8006778:	d124      	bne.n	80067c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f958 	bl	8006a30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006780:	e020      	b.n	80067c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d01d      	beq.n	80067c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	2204      	movs	r2, #4
 800678c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006790:	e018      	b.n	80067c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f867 	bl	8006866 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f000 f8da 	bl	8006952 <CDC_ProcessReception>
      break;
 800679e:	e014      	b.n	80067ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80067a0:	2100      	movs	r1, #0
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f001 f81a 	bl	80077dc <USBH_ClrFeature>
 80067a8:	4603      	mov	r3, r0
 80067aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80067ac:	7bbb      	ldrb	r3, [r7, #14]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10a      	bne.n	80067c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80067ba:	e005      	b.n	80067c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80067bc:	bf00      	nop
 80067be:	e004      	b.n	80067ca <USBH_CDC_Process+0x122>
      break;
 80067c0:	bf00      	nop
 80067c2:	e002      	b.n	80067ca <USBH_CDC_Process+0x122>
      break;
 80067c4:	bf00      	nop
 80067c6:	e000      	b.n	80067ca <USBH_CDC_Process+0x122>
      break;
 80067c8:	bf00      	nop

  }

  return status;
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	370c      	adds	r7, #12
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr

080067ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	22a1      	movs	r2, #161	@ 0xa1
 80067f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2221      	movs	r2, #33	@ 0x21
 80067fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2207      	movs	r2, #7
 8006810:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2207      	movs	r2, #7
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f001 fb14 	bl	8007e46 <USBH_CtlReq>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2221      	movs	r2, #33	@ 0x21
 8006836:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2207      	movs	r2, #7
 800684e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2207      	movs	r2, #7
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 faf5 	bl	8007e46 <USBH_CtlReq>
 800685c:	4603      	mov	r3, r0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af02      	add	r7, sp, #8
 800686c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006878:	2300      	movs	r3, #0
 800687a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006882:	2b01      	cmp	r3, #1
 8006884:	d002      	beq.n	800688c <CDC_ProcessTransmission+0x26>
 8006886:	2b02      	cmp	r3, #2
 8006888:	d023      	beq.n	80068d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800688a:	e05e      	b.n	800694a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	8b12      	ldrh	r2, [r2, #24]
 8006894:	4293      	cmp	r3, r2
 8006896:	d90b      	bls.n	80068b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	69d9      	ldr	r1, [r3, #28]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	8b1a      	ldrh	r2, [r3, #24]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	7b5b      	ldrb	r3, [r3, #13]
 80068a4:	2001      	movs	r0, #1
 80068a6:	9000      	str	r0, [sp, #0]
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f001 fcda 	bl	8008262 <USBH_BulkSendData>
 80068ae:	e00b      	b.n	80068c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	7b5b      	ldrb	r3, [r3, #13]
 80068be:	2001      	movs	r0, #1
 80068c0:	9000      	str	r0, [sp, #0]
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f001 fccd 	bl	8008262 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80068d0:	e03b      	b.n	800694a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	7b5b      	ldrb	r3, [r3, #13]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fff1 	bl	80088c0 <USBH_LL_GetURBState>
 80068de:	4603      	mov	r3, r0
 80068e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d128      	bne.n	800693a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	8b12      	ldrh	r2, [r2, #24]
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d90e      	bls.n	8006912 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	8b12      	ldrh	r2, [r2, #24]
 80068fc:	1a9a      	subs	r2, r3, r2
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	8b12      	ldrh	r2, [r2, #24]
 800690a:	441a      	add	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	61da      	str	r2, [r3, #28]
 8006910:	e002      	b.n	8006918 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800691c:	2b00      	cmp	r3, #0
 800691e:	d004      	beq.n	800692a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006928:	e00e      	b.n	8006948 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f868 	bl	8006a08 <USBH_CDC_TransmitCallback>
      break;
 8006938:	e006      	b.n	8006948 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800693a:	7afb      	ldrb	r3, [r7, #11]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d103      	bne.n	8006948 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006948:	bf00      	nop
  }
}
 800694a:	bf00      	nop
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b086      	sub	sp, #24
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006964:	2300      	movs	r3, #0
 8006966:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800696e:	2b03      	cmp	r3, #3
 8006970:	d002      	beq.n	8006978 <CDC_ProcessReception+0x26>
 8006972:	2b04      	cmp	r3, #4
 8006974:	d00e      	beq.n	8006994 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006976:	e043      	b.n	8006a00 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	6a19      	ldr	r1, [r3, #32]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	8b5a      	ldrh	r2, [r3, #26]
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	7b1b      	ldrb	r3, [r3, #12]
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f001 fc91 	bl	80082ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2204      	movs	r2, #4
 800698e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006992:	e035      	b.n	8006a00 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	7b1b      	ldrb	r3, [r3, #12]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f001 ff90 	bl	80088c0 <USBH_LL_GetURBState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80069a4:	7cfb      	ldrb	r3, [r7, #19]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d129      	bne.n	80069fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	7b1b      	ldrb	r3, [r3, #12]
 80069ae:	4619      	mov	r1, r3
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fef3 	bl	800879c <USBH_LL_GetLastXferSize>
 80069b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d016      	beq.n	80069f0 <CDC_ProcessReception+0x9e>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	8b5b      	ldrh	r3, [r3, #26]
 80069c6:	461a      	mov	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d910      	bls.n	80069f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	1ad2      	subs	r2, r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a1a      	ldr	r2, [r3, #32]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	441a      	add	r2, r3
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2203      	movs	r2, #3
 80069ea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80069ee:	e006      	b.n	80069fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f80f 	bl	8006a1c <USBH_CDC_ReceiveCallback>
      break;
 80069fe:	bf00      	nop
  }
}
 8006a00:	bf00      	nop
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b083      	sub	sp, #12
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b084      	sub	sp, #16
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	60f8      	str	r0, [r7, #12]
 8006a4c:	60b9      	str	r1, [r7, #8]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d101      	bne.n	8006a5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006a58:	2302      	movs	r3, #2
 8006a5a:	e029      	b.n	8006ab0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	79fa      	ldrb	r2, [r7, #7]
 8006a60:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f000 f81f 	bl	8006ab8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d003      	beq.n	8006aa8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f001 fdc3 	bl	8008634 <USBH_LL_Init>

  return USBH_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3710      	adds	r7, #16
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}

08006ab8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e009      	b.n	8006ade <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	33e0      	adds	r3, #224	@ 0xe0
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	4413      	add	r3, r2
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	3301      	adds	r3, #1
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2b0f      	cmp	r3, #15
 8006ae2:	d9f2      	bls.n	8006aca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e009      	b.n	8006afe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	4413      	add	r3, r2
 8006af0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006af4:	2200      	movs	r2, #0
 8006af6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3301      	adds	r3, #1
 8006afc:	60fb      	str	r3, [r7, #12]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b04:	d3f1      	bcc.n	8006aea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2240      	movs	r2, #64	@ 0x40
 8006b2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	331c      	adds	r3, #28
 8006b56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f002 f934 	bl	8008dca <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f002 f92b 	bl	8008dca <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006b7a:	2212      	movs	r2, #18
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f002 f923 	bl	8008dca <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b8a:	223e      	movs	r2, #62	@ 0x3e
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 f91b 	bl	8008dca <memset>

  return USBH_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b085      	sub	sp, #20
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10e      	bne.n	8006bda <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006bc2:	1c59      	adds	r1, r3, #1
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	33de      	adds	r3, #222	@ 0xde
 8006bce:	6839      	ldr	r1, [r7, #0]
 8006bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	73fb      	strb	r3, [r7, #15]
 8006bd8:	e004      	b.n	8006be4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006bda:	2302      	movs	r3, #2
 8006bdc:	73fb      	strb	r3, [r7, #15]
 8006bde:	e001      	b.n	8006be4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006be0:	2302      	movs	r3, #2
 8006be2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b085      	sub	sp, #20
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006c08:	78fa      	ldrb	r2, [r7, #3]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d204      	bcs.n	8006c18 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006c16:	e001      	b.n	8006c1c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006c18:	2302      	movs	r3, #2
 8006c1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3714      	adds	r7, #20
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr

08006c2a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b087      	sub	sp, #28
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	461a      	mov	r2, r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	70fb      	strb	r3, [r7, #3]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	70bb      	strb	r3, [r7, #2]
 8006c40:	4613      	mov	r3, r2
 8006c42:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006c44:	2300      	movs	r3, #0
 8006c46:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006c52:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006c54:	e025      	b.n	8006ca2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006c56:	7dfb      	ldrb	r3, [r7, #23]
 8006c58:	221a      	movs	r2, #26
 8006c5a:	fb02 f303 	mul.w	r3, r2, r3
 8006c5e:	3308      	adds	r3, #8
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	3302      	adds	r3, #2
 8006c66:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	795b      	ldrb	r3, [r3, #5]
 8006c6c:	78fa      	ldrb	r2, [r7, #3]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d002      	beq.n	8006c78 <USBH_FindInterface+0x4e>
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	2bff      	cmp	r3, #255	@ 0xff
 8006c76:	d111      	bne.n	8006c9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006c7c:	78ba      	ldrb	r2, [r7, #2]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d002      	beq.n	8006c88 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c82:	78bb      	ldrb	r3, [r7, #2]
 8006c84:	2bff      	cmp	r3, #255	@ 0xff
 8006c86:	d109      	bne.n	8006c9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006c8c:	787a      	ldrb	r2, [r7, #1]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d002      	beq.n	8006c98 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006c92:	787b      	ldrb	r3, [r7, #1]
 8006c94:	2bff      	cmp	r3, #255	@ 0xff
 8006c96:	d101      	bne.n	8006c9c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	e006      	b.n	8006caa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006c9c:	7dfb      	ldrb	r3, [r7, #23]
 8006c9e:	3301      	adds	r3, #1
 8006ca0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006ca2:	7dfb      	ldrb	r3, [r7, #23]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d9d6      	bls.n	8006c56 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006ca8:	23ff      	movs	r3, #255	@ 0xff
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	371c      	adds	r7, #28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006cb6:	b580      	push	{r7, lr}
 8006cb8:	b082      	sub	sp, #8
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 fcf4 	bl	80086ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f001 fe0d 	bl	80088e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
	...

08006cd8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b088      	sub	sp, #32
 8006cdc:	af04      	add	r7, sp, #16
 8006cde:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d102      	bne.n	8006cfa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2203      	movs	r2, #3
 8006cf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b0b      	cmp	r3, #11
 8006d02:	f200 81bb 	bhi.w	800707c <USBH_Process+0x3a4>
 8006d06:	a201      	add	r2, pc, #4	@ (adr r2, 8006d0c <USBH_Process+0x34>)
 8006d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0c:	08006d3d 	.word	0x08006d3d
 8006d10:	08006d6f 	.word	0x08006d6f
 8006d14:	08006dd7 	.word	0x08006dd7
 8006d18:	08007017 	.word	0x08007017
 8006d1c:	0800707d 	.word	0x0800707d
 8006d20:	08006e77 	.word	0x08006e77
 8006d24:	08006fbd 	.word	0x08006fbd
 8006d28:	08006ead 	.word	0x08006ead
 8006d2c:	08006ecd 	.word	0x08006ecd
 8006d30:	08006eeb 	.word	0x08006eeb
 8006d34:	08006f2f 	.word	0x08006f2f
 8006d38:	08006fff 	.word	0x08006fff
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 819b 	beq.w	8007080 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006d50:	20c8      	movs	r0, #200	@ 0xc8
 8006d52:	f001 fe12 	bl	800897a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f001 fd05 	bl	8008766 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d6c:	e188      	b.n	8007080 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d107      	bne.n	8006d88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d86:	e18a      	b.n	800709e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006d8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006d92:	d914      	bls.n	8006dbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d903      	bls.n	8006db6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	220d      	movs	r2, #13
 8006db2:	701a      	strb	r2, [r3, #0]
      break;
 8006db4:	e173      	b.n	800709e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
      break;
 8006dbc:	e16f      	b.n	800709e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006dc4:	f103 020a 	add.w	r2, r3, #10
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006dce:	200a      	movs	r0, #10
 8006dd0:	f001 fdd3 	bl	800897a <USBH_Delay>
      break;
 8006dd4:	e163      	b.n	800709e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d005      	beq.n	8006dec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006de6:	2104      	movs	r1, #4
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006dec:	2064      	movs	r0, #100	@ 0x64
 8006dee:	f001 fdc4 	bl	800897a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fc90 	bl	8008718 <USBH_LL_GetSpeed>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2205      	movs	r2, #5
 8006e06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006e08:	2100      	movs	r1, #0
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fa9b 	bl	8008346 <USBH_AllocPipe>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006e18:	2180      	movs	r1, #128	@ 0x80
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f001 fa93 	bl	8008346 <USBH_AllocPipe>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7919      	ldrb	r1, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006e3c:	9202      	str	r2, [sp, #8]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	9201      	str	r2, [sp, #4]
 8006e42:	9300      	str	r3, [sp, #0]
 8006e44:	4603      	mov	r3, r0
 8006e46:	2280      	movs	r2, #128	@ 0x80
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f001 fa4d 	bl	80082e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	7959      	ldrb	r1, [r3, #5]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006e62:	9202      	str	r2, [sp, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	9201      	str	r2, [sp, #4]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f001 fa3a 	bl	80082e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e74:	e113      	b.n	800709e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f916 	bl	80070a8 <USBH_HandleEnum>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006e80:	7bbb      	ldrb	r3, [r7, #14]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 80fd 	bne.w	8007084 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d103      	bne.n	8006ea4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2208      	movs	r2, #8
 8006ea0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ea2:	e0ef      	b.n	8007084 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2207      	movs	r2, #7
 8006ea8:	701a      	strb	r2, [r3, #0]
      break;
 8006eaa:	e0eb      	b.n	8007084 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f000 80e8 	beq.w	8007088 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2208      	movs	r2, #8
 8006ec8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006eca:	e0dd      	b.n	8007088 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 fc3a 	bl	800774e <USBH_SetCfg>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f040 80d5 	bne.w	800708c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2209      	movs	r2, #9
 8006ee6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006ee8:	e0d0      	b.n	800708c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d016      	beq.n	8006f26 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006ef8:	2101      	movs	r1, #1
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fc4a 	bl	8007794 <USBH_SetFeature>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	220a      	movs	r2, #10
 8006f10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f12:	e0bd      	b.n	8007090 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b03      	cmp	r3, #3
 8006f1a:	f040 80b9 	bne.w	8007090 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220a      	movs	r2, #10
 8006f22:	701a      	strb	r2, [r3, #0]
      break;
 8006f24:	e0b4      	b.n	8007090 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	220a      	movs	r2, #10
 8006f2a:	701a      	strb	r2, [r3, #0]
      break;
 8006f2c:	e0b0      	b.n	8007090 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	f000 80ad 	beq.w	8007094 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f42:	2300      	movs	r3, #0
 8006f44:	73fb      	strb	r3, [r7, #15]
 8006f46:	e016      	b.n	8006f76 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f48:	7bfa      	ldrb	r2, [r7, #15]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32de      	adds	r2, #222	@ 0xde
 8006f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f52:	791a      	ldrb	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d108      	bne.n	8006f70 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006f5e:	7bfa      	ldrb	r2, [r7, #15]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	32de      	adds	r2, #222	@ 0xde
 8006f64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006f6e:	e005      	b.n	8006f7c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
 8006f72:	3301      	adds	r3, #1
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d0e5      	beq.n	8006f48 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d016      	beq.n	8006fb4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f8c:	689b      	ldr	r3, [r3, #8]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	4798      	blx	r3
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006fa4:	2103      	movs	r1, #3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006faa:	e073      	b.n	8007094 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	220d      	movs	r2, #13
 8006fb0:	701a      	strb	r2, [r3, #0]
      break;
 8006fb2:	e06f      	b.n	8007094 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	220d      	movs	r2, #13
 8006fb8:	701a      	strb	r2, [r3, #0]
      break;
 8006fba:	e06b      	b.n	8007094 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d017      	beq.n	8006ff6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	4798      	blx	r3
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d103      	bne.n	8006fe6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	220b      	movs	r2, #11
 8006fe2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006fe4:	e058      	b.n	8007098 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	2b02      	cmp	r3, #2
 8006fec:	d154      	bne.n	8007098 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	220d      	movs	r2, #13
 8006ff2:	701a      	strb	r2, [r3, #0]
      break;
 8006ff4:	e050      	b.n	8007098 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	220d      	movs	r2, #13
 8006ffa:	701a      	strb	r2, [r3, #0]
      break;
 8006ffc:	e04c      	b.n	8007098 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007004:	2b00      	cmp	r3, #0
 8007006:	d049      	beq.n	800709c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	4798      	blx	r3
      }
      break;
 8007014:	e042      	b.n	800709c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f7ff fd4a 	bl	8006ab8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007048:	2b00      	cmp	r3, #0
 800704a:	d005      	beq.n	8007058 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007052:	2105      	movs	r1, #5
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800705e:	b2db      	uxtb	r3, r3
 8007060:	2b01      	cmp	r3, #1
 8007062:	d107      	bne.n	8007074 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fe22 	bl	8006cb6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007072:	e014      	b.n	800709e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f001 fb19 	bl	80086ac <USBH_LL_Start>
      break;
 800707a:	e010      	b.n	800709e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800707c:	bf00      	nop
 800707e:	e00e      	b.n	800709e <USBH_Process+0x3c6>
      break;
 8007080:	bf00      	nop
 8007082:	e00c      	b.n	800709e <USBH_Process+0x3c6>
      break;
 8007084:	bf00      	nop
 8007086:	e00a      	b.n	800709e <USBH_Process+0x3c6>
    break;
 8007088:	bf00      	nop
 800708a:	e008      	b.n	800709e <USBH_Process+0x3c6>
      break;
 800708c:	bf00      	nop
 800708e:	e006      	b.n	800709e <USBH_Process+0x3c6>
      break;
 8007090:	bf00      	nop
 8007092:	e004      	b.n	800709e <USBH_Process+0x3c6>
      break;
 8007094:	bf00      	nop
 8007096:	e002      	b.n	800709e <USBH_Process+0x3c6>
      break;
 8007098:	bf00      	nop
 800709a:	e000      	b.n	800709e <USBH_Process+0x3c6>
      break;
 800709c:	bf00      	nop
  }
  return USBH_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af04      	add	r7, sp, #16
 80070ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070b0:	2301      	movs	r3, #1
 80070b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80070b4:	2301      	movs	r3, #1
 80070b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	785b      	ldrb	r3, [r3, #1]
 80070bc:	2b07      	cmp	r3, #7
 80070be:	f200 81bd 	bhi.w	800743c <USBH_HandleEnum+0x394>
 80070c2:	a201      	add	r2, pc, #4	@ (adr r2, 80070c8 <USBH_HandleEnum+0x20>)
 80070c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c8:	080070e9 	.word	0x080070e9
 80070cc:	080071a3 	.word	0x080071a3
 80070d0:	0800720d 	.word	0x0800720d
 80070d4:	08007297 	.word	0x08007297
 80070d8:	08007301 	.word	0x08007301
 80070dc:	08007371 	.word	0x08007371
 80070e0:	080073b7 	.word	0x080073b7
 80070e4:	080073fd 	.word	0x080073fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80070e8:	2108      	movs	r1, #8
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa4c 	bl	8007588 <USBH_Get_DevDesc>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d12e      	bne.n	8007158 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	7919      	ldrb	r1, [r3, #4]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800711e:	9202      	str	r2, [sp, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	9201      	str	r2, [sp, #4]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4603      	mov	r3, r0
 8007128:	2280      	movs	r2, #128	@ 0x80
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f001 f8dc 	bl	80082e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7959      	ldrb	r1, [r3, #5]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007144:	9202      	str	r2, [sp, #8]
 8007146:	2200      	movs	r2, #0
 8007148:	9201      	str	r2, [sp, #4]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	4603      	mov	r3, r0
 800714e:	2200      	movs	r2, #0
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f8c9 	bl	80082e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007156:	e173      	b.n	8007440 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007158:	7bbb      	ldrb	r3, [r7, #14]
 800715a:	2b03      	cmp	r3, #3
 800715c:	f040 8170 	bne.w	8007440 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007166:	3301      	adds	r3, #1
 8007168:	b2da      	uxtb	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007176:	2b03      	cmp	r3, #3
 8007178:	d903      	bls.n	8007182 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	220d      	movs	r2, #13
 800717e:	701a      	strb	r2, [r3, #0]
      break;
 8007180:	e15e      	b.n	8007440 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	795b      	ldrb	r3, [r3, #5]
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 f8fd 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	791b      	ldrb	r3, [r3, #4]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f8f7 	bl	8008388 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
      break;
 80071a0:	e14e      	b.n	8007440 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80071a2:	2112      	movs	r1, #18
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f9ef 	bl	8007588 <USBH_Get_DevDesc>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071ae:	7bbb      	ldrb	r3, [r7, #14]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d103      	bne.n	80071bc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071ba:	e143      	b.n	8007444 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071bc:	7bbb      	ldrb	r3, [r7, #14]
 80071be:	2b03      	cmp	r3, #3
 80071c0:	f040 8140 	bne.w	8007444 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071ca:	3301      	adds	r3, #1
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d903      	bls.n	80071e6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	220d      	movs	r2, #13
 80071e2:	701a      	strb	r2, [r3, #0]
      break;
 80071e4:	e12e      	b.n	8007444 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	795b      	ldrb	r3, [r3, #5]
 80071ea:	4619      	mov	r1, r3
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f001 f8cb 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	791b      	ldrb	r3, [r3, #4]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 f8c5 	bl	8008388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	701a      	strb	r2, [r3, #0]
      break;
 800720a:	e11b      	b.n	8007444 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800720c:	2101      	movs	r1, #1
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fa79 	bl	8007706 <USBH_SetAddress>
 8007214:	4603      	mov	r3, r0
 8007216:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d130      	bne.n	8007280 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800721e:	2002      	movs	r0, #2
 8007220:	f001 fbab 	bl	800897a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2203      	movs	r2, #3
 8007230:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	7919      	ldrb	r1, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007246:	9202      	str	r2, [sp, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	9201      	str	r2, [sp, #4]
 800724c:	9300      	str	r3, [sp, #0]
 800724e:	4603      	mov	r3, r0
 8007250:	2280      	movs	r2, #128	@ 0x80
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 f848 	bl	80082e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	7959      	ldrb	r1, [r3, #5]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800726c:	9202      	str	r2, [sp, #8]
 800726e:	2200      	movs	r2, #0
 8007270:	9201      	str	r2, [sp, #4]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	2200      	movs	r2, #0
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f001 f835 	bl	80082e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800727e:	e0e3      	b.n	8007448 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007280:	7bbb      	ldrb	r3, [r7, #14]
 8007282:	2b03      	cmp	r3, #3
 8007284:	f040 80e0 	bne.w	8007448 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	220d      	movs	r2, #13
 800728c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	705a      	strb	r2, [r3, #1]
      break;
 8007294:	e0d8      	b.n	8007448 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007296:	2109      	movs	r1, #9
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f9a1 	bl	80075e0 <USBH_Get_CfgDesc>
 800729e:	4603      	mov	r3, r0
 80072a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d103      	bne.n	80072b0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2204      	movs	r2, #4
 80072ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80072ae:	e0cd      	b.n	800744c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b03      	cmp	r3, #3
 80072b4:	f040 80ca 	bne.w	800744c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072be:	3301      	adds	r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d903      	bls.n	80072da <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	220d      	movs	r2, #13
 80072d6:	701a      	strb	r2, [r3, #0]
      break;
 80072d8:	e0b8      	b.n	800744c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	795b      	ldrb	r3, [r3, #5]
 80072de:	4619      	mov	r1, r3
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 f851 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	791b      	ldrb	r3, [r3, #4]
 80072ea:	4619      	mov	r1, r3
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	f001 f84b 	bl	8008388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	701a      	strb	r2, [r3, #0]
      break;
 80072fe:	e0a5      	b.n	800744c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007306:	4619      	mov	r1, r3
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f969 	bl	80075e0 <USBH_Get_CfgDesc>
 800730e:	4603      	mov	r3, r0
 8007310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007312:	7bbb      	ldrb	r3, [r7, #14]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d103      	bne.n	8007320 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2205      	movs	r2, #5
 800731c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800731e:	e097      	b.n	8007450 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	2b03      	cmp	r3, #3
 8007324:	f040 8094 	bne.w	8007450 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800732e:	3301      	adds	r3, #1
 8007330:	b2da      	uxtb	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800733e:	2b03      	cmp	r3, #3
 8007340:	d903      	bls.n	800734a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	220d      	movs	r2, #13
 8007346:	701a      	strb	r2, [r3, #0]
      break;
 8007348:	e082      	b.n	8007450 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	795b      	ldrb	r3, [r3, #5]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 f819 	bl	8008388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f001 f813 	bl	8008388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
      break;
 800736e:	e06f      	b.n	8007450 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007376:	2b00      	cmp	r3, #0
 8007378:	d019      	beq.n	80073ae <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007386:	23ff      	movs	r3, #255	@ 0xff
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 f953 	bl	8007634 <USBH_Get_StringDesc>
 800738e:	4603      	mov	r3, r0
 8007390:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007392:	7bbb      	ldrb	r3, [r7, #14]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2206      	movs	r2, #6
 800739c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800739e:	e059      	b.n	8007454 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	d156      	bne.n	8007454 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2206      	movs	r2, #6
 80073aa:	705a      	strb	r2, [r3, #1]
      break;
 80073ac:	e052      	b.n	8007454 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2206      	movs	r2, #6
 80073b2:	705a      	strb	r2, [r3, #1]
      break;
 80073b4:	e04e      	b.n	8007454 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d019      	beq.n	80073f4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80073cc:	23ff      	movs	r3, #255	@ 0xff
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f930 	bl	8007634 <USBH_Get_StringDesc>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d103      	bne.n	80073e6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2207      	movs	r2, #7
 80073e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80073e4:	e038      	b.n	8007458 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80073e6:	7bbb      	ldrb	r3, [r7, #14]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d135      	bne.n	8007458 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2207      	movs	r2, #7
 80073f0:	705a      	strb	r2, [r3, #1]
      break;
 80073f2:	e031      	b.n	8007458 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2207      	movs	r2, #7
 80073f8:	705a      	strb	r2, [r3, #1]
      break;
 80073fa:	e02d      	b.n	8007458 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007402:	2b00      	cmp	r3, #0
 8007404:	d017      	beq.n	8007436 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007412:	23ff      	movs	r3, #255	@ 0xff
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f90d 	bl	8007634 <USBH_Get_StringDesc>
 800741a:	4603      	mov	r3, r0
 800741c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800741e:	7bbb      	ldrb	r3, [r7, #14]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d102      	bne.n	800742a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007428:	e018      	b.n	800745c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800742a:	7bbb      	ldrb	r3, [r7, #14]
 800742c:	2b03      	cmp	r3, #3
 800742e:	d115      	bne.n	800745c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
      break;
 8007434:	e012      	b.n	800745c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]
      break;
 800743a:	e00f      	b.n	800745c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800743c:	bf00      	nop
 800743e:	e00e      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 8007440:	bf00      	nop
 8007442:	e00c      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 8007444:	bf00      	nop
 8007446:	e00a      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 8007448:	bf00      	nop
 800744a:	e008      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 800744c:	bf00      	nop
 800744e:	e006      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 8007450:	bf00      	nop
 8007452:	e004      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 8007454:	bf00      	nop
 8007456:	e002      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 8007458:	bf00      	nop
 800745a:	e000      	b.n	800745e <USBH_HandleEnum+0x3b6>
      break;
 800745c:	bf00      	nop
  }
  return Status;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr

08007486 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b082      	sub	sp, #8
 800748a:	af00      	add	r7, sp, #0
 800748c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007494:	1c5a      	adds	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f804 	bl	80074aa <USBH_HandleSof>
}
 80074a2:	bf00      	nop
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b0b      	cmp	r3, #11
 80074ba:	d10a      	bne.n	80074d2 <USBH_HandleSof+0x28>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	4798      	blx	r3
  }
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074da:	b480      	push	{r7}
 80074dc:	b083      	sub	sp, #12
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80074ea:	bf00      	nop
}
 80074ec:	370c      	adds	r7, #12
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b083      	sub	sp, #12
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007506:	bf00      	nop
}
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f001 f8be 	bl	80086e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	791b      	ldrb	r3, [r3, #4]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 ff0b 	bl	8008388 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 ff05 	bl	8008388 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af02      	add	r7, sp, #8
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007594:	887b      	ldrh	r3, [r7, #2]
 8007596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800759a:	d901      	bls.n	80075a0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800759c:	2303      	movs	r3, #3
 800759e:	e01b      	b.n	80075d8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80075a6:	887b      	ldrh	r3, [r7, #2]
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	4613      	mov	r3, r2
 80075ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80075b0:	2100      	movs	r1, #0
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f872 	bl	800769c <USBH_GetDescriptor>
 80075b8:	4603      	mov	r3, r0
 80075ba:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80075bc:	7bfb      	ldrb	r3, [r7, #15]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d109      	bne.n	80075d6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80075c8:	887a      	ldrh	r2, [r7, #2]
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 f929 	bl	8007824 <USBH_ParseDevDesc>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	331c      	adds	r3, #28
 80075f0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80075f2:	887b      	ldrh	r3, [r7, #2]
 80075f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075f8:	d901      	bls.n	80075fe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e016      	b.n	800762c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80075fe:	887b      	ldrh	r3, [r7, #2]
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007608:	2100      	movs	r1, #0
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f846 	bl	800769c <USBH_GetDescriptor>
 8007610:	4603      	mov	r3, r0
 8007612:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007614:	7bfb      	ldrb	r3, [r7, #15]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d107      	bne.n	800762a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	461a      	mov	r2, r3
 800761e:	68b9      	ldr	r1, [r7, #8]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 f9af 	bl	8007984 <USBH_ParseCfgDesc>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
}
 800762c:	4618      	mov	r0, r3
 800762e:	3710      	adds	r7, #16
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b088      	sub	sp, #32
 8007638:	af02      	add	r7, sp, #8
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	461a      	mov	r2, r3
 8007640:	460b      	mov	r3, r1
 8007642:	72fb      	strb	r3, [r7, #11]
 8007644:	4613      	mov	r3, r2
 8007646:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007648:	893b      	ldrh	r3, [r7, #8]
 800764a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800764e:	d802      	bhi.n	8007656 <USBH_Get_StringDesc+0x22>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007656:	2303      	movs	r3, #3
 8007658:	e01c      	b.n	8007694 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800765a:	7afb      	ldrb	r3, [r7, #11]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007662:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800766a:	893b      	ldrh	r3, [r7, #8]
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	460b      	mov	r3, r1
 8007670:	2100      	movs	r1, #0
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 f812 	bl	800769c <USBH_GetDescriptor>
 8007678:	4603      	mov	r3, r0
 800767a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d107      	bne.n	8007692 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007688:	893a      	ldrh	r2, [r7, #8]
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 fb8d 	bl	8007dac <USBH_ParseStringDesc>
  }

  return status;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	607b      	str	r3, [r7, #4]
 80076a6:	460b      	mov	r3, r1
 80076a8:	72fb      	strb	r3, [r7, #11]
 80076aa:	4613      	mov	r3, r2
 80076ac:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	789b      	ldrb	r3, [r3, #2]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d11c      	bne.n	80076f0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80076b6:	7afb      	ldrb	r3, [r7, #11]
 80076b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80076bc:	b2da      	uxtb	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2206      	movs	r2, #6
 80076c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	893a      	ldrh	r2, [r7, #8]
 80076cc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80076ce:	893b      	ldrh	r3, [r7, #8]
 80076d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80076d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80076d8:	d104      	bne.n	80076e4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f240 4209 	movw	r2, #1033	@ 0x409
 80076e0:	829a      	strh	r2, [r3, #20]
 80076e2:	e002      	b.n	80076ea <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8b3a      	ldrh	r2, [r7, #24]
 80076ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80076f0:	8b3b      	ldrh	r3, [r7, #24]
 80076f2:	461a      	mov	r2, r3
 80076f4:	6879      	ldr	r1, [r7, #4]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fba5 	bl	8007e46 <USBH_CtlReq>
 80076fc:	4603      	mov	r3, r0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	789b      	ldrb	r3, [r3, #2]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d10f      	bne.n	800773a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2205      	movs	r2, #5
 8007724:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007726:	78fb      	ldrb	r3, [r7, #3]
 8007728:	b29a      	uxth	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800773a:	2200      	movs	r2, #0
 800773c:	2100      	movs	r1, #0
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fb81 	bl	8007e46 <USBH_CtlReq>
 8007744:	4603      	mov	r3, r0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b082      	sub	sp, #8
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
 8007756:	460b      	mov	r3, r1
 8007758:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	789b      	ldrb	r3, [r3, #2]
 800775e:	2b01      	cmp	r3, #1
 8007760:	d10e      	bne.n	8007780 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2209      	movs	r2, #9
 800776c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	887a      	ldrh	r2, [r7, #2]
 8007772:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007780:	2200      	movs	r2, #0
 8007782:	2100      	movs	r1, #0
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fb5e 	bl	8007e46 <USBH_CtlReq>
 800778a:	4603      	mov	r3, r0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3708      	adds	r7, #8
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	789b      	ldrb	r3, [r3, #2]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d10f      	bne.n	80077c8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2203      	movs	r2, #3
 80077b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80077c8:	2200      	movs	r2, #0
 80077ca:	2100      	movs	r1, #0
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fb3a 	bl	8007e46 <USBH_CtlReq>
 80077d2:	4603      	mov	r3, r0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	789b      	ldrb	r3, [r3, #2]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d10f      	bne.n	8007810 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007802:	78fb      	ldrb	r3, [r7, #3]
 8007804:	b29a      	uxth	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007810:	2200      	movs	r2, #0
 8007812:	2100      	movs	r1, #0
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fb16 	bl	8007e46 <USBH_CtlReq>
 800781a:	4603      	mov	r3, r0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	4613      	mov	r3, r2
 8007830:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007838:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800783a:	2300      	movs	r3, #0
 800783c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8007844:	2302      	movs	r3, #2
 8007846:	e094      	b.n	8007972 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	785a      	ldrb	r2, [r3, #1]
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	3302      	adds	r3, #2
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	3303      	adds	r3, #3
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	4313      	orrs	r3, r2
 800786c:	b29a      	uxth	r2, r3
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	791a      	ldrb	r2, [r3, #4]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	795a      	ldrb	r2, [r3, #5]
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	799a      	ldrb	r2, [r3, #6]
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	79da      	ldrb	r2, [r3, #7]
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007898:	2b00      	cmp	r3, #0
 800789a:	d004      	beq.n	80078a6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d11b      	bne.n	80078de <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	79db      	ldrb	r3, [r3, #7]
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	dc0f      	bgt.n	80078ce <USBH_ParseDevDesc+0xaa>
 80078ae:	2b08      	cmp	r3, #8
 80078b0:	db0f      	blt.n	80078d2 <USBH_ParseDevDesc+0xae>
 80078b2:	3b08      	subs	r3, #8
 80078b4:	4a32      	ldr	r2, [pc, #200]	@ (8007980 <USBH_ParseDevDesc+0x15c>)
 80078b6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bf14      	ite	ne
 80078c2:	2301      	movne	r3, #1
 80078c4:	2300      	moveq	r3, #0
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d106      	bne.n	80078da <USBH_ParseDevDesc+0xb6>
 80078cc:	e001      	b.n	80078d2 <USBH_ParseDevDesc+0xae>
 80078ce:	2b40      	cmp	r3, #64	@ 0x40
 80078d0:	d003      	beq.n	80078da <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	2208      	movs	r2, #8
 80078d6:	71da      	strb	r2, [r3, #7]
        break;
 80078d8:	e000      	b.n	80078dc <USBH_ParseDevDesc+0xb8>
        break;
 80078da:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80078dc:	e00e      	b.n	80078fc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80078e4:	2b02      	cmp	r3, #2
 80078e6:	d107      	bne.n	80078f8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	79db      	ldrb	r3, [r3, #7]
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d005      	beq.n	80078fc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	2208      	movs	r2, #8
 80078f4:	71da      	strb	r2, [r3, #7]
 80078f6:	e001      	b.n	80078fc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80078f8:	2303      	movs	r3, #3
 80078fa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80078fc:	88fb      	ldrh	r3, [r7, #6]
 80078fe:	2b08      	cmp	r3, #8
 8007900:	d936      	bls.n	8007970 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	3308      	adds	r3, #8
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	461a      	mov	r2, r3
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	3309      	adds	r3, #9
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	021b      	lsls	r3, r3, #8
 8007912:	b29b      	uxth	r3, r3
 8007914:	4313      	orrs	r3, r2
 8007916:	b29a      	uxth	r2, r3
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	330a      	adds	r3, #10
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	330b      	adds	r3, #11
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	021b      	lsls	r3, r3, #8
 800792c:	b29b      	uxth	r3, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	b29a      	uxth	r2, r3
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	330c      	adds	r3, #12
 800793a:	781b      	ldrb	r3, [r3, #0]
 800793c:	461a      	mov	r2, r3
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	330d      	adds	r3, #13
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	b29b      	uxth	r3, r3
 8007948:	4313      	orrs	r3, r2
 800794a:	b29a      	uxth	r2, r3
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	7b9a      	ldrb	r2, [r3, #14]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	7bda      	ldrb	r2, [r3, #15]
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	7c1a      	ldrb	r2, [r3, #16]
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	7c5a      	ldrb	r2, [r3, #17]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
}
 8007972:	4618      	mov	r0, r3
 8007974:	371c      	adds	r7, #28
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	01000101 	.word	0x01000101

08007984 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08c      	sub	sp, #48	@ 0x30
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007998:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80079a6:	2300      	movs	r3, #0
 80079a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80079b2:	2302      	movs	r3, #2
 80079b4:	e0da      	b.n	8007b6c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	781a      	ldrb	r2, [r3, #0]
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	785a      	ldrb	r2, [r3, #1]
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	3302      	adds	r3, #2
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3303      	adds	r3, #3
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	b29b      	uxth	r3, r3
 80079dc:	4313      	orrs	r3, r2
 80079de:	b29b      	uxth	r3, r3
 80079e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079e4:	bf28      	it	cs
 80079e6:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	791a      	ldrb	r2, [r3, #4]
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	795a      	ldrb	r2, [r3, #5]
 80079fc:	6a3b      	ldr	r3, [r7, #32]
 80079fe:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	799a      	ldrb	r2, [r3, #6]
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	79da      	ldrb	r2, [r3, #7]
 8007a0c:	6a3b      	ldr	r3, [r7, #32]
 8007a0e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	7a1a      	ldrb	r2, [r3, #8]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8007a18:	6a3b      	ldr	r3, [r7, #32]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b09      	cmp	r3, #9
 8007a1e:	d002      	beq.n	8007a26 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007a20:	6a3b      	ldr	r3, [r7, #32]
 8007a22:	2209      	movs	r2, #9
 8007a24:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	f240 809d 	bls.w	8007b68 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8007a2e:	2309      	movs	r3, #9
 8007a30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007a36:	e081      	b.n	8007b3c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a38:	f107 0316 	add.w	r3, r7, #22
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a40:	f000 f9e7 	bl	8007e12 <USBH_GetNextDesc>
 8007a44:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8007a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a48:	785b      	ldrb	r3, [r3, #1]
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d176      	bne.n	8007b3c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b09      	cmp	r3, #9
 8007a54:	d002      	beq.n	8007a5c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a58:	2209      	movs	r2, #9
 8007a5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a60:	221a      	movs	r2, #26
 8007a62:	fb02 f303 	mul.w	r3, r2, r3
 8007a66:	3308      	adds	r3, #8
 8007a68:	6a3a      	ldr	r2, [r7, #32]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a72:	69f8      	ldr	r0, [r7, #28]
 8007a74:	f000 f87e 	bl	8007b74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007a82:	e043      	b.n	8007b0c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007a84:	f107 0316 	add.w	r3, r7, #22
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a8c:	f000 f9c1 	bl	8007e12 <USBH_GetNextDesc>
 8007a90:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b05      	cmp	r3, #5
 8007a98:	d138      	bne.n	8007b0c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	795b      	ldrb	r3, [r3, #5]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d113      	bne.n	8007aca <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d003      	beq.n	8007ab2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007aaa:	69fb      	ldr	r3, [r7, #28]
 8007aac:	799b      	ldrb	r3, [r3, #6]
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d10b      	bne.n	8007aca <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	79db      	ldrb	r3, [r3, #7]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10b      	bne.n	8007ad2 <USBH_ParseCfgDesc+0x14e>
 8007aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	2b09      	cmp	r3, #9
 8007ac0:	d007      	beq.n	8007ad2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ac4:	2209      	movs	r2, #9
 8007ac6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ac8:	e003      	b.n	8007ad2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007acc:	2207      	movs	r2, #7
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e000      	b.n	8007ad4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007ad2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ad8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007adc:	3201      	adds	r2, #1
 8007ade:	00d2      	lsls	r2, r2, #3
 8007ae0:	211a      	movs	r1, #26
 8007ae2:	fb01 f303 	mul.w	r3, r1, r3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	3308      	adds	r3, #8
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	4413      	add	r3, r2
 8007aee:	3304      	adds	r3, #4
 8007af0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8007af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f870 	bl	8007bdc <USBH_ParseEPDesc>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8007b02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b06:	3301      	adds	r3, #1
 8007b08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	791b      	ldrb	r3, [r3, #4]
 8007b10:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d204      	bcs.n	8007b22 <USBH_ParseCfgDesc+0x19e>
 8007b18:	6a3b      	ldr	r3, [r7, #32]
 8007b1a:	885a      	ldrh	r2, [r3, #2]
 8007b1c:	8afb      	ldrh	r3, [r7, #22]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d8b0      	bhi.n	8007a84 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	791b      	ldrb	r3, [r3, #4]
 8007b26:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d201      	bcs.n	8007b32 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e01c      	b.n	8007b6c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8007b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b36:	3301      	adds	r3, #1
 8007b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d805      	bhi.n	8007b50 <USBH_ParseCfgDesc+0x1cc>
 8007b44:	6a3b      	ldr	r3, [r7, #32]
 8007b46:	885a      	ldrh	r2, [r3, #2]
 8007b48:	8afb      	ldrh	r3, [r7, #22]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	f63f af74 	bhi.w	8007a38 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007b50:	6a3b      	ldr	r3, [r7, #32]
 8007b52:	791b      	ldrb	r3, [r3, #4]
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	bf28      	it	cs
 8007b58:	2302      	movcs	r3, #2
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d201      	bcs.n	8007b68 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e001      	b.n	8007b6c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3730      	adds	r7, #48	@ 0x30
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781a      	ldrb	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	785a      	ldrb	r2, [r3, #1]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	789a      	ldrb	r2, [r3, #2]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	78da      	ldrb	r2, [r3, #3]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	bf28      	it	cs
 8007ba8:	2302      	movcs	r3, #2
 8007baa:	b2da      	uxtb	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	795a      	ldrb	r2, [r3, #5]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	799a      	ldrb	r2, [r3, #6]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	79da      	ldrb	r2, [r3, #7]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	7a1a      	ldrb	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	721a      	strb	r2, [r3, #8]
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b087      	sub	sp, #28
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	781a      	ldrb	r2, [r3, #0]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	785a      	ldrb	r2, [r3, #1]
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	789a      	ldrb	r2, [r3, #2]
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	78da      	ldrb	r2, [r3, #3]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3304      	adds	r3, #4
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	461a      	mov	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	3305      	adds	r3, #5
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	021b      	lsls	r3, r3, #8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	799a      	ldrb	r2, [r3, #6]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	889b      	ldrh	r3, [r3, #4]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c3e:	d804      	bhi.n	8007c4a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c48:	d901      	bls.n	8007c4e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d136      	bne.n	8007cc6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	78db      	ldrb	r3, [r3, #3]
 8007c5c:	f003 0303 	and.w	r3, r3, #3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d108      	bne.n	8007c76 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	889b      	ldrh	r3, [r3, #4]
 8007c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c6c:	f240 8097 	bls.w	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c70:	2303      	movs	r3, #3
 8007c72:	75fb      	strb	r3, [r7, #23]
 8007c74:	e093      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	78db      	ldrb	r3, [r3, #3]
 8007c7a:	f003 0303 	and.w	r3, r3, #3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d107      	bne.n	8007c92 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	889b      	ldrh	r3, [r3, #4]
 8007c86:	2b40      	cmp	r3, #64	@ 0x40
 8007c88:	f240 8089 	bls.w	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	75fb      	strb	r3, [r7, #23]
 8007c90:	e085      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	78db      	ldrb	r3, [r3, #3]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d005      	beq.n	8007caa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	78db      	ldrb	r3, [r3, #3]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d10a      	bne.n	8007cc0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	799b      	ldrb	r3, [r3, #6]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <USBH_ParseEPDesc+0xde>
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	799b      	ldrb	r3, [r3, #6]
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d970      	bls.n	8007d9c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007cba:	2303      	movs	r3, #3
 8007cbc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007cbe:	e06d      	b.n	8007d9c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	75fb      	strb	r3, [r7, #23]
 8007cc4:	e06b      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d13c      	bne.n	8007d4a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	78db      	ldrb	r3, [r3, #3]
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d005      	beq.n	8007ce8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	78db      	ldrb	r3, [r3, #3]
 8007ce0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d106      	bne.n	8007cf6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	889b      	ldrh	r3, [r3, #4]
 8007cec:	2b40      	cmp	r3, #64	@ 0x40
 8007cee:	d956      	bls.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007cf4:	e053      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	78db      	ldrb	r3, [r3, #3]
 8007cfa:	f003 0303 	and.w	r3, r3, #3
 8007cfe:	2b01      	cmp	r3, #1
 8007d00:	d10e      	bne.n	8007d20 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	799b      	ldrb	r3, [r3, #6]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d007      	beq.n	8007d1a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d803      	bhi.n	8007d1a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007d16:	2b40      	cmp	r3, #64	@ 0x40
 8007d18:	d941      	bls.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	75fb      	strb	r3, [r7, #23]
 8007d1e:	e03e      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	78db      	ldrb	r3, [r3, #3]
 8007d24:	f003 0303 	and.w	r3, r3, #3
 8007d28:	2b03      	cmp	r3, #3
 8007d2a:	d10b      	bne.n	8007d44 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	799b      	ldrb	r3, [r3, #6]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d004      	beq.n	8007d3e <USBH_ParseEPDesc+0x162>
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	889b      	ldrh	r3, [r3, #4]
 8007d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d3c:	d32f      	bcc.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007d3e:	2303      	movs	r3, #3
 8007d40:	75fb      	strb	r3, [r7, #23]
 8007d42:	e02c      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007d44:	2303      	movs	r3, #3
 8007d46:	75fb      	strb	r3, [r7, #23]
 8007d48:	e029      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d120      	bne.n	8007d96 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	78db      	ldrb	r3, [r3, #3]
 8007d58:	f003 0303 	and.w	r3, r3, #3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d106      	bne.n	8007d6e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	2b08      	cmp	r3, #8
 8007d66:	d01a      	beq.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	75fb      	strb	r3, [r7, #23]
 8007d6c:	e017      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	78db      	ldrb	r3, [r3, #3]
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	2b03      	cmp	r3, #3
 8007d78:	d10a      	bne.n	8007d90 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	799b      	ldrb	r3, [r3, #6]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d003      	beq.n	8007d8a <USBH_ParseEPDesc+0x1ae>
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	889b      	ldrh	r3, [r3, #4]
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d909      	bls.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	75fb      	strb	r3, [r7, #23]
 8007d8e:	e006      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007d90:	2303      	movs	r3, #3
 8007d92:	75fb      	strb	r3, [r7, #23]
 8007d94:	e003      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007d96:	2303      	movs	r3, #3
 8007d98:	75fb      	strb	r3, [r7, #23]
 8007d9a:	e000      	b.n	8007d9e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007d9c:	bf00      	nop
  }

  return status;
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b087      	sub	sp, #28
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d120      	bne.n	8007e06 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	1e9a      	subs	r2, r3, #2
 8007dca:	88fb      	ldrh	r3, [r7, #6]
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	bf28      	it	cs
 8007dd0:	4613      	movcs	r3, r2
 8007dd2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	3302      	adds	r3, #2
 8007dd8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007dda:	2300      	movs	r3, #0
 8007ddc:	82fb      	strh	r3, [r7, #22]
 8007dde:	e00b      	b.n	8007df8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007de0:	8afb      	ldrh	r3, [r7, #22]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4413      	add	r3, r2
 8007de6:	781a      	ldrb	r2, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	3301      	adds	r3, #1
 8007df0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007df2:	8afb      	ldrh	r3, [r7, #22]
 8007df4:	3302      	adds	r3, #2
 8007df6:	82fb      	strh	r3, [r7, #22]
 8007df8:	8afa      	ldrh	r2, [r7, #22]
 8007dfa:	8abb      	ldrh	r3, [r7, #20]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d3ef      	bcc.n	8007de0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2200      	movs	r2, #0
 8007e04:	701a      	strb	r2, [r3, #0]
  }
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b085      	sub	sp, #20
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	881b      	ldrh	r3, [r3, #0]
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	7812      	ldrb	r2, [r2, #0]
 8007e24:	4413      	add	r3, r2
 8007e26:	b29a      	uxth	r2, r3
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e38:	68fb      	ldr	r3, [r7, #12]
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr

08007e46 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b086      	sub	sp, #24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007e54:	2301      	movs	r3, #1
 8007e56:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	789b      	ldrb	r3, [r3, #2]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d002      	beq.n	8007e66 <USBH_CtlReq+0x20>
 8007e60:	2b02      	cmp	r3, #2
 8007e62:	d00f      	beq.n	8007e84 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007e64:	e027      	b.n	8007eb6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	68ba      	ldr	r2, [r7, #8]
 8007e6a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	88fa      	ldrh	r2, [r7, #6]
 8007e70:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2201      	movs	r2, #1
 8007e76:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2202      	movs	r2, #2
 8007e7c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	75fb      	strb	r3, [r7, #23]
      break;
 8007e82:	e018      	b.n	8007eb6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 f81b 	bl	8007ec0 <USBH_HandleControl>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007e8e:	7dfb      	ldrb	r3, [r7, #23]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d002      	beq.n	8007e9a <USBH_CtlReq+0x54>
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d106      	bne.n	8007ea8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	761a      	strb	r2, [r3, #24]
      break;
 8007ea6:	e005      	b.n	8007eb4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d102      	bne.n	8007eb4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	709a      	strb	r2, [r3, #2]
      break;
 8007eb4:	bf00      	nop
  }
  return status;
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7e1b      	ldrb	r3, [r3, #24]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	2b0a      	cmp	r3, #10
 8007ed8:	f200 8156 	bhi.w	8008188 <USBH_HandleControl+0x2c8>
 8007edc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee4 <USBH_HandleControl+0x24>)
 8007ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee2:	bf00      	nop
 8007ee4:	08007f11 	.word	0x08007f11
 8007ee8:	08007f2b 	.word	0x08007f2b
 8007eec:	08007f95 	.word	0x08007f95
 8007ef0:	08007fbb 	.word	0x08007fbb
 8007ef4:	08007ff3 	.word	0x08007ff3
 8007ef8:	0800801d 	.word	0x0800801d
 8007efc:	0800806f 	.word	0x0800806f
 8007f00:	08008091 	.word	0x08008091
 8007f04:	080080cd 	.word	0x080080cd
 8007f08:	080080f3 	.word	0x080080f3
 8007f0c:	08008131 	.word	0x08008131
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f103 0110 	add.w	r1, r3, #16
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	795b      	ldrb	r3, [r3, #5]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f943 	bl	80081a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2202      	movs	r2, #2
 8007f26:	761a      	strb	r2, [r3, #24]
      break;
 8007f28:	e139      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	795b      	ldrb	r3, [r3, #5]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fcc5 	bl	80088c0 <USBH_LL_GetURBState>
 8007f36:	4603      	mov	r3, r0
 8007f38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f3a:	7bbb      	ldrb	r3, [r7, #14]
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d11e      	bne.n	8007f7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	7c1b      	ldrb	r3, [r3, #16]
 8007f44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007f48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	8adb      	ldrh	r3, [r3, #22]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00a      	beq.n	8007f68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007f52:	7b7b      	ldrb	r3, [r7, #13]
 8007f54:	2b80      	cmp	r3, #128	@ 0x80
 8007f56:	d103      	bne.n	8007f60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f5e:	e115      	b.n	800818c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2205      	movs	r2, #5
 8007f64:	761a      	strb	r2, [r3, #24]
      break;
 8007f66:	e111      	b.n	800818c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007f68:	7b7b      	ldrb	r3, [r7, #13]
 8007f6a:	2b80      	cmp	r3, #128	@ 0x80
 8007f6c:	d103      	bne.n	8007f76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2209      	movs	r2, #9
 8007f72:	761a      	strb	r2, [r3, #24]
      break;
 8007f74:	e10a      	b.n	800818c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2207      	movs	r2, #7
 8007f7a:	761a      	strb	r2, [r3, #24]
      break;
 8007f7c:	e106      	b.n	800818c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007f7e:	7bbb      	ldrb	r3, [r7, #14]
 8007f80:	2b04      	cmp	r3, #4
 8007f82:	d003      	beq.n	8007f8c <USBH_HandleControl+0xcc>
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	f040 8100 	bne.w	800818c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	220b      	movs	r2, #11
 8007f90:	761a      	strb	r2, [r3, #24]
      break;
 8007f92:	e0fb      	b.n	800818c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6899      	ldr	r1, [r3, #8]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	899a      	ldrh	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	791b      	ldrb	r3, [r3, #4]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 f93a 	bl	8008226 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2204      	movs	r2, #4
 8007fb6:	761a      	strb	r2, [r3, #24]
      break;
 8007fb8:	e0f1      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 fc7d 	bl	80088c0 <USBH_LL_GetURBState>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d102      	bne.n	8007fd6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2209      	movs	r2, #9
 8007fd4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	d102      	bne.n	8007fe2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fe0:	e0d6      	b.n	8008190 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	2b04      	cmp	r3, #4
 8007fe6:	f040 80d3 	bne.w	8008190 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	220b      	movs	r2, #11
 8007fee:	761a      	strb	r2, [r3, #24]
      break;
 8007ff0:	e0ce      	b.n	8008190 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6899      	ldr	r1, [r3, #8]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	899a      	ldrh	r2, [r3, #12]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	795b      	ldrb	r3, [r3, #5]
 8007ffe:	2001      	movs	r0, #1
 8008000:	9000      	str	r0, [sp, #0]
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f8ea 	bl	80081dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800800e:	b29a      	uxth	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2206      	movs	r2, #6
 8008018:	761a      	strb	r2, [r3, #24]
      break;
 800801a:	e0c0      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	795b      	ldrb	r3, [r3, #5]
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 fc4c 	bl	80088c0 <USBH_LL_GetURBState>
 8008028:	4603      	mov	r3, r0
 800802a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800802c:	7bbb      	ldrb	r3, [r7, #14]
 800802e:	2b01      	cmp	r3, #1
 8008030:	d103      	bne.n	800803a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2207      	movs	r2, #7
 8008036:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008038:	e0ac      	b.n	8008194 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800803a:	7bbb      	ldrb	r3, [r7, #14]
 800803c:	2b05      	cmp	r3, #5
 800803e:	d105      	bne.n	800804c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	220c      	movs	r2, #12
 8008044:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008046:	2303      	movs	r3, #3
 8008048:	73fb      	strb	r3, [r7, #15]
      break;
 800804a:	e0a3      	b.n	8008194 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800804c:	7bbb      	ldrb	r3, [r7, #14]
 800804e:	2b02      	cmp	r3, #2
 8008050:	d103      	bne.n	800805a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2205      	movs	r2, #5
 8008056:	761a      	strb	r2, [r3, #24]
      break;
 8008058:	e09c      	b.n	8008194 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b04      	cmp	r3, #4
 800805e:	f040 8099 	bne.w	8008194 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	220b      	movs	r2, #11
 8008066:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008068:	2302      	movs	r3, #2
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	e092      	b.n	8008194 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	791b      	ldrb	r3, [r3, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	2100      	movs	r1, #0
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f8d5 	bl	8008226 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008082:	b29a      	uxth	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2208      	movs	r2, #8
 800808c:	761a      	strb	r2, [r3, #24]

      break;
 800808e:	e086      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	791b      	ldrb	r3, [r3, #4]
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 fc12 	bl	80088c0 <USBH_LL_GetURBState>
 800809c:	4603      	mov	r3, r0
 800809e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d105      	bne.n	80080b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	220d      	movs	r2, #13
 80080aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80080b0:	e072      	b.n	8008198 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d103      	bne.n	80080c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	220b      	movs	r2, #11
 80080bc:	761a      	strb	r2, [r3, #24]
      break;
 80080be:	e06b      	b.n	8008198 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80080c0:	7bbb      	ldrb	r3, [r7, #14]
 80080c2:	2b05      	cmp	r3, #5
 80080c4:	d168      	bne.n	8008198 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80080c6:	2303      	movs	r3, #3
 80080c8:	73fb      	strb	r3, [r7, #15]
      break;
 80080ca:	e065      	b.n	8008198 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	795b      	ldrb	r3, [r3, #5]
 80080d0:	2201      	movs	r2, #1
 80080d2:	9200      	str	r2, [sp, #0]
 80080d4:	2200      	movs	r2, #0
 80080d6:	2100      	movs	r1, #0
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f87f 	bl	80081dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	220a      	movs	r2, #10
 80080ee:	761a      	strb	r2, [r3, #24]
      break;
 80080f0:	e055      	b.n	800819e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	795b      	ldrb	r3, [r3, #5]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 fbe1 	bl	80088c0 <USBH_LL_GetURBState>
 80080fe:	4603      	mov	r3, r0
 8008100:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b01      	cmp	r3, #1
 8008106:	d105      	bne.n	8008114 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008108:	2300      	movs	r3, #0
 800810a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	220d      	movs	r2, #13
 8008110:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008112:	e043      	b.n	800819c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b02      	cmp	r3, #2
 8008118:	d103      	bne.n	8008122 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2209      	movs	r2, #9
 800811e:	761a      	strb	r2, [r3, #24]
      break;
 8008120:	e03c      	b.n	800819c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008122:	7bbb      	ldrb	r3, [r7, #14]
 8008124:	2b04      	cmp	r3, #4
 8008126:	d139      	bne.n	800819c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	220b      	movs	r2, #11
 800812c:	761a      	strb	r2, [r3, #24]
      break;
 800812e:	e035      	b.n	800819c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7e5b      	ldrb	r3, [r3, #25]
 8008134:	3301      	adds	r3, #1
 8008136:	b2da      	uxtb	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	765a      	strb	r2, [r3, #25]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7e5b      	ldrb	r3, [r3, #25]
 8008140:	2b02      	cmp	r3, #2
 8008142:	d806      	bhi.n	8008152 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008150:	e025      	b.n	800819e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008158:	2106      	movs	r1, #6
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2200      	movs	r2, #0
 8008162:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	795b      	ldrb	r3, [r3, #5]
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f90c 	bl	8008388 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	791b      	ldrb	r3, [r3, #4]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f906 	bl	8008388 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008182:	2302      	movs	r3, #2
 8008184:	73fb      	strb	r3, [r7, #15]
      break;
 8008186:	e00a      	b.n	800819e <USBH_HandleControl+0x2de>

    default:
      break;
 8008188:	bf00      	nop
 800818a:	e008      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 800818c:	bf00      	nop
 800818e:	e006      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 8008190:	bf00      	nop
 8008192:	e004      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 8008194:	bf00      	nop
 8008196:	e002      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 8008198:	bf00      	nop
 800819a:	e000      	b.n	800819e <USBH_HandleControl+0x2de>
      break;
 800819c:	bf00      	nop
  }

  return status;
 800819e:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b088      	sub	sp, #32
 80081ac:	af04      	add	r7, sp, #16
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	4613      	mov	r3, r2
 80081b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081b6:	79f9      	ldrb	r1, [r7, #7]
 80081b8:	2300      	movs	r3, #0
 80081ba:	9303      	str	r3, [sp, #12]
 80081bc:	2308      	movs	r3, #8
 80081be:	9302      	str	r3, [sp, #8]
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	9301      	str	r3, [sp, #4]
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	2300      	movs	r3, #0
 80081ca:	2200      	movs	r2, #0
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fb46 	bl	800885e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3710      	adds	r7, #16
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b088      	sub	sp, #32
 80081e0:	af04      	add	r7, sp, #16
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4611      	mov	r1, r2
 80081e8:	461a      	mov	r2, r3
 80081ea:	460b      	mov	r3, r1
 80081ec:	80fb      	strh	r3, [r7, #6]
 80081ee:	4613      	mov	r3, r2
 80081f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008200:	7979      	ldrb	r1, [r7, #5]
 8008202:	7e3b      	ldrb	r3, [r7, #24]
 8008204:	9303      	str	r3, [sp, #12]
 8008206:	88fb      	ldrh	r3, [r7, #6]
 8008208:	9302      	str	r3, [sp, #8]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	9301      	str	r3, [sp, #4]
 800820e:	2301      	movs	r3, #1
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	2300      	movs	r3, #0
 8008214:	2200      	movs	r2, #0
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	f000 fb21 	bl	800885e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008226:	b580      	push	{r7, lr}
 8008228:	b088      	sub	sp, #32
 800822a:	af04      	add	r7, sp, #16
 800822c:	60f8      	str	r0, [r7, #12]
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	4611      	mov	r1, r2
 8008232:	461a      	mov	r2, r3
 8008234:	460b      	mov	r3, r1
 8008236:	80fb      	strh	r3, [r7, #6]
 8008238:	4613      	mov	r3, r2
 800823a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800823c:	7979      	ldrb	r1, [r7, #5]
 800823e:	2300      	movs	r3, #0
 8008240:	9303      	str	r3, [sp, #12]
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	9302      	str	r3, [sp, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	9301      	str	r3, [sp, #4]
 800824a:	2301      	movs	r3, #1
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	2300      	movs	r3, #0
 8008250:	2201      	movs	r2, #1
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fb03 	bl	800885e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008258:	2300      	movs	r3, #0

}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b088      	sub	sp, #32
 8008266:	af04      	add	r7, sp, #16
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	4611      	mov	r1, r2
 800826e:	461a      	mov	r2, r3
 8008270:	460b      	mov	r3, r1
 8008272:	80fb      	strh	r3, [r7, #6]
 8008274:	4613      	mov	r3, r2
 8008276:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008286:	7979      	ldrb	r1, [r7, #5]
 8008288:	7e3b      	ldrb	r3, [r7, #24]
 800828a:	9303      	str	r3, [sp, #12]
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	9302      	str	r3, [sp, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	9301      	str	r3, [sp, #4]
 8008294:	2301      	movs	r3, #1
 8008296:	9300      	str	r3, [sp, #0]
 8008298:	2302      	movs	r3, #2
 800829a:	2200      	movs	r2, #0
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fade 	bl	800885e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b088      	sub	sp, #32
 80082b0:	af04      	add	r7, sp, #16
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4611      	mov	r1, r2
 80082b8:	461a      	mov	r2, r3
 80082ba:	460b      	mov	r3, r1
 80082bc:	80fb      	strh	r3, [r7, #6]
 80082be:	4613      	mov	r3, r2
 80082c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80082c2:	7979      	ldrb	r1, [r7, #5]
 80082c4:	2300      	movs	r3, #0
 80082c6:	9303      	str	r3, [sp, #12]
 80082c8:	88fb      	ldrh	r3, [r7, #6]
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	2301      	movs	r3, #1
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	2302      	movs	r3, #2
 80082d6:	2201      	movs	r2, #1
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fac0 	bl	800885e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80082de:	2300      	movs	r3, #0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b086      	sub	sp, #24
 80082ec:	af04      	add	r7, sp, #16
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	4608      	mov	r0, r1
 80082f2:	4611      	mov	r1, r2
 80082f4:	461a      	mov	r2, r3
 80082f6:	4603      	mov	r3, r0
 80082f8:	70fb      	strb	r3, [r7, #3]
 80082fa:	460b      	mov	r3, r1
 80082fc:	70bb      	strb	r3, [r7, #2]
 80082fe:	4613      	mov	r3, r2
 8008300:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008302:	7878      	ldrb	r0, [r7, #1]
 8008304:	78ba      	ldrb	r2, [r7, #2]
 8008306:	78f9      	ldrb	r1, [r7, #3]
 8008308:	8b3b      	ldrh	r3, [r7, #24]
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	7d3b      	ldrb	r3, [r7, #20]
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	7c3b      	ldrb	r3, [r7, #16]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4603      	mov	r3, r0
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 fa53 	bl	80087c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800831c:	2300      	movs	r3, #0
}
 800831e:	4618      	mov	r0, r3
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	460b      	mov	r3, r1
 8008330:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008332:	78fb      	ldrb	r3, [r7, #3]
 8008334:	4619      	mov	r1, r3
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa72 	bl	8008820 <USBH_LL_ClosePipe>

  return USBH_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f836 	bl	80083c4 <USBH_GetFreePipe>
 8008358:	4603      	mov	r3, r0
 800835a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800835c:	89fb      	ldrh	r3, [r7, #14]
 800835e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008362:	4293      	cmp	r3, r2
 8008364:	d00a      	beq.n	800837c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	89fb      	ldrh	r3, [r7, #14]
 800836a:	f003 030f 	and.w	r3, r3, #15
 800836e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008372:	6879      	ldr	r1, [r7, #4]
 8008374:	33e0      	adds	r3, #224	@ 0xe0
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	440b      	add	r3, r1
 800837a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800837c:	89fb      	ldrh	r3, [r7, #14]
 800837e:	b2db      	uxtb	r3, r3
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008394:	78fb      	ldrb	r3, [r7, #3]
 8008396:	2b0f      	cmp	r3, #15
 8008398:	d80d      	bhi.n	80083b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800839a:	78fb      	ldrb	r3, [r7, #3]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	33e0      	adds	r3, #224	@ 0xe0
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	685a      	ldr	r2, [r3, #4]
 80083a6:	78fb      	ldrb	r3, [r7, #3]
 80083a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80083ac:	6879      	ldr	r1, [r7, #4]
 80083ae:	33e0      	adds	r3, #224	@ 0xe0
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	440b      	add	r3, r1
 80083b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]
 80083d4:	e00f      	b.n	80083f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	33e0      	adds	r3, #224	@ 0xe0
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	4413      	add	r3, r2
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d102      	bne.n	80083f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	e007      	b.n	8008400 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	3301      	adds	r3, #1
 80083f4:	73fb      	strb	r3, [r7, #15]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b0f      	cmp	r3, #15
 80083fa:	d9ec      	bls.n	80083d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80083fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008400:	4618      	mov	r0, r3
 8008402:	3714      	adds	r7, #20
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008410:	2201      	movs	r2, #1
 8008412:	490e      	ldr	r1, [pc, #56]	@ (800844c <MX_USB_HOST_Init+0x40>)
 8008414:	480e      	ldr	r0, [pc, #56]	@ (8008450 <MX_USB_HOST_Init+0x44>)
 8008416:	f7fe fb15 	bl	8006a44 <USBH_Init>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d001      	beq.n	8008424 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008420:	f7f8 faec 	bl	80009fc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008424:	490b      	ldr	r1, [pc, #44]	@ (8008454 <MX_USB_HOST_Init+0x48>)
 8008426:	480a      	ldr	r0, [pc, #40]	@ (8008450 <MX_USB_HOST_Init+0x44>)
 8008428:	f7fe fbb9 	bl	8006b9e <USBH_RegisterClass>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008432:	f7f8 fae3 	bl	80009fc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008436:	4806      	ldr	r0, [pc, #24]	@ (8008450 <MX_USB_HOST_Init+0x44>)
 8008438:	f7fe fc3d 	bl	8006cb6 <USBH_Start>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008442:	f7f8 fadb 	bl	80009fc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008446:	bf00      	nop
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	0800846d 	.word	0x0800846d
 8008450:	200001a0 	.word	0x200001a0
 8008454:	2000000c 	.word	0x2000000c

08008458 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800845c:	4802      	ldr	r0, [pc, #8]	@ (8008468 <MX_USB_HOST_Process+0x10>)
 800845e:	f7fe fc3b 	bl	8006cd8 <USBH_Process>
}
 8008462:	bf00      	nop
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	200001a0 	.word	0x200001a0

0800846c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	460b      	mov	r3, r1
 8008476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008478:	78fb      	ldrb	r3, [r7, #3]
 800847a:	3b01      	subs	r3, #1
 800847c:	2b04      	cmp	r3, #4
 800847e:	d819      	bhi.n	80084b4 <USBH_UserProcess+0x48>
 8008480:	a201      	add	r2, pc, #4	@ (adr r2, 8008488 <USBH_UserProcess+0x1c>)
 8008482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008486:	bf00      	nop
 8008488:	080084b5 	.word	0x080084b5
 800848c:	080084a5 	.word	0x080084a5
 8008490:	080084b5 	.word	0x080084b5
 8008494:	080084ad 	.word	0x080084ad
 8008498:	0800849d 	.word	0x0800849d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800849c:	4b09      	ldr	r3, [pc, #36]	@ (80084c4 <USBH_UserProcess+0x58>)
 800849e:	2203      	movs	r2, #3
 80084a0:	701a      	strb	r2, [r3, #0]
  break;
 80084a2:	e008      	b.n	80084b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80084a4:	4b07      	ldr	r3, [pc, #28]	@ (80084c4 <USBH_UserProcess+0x58>)
 80084a6:	2202      	movs	r2, #2
 80084a8:	701a      	strb	r2, [r3, #0]
  break;
 80084aa:	e004      	b.n	80084b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80084ac:	4b05      	ldr	r3, [pc, #20]	@ (80084c4 <USBH_UserProcess+0x58>)
 80084ae:	2201      	movs	r2, #1
 80084b0:	701a      	strb	r2, [r3, #0]
  break;
 80084b2:	e000      	b.n	80084b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80084b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80084b6:	bf00      	nop
 80084b8:	370c      	adds	r7, #12
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000578 	.word	0x20000578

080084c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08a      	sub	sp, #40	@ 0x28
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d0:	f107 0314 	add.w	r3, r7, #20
 80084d4:	2200      	movs	r2, #0
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	609a      	str	r2, [r3, #8]
 80084dc:	60da      	str	r2, [r3, #12]
 80084de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80084e8:	d147      	bne.n	800857a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084ea:	2300      	movs	r3, #0
 80084ec:	613b      	str	r3, [r7, #16]
 80084ee:	4b25      	ldr	r3, [pc, #148]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 80084f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f2:	4a24      	ldr	r2, [pc, #144]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 80084f4:	f043 0301 	orr.w	r3, r3, #1
 80084f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80084fa:	4b22      	ldr	r3, [pc, #136]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 80084fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	613b      	str	r3, [r7, #16]
 8008504:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800850a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800850c:	2300      	movs	r3, #0
 800850e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008514:	f107 0314 	add.w	r3, r7, #20
 8008518:	4619      	mov	r1, r3
 800851a:	481b      	ldr	r0, [pc, #108]	@ (8008588 <HAL_HCD_MspInit+0xc0>)
 800851c:	f7f8 fe6e 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008520:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008526:	2302      	movs	r3, #2
 8008528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800852a:	2300      	movs	r3, #0
 800852c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800852e:	2300      	movs	r3, #0
 8008530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008532:	230a      	movs	r3, #10
 8008534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008536:	f107 0314 	add.w	r3, r7, #20
 800853a:	4619      	mov	r1, r3
 800853c:	4812      	ldr	r0, [pc, #72]	@ (8008588 <HAL_HCD_MspInit+0xc0>)
 800853e:	f7f8 fe5d 	bl	80011fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008542:	4b10      	ldr	r3, [pc, #64]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 8008544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008546:	4a0f      	ldr	r2, [pc, #60]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 8008548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854c:	6353      	str	r3, [r2, #52]	@ 0x34
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	4b0c      	ldr	r3, [pc, #48]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 8008554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008556:	4a0b      	ldr	r2, [pc, #44]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 8008558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800855c:	6453      	str	r3, [r2, #68]	@ 0x44
 800855e:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <HAL_HCD_MspInit+0xbc>)
 8008560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800856a:	2200      	movs	r2, #0
 800856c:	2100      	movs	r1, #0
 800856e:	2043      	movs	r0, #67	@ 0x43
 8008570:	f7f8 fe0d 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008574:	2043      	movs	r0, #67	@ 0x43
 8008576:	f7f8 fe26 	bl	80011c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800857a:	bf00      	nop
 800857c:	3728      	adds	r7, #40	@ 0x28
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40023800 	.word	0x40023800
 8008588:	40020000 	.word	0x40020000

0800858c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe ff73 	bl	8007486 <USBH_LL_IncTimer>
}
 80085a0:	bf00      	nop
 80085a2:	3708      	adds	r7, #8
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fe ffab 	bl	8007512 <USBH_LL_Connect>
}
 80085bc:	bf00      	nop
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe ffb4 	bl	8007540 <USBH_LL_Disconnect>
}
 80085d8:	bf00      	nop
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
 80085ec:	4613      	mov	r3, r2
 80085ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80085f0:	bf00      	nop
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe ff65 	bl	80074da <USBH_LL_PortEnabled>
}
 8008610:	bf00      	nop
 8008612:	3708      	adds	r7, #8
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008626:	4618      	mov	r0, r3
 8008628:	f7fe ff65 	bl	80074f6 <USBH_LL_PortDisabled>
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008642:	2b01      	cmp	r3, #1
 8008644:	d12a      	bne.n	800869c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008646:	4a18      	ldr	r2, [pc, #96]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	4a15      	ldr	r2, [pc, #84]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008652:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008656:	4b14      	ldr	r3, [pc, #80]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008658:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800865c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800865e:	4b12      	ldr	r3, [pc, #72]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008660:	2208      	movs	r2, #8
 8008662:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008664:	4b10      	ldr	r3, [pc, #64]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008666:	2201      	movs	r2, #1
 8008668:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800866a:	4b0f      	ldr	r3, [pc, #60]	@ (80086a8 <USBH_LL_Init+0x74>)
 800866c:	2200      	movs	r2, #0
 800866e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008670:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008672:	2202      	movs	r2, #2
 8008674:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008676:	4b0c      	ldr	r3, [pc, #48]	@ (80086a8 <USBH_LL_Init+0x74>)
 8008678:	2200      	movs	r2, #0
 800867a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800867c:	480a      	ldr	r0, [pc, #40]	@ (80086a8 <USBH_LL_Init+0x74>)
 800867e:	f7f8 ff8a 	bl	8001596 <HAL_HCD_Init>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008688:	f7f8 f9b8 	bl	80009fc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800868c:	4806      	ldr	r0, [pc, #24]	@ (80086a8 <USBH_LL_Init+0x74>)
 800868e:	f7f9 fbeb 	bl	8001e68 <HAL_HCD_GetCurrentFrame>
 8008692:	4603      	mov	r3, r0
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7fe fee6 	bl	8007468 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3708      	adds	r7, #8
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	2000057c 	.word	0x2000057c

080086ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086b4:	2300      	movs	r3, #0
 80086b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f9 fb58 	bl	8001d78 <HAL_HCD_Start>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 f95e 	bl	8008990 <USBH_Get_USB_Status>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3710      	adds	r7, #16
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80086e2:	b580      	push	{r7, lr}
 80086e4:	b084      	sub	sp, #16
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7f9 fb60 	bl	8001dbe <HAL_HCD_Stop>
 80086fe:	4603      	mov	r3, r0
 8008700:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	4618      	mov	r0, r3
 8008706:	f000 f943 	bl	8008990 <USBH_Get_USB_Status>
 800870a:	4603      	mov	r3, r0
 800870c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800870e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008720:	2301      	movs	r3, #1
 8008722:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800872a:	4618      	mov	r0, r3
 800872c:	f7f9 fbaa 	bl	8001e84 <HAL_HCD_GetCurrentSpeed>
 8008730:	4603      	mov	r3, r0
 8008732:	2b02      	cmp	r3, #2
 8008734:	d00c      	beq.n	8008750 <USBH_LL_GetSpeed+0x38>
 8008736:	2b02      	cmp	r3, #2
 8008738:	d80d      	bhi.n	8008756 <USBH_LL_GetSpeed+0x3e>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d002      	beq.n	8008744 <USBH_LL_GetSpeed+0x2c>
 800873e:	2b01      	cmp	r3, #1
 8008740:	d003      	beq.n	800874a <USBH_LL_GetSpeed+0x32>
 8008742:	e008      	b.n	8008756 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e008      	b.n	800875c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800874a:	2301      	movs	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e005      	b.n	800875c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008750:	2302      	movs	r3, #2
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e002      	b.n	800875c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	bf00      	nop
  }
  return  speed;
 800875c:	7bfb      	ldrb	r3, [r7, #15]
}
 800875e:	4618      	mov	r0, r3
 8008760:	3710      	adds	r7, #16
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008772:	2300      	movs	r3, #0
 8008774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800877c:	4618      	mov	r0, r3
 800877e:	f7f9 fb3b 	bl	8001df8 <HAL_HCD_ResetPort>
 8008782:	4603      	mov	r3, r0
 8008784:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008786:	7bfb      	ldrb	r3, [r7, #15]
 8008788:	4618      	mov	r0, r3
 800878a:	f000 f901 	bl	8008990 <USBH_Get_USB_Status>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008792:	7bbb      	ldrb	r3, [r7, #14]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b082      	sub	sp, #8
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	460b      	mov	r3, r1
 80087a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087ae:	78fa      	ldrb	r2, [r7, #3]
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7f9 fb43 	bl	8001e3e <HAL_HCD_HC_GetXferCount>
 80087b8:	4603      	mov	r3, r0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80087c2:	b590      	push	{r4, r7, lr}
 80087c4:	b089      	sub	sp, #36	@ 0x24
 80087c6:	af04      	add	r7, sp, #16
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	4608      	mov	r0, r1
 80087cc:	4611      	mov	r1, r2
 80087ce:	461a      	mov	r2, r3
 80087d0:	4603      	mov	r3, r0
 80087d2:	70fb      	strb	r3, [r7, #3]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70bb      	strb	r3, [r7, #2]
 80087d8:	4613      	mov	r3, r2
 80087da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087dc:	2300      	movs	r3, #0
 80087de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80087e0:	2300      	movs	r3, #0
 80087e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80087ea:	787c      	ldrb	r4, [r7, #1]
 80087ec:	78ba      	ldrb	r2, [r7, #2]
 80087ee:	78f9      	ldrb	r1, [r7, #3]
 80087f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80087f2:	9302      	str	r3, [sp, #8]
 80087f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80087f8:	9301      	str	r3, [sp, #4]
 80087fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	4623      	mov	r3, r4
 8008802:	f7f8 ff2f 	bl	8001664 <HAL_HCD_HC_Init>
 8008806:	4603      	mov	r3, r0
 8008808:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 f8bf 	bl	8008990 <USBH_Get_USB_Status>
 8008812:	4603      	mov	r3, r0
 8008814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008816:	7bbb      	ldrb	r3, [r7, #14]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3714      	adds	r7, #20
 800881c:	46bd      	mov	sp, r7
 800881e:	bd90      	pop	{r4, r7, pc}

08008820 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800882c:	2300      	movs	r3, #0
 800882e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f7f8 ffc8 	bl	80017d4 <HAL_HCD_HC_Halt>
 8008844:	4603      	mov	r3, r0
 8008846:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f8a0 	bl	8008990 <USBH_Get_USB_Status>
 8008850:	4603      	mov	r3, r0
 8008852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008854:	7bbb      	ldrb	r3, [r7, #14]
}
 8008856:	4618      	mov	r0, r3
 8008858:	3710      	adds	r7, #16
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800885e:	b590      	push	{r4, r7, lr}
 8008860:	b089      	sub	sp, #36	@ 0x24
 8008862:	af04      	add	r7, sp, #16
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	4608      	mov	r0, r1
 8008868:	4611      	mov	r1, r2
 800886a:	461a      	mov	r2, r3
 800886c:	4603      	mov	r3, r0
 800886e:	70fb      	strb	r3, [r7, #3]
 8008870:	460b      	mov	r3, r1
 8008872:	70bb      	strb	r3, [r7, #2]
 8008874:	4613      	mov	r3, r2
 8008876:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008886:	787c      	ldrb	r4, [r7, #1]
 8008888:	78ba      	ldrb	r2, [r7, #2]
 800888a:	78f9      	ldrb	r1, [r7, #3]
 800888c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008890:	9303      	str	r3, [sp, #12]
 8008892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008894:	9302      	str	r3, [sp, #8]
 8008896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4623      	mov	r3, r4
 80088a2:	f7f8 ffbb 	bl	800181c <HAL_HCD_HC_SubmitRequest>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80088aa:	7bfb      	ldrb	r3, [r7, #15]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f000 f86f 	bl	8008990 <USBH_Get_USB_Status>
 80088b2:	4603      	mov	r3, r0
 80088b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd90      	pop	{r4, r7, pc}

080088c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	460b      	mov	r3, r1
 80088ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80088d2:	78fa      	ldrb	r2, [r7, #3]
 80088d4:	4611      	mov	r1, r2
 80088d6:	4618      	mov	r0, r3
 80088d8:	f7f9 fa9c 	bl	8001e14 <HAL_HCD_HC_GetURBState>
 80088dc:	4603      	mov	r3, r0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b082      	sub	sp, #8
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
 80088ee:	460b      	mov	r3, r1
 80088f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d103      	bne.n	8008904 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80088fc:	78fb      	ldrb	r3, [r7, #3]
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f872 	bl	80089e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008904:	20c8      	movs	r0, #200	@ 0xc8
 8008906:	f7f8 fb43 	bl	8000f90 <HAL_Delay>
  return USBH_OK;
 800890a:	2300      	movs	r3, #0
}
 800890c:	4618      	mov	r0, r3
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
 8008920:	4613      	mov	r3, r2
 8008922:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800892a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	4613      	mov	r3, r2
 8008932:	011b      	lsls	r3, r3, #4
 8008934:	1a9b      	subs	r3, r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	440b      	add	r3, r1
 800893a:	3317      	adds	r3, #23
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	68f9      	ldr	r1, [r7, #12]
 8008946:	4613      	mov	r3, r2
 8008948:	011b      	lsls	r3, r3, #4
 800894a:	1a9b      	subs	r3, r3, r2
 800894c:	009b      	lsls	r3, r3, #2
 800894e:	440b      	add	r3, r1
 8008950:	333c      	adds	r3, #60	@ 0x3c
 8008952:	78ba      	ldrb	r2, [r7, #2]
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e009      	b.n	800896c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008958:	78fa      	ldrb	r2, [r7, #3]
 800895a:	68f9      	ldr	r1, [r7, #12]
 800895c:	4613      	mov	r3, r2
 800895e:	011b      	lsls	r3, r3, #4
 8008960:	1a9b      	subs	r3, r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	440b      	add	r3, r1
 8008966:	333d      	adds	r3, #61	@ 0x3d
 8008968:	78ba      	ldrb	r2, [r7, #2]
 800896a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3714      	adds	r7, #20
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7f8 fb04 	bl	8000f90 <HAL_Delay>
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008990:	b480      	push	{r7}
 8008992:	b085      	sub	sp, #20
 8008994:	af00      	add	r7, sp, #0
 8008996:	4603      	mov	r3, r0
 8008998:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d817      	bhi.n	80089d4 <USBH_Get_USB_Status+0x44>
 80089a4:	a201      	add	r2, pc, #4	@ (adr r2, 80089ac <USBH_Get_USB_Status+0x1c>)
 80089a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089aa:	bf00      	nop
 80089ac:	080089bd 	.word	0x080089bd
 80089b0:	080089c3 	.word	0x080089c3
 80089b4:	080089c9 	.word	0x080089c9
 80089b8:	080089cf 	.word	0x080089cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	73fb      	strb	r3, [r7, #15]
    break;
 80089c0:	e00b      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80089c2:	2302      	movs	r3, #2
 80089c4:	73fb      	strb	r3, [r7, #15]
    break;
 80089c6:	e008      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
    break;
 80089cc:	e005      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80089ce:	2302      	movs	r3, #2
 80089d0:	73fb      	strb	r3, [r7, #15]
    break;
 80089d2:	e002      	b.n	80089da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80089d4:	2302      	movs	r3, #2
 80089d6:	73fb      	strb	r3, [r7, #15]
    break;
 80089d8:	bf00      	nop
  }
  return usb_status;
 80089da:	7bfb      	ldrb	r3, [r7, #15]
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	4603      	mov	r3, r0
 80089f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d102      	bne.n	8008a02 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73fb      	strb	r3, [r7, #15]
 8008a00:	e001      	b.n	8008a06 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008a02:	2301      	movs	r3, #1
 8008a04:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	461a      	mov	r2, r3
 8008a0a:	2101      	movs	r1, #1
 8008a0c:	4803      	ldr	r0, [pc, #12]	@ (8008a1c <MX_DriverVbusFS+0x34>)
 8008a0e:	f7f8 fda9 	bl	8001564 <HAL_GPIO_WritePin>
}
 8008a12:	bf00      	nop
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	40020800 	.word	0x40020800

08008a20 <malloc>:
 8008a20:	4b02      	ldr	r3, [pc, #8]	@ (8008a2c <malloc+0xc>)
 8008a22:	4601      	mov	r1, r0
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	f000 b82d 	b.w	8008a84 <_malloc_r>
 8008a2a:	bf00      	nop
 8008a2c:	20000038 	.word	0x20000038

08008a30 <free>:
 8008a30:	4b02      	ldr	r3, [pc, #8]	@ (8008a3c <free+0xc>)
 8008a32:	4601      	mov	r1, r0
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	f000 ba55 	b.w	8008ee4 <_free_r>
 8008a3a:	bf00      	nop
 8008a3c:	20000038 	.word	0x20000038

08008a40 <sbrk_aligned>:
 8008a40:	b570      	push	{r4, r5, r6, lr}
 8008a42:	4e0f      	ldr	r6, [pc, #60]	@ (8008a80 <sbrk_aligned+0x40>)
 8008a44:	460c      	mov	r4, r1
 8008a46:	6831      	ldr	r1, [r6, #0]
 8008a48:	4605      	mov	r5, r0
 8008a4a:	b911      	cbnz	r1, 8008a52 <sbrk_aligned+0x12>
 8008a4c:	f000 f9fa 	bl	8008e44 <_sbrk_r>
 8008a50:	6030      	str	r0, [r6, #0]
 8008a52:	4621      	mov	r1, r4
 8008a54:	4628      	mov	r0, r5
 8008a56:	f000 f9f5 	bl	8008e44 <_sbrk_r>
 8008a5a:	1c43      	adds	r3, r0, #1
 8008a5c:	d103      	bne.n	8008a66 <sbrk_aligned+0x26>
 8008a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a62:	4620      	mov	r0, r4
 8008a64:	bd70      	pop	{r4, r5, r6, pc}
 8008a66:	1cc4      	adds	r4, r0, #3
 8008a68:	f024 0403 	bic.w	r4, r4, #3
 8008a6c:	42a0      	cmp	r0, r4
 8008a6e:	d0f8      	beq.n	8008a62 <sbrk_aligned+0x22>
 8008a70:	1a21      	subs	r1, r4, r0
 8008a72:	4628      	mov	r0, r5
 8008a74:	f000 f9e6 	bl	8008e44 <_sbrk_r>
 8008a78:	3001      	adds	r0, #1
 8008a7a:	d1f2      	bne.n	8008a62 <sbrk_aligned+0x22>
 8008a7c:	e7ef      	b.n	8008a5e <sbrk_aligned+0x1e>
 8008a7e:	bf00      	nop
 8008a80:	2000095c 	.word	0x2000095c

08008a84 <_malloc_r>:
 8008a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a88:	1ccd      	adds	r5, r1, #3
 8008a8a:	f025 0503 	bic.w	r5, r5, #3
 8008a8e:	3508      	adds	r5, #8
 8008a90:	2d0c      	cmp	r5, #12
 8008a92:	bf38      	it	cc
 8008a94:	250c      	movcc	r5, #12
 8008a96:	2d00      	cmp	r5, #0
 8008a98:	4606      	mov	r6, r0
 8008a9a:	db01      	blt.n	8008aa0 <_malloc_r+0x1c>
 8008a9c:	42a9      	cmp	r1, r5
 8008a9e:	d904      	bls.n	8008aaa <_malloc_r+0x26>
 8008aa0:	230c      	movs	r3, #12
 8008aa2:	6033      	str	r3, [r6, #0]
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b80 <_malloc_r+0xfc>
 8008aae:	f000 f869 	bl	8008b84 <__malloc_lock>
 8008ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8008ab6:	461c      	mov	r4, r3
 8008ab8:	bb44      	cbnz	r4, 8008b0c <_malloc_r+0x88>
 8008aba:	4629      	mov	r1, r5
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7ff ffbf 	bl	8008a40 <sbrk_aligned>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	d158      	bne.n	8008b7a <_malloc_r+0xf6>
 8008ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8008acc:	4627      	mov	r7, r4
 8008ace:	2f00      	cmp	r7, #0
 8008ad0:	d143      	bne.n	8008b5a <_malloc_r+0xd6>
 8008ad2:	2c00      	cmp	r4, #0
 8008ad4:	d04b      	beq.n	8008b6e <_malloc_r+0xea>
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	4639      	mov	r1, r7
 8008ada:	4630      	mov	r0, r6
 8008adc:	eb04 0903 	add.w	r9, r4, r3
 8008ae0:	f000 f9b0 	bl	8008e44 <_sbrk_r>
 8008ae4:	4581      	cmp	r9, r0
 8008ae6:	d142      	bne.n	8008b6e <_malloc_r+0xea>
 8008ae8:	6821      	ldr	r1, [r4, #0]
 8008aea:	1a6d      	subs	r5, r5, r1
 8008aec:	4629      	mov	r1, r5
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ffa6 	bl	8008a40 <sbrk_aligned>
 8008af4:	3001      	adds	r0, #1
 8008af6:	d03a      	beq.n	8008b6e <_malloc_r+0xea>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	442b      	add	r3, r5
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	f8d8 3000 	ldr.w	r3, [r8]
 8008b02:	685a      	ldr	r2, [r3, #4]
 8008b04:	bb62      	cbnz	r2, 8008b60 <_malloc_r+0xdc>
 8008b06:	f8c8 7000 	str.w	r7, [r8]
 8008b0a:	e00f      	b.n	8008b2c <_malloc_r+0xa8>
 8008b0c:	6822      	ldr	r2, [r4, #0]
 8008b0e:	1b52      	subs	r2, r2, r5
 8008b10:	d420      	bmi.n	8008b54 <_malloc_r+0xd0>
 8008b12:	2a0b      	cmp	r2, #11
 8008b14:	d917      	bls.n	8008b46 <_malloc_r+0xc2>
 8008b16:	1961      	adds	r1, r4, r5
 8008b18:	42a3      	cmp	r3, r4
 8008b1a:	6025      	str	r5, [r4, #0]
 8008b1c:	bf18      	it	ne
 8008b1e:	6059      	strne	r1, [r3, #4]
 8008b20:	6863      	ldr	r3, [r4, #4]
 8008b22:	bf08      	it	eq
 8008b24:	f8c8 1000 	streq.w	r1, [r8]
 8008b28:	5162      	str	r2, [r4, r5]
 8008b2a:	604b      	str	r3, [r1, #4]
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f000 f82f 	bl	8008b90 <__malloc_unlock>
 8008b32:	f104 000b 	add.w	r0, r4, #11
 8008b36:	1d23      	adds	r3, r4, #4
 8008b38:	f020 0007 	bic.w	r0, r0, #7
 8008b3c:	1ac2      	subs	r2, r0, r3
 8008b3e:	bf1c      	itt	ne
 8008b40:	1a1b      	subne	r3, r3, r0
 8008b42:	50a3      	strne	r3, [r4, r2]
 8008b44:	e7af      	b.n	8008aa6 <_malloc_r+0x22>
 8008b46:	6862      	ldr	r2, [r4, #4]
 8008b48:	42a3      	cmp	r3, r4
 8008b4a:	bf0c      	ite	eq
 8008b4c:	f8c8 2000 	streq.w	r2, [r8]
 8008b50:	605a      	strne	r2, [r3, #4]
 8008b52:	e7eb      	b.n	8008b2c <_malloc_r+0xa8>
 8008b54:	4623      	mov	r3, r4
 8008b56:	6864      	ldr	r4, [r4, #4]
 8008b58:	e7ae      	b.n	8008ab8 <_malloc_r+0x34>
 8008b5a:	463c      	mov	r4, r7
 8008b5c:	687f      	ldr	r7, [r7, #4]
 8008b5e:	e7b6      	b.n	8008ace <_malloc_r+0x4a>
 8008b60:	461a      	mov	r2, r3
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d1fb      	bne.n	8008b60 <_malloc_r+0xdc>
 8008b68:	2300      	movs	r3, #0
 8008b6a:	6053      	str	r3, [r2, #4]
 8008b6c:	e7de      	b.n	8008b2c <_malloc_r+0xa8>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	4630      	mov	r0, r6
 8008b74:	f000 f80c 	bl	8008b90 <__malloc_unlock>
 8008b78:	e794      	b.n	8008aa4 <_malloc_r+0x20>
 8008b7a:	6005      	str	r5, [r0, #0]
 8008b7c:	e7d6      	b.n	8008b2c <_malloc_r+0xa8>
 8008b7e:	bf00      	nop
 8008b80:	20000960 	.word	0x20000960

08008b84 <__malloc_lock>:
 8008b84:	4801      	ldr	r0, [pc, #4]	@ (8008b8c <__malloc_lock+0x8>)
 8008b86:	f000 b9aa 	b.w	8008ede <__retarget_lock_acquire_recursive>
 8008b8a:	bf00      	nop
 8008b8c:	20000aa4 	.word	0x20000aa4

08008b90 <__malloc_unlock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__malloc_unlock+0x8>)
 8008b92:	f000 b9a5 	b.w	8008ee0 <__retarget_lock_release_recursive>
 8008b96:	bf00      	nop
 8008b98:	20000aa4 	.word	0x20000aa4

08008b9c <std>:
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	e9c0 3300 	strd	r3, r3, [r0]
 8008ba6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008baa:	6083      	str	r3, [r0, #8]
 8008bac:	8181      	strh	r1, [r0, #12]
 8008bae:	6643      	str	r3, [r0, #100]	@ 0x64
 8008bb0:	81c2      	strh	r2, [r0, #14]
 8008bb2:	6183      	str	r3, [r0, #24]
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	2208      	movs	r2, #8
 8008bb8:	305c      	adds	r0, #92	@ 0x5c
 8008bba:	f000 f906 	bl	8008dca <memset>
 8008bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf4 <std+0x58>)
 8008bc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8008bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8008bf8 <std+0x5c>)
 8008bc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bfc <std+0x60>)
 8008bc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008bca:	4b0d      	ldr	r3, [pc, #52]	@ (8008c00 <std+0x64>)
 8008bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8008bce:	4b0d      	ldr	r3, [pc, #52]	@ (8008c04 <std+0x68>)
 8008bd0:	6224      	str	r4, [r4, #32]
 8008bd2:	429c      	cmp	r4, r3
 8008bd4:	d006      	beq.n	8008be4 <std+0x48>
 8008bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008bda:	4294      	cmp	r4, r2
 8008bdc:	d002      	beq.n	8008be4 <std+0x48>
 8008bde:	33d0      	adds	r3, #208	@ 0xd0
 8008be0:	429c      	cmp	r4, r3
 8008be2:	d105      	bne.n	8008bf0 <std+0x54>
 8008be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bec:	f000 b976 	b.w	8008edc <__retarget_lock_init_recursive>
 8008bf0:	bd10      	pop	{r4, pc}
 8008bf2:	bf00      	nop
 8008bf4:	08008d45 	.word	0x08008d45
 8008bf8:	08008d67 	.word	0x08008d67
 8008bfc:	08008d9f 	.word	0x08008d9f
 8008c00:	08008dc3 	.word	0x08008dc3
 8008c04:	20000964 	.word	0x20000964

08008c08 <stdio_exit_handler>:
 8008c08:	4a02      	ldr	r2, [pc, #8]	@ (8008c14 <stdio_exit_handler+0xc>)
 8008c0a:	4903      	ldr	r1, [pc, #12]	@ (8008c18 <stdio_exit_handler+0x10>)
 8008c0c:	4803      	ldr	r0, [pc, #12]	@ (8008c1c <stdio_exit_handler+0x14>)
 8008c0e:	f000 b869 	b.w	8008ce4 <_fwalk_sglue>
 8008c12:	bf00      	nop
 8008c14:	2000002c 	.word	0x2000002c
 8008c18:	08009621 	.word	0x08009621
 8008c1c:	2000003c 	.word	0x2000003c

08008c20 <cleanup_stdio>:
 8008c20:	6841      	ldr	r1, [r0, #4]
 8008c22:	4b0c      	ldr	r3, [pc, #48]	@ (8008c54 <cleanup_stdio+0x34>)
 8008c24:	4299      	cmp	r1, r3
 8008c26:	b510      	push	{r4, lr}
 8008c28:	4604      	mov	r4, r0
 8008c2a:	d001      	beq.n	8008c30 <cleanup_stdio+0x10>
 8008c2c:	f000 fcf8 	bl	8009620 <_fflush_r>
 8008c30:	68a1      	ldr	r1, [r4, #8]
 8008c32:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <cleanup_stdio+0x38>)
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <cleanup_stdio+0x1e>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f000 fcf1 	bl	8009620 <_fflush_r>
 8008c3e:	68e1      	ldr	r1, [r4, #12]
 8008c40:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <cleanup_stdio+0x3c>)
 8008c42:	4299      	cmp	r1, r3
 8008c44:	d004      	beq.n	8008c50 <cleanup_stdio+0x30>
 8008c46:	4620      	mov	r0, r4
 8008c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c4c:	f000 bce8 	b.w	8009620 <_fflush_r>
 8008c50:	bd10      	pop	{r4, pc}
 8008c52:	bf00      	nop
 8008c54:	20000964 	.word	0x20000964
 8008c58:	200009cc 	.word	0x200009cc
 8008c5c:	20000a34 	.word	0x20000a34

08008c60 <global_stdio_init.part.0>:
 8008c60:	b510      	push	{r4, lr}
 8008c62:	4b0b      	ldr	r3, [pc, #44]	@ (8008c90 <global_stdio_init.part.0+0x30>)
 8008c64:	4c0b      	ldr	r4, [pc, #44]	@ (8008c94 <global_stdio_init.part.0+0x34>)
 8008c66:	4a0c      	ldr	r2, [pc, #48]	@ (8008c98 <global_stdio_init.part.0+0x38>)
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	2104      	movs	r1, #4
 8008c70:	f7ff ff94 	bl	8008b9c <std>
 8008c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c78:	2201      	movs	r2, #1
 8008c7a:	2109      	movs	r1, #9
 8008c7c:	f7ff ff8e 	bl	8008b9c <std>
 8008c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c84:	2202      	movs	r2, #2
 8008c86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c8a:	2112      	movs	r1, #18
 8008c8c:	f7ff bf86 	b.w	8008b9c <std>
 8008c90:	20000a9c 	.word	0x20000a9c
 8008c94:	20000964 	.word	0x20000964
 8008c98:	08008c09 	.word	0x08008c09

08008c9c <__sfp_lock_acquire>:
 8008c9c:	4801      	ldr	r0, [pc, #4]	@ (8008ca4 <__sfp_lock_acquire+0x8>)
 8008c9e:	f000 b91e 	b.w	8008ede <__retarget_lock_acquire_recursive>
 8008ca2:	bf00      	nop
 8008ca4:	20000aa5 	.word	0x20000aa5

08008ca8 <__sfp_lock_release>:
 8008ca8:	4801      	ldr	r0, [pc, #4]	@ (8008cb0 <__sfp_lock_release+0x8>)
 8008caa:	f000 b919 	b.w	8008ee0 <__retarget_lock_release_recursive>
 8008cae:	bf00      	nop
 8008cb0:	20000aa5 	.word	0x20000aa5

08008cb4 <__sinit>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	4604      	mov	r4, r0
 8008cb8:	f7ff fff0 	bl	8008c9c <__sfp_lock_acquire>
 8008cbc:	6a23      	ldr	r3, [r4, #32]
 8008cbe:	b11b      	cbz	r3, 8008cc8 <__sinit+0x14>
 8008cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc4:	f7ff bff0 	b.w	8008ca8 <__sfp_lock_release>
 8008cc8:	4b04      	ldr	r3, [pc, #16]	@ (8008cdc <__sinit+0x28>)
 8008cca:	6223      	str	r3, [r4, #32]
 8008ccc:	4b04      	ldr	r3, [pc, #16]	@ (8008ce0 <__sinit+0x2c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1f5      	bne.n	8008cc0 <__sinit+0xc>
 8008cd4:	f7ff ffc4 	bl	8008c60 <global_stdio_init.part.0>
 8008cd8:	e7f2      	b.n	8008cc0 <__sinit+0xc>
 8008cda:	bf00      	nop
 8008cdc:	08008c21 	.word	0x08008c21
 8008ce0:	20000a9c 	.word	0x20000a9c

08008ce4 <_fwalk_sglue>:
 8008ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ce8:	4607      	mov	r7, r0
 8008cea:	4688      	mov	r8, r1
 8008cec:	4614      	mov	r4, r2
 8008cee:	2600      	movs	r6, #0
 8008cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8008cf8:	d505      	bpl.n	8008d06 <_fwalk_sglue+0x22>
 8008cfa:	6824      	ldr	r4, [r4, #0]
 8008cfc:	2c00      	cmp	r4, #0
 8008cfe:	d1f7      	bne.n	8008cf0 <_fwalk_sglue+0xc>
 8008d00:	4630      	mov	r0, r6
 8008d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d06:	89ab      	ldrh	r3, [r5, #12]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d907      	bls.n	8008d1c <_fwalk_sglue+0x38>
 8008d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d10:	3301      	adds	r3, #1
 8008d12:	d003      	beq.n	8008d1c <_fwalk_sglue+0x38>
 8008d14:	4629      	mov	r1, r5
 8008d16:	4638      	mov	r0, r7
 8008d18:	47c0      	blx	r8
 8008d1a:	4306      	orrs	r6, r0
 8008d1c:	3568      	adds	r5, #104	@ 0x68
 8008d1e:	e7e9      	b.n	8008cf4 <_fwalk_sglue+0x10>

08008d20 <iprintf>:
 8008d20:	b40f      	push	{r0, r1, r2, r3}
 8008d22:	b507      	push	{r0, r1, r2, lr}
 8008d24:	4906      	ldr	r1, [pc, #24]	@ (8008d40 <iprintf+0x20>)
 8008d26:	ab04      	add	r3, sp, #16
 8008d28:	6808      	ldr	r0, [r1, #0]
 8008d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d2e:	6881      	ldr	r1, [r0, #8]
 8008d30:	9301      	str	r3, [sp, #4]
 8008d32:	f000 f94b 	bl	8008fcc <_vfiprintf_r>
 8008d36:	b003      	add	sp, #12
 8008d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d3c:	b004      	add	sp, #16
 8008d3e:	4770      	bx	lr
 8008d40:	20000038 	.word	0x20000038

08008d44 <__sread>:
 8008d44:	b510      	push	{r4, lr}
 8008d46:	460c      	mov	r4, r1
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	f000 f868 	bl	8008e20 <_read_r>
 8008d50:	2800      	cmp	r0, #0
 8008d52:	bfab      	itete	ge
 8008d54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d56:	89a3      	ldrhlt	r3, [r4, #12]
 8008d58:	181b      	addge	r3, r3, r0
 8008d5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d5e:	bfac      	ite	ge
 8008d60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d62:	81a3      	strhlt	r3, [r4, #12]
 8008d64:	bd10      	pop	{r4, pc}

08008d66 <__swrite>:
 8008d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	461f      	mov	r7, r3
 8008d6c:	898b      	ldrh	r3, [r1, #12]
 8008d6e:	05db      	lsls	r3, r3, #23
 8008d70:	4605      	mov	r5, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	4616      	mov	r6, r2
 8008d76:	d505      	bpl.n	8008d84 <__swrite+0x1e>
 8008d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f000 f83c 	bl	8008dfc <_lseek_r>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	4628      	mov	r0, r5
 8008d96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d9a:	f000 b863 	b.w	8008e64 <_write_r>

08008d9e <__sseek>:
 8008d9e:	b510      	push	{r4, lr}
 8008da0:	460c      	mov	r4, r1
 8008da2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008da6:	f000 f829 	bl	8008dfc <_lseek_r>
 8008daa:	1c43      	adds	r3, r0, #1
 8008dac:	89a3      	ldrh	r3, [r4, #12]
 8008dae:	bf15      	itete	ne
 8008db0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008db2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008db6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008dba:	81a3      	strheq	r3, [r4, #12]
 8008dbc:	bf18      	it	ne
 8008dbe:	81a3      	strhne	r3, [r4, #12]
 8008dc0:	bd10      	pop	{r4, pc}

08008dc2 <__sclose>:
 8008dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dc6:	f000 b809 	b.w	8008ddc <_close_r>

08008dca <memset>:
 8008dca:	4402      	add	r2, r0
 8008dcc:	4603      	mov	r3, r0
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d100      	bne.n	8008dd4 <memset+0xa>
 8008dd2:	4770      	bx	lr
 8008dd4:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd8:	e7f9      	b.n	8008dce <memset+0x4>
	...

08008ddc <_close_r>:
 8008ddc:	b538      	push	{r3, r4, r5, lr}
 8008dde:	4d06      	ldr	r5, [pc, #24]	@ (8008df8 <_close_r+0x1c>)
 8008de0:	2300      	movs	r3, #0
 8008de2:	4604      	mov	r4, r0
 8008de4:	4608      	mov	r0, r1
 8008de6:	602b      	str	r3, [r5, #0]
 8008de8:	f7f7 ffb9 	bl	8000d5e <_close>
 8008dec:	1c43      	adds	r3, r0, #1
 8008dee:	d102      	bne.n	8008df6 <_close_r+0x1a>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	b103      	cbz	r3, 8008df6 <_close_r+0x1a>
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	bd38      	pop	{r3, r4, r5, pc}
 8008df8:	20000aa0 	.word	0x20000aa0

08008dfc <_lseek_r>:
 8008dfc:	b538      	push	{r3, r4, r5, lr}
 8008dfe:	4d07      	ldr	r5, [pc, #28]	@ (8008e1c <_lseek_r+0x20>)
 8008e00:	4604      	mov	r4, r0
 8008e02:	4608      	mov	r0, r1
 8008e04:	4611      	mov	r1, r2
 8008e06:	2200      	movs	r2, #0
 8008e08:	602a      	str	r2, [r5, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f7f7 ffce 	bl	8000dac <_lseek>
 8008e10:	1c43      	adds	r3, r0, #1
 8008e12:	d102      	bne.n	8008e1a <_lseek_r+0x1e>
 8008e14:	682b      	ldr	r3, [r5, #0]
 8008e16:	b103      	cbz	r3, 8008e1a <_lseek_r+0x1e>
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	bd38      	pop	{r3, r4, r5, pc}
 8008e1c:	20000aa0 	.word	0x20000aa0

08008e20 <_read_r>:
 8008e20:	b538      	push	{r3, r4, r5, lr}
 8008e22:	4d07      	ldr	r5, [pc, #28]	@ (8008e40 <_read_r+0x20>)
 8008e24:	4604      	mov	r4, r0
 8008e26:	4608      	mov	r0, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	602a      	str	r2, [r5, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f7f7 ff5c 	bl	8000cec <_read>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_read_r+0x1e>
 8008e38:	682b      	ldr	r3, [r5, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_read_r+0x1e>
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20000aa0 	.word	0x20000aa0

08008e44 <_sbrk_r>:
 8008e44:	b538      	push	{r3, r4, r5, lr}
 8008e46:	4d06      	ldr	r5, [pc, #24]	@ (8008e60 <_sbrk_r+0x1c>)
 8008e48:	2300      	movs	r3, #0
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	4608      	mov	r0, r1
 8008e4e:	602b      	str	r3, [r5, #0]
 8008e50:	f7f7 ffba 	bl	8000dc8 <_sbrk>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_sbrk_r+0x1a>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_sbrk_r+0x1a>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	20000aa0 	.word	0x20000aa0

08008e64 <_write_r>:
 8008e64:	b538      	push	{r3, r4, r5, lr}
 8008e66:	4d07      	ldr	r5, [pc, #28]	@ (8008e84 <_write_r+0x20>)
 8008e68:	4604      	mov	r4, r0
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	4611      	mov	r1, r2
 8008e6e:	2200      	movs	r2, #0
 8008e70:	602a      	str	r2, [r5, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	f7f7 ff57 	bl	8000d26 <_write>
 8008e78:	1c43      	adds	r3, r0, #1
 8008e7a:	d102      	bne.n	8008e82 <_write_r+0x1e>
 8008e7c:	682b      	ldr	r3, [r5, #0]
 8008e7e:	b103      	cbz	r3, 8008e82 <_write_r+0x1e>
 8008e80:	6023      	str	r3, [r4, #0]
 8008e82:	bd38      	pop	{r3, r4, r5, pc}
 8008e84:	20000aa0 	.word	0x20000aa0

08008e88 <__errno>:
 8008e88:	4b01      	ldr	r3, [pc, #4]	@ (8008e90 <__errno+0x8>)
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	20000038 	.word	0x20000038

08008e94 <__libc_init_array>:
 8008e94:	b570      	push	{r4, r5, r6, lr}
 8008e96:	4d0d      	ldr	r5, [pc, #52]	@ (8008ecc <__libc_init_array+0x38>)
 8008e98:	4c0d      	ldr	r4, [pc, #52]	@ (8008ed0 <__libc_init_array+0x3c>)
 8008e9a:	1b64      	subs	r4, r4, r5
 8008e9c:	10a4      	asrs	r4, r4, #2
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	42a6      	cmp	r6, r4
 8008ea2:	d109      	bne.n	8008eb8 <__libc_init_array+0x24>
 8008ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ed4 <__libc_init_array+0x40>)
 8008ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ed8 <__libc_init_array+0x44>)
 8008ea8:	f000 fcfa 	bl	80098a0 <_init>
 8008eac:	1b64      	subs	r4, r4, r5
 8008eae:	10a4      	asrs	r4, r4, #2
 8008eb0:	2600      	movs	r6, #0
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	d105      	bne.n	8008ec2 <__libc_init_array+0x2e>
 8008eb6:	bd70      	pop	{r4, r5, r6, pc}
 8008eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ebc:	4798      	blx	r3
 8008ebe:	3601      	adds	r6, #1
 8008ec0:	e7ee      	b.n	8008ea0 <__libc_init_array+0xc>
 8008ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ec6:	4798      	blx	r3
 8008ec8:	3601      	adds	r6, #1
 8008eca:	e7f2      	b.n	8008eb2 <__libc_init_array+0x1e>
 8008ecc:	08009914 	.word	0x08009914
 8008ed0:	08009914 	.word	0x08009914
 8008ed4:	08009914 	.word	0x08009914
 8008ed8:	08009918 	.word	0x08009918

08008edc <__retarget_lock_init_recursive>:
 8008edc:	4770      	bx	lr

08008ede <__retarget_lock_acquire_recursive>:
 8008ede:	4770      	bx	lr

08008ee0 <__retarget_lock_release_recursive>:
 8008ee0:	4770      	bx	lr
	...

08008ee4 <_free_r>:
 8008ee4:	b538      	push	{r3, r4, r5, lr}
 8008ee6:	4605      	mov	r5, r0
 8008ee8:	2900      	cmp	r1, #0
 8008eea:	d041      	beq.n	8008f70 <_free_r+0x8c>
 8008eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ef0:	1f0c      	subs	r4, r1, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bfb8      	it	lt
 8008ef6:	18e4      	addlt	r4, r4, r3
 8008ef8:	f7ff fe44 	bl	8008b84 <__malloc_lock>
 8008efc:	4a1d      	ldr	r2, [pc, #116]	@ (8008f74 <_free_r+0x90>)
 8008efe:	6813      	ldr	r3, [r2, #0]
 8008f00:	b933      	cbnz	r3, 8008f10 <_free_r+0x2c>
 8008f02:	6063      	str	r3, [r4, #4]
 8008f04:	6014      	str	r4, [r2, #0]
 8008f06:	4628      	mov	r0, r5
 8008f08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f0c:	f7ff be40 	b.w	8008b90 <__malloc_unlock>
 8008f10:	42a3      	cmp	r3, r4
 8008f12:	d908      	bls.n	8008f26 <_free_r+0x42>
 8008f14:	6820      	ldr	r0, [r4, #0]
 8008f16:	1821      	adds	r1, r4, r0
 8008f18:	428b      	cmp	r3, r1
 8008f1a:	bf01      	itttt	eq
 8008f1c:	6819      	ldreq	r1, [r3, #0]
 8008f1e:	685b      	ldreq	r3, [r3, #4]
 8008f20:	1809      	addeq	r1, r1, r0
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	e7ed      	b.n	8008f02 <_free_r+0x1e>
 8008f26:	461a      	mov	r2, r3
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	b10b      	cbz	r3, 8008f30 <_free_r+0x4c>
 8008f2c:	42a3      	cmp	r3, r4
 8008f2e:	d9fa      	bls.n	8008f26 <_free_r+0x42>
 8008f30:	6811      	ldr	r1, [r2, #0]
 8008f32:	1850      	adds	r0, r2, r1
 8008f34:	42a0      	cmp	r0, r4
 8008f36:	d10b      	bne.n	8008f50 <_free_r+0x6c>
 8008f38:	6820      	ldr	r0, [r4, #0]
 8008f3a:	4401      	add	r1, r0
 8008f3c:	1850      	adds	r0, r2, r1
 8008f3e:	4283      	cmp	r3, r0
 8008f40:	6011      	str	r1, [r2, #0]
 8008f42:	d1e0      	bne.n	8008f06 <_free_r+0x22>
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	6053      	str	r3, [r2, #4]
 8008f4a:	4408      	add	r0, r1
 8008f4c:	6010      	str	r0, [r2, #0]
 8008f4e:	e7da      	b.n	8008f06 <_free_r+0x22>
 8008f50:	d902      	bls.n	8008f58 <_free_r+0x74>
 8008f52:	230c      	movs	r3, #12
 8008f54:	602b      	str	r3, [r5, #0]
 8008f56:	e7d6      	b.n	8008f06 <_free_r+0x22>
 8008f58:	6820      	ldr	r0, [r4, #0]
 8008f5a:	1821      	adds	r1, r4, r0
 8008f5c:	428b      	cmp	r3, r1
 8008f5e:	bf04      	itt	eq
 8008f60:	6819      	ldreq	r1, [r3, #0]
 8008f62:	685b      	ldreq	r3, [r3, #4]
 8008f64:	6063      	str	r3, [r4, #4]
 8008f66:	bf04      	itt	eq
 8008f68:	1809      	addeq	r1, r1, r0
 8008f6a:	6021      	streq	r1, [r4, #0]
 8008f6c:	6054      	str	r4, [r2, #4]
 8008f6e:	e7ca      	b.n	8008f06 <_free_r+0x22>
 8008f70:	bd38      	pop	{r3, r4, r5, pc}
 8008f72:	bf00      	nop
 8008f74:	20000960 	.word	0x20000960

08008f78 <__sfputc_r>:
 8008f78:	6893      	ldr	r3, [r2, #8]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	b410      	push	{r4}
 8008f80:	6093      	str	r3, [r2, #8]
 8008f82:	da08      	bge.n	8008f96 <__sfputc_r+0x1e>
 8008f84:	6994      	ldr	r4, [r2, #24]
 8008f86:	42a3      	cmp	r3, r4
 8008f88:	db01      	blt.n	8008f8e <__sfputc_r+0x16>
 8008f8a:	290a      	cmp	r1, #10
 8008f8c:	d103      	bne.n	8008f96 <__sfputc_r+0x1e>
 8008f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f92:	f000 bb6d 	b.w	8009670 <__swbuf_r>
 8008f96:	6813      	ldr	r3, [r2, #0]
 8008f98:	1c58      	adds	r0, r3, #1
 8008f9a:	6010      	str	r0, [r2, #0]
 8008f9c:	7019      	strb	r1, [r3, #0]
 8008f9e:	4608      	mov	r0, r1
 8008fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <__sfputs_r>:
 8008fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa8:	4606      	mov	r6, r0
 8008faa:	460f      	mov	r7, r1
 8008fac:	4614      	mov	r4, r2
 8008fae:	18d5      	adds	r5, r2, r3
 8008fb0:	42ac      	cmp	r4, r5
 8008fb2:	d101      	bne.n	8008fb8 <__sfputs_r+0x12>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e007      	b.n	8008fc8 <__sfputs_r+0x22>
 8008fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbc:	463a      	mov	r2, r7
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff ffda 	bl	8008f78 <__sfputc_r>
 8008fc4:	1c43      	adds	r3, r0, #1
 8008fc6:	d1f3      	bne.n	8008fb0 <__sfputs_r+0xa>
 8008fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fcc <_vfiprintf_r>:
 8008fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd0:	460d      	mov	r5, r1
 8008fd2:	b09d      	sub	sp, #116	@ 0x74
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	4698      	mov	r8, r3
 8008fd8:	4606      	mov	r6, r0
 8008fda:	b118      	cbz	r0, 8008fe4 <_vfiprintf_r+0x18>
 8008fdc:	6a03      	ldr	r3, [r0, #32]
 8008fde:	b90b      	cbnz	r3, 8008fe4 <_vfiprintf_r+0x18>
 8008fe0:	f7ff fe68 	bl	8008cb4 <__sinit>
 8008fe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe6:	07d9      	lsls	r1, r3, #31
 8008fe8:	d405      	bmi.n	8008ff6 <_vfiprintf_r+0x2a>
 8008fea:	89ab      	ldrh	r3, [r5, #12]
 8008fec:	059a      	lsls	r2, r3, #22
 8008fee:	d402      	bmi.n	8008ff6 <_vfiprintf_r+0x2a>
 8008ff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ff2:	f7ff ff74 	bl	8008ede <__retarget_lock_acquire_recursive>
 8008ff6:	89ab      	ldrh	r3, [r5, #12]
 8008ff8:	071b      	lsls	r3, r3, #28
 8008ffa:	d501      	bpl.n	8009000 <_vfiprintf_r+0x34>
 8008ffc:	692b      	ldr	r3, [r5, #16]
 8008ffe:	b99b      	cbnz	r3, 8009028 <_vfiprintf_r+0x5c>
 8009000:	4629      	mov	r1, r5
 8009002:	4630      	mov	r0, r6
 8009004:	f000 fb72 	bl	80096ec <__swsetup_r>
 8009008:	b170      	cbz	r0, 8009028 <_vfiprintf_r+0x5c>
 800900a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800900c:	07dc      	lsls	r4, r3, #31
 800900e:	d504      	bpl.n	800901a <_vfiprintf_r+0x4e>
 8009010:	f04f 30ff 	mov.w	r0, #4294967295
 8009014:	b01d      	add	sp, #116	@ 0x74
 8009016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901a:	89ab      	ldrh	r3, [r5, #12]
 800901c:	0598      	lsls	r0, r3, #22
 800901e:	d4f7      	bmi.n	8009010 <_vfiprintf_r+0x44>
 8009020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009022:	f7ff ff5d 	bl	8008ee0 <__retarget_lock_release_recursive>
 8009026:	e7f3      	b.n	8009010 <_vfiprintf_r+0x44>
 8009028:	2300      	movs	r3, #0
 800902a:	9309      	str	r3, [sp, #36]	@ 0x24
 800902c:	2320      	movs	r3, #32
 800902e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009032:	f8cd 800c 	str.w	r8, [sp, #12]
 8009036:	2330      	movs	r3, #48	@ 0x30
 8009038:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091e8 <_vfiprintf_r+0x21c>
 800903c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009040:	f04f 0901 	mov.w	r9, #1
 8009044:	4623      	mov	r3, r4
 8009046:	469a      	mov	sl, r3
 8009048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800904c:	b10a      	cbz	r2, 8009052 <_vfiprintf_r+0x86>
 800904e:	2a25      	cmp	r2, #37	@ 0x25
 8009050:	d1f9      	bne.n	8009046 <_vfiprintf_r+0x7a>
 8009052:	ebba 0b04 	subs.w	fp, sl, r4
 8009056:	d00b      	beq.n	8009070 <_vfiprintf_r+0xa4>
 8009058:	465b      	mov	r3, fp
 800905a:	4622      	mov	r2, r4
 800905c:	4629      	mov	r1, r5
 800905e:	4630      	mov	r0, r6
 8009060:	f7ff ffa1 	bl	8008fa6 <__sfputs_r>
 8009064:	3001      	adds	r0, #1
 8009066:	f000 80a7 	beq.w	80091b8 <_vfiprintf_r+0x1ec>
 800906a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800906c:	445a      	add	r2, fp
 800906e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009070:	f89a 3000 	ldrb.w	r3, [sl]
 8009074:	2b00      	cmp	r3, #0
 8009076:	f000 809f 	beq.w	80091b8 <_vfiprintf_r+0x1ec>
 800907a:	2300      	movs	r3, #0
 800907c:	f04f 32ff 	mov.w	r2, #4294967295
 8009080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009084:	f10a 0a01 	add.w	sl, sl, #1
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	9307      	str	r3, [sp, #28]
 800908c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009090:	931a      	str	r3, [sp, #104]	@ 0x68
 8009092:	4654      	mov	r4, sl
 8009094:	2205      	movs	r2, #5
 8009096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800909a:	4853      	ldr	r0, [pc, #332]	@ (80091e8 <_vfiprintf_r+0x21c>)
 800909c:	f7f7 f898 	bl	80001d0 <memchr>
 80090a0:	9a04      	ldr	r2, [sp, #16]
 80090a2:	b9d8      	cbnz	r0, 80090dc <_vfiprintf_r+0x110>
 80090a4:	06d1      	lsls	r1, r2, #27
 80090a6:	bf44      	itt	mi
 80090a8:	2320      	movmi	r3, #32
 80090aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090ae:	0713      	lsls	r3, r2, #28
 80090b0:	bf44      	itt	mi
 80090b2:	232b      	movmi	r3, #43	@ 0x2b
 80090b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80090b8:	f89a 3000 	ldrb.w	r3, [sl]
 80090bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80090be:	d015      	beq.n	80090ec <_vfiprintf_r+0x120>
 80090c0:	9a07      	ldr	r2, [sp, #28]
 80090c2:	4654      	mov	r4, sl
 80090c4:	2000      	movs	r0, #0
 80090c6:	f04f 0c0a 	mov.w	ip, #10
 80090ca:	4621      	mov	r1, r4
 80090cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090d0:	3b30      	subs	r3, #48	@ 0x30
 80090d2:	2b09      	cmp	r3, #9
 80090d4:	d94b      	bls.n	800916e <_vfiprintf_r+0x1a2>
 80090d6:	b1b0      	cbz	r0, 8009106 <_vfiprintf_r+0x13a>
 80090d8:	9207      	str	r2, [sp, #28]
 80090da:	e014      	b.n	8009106 <_vfiprintf_r+0x13a>
 80090dc:	eba0 0308 	sub.w	r3, r0, r8
 80090e0:	fa09 f303 	lsl.w	r3, r9, r3
 80090e4:	4313      	orrs	r3, r2
 80090e6:	9304      	str	r3, [sp, #16]
 80090e8:	46a2      	mov	sl, r4
 80090ea:	e7d2      	b.n	8009092 <_vfiprintf_r+0xc6>
 80090ec:	9b03      	ldr	r3, [sp, #12]
 80090ee:	1d19      	adds	r1, r3, #4
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	9103      	str	r1, [sp, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	bfbb      	ittet	lt
 80090f8:	425b      	neglt	r3, r3
 80090fa:	f042 0202 	orrlt.w	r2, r2, #2
 80090fe:	9307      	strge	r3, [sp, #28]
 8009100:	9307      	strlt	r3, [sp, #28]
 8009102:	bfb8      	it	lt
 8009104:	9204      	strlt	r2, [sp, #16]
 8009106:	7823      	ldrb	r3, [r4, #0]
 8009108:	2b2e      	cmp	r3, #46	@ 0x2e
 800910a:	d10a      	bne.n	8009122 <_vfiprintf_r+0x156>
 800910c:	7863      	ldrb	r3, [r4, #1]
 800910e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009110:	d132      	bne.n	8009178 <_vfiprintf_r+0x1ac>
 8009112:	9b03      	ldr	r3, [sp, #12]
 8009114:	1d1a      	adds	r2, r3, #4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	9203      	str	r2, [sp, #12]
 800911a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800911e:	3402      	adds	r4, #2
 8009120:	9305      	str	r3, [sp, #20]
 8009122:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091f8 <_vfiprintf_r+0x22c>
 8009126:	7821      	ldrb	r1, [r4, #0]
 8009128:	2203      	movs	r2, #3
 800912a:	4650      	mov	r0, sl
 800912c:	f7f7 f850 	bl	80001d0 <memchr>
 8009130:	b138      	cbz	r0, 8009142 <_vfiprintf_r+0x176>
 8009132:	9b04      	ldr	r3, [sp, #16]
 8009134:	eba0 000a 	sub.w	r0, r0, sl
 8009138:	2240      	movs	r2, #64	@ 0x40
 800913a:	4082      	lsls	r2, r0
 800913c:	4313      	orrs	r3, r2
 800913e:	3401      	adds	r4, #1
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009146:	4829      	ldr	r0, [pc, #164]	@ (80091ec <_vfiprintf_r+0x220>)
 8009148:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800914c:	2206      	movs	r2, #6
 800914e:	f7f7 f83f 	bl	80001d0 <memchr>
 8009152:	2800      	cmp	r0, #0
 8009154:	d03f      	beq.n	80091d6 <_vfiprintf_r+0x20a>
 8009156:	4b26      	ldr	r3, [pc, #152]	@ (80091f0 <_vfiprintf_r+0x224>)
 8009158:	bb1b      	cbnz	r3, 80091a2 <_vfiprintf_r+0x1d6>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	3307      	adds	r3, #7
 800915e:	f023 0307 	bic.w	r3, r3, #7
 8009162:	3308      	adds	r3, #8
 8009164:	9303      	str	r3, [sp, #12]
 8009166:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009168:	443b      	add	r3, r7
 800916a:	9309      	str	r3, [sp, #36]	@ 0x24
 800916c:	e76a      	b.n	8009044 <_vfiprintf_r+0x78>
 800916e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009172:	460c      	mov	r4, r1
 8009174:	2001      	movs	r0, #1
 8009176:	e7a8      	b.n	80090ca <_vfiprintf_r+0xfe>
 8009178:	2300      	movs	r3, #0
 800917a:	3401      	adds	r4, #1
 800917c:	9305      	str	r3, [sp, #20]
 800917e:	4619      	mov	r1, r3
 8009180:	f04f 0c0a 	mov.w	ip, #10
 8009184:	4620      	mov	r0, r4
 8009186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800918a:	3a30      	subs	r2, #48	@ 0x30
 800918c:	2a09      	cmp	r2, #9
 800918e:	d903      	bls.n	8009198 <_vfiprintf_r+0x1cc>
 8009190:	2b00      	cmp	r3, #0
 8009192:	d0c6      	beq.n	8009122 <_vfiprintf_r+0x156>
 8009194:	9105      	str	r1, [sp, #20]
 8009196:	e7c4      	b.n	8009122 <_vfiprintf_r+0x156>
 8009198:	fb0c 2101 	mla	r1, ip, r1, r2
 800919c:	4604      	mov	r4, r0
 800919e:	2301      	movs	r3, #1
 80091a0:	e7f0      	b.n	8009184 <_vfiprintf_r+0x1b8>
 80091a2:	ab03      	add	r3, sp, #12
 80091a4:	9300      	str	r3, [sp, #0]
 80091a6:	462a      	mov	r2, r5
 80091a8:	4b12      	ldr	r3, [pc, #72]	@ (80091f4 <_vfiprintf_r+0x228>)
 80091aa:	a904      	add	r1, sp, #16
 80091ac:	4630      	mov	r0, r6
 80091ae:	f3af 8000 	nop.w
 80091b2:	4607      	mov	r7, r0
 80091b4:	1c78      	adds	r0, r7, #1
 80091b6:	d1d6      	bne.n	8009166 <_vfiprintf_r+0x19a>
 80091b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091ba:	07d9      	lsls	r1, r3, #31
 80091bc:	d405      	bmi.n	80091ca <_vfiprintf_r+0x1fe>
 80091be:	89ab      	ldrh	r3, [r5, #12]
 80091c0:	059a      	lsls	r2, r3, #22
 80091c2:	d402      	bmi.n	80091ca <_vfiprintf_r+0x1fe>
 80091c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091c6:	f7ff fe8b 	bl	8008ee0 <__retarget_lock_release_recursive>
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	065b      	lsls	r3, r3, #25
 80091ce:	f53f af1f 	bmi.w	8009010 <_vfiprintf_r+0x44>
 80091d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091d4:	e71e      	b.n	8009014 <_vfiprintf_r+0x48>
 80091d6:	ab03      	add	r3, sp, #12
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	462a      	mov	r2, r5
 80091dc:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <_vfiprintf_r+0x228>)
 80091de:	a904      	add	r1, sp, #16
 80091e0:	4630      	mov	r0, r6
 80091e2:	f000 f879 	bl	80092d8 <_printf_i>
 80091e6:	e7e4      	b.n	80091b2 <_vfiprintf_r+0x1e6>
 80091e8:	080098d8 	.word	0x080098d8
 80091ec:	080098e2 	.word	0x080098e2
 80091f0:	00000000 	.word	0x00000000
 80091f4:	08008fa7 	.word	0x08008fa7
 80091f8:	080098de 	.word	0x080098de

080091fc <_printf_common>:
 80091fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009200:	4616      	mov	r6, r2
 8009202:	4698      	mov	r8, r3
 8009204:	688a      	ldr	r2, [r1, #8]
 8009206:	690b      	ldr	r3, [r1, #16]
 8009208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800920c:	4293      	cmp	r3, r2
 800920e:	bfb8      	it	lt
 8009210:	4613      	movlt	r3, r2
 8009212:	6033      	str	r3, [r6, #0]
 8009214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009218:	4607      	mov	r7, r0
 800921a:	460c      	mov	r4, r1
 800921c:	b10a      	cbz	r2, 8009222 <_printf_common+0x26>
 800921e:	3301      	adds	r3, #1
 8009220:	6033      	str	r3, [r6, #0]
 8009222:	6823      	ldr	r3, [r4, #0]
 8009224:	0699      	lsls	r1, r3, #26
 8009226:	bf42      	ittt	mi
 8009228:	6833      	ldrmi	r3, [r6, #0]
 800922a:	3302      	addmi	r3, #2
 800922c:	6033      	strmi	r3, [r6, #0]
 800922e:	6825      	ldr	r5, [r4, #0]
 8009230:	f015 0506 	ands.w	r5, r5, #6
 8009234:	d106      	bne.n	8009244 <_printf_common+0x48>
 8009236:	f104 0a19 	add.w	sl, r4, #25
 800923a:	68e3      	ldr	r3, [r4, #12]
 800923c:	6832      	ldr	r2, [r6, #0]
 800923e:	1a9b      	subs	r3, r3, r2
 8009240:	42ab      	cmp	r3, r5
 8009242:	dc26      	bgt.n	8009292 <_printf_common+0x96>
 8009244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009248:	6822      	ldr	r2, [r4, #0]
 800924a:	3b00      	subs	r3, #0
 800924c:	bf18      	it	ne
 800924e:	2301      	movne	r3, #1
 8009250:	0692      	lsls	r2, r2, #26
 8009252:	d42b      	bmi.n	80092ac <_printf_common+0xb0>
 8009254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009258:	4641      	mov	r1, r8
 800925a:	4638      	mov	r0, r7
 800925c:	47c8      	blx	r9
 800925e:	3001      	adds	r0, #1
 8009260:	d01e      	beq.n	80092a0 <_printf_common+0xa4>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	6922      	ldr	r2, [r4, #16]
 8009266:	f003 0306 	and.w	r3, r3, #6
 800926a:	2b04      	cmp	r3, #4
 800926c:	bf02      	ittt	eq
 800926e:	68e5      	ldreq	r5, [r4, #12]
 8009270:	6833      	ldreq	r3, [r6, #0]
 8009272:	1aed      	subeq	r5, r5, r3
 8009274:	68a3      	ldr	r3, [r4, #8]
 8009276:	bf0c      	ite	eq
 8009278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800927c:	2500      	movne	r5, #0
 800927e:	4293      	cmp	r3, r2
 8009280:	bfc4      	itt	gt
 8009282:	1a9b      	subgt	r3, r3, r2
 8009284:	18ed      	addgt	r5, r5, r3
 8009286:	2600      	movs	r6, #0
 8009288:	341a      	adds	r4, #26
 800928a:	42b5      	cmp	r5, r6
 800928c:	d11a      	bne.n	80092c4 <_printf_common+0xc8>
 800928e:	2000      	movs	r0, #0
 8009290:	e008      	b.n	80092a4 <_printf_common+0xa8>
 8009292:	2301      	movs	r3, #1
 8009294:	4652      	mov	r2, sl
 8009296:	4641      	mov	r1, r8
 8009298:	4638      	mov	r0, r7
 800929a:	47c8      	blx	r9
 800929c:	3001      	adds	r0, #1
 800929e:	d103      	bne.n	80092a8 <_printf_common+0xac>
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092a8:	3501      	adds	r5, #1
 80092aa:	e7c6      	b.n	800923a <_printf_common+0x3e>
 80092ac:	18e1      	adds	r1, r4, r3
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	2030      	movs	r0, #48	@ 0x30
 80092b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80092b6:	4422      	add	r2, r4
 80092b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80092bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80092c0:	3302      	adds	r3, #2
 80092c2:	e7c7      	b.n	8009254 <_printf_common+0x58>
 80092c4:	2301      	movs	r3, #1
 80092c6:	4622      	mov	r2, r4
 80092c8:	4641      	mov	r1, r8
 80092ca:	4638      	mov	r0, r7
 80092cc:	47c8      	blx	r9
 80092ce:	3001      	adds	r0, #1
 80092d0:	d0e6      	beq.n	80092a0 <_printf_common+0xa4>
 80092d2:	3601      	adds	r6, #1
 80092d4:	e7d9      	b.n	800928a <_printf_common+0x8e>
	...

080092d8 <_printf_i>:
 80092d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092dc:	7e0f      	ldrb	r7, [r1, #24]
 80092de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092e0:	2f78      	cmp	r7, #120	@ 0x78
 80092e2:	4691      	mov	r9, r2
 80092e4:	4680      	mov	r8, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	469a      	mov	sl, r3
 80092ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092ee:	d807      	bhi.n	8009300 <_printf_i+0x28>
 80092f0:	2f62      	cmp	r7, #98	@ 0x62
 80092f2:	d80a      	bhi.n	800930a <_printf_i+0x32>
 80092f4:	2f00      	cmp	r7, #0
 80092f6:	f000 80d2 	beq.w	800949e <_printf_i+0x1c6>
 80092fa:	2f58      	cmp	r7, #88	@ 0x58
 80092fc:	f000 80b9 	beq.w	8009472 <_printf_i+0x19a>
 8009300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009308:	e03a      	b.n	8009380 <_printf_i+0xa8>
 800930a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800930e:	2b15      	cmp	r3, #21
 8009310:	d8f6      	bhi.n	8009300 <_printf_i+0x28>
 8009312:	a101      	add	r1, pc, #4	@ (adr r1, 8009318 <_printf_i+0x40>)
 8009314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009318:	08009371 	.word	0x08009371
 800931c:	08009385 	.word	0x08009385
 8009320:	08009301 	.word	0x08009301
 8009324:	08009301 	.word	0x08009301
 8009328:	08009301 	.word	0x08009301
 800932c:	08009301 	.word	0x08009301
 8009330:	08009385 	.word	0x08009385
 8009334:	08009301 	.word	0x08009301
 8009338:	08009301 	.word	0x08009301
 800933c:	08009301 	.word	0x08009301
 8009340:	08009301 	.word	0x08009301
 8009344:	08009485 	.word	0x08009485
 8009348:	080093af 	.word	0x080093af
 800934c:	0800943f 	.word	0x0800943f
 8009350:	08009301 	.word	0x08009301
 8009354:	08009301 	.word	0x08009301
 8009358:	080094a7 	.word	0x080094a7
 800935c:	08009301 	.word	0x08009301
 8009360:	080093af 	.word	0x080093af
 8009364:	08009301 	.word	0x08009301
 8009368:	08009301 	.word	0x08009301
 800936c:	08009447 	.word	0x08009447
 8009370:	6833      	ldr	r3, [r6, #0]
 8009372:	1d1a      	adds	r2, r3, #4
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6032      	str	r2, [r6, #0]
 8009378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800937c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009380:	2301      	movs	r3, #1
 8009382:	e09d      	b.n	80094c0 <_printf_i+0x1e8>
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	6820      	ldr	r0, [r4, #0]
 8009388:	1d19      	adds	r1, r3, #4
 800938a:	6031      	str	r1, [r6, #0]
 800938c:	0606      	lsls	r6, r0, #24
 800938e:	d501      	bpl.n	8009394 <_printf_i+0xbc>
 8009390:	681d      	ldr	r5, [r3, #0]
 8009392:	e003      	b.n	800939c <_printf_i+0xc4>
 8009394:	0645      	lsls	r5, r0, #25
 8009396:	d5fb      	bpl.n	8009390 <_printf_i+0xb8>
 8009398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800939c:	2d00      	cmp	r5, #0
 800939e:	da03      	bge.n	80093a8 <_printf_i+0xd0>
 80093a0:	232d      	movs	r3, #45	@ 0x2d
 80093a2:	426d      	negs	r5, r5
 80093a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80093a8:	4859      	ldr	r0, [pc, #356]	@ (8009510 <_printf_i+0x238>)
 80093aa:	230a      	movs	r3, #10
 80093ac:	e011      	b.n	80093d2 <_printf_i+0xfa>
 80093ae:	6821      	ldr	r1, [r4, #0]
 80093b0:	6833      	ldr	r3, [r6, #0]
 80093b2:	0608      	lsls	r0, r1, #24
 80093b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80093b8:	d402      	bmi.n	80093c0 <_printf_i+0xe8>
 80093ba:	0649      	lsls	r1, r1, #25
 80093bc:	bf48      	it	mi
 80093be:	b2ad      	uxthmi	r5, r5
 80093c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80093c2:	4853      	ldr	r0, [pc, #332]	@ (8009510 <_printf_i+0x238>)
 80093c4:	6033      	str	r3, [r6, #0]
 80093c6:	bf14      	ite	ne
 80093c8:	230a      	movne	r3, #10
 80093ca:	2308      	moveq	r3, #8
 80093cc:	2100      	movs	r1, #0
 80093ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093d2:	6866      	ldr	r6, [r4, #4]
 80093d4:	60a6      	str	r6, [r4, #8]
 80093d6:	2e00      	cmp	r6, #0
 80093d8:	bfa2      	ittt	ge
 80093da:	6821      	ldrge	r1, [r4, #0]
 80093dc:	f021 0104 	bicge.w	r1, r1, #4
 80093e0:	6021      	strge	r1, [r4, #0]
 80093e2:	b90d      	cbnz	r5, 80093e8 <_printf_i+0x110>
 80093e4:	2e00      	cmp	r6, #0
 80093e6:	d04b      	beq.n	8009480 <_printf_i+0x1a8>
 80093e8:	4616      	mov	r6, r2
 80093ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80093ee:	fb03 5711 	mls	r7, r3, r1, r5
 80093f2:	5dc7      	ldrb	r7, [r0, r7]
 80093f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093f8:	462f      	mov	r7, r5
 80093fa:	42bb      	cmp	r3, r7
 80093fc:	460d      	mov	r5, r1
 80093fe:	d9f4      	bls.n	80093ea <_printf_i+0x112>
 8009400:	2b08      	cmp	r3, #8
 8009402:	d10b      	bne.n	800941c <_printf_i+0x144>
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	07df      	lsls	r7, r3, #31
 8009408:	d508      	bpl.n	800941c <_printf_i+0x144>
 800940a:	6923      	ldr	r3, [r4, #16]
 800940c:	6861      	ldr	r1, [r4, #4]
 800940e:	4299      	cmp	r1, r3
 8009410:	bfde      	ittt	le
 8009412:	2330      	movle	r3, #48	@ 0x30
 8009414:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009418:	f106 36ff 	addle.w	r6, r6, #4294967295
 800941c:	1b92      	subs	r2, r2, r6
 800941e:	6122      	str	r2, [r4, #16]
 8009420:	f8cd a000 	str.w	sl, [sp]
 8009424:	464b      	mov	r3, r9
 8009426:	aa03      	add	r2, sp, #12
 8009428:	4621      	mov	r1, r4
 800942a:	4640      	mov	r0, r8
 800942c:	f7ff fee6 	bl	80091fc <_printf_common>
 8009430:	3001      	adds	r0, #1
 8009432:	d14a      	bne.n	80094ca <_printf_i+0x1f2>
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	b004      	add	sp, #16
 800943a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	f043 0320 	orr.w	r3, r3, #32
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	4833      	ldr	r0, [pc, #204]	@ (8009514 <_printf_i+0x23c>)
 8009448:	2778      	movs	r7, #120	@ 0x78
 800944a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800944e:	6823      	ldr	r3, [r4, #0]
 8009450:	6831      	ldr	r1, [r6, #0]
 8009452:	061f      	lsls	r7, r3, #24
 8009454:	f851 5b04 	ldr.w	r5, [r1], #4
 8009458:	d402      	bmi.n	8009460 <_printf_i+0x188>
 800945a:	065f      	lsls	r7, r3, #25
 800945c:	bf48      	it	mi
 800945e:	b2ad      	uxthmi	r5, r5
 8009460:	6031      	str	r1, [r6, #0]
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	bf44      	itt	mi
 8009466:	f043 0320 	orrmi.w	r3, r3, #32
 800946a:	6023      	strmi	r3, [r4, #0]
 800946c:	b11d      	cbz	r5, 8009476 <_printf_i+0x19e>
 800946e:	2310      	movs	r3, #16
 8009470:	e7ac      	b.n	80093cc <_printf_i+0xf4>
 8009472:	4827      	ldr	r0, [pc, #156]	@ (8009510 <_printf_i+0x238>)
 8009474:	e7e9      	b.n	800944a <_printf_i+0x172>
 8009476:	6823      	ldr	r3, [r4, #0]
 8009478:	f023 0320 	bic.w	r3, r3, #32
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	e7f6      	b.n	800946e <_printf_i+0x196>
 8009480:	4616      	mov	r6, r2
 8009482:	e7bd      	b.n	8009400 <_printf_i+0x128>
 8009484:	6833      	ldr	r3, [r6, #0]
 8009486:	6825      	ldr	r5, [r4, #0]
 8009488:	6961      	ldr	r1, [r4, #20]
 800948a:	1d18      	adds	r0, r3, #4
 800948c:	6030      	str	r0, [r6, #0]
 800948e:	062e      	lsls	r6, r5, #24
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	d501      	bpl.n	8009498 <_printf_i+0x1c0>
 8009494:	6019      	str	r1, [r3, #0]
 8009496:	e002      	b.n	800949e <_printf_i+0x1c6>
 8009498:	0668      	lsls	r0, r5, #25
 800949a:	d5fb      	bpl.n	8009494 <_printf_i+0x1bc>
 800949c:	8019      	strh	r1, [r3, #0]
 800949e:	2300      	movs	r3, #0
 80094a0:	6123      	str	r3, [r4, #16]
 80094a2:	4616      	mov	r6, r2
 80094a4:	e7bc      	b.n	8009420 <_printf_i+0x148>
 80094a6:	6833      	ldr	r3, [r6, #0]
 80094a8:	1d1a      	adds	r2, r3, #4
 80094aa:	6032      	str	r2, [r6, #0]
 80094ac:	681e      	ldr	r6, [r3, #0]
 80094ae:	6862      	ldr	r2, [r4, #4]
 80094b0:	2100      	movs	r1, #0
 80094b2:	4630      	mov	r0, r6
 80094b4:	f7f6 fe8c 	bl	80001d0 <memchr>
 80094b8:	b108      	cbz	r0, 80094be <_printf_i+0x1e6>
 80094ba:	1b80      	subs	r0, r0, r6
 80094bc:	6060      	str	r0, [r4, #4]
 80094be:	6863      	ldr	r3, [r4, #4]
 80094c0:	6123      	str	r3, [r4, #16]
 80094c2:	2300      	movs	r3, #0
 80094c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094c8:	e7aa      	b.n	8009420 <_printf_i+0x148>
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	4632      	mov	r2, r6
 80094ce:	4649      	mov	r1, r9
 80094d0:	4640      	mov	r0, r8
 80094d2:	47d0      	blx	sl
 80094d4:	3001      	adds	r0, #1
 80094d6:	d0ad      	beq.n	8009434 <_printf_i+0x15c>
 80094d8:	6823      	ldr	r3, [r4, #0]
 80094da:	079b      	lsls	r3, r3, #30
 80094dc:	d413      	bmi.n	8009506 <_printf_i+0x22e>
 80094de:	68e0      	ldr	r0, [r4, #12]
 80094e0:	9b03      	ldr	r3, [sp, #12]
 80094e2:	4298      	cmp	r0, r3
 80094e4:	bfb8      	it	lt
 80094e6:	4618      	movlt	r0, r3
 80094e8:	e7a6      	b.n	8009438 <_printf_i+0x160>
 80094ea:	2301      	movs	r3, #1
 80094ec:	4632      	mov	r2, r6
 80094ee:	4649      	mov	r1, r9
 80094f0:	4640      	mov	r0, r8
 80094f2:	47d0      	blx	sl
 80094f4:	3001      	adds	r0, #1
 80094f6:	d09d      	beq.n	8009434 <_printf_i+0x15c>
 80094f8:	3501      	adds	r5, #1
 80094fa:	68e3      	ldr	r3, [r4, #12]
 80094fc:	9903      	ldr	r1, [sp, #12]
 80094fe:	1a5b      	subs	r3, r3, r1
 8009500:	42ab      	cmp	r3, r5
 8009502:	dcf2      	bgt.n	80094ea <_printf_i+0x212>
 8009504:	e7eb      	b.n	80094de <_printf_i+0x206>
 8009506:	2500      	movs	r5, #0
 8009508:	f104 0619 	add.w	r6, r4, #25
 800950c:	e7f5      	b.n	80094fa <_printf_i+0x222>
 800950e:	bf00      	nop
 8009510:	080098e9 	.word	0x080098e9
 8009514:	080098fa 	.word	0x080098fa

08009518 <__sflush_r>:
 8009518:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800951c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009520:	0716      	lsls	r6, r2, #28
 8009522:	4605      	mov	r5, r0
 8009524:	460c      	mov	r4, r1
 8009526:	d454      	bmi.n	80095d2 <__sflush_r+0xba>
 8009528:	684b      	ldr	r3, [r1, #4]
 800952a:	2b00      	cmp	r3, #0
 800952c:	dc02      	bgt.n	8009534 <__sflush_r+0x1c>
 800952e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009530:	2b00      	cmp	r3, #0
 8009532:	dd48      	ble.n	80095c6 <__sflush_r+0xae>
 8009534:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009536:	2e00      	cmp	r6, #0
 8009538:	d045      	beq.n	80095c6 <__sflush_r+0xae>
 800953a:	2300      	movs	r3, #0
 800953c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009540:	682f      	ldr	r7, [r5, #0]
 8009542:	6a21      	ldr	r1, [r4, #32]
 8009544:	602b      	str	r3, [r5, #0]
 8009546:	d030      	beq.n	80095aa <__sflush_r+0x92>
 8009548:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800954a:	89a3      	ldrh	r3, [r4, #12]
 800954c:	0759      	lsls	r1, r3, #29
 800954e:	d505      	bpl.n	800955c <__sflush_r+0x44>
 8009550:	6863      	ldr	r3, [r4, #4]
 8009552:	1ad2      	subs	r2, r2, r3
 8009554:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009556:	b10b      	cbz	r3, 800955c <__sflush_r+0x44>
 8009558:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800955a:	1ad2      	subs	r2, r2, r3
 800955c:	2300      	movs	r3, #0
 800955e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009560:	6a21      	ldr	r1, [r4, #32]
 8009562:	4628      	mov	r0, r5
 8009564:	47b0      	blx	r6
 8009566:	1c43      	adds	r3, r0, #1
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	d106      	bne.n	800957a <__sflush_r+0x62>
 800956c:	6829      	ldr	r1, [r5, #0]
 800956e:	291d      	cmp	r1, #29
 8009570:	d82b      	bhi.n	80095ca <__sflush_r+0xb2>
 8009572:	4a2a      	ldr	r2, [pc, #168]	@ (800961c <__sflush_r+0x104>)
 8009574:	410a      	asrs	r2, r1
 8009576:	07d6      	lsls	r6, r2, #31
 8009578:	d427      	bmi.n	80095ca <__sflush_r+0xb2>
 800957a:	2200      	movs	r2, #0
 800957c:	6062      	str	r2, [r4, #4]
 800957e:	04d9      	lsls	r1, r3, #19
 8009580:	6922      	ldr	r2, [r4, #16]
 8009582:	6022      	str	r2, [r4, #0]
 8009584:	d504      	bpl.n	8009590 <__sflush_r+0x78>
 8009586:	1c42      	adds	r2, r0, #1
 8009588:	d101      	bne.n	800958e <__sflush_r+0x76>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b903      	cbnz	r3, 8009590 <__sflush_r+0x78>
 800958e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009590:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009592:	602f      	str	r7, [r5, #0]
 8009594:	b1b9      	cbz	r1, 80095c6 <__sflush_r+0xae>
 8009596:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800959a:	4299      	cmp	r1, r3
 800959c:	d002      	beq.n	80095a4 <__sflush_r+0x8c>
 800959e:	4628      	mov	r0, r5
 80095a0:	f7ff fca0 	bl	8008ee4 <_free_r>
 80095a4:	2300      	movs	r3, #0
 80095a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80095a8:	e00d      	b.n	80095c6 <__sflush_r+0xae>
 80095aa:	2301      	movs	r3, #1
 80095ac:	4628      	mov	r0, r5
 80095ae:	47b0      	blx	r6
 80095b0:	4602      	mov	r2, r0
 80095b2:	1c50      	adds	r0, r2, #1
 80095b4:	d1c9      	bne.n	800954a <__sflush_r+0x32>
 80095b6:	682b      	ldr	r3, [r5, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d0c6      	beq.n	800954a <__sflush_r+0x32>
 80095bc:	2b1d      	cmp	r3, #29
 80095be:	d001      	beq.n	80095c4 <__sflush_r+0xac>
 80095c0:	2b16      	cmp	r3, #22
 80095c2:	d11e      	bne.n	8009602 <__sflush_r+0xea>
 80095c4:	602f      	str	r7, [r5, #0]
 80095c6:	2000      	movs	r0, #0
 80095c8:	e022      	b.n	8009610 <__sflush_r+0xf8>
 80095ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095ce:	b21b      	sxth	r3, r3
 80095d0:	e01b      	b.n	800960a <__sflush_r+0xf2>
 80095d2:	690f      	ldr	r7, [r1, #16]
 80095d4:	2f00      	cmp	r7, #0
 80095d6:	d0f6      	beq.n	80095c6 <__sflush_r+0xae>
 80095d8:	0793      	lsls	r3, r2, #30
 80095da:	680e      	ldr	r6, [r1, #0]
 80095dc:	bf08      	it	eq
 80095de:	694b      	ldreq	r3, [r1, #20]
 80095e0:	600f      	str	r7, [r1, #0]
 80095e2:	bf18      	it	ne
 80095e4:	2300      	movne	r3, #0
 80095e6:	eba6 0807 	sub.w	r8, r6, r7
 80095ea:	608b      	str	r3, [r1, #8]
 80095ec:	f1b8 0f00 	cmp.w	r8, #0
 80095f0:	dde9      	ble.n	80095c6 <__sflush_r+0xae>
 80095f2:	6a21      	ldr	r1, [r4, #32]
 80095f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095f6:	4643      	mov	r3, r8
 80095f8:	463a      	mov	r2, r7
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b0      	blx	r6
 80095fe:	2800      	cmp	r0, #0
 8009600:	dc08      	bgt.n	8009614 <__sflush_r+0xfc>
 8009602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800960a:	81a3      	strh	r3, [r4, #12]
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009614:	4407      	add	r7, r0
 8009616:	eba8 0800 	sub.w	r8, r8, r0
 800961a:	e7e7      	b.n	80095ec <__sflush_r+0xd4>
 800961c:	dfbffffe 	.word	0xdfbffffe

08009620 <_fflush_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	690b      	ldr	r3, [r1, #16]
 8009624:	4605      	mov	r5, r0
 8009626:	460c      	mov	r4, r1
 8009628:	b913      	cbnz	r3, 8009630 <_fflush_r+0x10>
 800962a:	2500      	movs	r5, #0
 800962c:	4628      	mov	r0, r5
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	b118      	cbz	r0, 800963a <_fflush_r+0x1a>
 8009632:	6a03      	ldr	r3, [r0, #32]
 8009634:	b90b      	cbnz	r3, 800963a <_fflush_r+0x1a>
 8009636:	f7ff fb3d 	bl	8008cb4 <__sinit>
 800963a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0f3      	beq.n	800962a <_fflush_r+0xa>
 8009642:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009644:	07d0      	lsls	r0, r2, #31
 8009646:	d404      	bmi.n	8009652 <_fflush_r+0x32>
 8009648:	0599      	lsls	r1, r3, #22
 800964a:	d402      	bmi.n	8009652 <_fflush_r+0x32>
 800964c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800964e:	f7ff fc46 	bl	8008ede <__retarget_lock_acquire_recursive>
 8009652:	4628      	mov	r0, r5
 8009654:	4621      	mov	r1, r4
 8009656:	f7ff ff5f 	bl	8009518 <__sflush_r>
 800965a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800965c:	07da      	lsls	r2, r3, #31
 800965e:	4605      	mov	r5, r0
 8009660:	d4e4      	bmi.n	800962c <_fflush_r+0xc>
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	059b      	lsls	r3, r3, #22
 8009666:	d4e1      	bmi.n	800962c <_fflush_r+0xc>
 8009668:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800966a:	f7ff fc39 	bl	8008ee0 <__retarget_lock_release_recursive>
 800966e:	e7dd      	b.n	800962c <_fflush_r+0xc>

08009670 <__swbuf_r>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	460e      	mov	r6, r1
 8009674:	4614      	mov	r4, r2
 8009676:	4605      	mov	r5, r0
 8009678:	b118      	cbz	r0, 8009682 <__swbuf_r+0x12>
 800967a:	6a03      	ldr	r3, [r0, #32]
 800967c:	b90b      	cbnz	r3, 8009682 <__swbuf_r+0x12>
 800967e:	f7ff fb19 	bl	8008cb4 <__sinit>
 8009682:	69a3      	ldr	r3, [r4, #24]
 8009684:	60a3      	str	r3, [r4, #8]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	071a      	lsls	r2, r3, #28
 800968a:	d501      	bpl.n	8009690 <__swbuf_r+0x20>
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	b943      	cbnz	r3, 80096a2 <__swbuf_r+0x32>
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f82a 	bl	80096ec <__swsetup_r>
 8009698:	b118      	cbz	r0, 80096a2 <__swbuf_r+0x32>
 800969a:	f04f 37ff 	mov.w	r7, #4294967295
 800969e:	4638      	mov	r0, r7
 80096a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a2:	6823      	ldr	r3, [r4, #0]
 80096a4:	6922      	ldr	r2, [r4, #16]
 80096a6:	1a98      	subs	r0, r3, r2
 80096a8:	6963      	ldr	r3, [r4, #20]
 80096aa:	b2f6      	uxtb	r6, r6
 80096ac:	4283      	cmp	r3, r0
 80096ae:	4637      	mov	r7, r6
 80096b0:	dc05      	bgt.n	80096be <__swbuf_r+0x4e>
 80096b2:	4621      	mov	r1, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	f7ff ffb3 	bl	8009620 <_fflush_r>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d1ed      	bne.n	800969a <__swbuf_r+0x2a>
 80096be:	68a3      	ldr	r3, [r4, #8]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	60a3      	str	r3, [r4, #8]
 80096c4:	6823      	ldr	r3, [r4, #0]
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	701e      	strb	r6, [r3, #0]
 80096cc:	6962      	ldr	r2, [r4, #20]
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d004      	beq.n	80096de <__swbuf_r+0x6e>
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	07db      	lsls	r3, r3, #31
 80096d8:	d5e1      	bpl.n	800969e <__swbuf_r+0x2e>
 80096da:	2e0a      	cmp	r6, #10
 80096dc:	d1df      	bne.n	800969e <__swbuf_r+0x2e>
 80096de:	4621      	mov	r1, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f7ff ff9d 	bl	8009620 <_fflush_r>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0d9      	beq.n	800969e <__swbuf_r+0x2e>
 80096ea:	e7d6      	b.n	800969a <__swbuf_r+0x2a>

080096ec <__swsetup_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4b29      	ldr	r3, [pc, #164]	@ (8009794 <__swsetup_r+0xa8>)
 80096f0:	4605      	mov	r5, r0
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	460c      	mov	r4, r1
 80096f6:	b118      	cbz	r0, 8009700 <__swsetup_r+0x14>
 80096f8:	6a03      	ldr	r3, [r0, #32]
 80096fa:	b90b      	cbnz	r3, 8009700 <__swsetup_r+0x14>
 80096fc:	f7ff fada 	bl	8008cb4 <__sinit>
 8009700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009704:	0719      	lsls	r1, r3, #28
 8009706:	d422      	bmi.n	800974e <__swsetup_r+0x62>
 8009708:	06da      	lsls	r2, r3, #27
 800970a:	d407      	bmi.n	800971c <__swsetup_r+0x30>
 800970c:	2209      	movs	r2, #9
 800970e:	602a      	str	r2, [r5, #0]
 8009710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009714:	81a3      	strh	r3, [r4, #12]
 8009716:	f04f 30ff 	mov.w	r0, #4294967295
 800971a:	e033      	b.n	8009784 <__swsetup_r+0x98>
 800971c:	0758      	lsls	r0, r3, #29
 800971e:	d512      	bpl.n	8009746 <__swsetup_r+0x5a>
 8009720:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009722:	b141      	cbz	r1, 8009736 <__swsetup_r+0x4a>
 8009724:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009728:	4299      	cmp	r1, r3
 800972a:	d002      	beq.n	8009732 <__swsetup_r+0x46>
 800972c:	4628      	mov	r0, r5
 800972e:	f7ff fbd9 	bl	8008ee4 <_free_r>
 8009732:	2300      	movs	r3, #0
 8009734:	6363      	str	r3, [r4, #52]	@ 0x34
 8009736:	89a3      	ldrh	r3, [r4, #12]
 8009738:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	2300      	movs	r3, #0
 8009740:	6063      	str	r3, [r4, #4]
 8009742:	6923      	ldr	r3, [r4, #16]
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f043 0308 	orr.w	r3, r3, #8
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	6923      	ldr	r3, [r4, #16]
 8009750:	b94b      	cbnz	r3, 8009766 <__swsetup_r+0x7a>
 8009752:	89a3      	ldrh	r3, [r4, #12]
 8009754:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800975c:	d003      	beq.n	8009766 <__swsetup_r+0x7a>
 800975e:	4621      	mov	r1, r4
 8009760:	4628      	mov	r0, r5
 8009762:	f000 f83f 	bl	80097e4 <__smakebuf_r>
 8009766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800976a:	f013 0201 	ands.w	r2, r3, #1
 800976e:	d00a      	beq.n	8009786 <__swsetup_r+0x9a>
 8009770:	2200      	movs	r2, #0
 8009772:	60a2      	str	r2, [r4, #8]
 8009774:	6962      	ldr	r2, [r4, #20]
 8009776:	4252      	negs	r2, r2
 8009778:	61a2      	str	r2, [r4, #24]
 800977a:	6922      	ldr	r2, [r4, #16]
 800977c:	b942      	cbnz	r2, 8009790 <__swsetup_r+0xa4>
 800977e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009782:	d1c5      	bne.n	8009710 <__swsetup_r+0x24>
 8009784:	bd38      	pop	{r3, r4, r5, pc}
 8009786:	0799      	lsls	r1, r3, #30
 8009788:	bf58      	it	pl
 800978a:	6962      	ldrpl	r2, [r4, #20]
 800978c:	60a2      	str	r2, [r4, #8]
 800978e:	e7f4      	b.n	800977a <__swsetup_r+0x8e>
 8009790:	2000      	movs	r0, #0
 8009792:	e7f7      	b.n	8009784 <__swsetup_r+0x98>
 8009794:	20000038 	.word	0x20000038

08009798 <__swhatbuf_r>:
 8009798:	b570      	push	{r4, r5, r6, lr}
 800979a:	460c      	mov	r4, r1
 800979c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a0:	2900      	cmp	r1, #0
 80097a2:	b096      	sub	sp, #88	@ 0x58
 80097a4:	4615      	mov	r5, r2
 80097a6:	461e      	mov	r6, r3
 80097a8:	da0d      	bge.n	80097c6 <__swhatbuf_r+0x2e>
 80097aa:	89a3      	ldrh	r3, [r4, #12]
 80097ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097b0:	f04f 0100 	mov.w	r1, #0
 80097b4:	bf14      	ite	ne
 80097b6:	2340      	movne	r3, #64	@ 0x40
 80097b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097bc:	2000      	movs	r0, #0
 80097be:	6031      	str	r1, [r6, #0]
 80097c0:	602b      	str	r3, [r5, #0]
 80097c2:	b016      	add	sp, #88	@ 0x58
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
 80097c6:	466a      	mov	r2, sp
 80097c8:	f000 f848 	bl	800985c <_fstat_r>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	dbec      	blt.n	80097aa <__swhatbuf_r+0x12>
 80097d0:	9901      	ldr	r1, [sp, #4]
 80097d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097da:	4259      	negs	r1, r3
 80097dc:	4159      	adcs	r1, r3
 80097de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097e2:	e7eb      	b.n	80097bc <__swhatbuf_r+0x24>

080097e4 <__smakebuf_r>:
 80097e4:	898b      	ldrh	r3, [r1, #12]
 80097e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097e8:	079d      	lsls	r5, r3, #30
 80097ea:	4606      	mov	r6, r0
 80097ec:	460c      	mov	r4, r1
 80097ee:	d507      	bpl.n	8009800 <__smakebuf_r+0x1c>
 80097f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097f4:	6023      	str	r3, [r4, #0]
 80097f6:	6123      	str	r3, [r4, #16]
 80097f8:	2301      	movs	r3, #1
 80097fa:	6163      	str	r3, [r4, #20]
 80097fc:	b003      	add	sp, #12
 80097fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009800:	ab01      	add	r3, sp, #4
 8009802:	466a      	mov	r2, sp
 8009804:	f7ff ffc8 	bl	8009798 <__swhatbuf_r>
 8009808:	9f00      	ldr	r7, [sp, #0]
 800980a:	4605      	mov	r5, r0
 800980c:	4639      	mov	r1, r7
 800980e:	4630      	mov	r0, r6
 8009810:	f7ff f938 	bl	8008a84 <_malloc_r>
 8009814:	b948      	cbnz	r0, 800982a <__smakebuf_r+0x46>
 8009816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981a:	059a      	lsls	r2, r3, #22
 800981c:	d4ee      	bmi.n	80097fc <__smakebuf_r+0x18>
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	f043 0302 	orr.w	r3, r3, #2
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	e7e2      	b.n	80097f0 <__smakebuf_r+0xc>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	6020      	str	r0, [r4, #0]
 800982e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	9b01      	ldr	r3, [sp, #4]
 8009836:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800983a:	b15b      	cbz	r3, 8009854 <__smakebuf_r+0x70>
 800983c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009840:	4630      	mov	r0, r6
 8009842:	f000 f81d 	bl	8009880 <_isatty_r>
 8009846:	b128      	cbz	r0, 8009854 <__smakebuf_r+0x70>
 8009848:	89a3      	ldrh	r3, [r4, #12]
 800984a:	f023 0303 	bic.w	r3, r3, #3
 800984e:	f043 0301 	orr.w	r3, r3, #1
 8009852:	81a3      	strh	r3, [r4, #12]
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	431d      	orrs	r5, r3
 8009858:	81a5      	strh	r5, [r4, #12]
 800985a:	e7cf      	b.n	80097fc <__smakebuf_r+0x18>

0800985c <_fstat_r>:
 800985c:	b538      	push	{r3, r4, r5, lr}
 800985e:	4d07      	ldr	r5, [pc, #28]	@ (800987c <_fstat_r+0x20>)
 8009860:	2300      	movs	r3, #0
 8009862:	4604      	mov	r4, r0
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	602b      	str	r3, [r5, #0]
 800986a:	f7f7 fa84 	bl	8000d76 <_fstat>
 800986e:	1c43      	adds	r3, r0, #1
 8009870:	d102      	bne.n	8009878 <_fstat_r+0x1c>
 8009872:	682b      	ldr	r3, [r5, #0]
 8009874:	b103      	cbz	r3, 8009878 <_fstat_r+0x1c>
 8009876:	6023      	str	r3, [r4, #0]
 8009878:	bd38      	pop	{r3, r4, r5, pc}
 800987a:	bf00      	nop
 800987c:	20000aa0 	.word	0x20000aa0

08009880 <_isatty_r>:
 8009880:	b538      	push	{r3, r4, r5, lr}
 8009882:	4d06      	ldr	r5, [pc, #24]	@ (800989c <_isatty_r+0x1c>)
 8009884:	2300      	movs	r3, #0
 8009886:	4604      	mov	r4, r0
 8009888:	4608      	mov	r0, r1
 800988a:	602b      	str	r3, [r5, #0]
 800988c:	f7f7 fa83 	bl	8000d96 <_isatty>
 8009890:	1c43      	adds	r3, r0, #1
 8009892:	d102      	bne.n	800989a <_isatty_r+0x1a>
 8009894:	682b      	ldr	r3, [r5, #0]
 8009896:	b103      	cbz	r3, 800989a <_isatty_r+0x1a>
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	bd38      	pop	{r3, r4, r5, pc}
 800989c:	20000aa0 	.word	0x20000aa0

080098a0 <_init>:
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	bf00      	nop
 80098a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a6:	bc08      	pop	{r3}
 80098a8:	469e      	mov	lr, r3
 80098aa:	4770      	bx	lr

080098ac <_fini>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr
